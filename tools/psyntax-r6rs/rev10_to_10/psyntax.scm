;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; automatically generated from psyntax sources
;;; for copyright details, see psyntax/main.ss

(begin (set! af24b4@library-file-path->cache-path (unspecified)) (set! af24b6@read-annotated (unspecified)) (set! af24b8@annotation-stripped (unspecified)) (set! af24ba@annotation? (unspecified)) (set! af24bc@annotation-source (unspecified)) (set! af24be@annotation-expression (unspecified)) (set! af24c0@scm->fasl (unspecified)) (set! af24c2@fasl-save (unspecified)) (set! af24c4@fasl-load (unspecified)) (set! af24c6@serialize-library (unspecified)) (set! af24c8@load-serialized-library (unspecified)) (set! af24ca@make-record-printer (unspecified)) (set! af24cc@compile-core (unspecified)) (set! af24ce@read-library-source-file (unspecified)) (set! af24d0@make-parameter (unspecified)) (set! af24d2@mosh-cache-dir (unspecified)) (set! af2568@file-options-spec (unspecified)) (set! af24b4@library-file-path->cache-path (lambda (af2569@x) (call-with-values (lambda () (open-string-output-port)) (lambda (af256f@af256c af2570@af256e) (let ((af2573@extract af2570@af256e) (af2574@p af256f@af256c)) (let ((af2578@display-hex '#f)) (begin (set! af2578@display-hex (lambda (af2581@n) (if (<= '0 af2581@n '9) (display af2581@n af2574@p) (display (integer->char (+ (char->integer '#\a) (- af2581@n '10))) af2574@p)))) (begin (let af257b@f ((af2579@ls (string-split af2569@x '#\/))) (if (not (null? af2579@ls)) (begin (display '"_" af2574@p) (for-each (lambda (af257d@c) (if (or (char<=? '#\a af257d@c '#\z) (char<=? '#\A af257d@c '#\Z) (char<=? '#\0 af257d@c '#\9) (memv af257d@c '(#\- #\. #\_ #\~))) (display af257d@c af2574@p) (begin (display '"%" af2574@p) (let ((af257f@n (char->integer af257d@c))) (begin (af2578@display-hex (quotient af257f@n '16)) (af2578@display-hex (remainder af257f@n '16))))))) (string->list (car af2579@ls))) (af257b@f (cdr af2579@ls))) (void))) (af2573@extract))))))))) (set! af25e3@af24b4@library-file-path->cache-path af24b4@library-file-path->cache-path) (set! af24b6@read-annotated read) (set! af25e4@af24b6@read-annotated af24b6@read-annotated) (set! af24b8@annotation-stripped (lambda (af2583@x) (af24be@annotation-expression af2583@x))) (set! af25e5@af24b8@annotation-stripped af24b8@annotation-stripped) (set! af24ba@annotation? (lambda (af2585@x) (source-info af2585@x))) (set! af25e6@af24ba@annotation? af24ba@annotation?) (set! af24bc@annotation-source (lambda (af2587@x) (source-info af2587@x))) (set! af25e7@af24bc@annotation-source af24bc@annotation-source) (set! af24be@annotation-expression (lambda (af2589@x) (if (pair? af2589@x) (cons (car af2589@x) (cdr af2589@x)) (display '"line:46\n")))) (set! af25e8@af24be@annotation-expression af24be@annotation-expression) (set! af24c0@scm->fasl (lambda (af258b@filename) (string-append (af24d2@mosh-cache-dir) '"/" (af24b4@library-file-path->cache-path af258b@filename) '".mosh-fasl"))) (set! af25e9@af24c0@scm->fasl af24c0@scm->fasl) (set! af24c2@fasl-save (lambda (af258d@filename af258e@obj) (call-with-port (open-file-output-port af258d@filename) (lambda (af2591@port) ((symbol-value 'fasl-write!) af258e@obj af2591@port))))) (set! af25ea@af24c2@fasl-save af24c2@fasl-save) (set! af24c4@fasl-load (lambda (af2593@filename) (call-with-port (open-file-input-port af2593@filename) (symbol-value 'fasl-read!)))) (set! af25eb@af24c4@fasl-load af24c4@fasl-load) (set! af24c6@serialize-library (lambda (af2595@filename af2596@obj) (begin (let ((af2599@expanded2core (symbol-value 'expanded2core))) (let ((af259b@compile (symbol-value 'compile-w/o-halt))) (let ((af259d@code af2596@obj)) (let ((af259f@pivot (cddddr (cddddr af259d@code)))) (let ((af25a1@visit (af259b@compile (af2599@expanded2core (car af259f@pivot))))) (begin (set-car! af259f@pivot af25a1@visit) (let ((af25a3@pivot (cdr af259f@pivot))) (let ((af25a5@invoke (af259b@compile (af2599@expanded2core (car af25a3@pivot))))) (set-car! af25a3@pivot af25a5@invoke))))))))) (let ((af25a7@fasl-file (af24c0@scm->fasl af2595@filename))) (begin (if (file-exists? af25a7@fasl-file) (delete-file af25a7@fasl-file) (void)) ((call/cc (lambda (af25ab@af25a9) (lambda () (with-exception-handler (lambda (af25ad@c) ((call/cc (lambda (af25af@af25aa) (af25ab@af25a9 (lambda () (if '#t (begin (format (current-error-port) '"Warning:serialize-library failed " af2595@filename) (if (file-exists? af25a7@fasl-file) (delete-file af25a7@fasl-file) (void)) '#f) (af25af@af25aa (lambda () (raise-continuable af25ad@c)))))))))) (lambda () (af24c2@fasl-save af25a7@fasl-file af2596@obj)))))))))))) (set! af25ec@af24c6@serialize-library af24c6@serialize-library) (set! af24c8@load-serialized-library (lambda (af25b1@filename af25b2@obj) (and (af24d2@mosh-cache-dir) (let ((af25b5@fasl-file (af24c0@scm->fasl af25b1@filename))) (if (and (file-exists? af25b5@fasl-file) ((symbol-value 'file-newer?) af25b5@fasl-file af25b1@filename)) (let ((af25b7@expanded2core (symbol-value 'expanded2core))) (let ((af25b9@eval-compiled-core (symbol-value 'eval-compiled!))) (let ((af25bb@code (af24c4@fasl-load af25b5@fasl-file))) (let ((af25bd@pivot (cddddr (cddddr af25bb@code)))) (let ((af25bf@visit (car af25bd@pivot))) (let ((af25c1@visit-proc (lambda () (af25b9@eval-compiled-core af25bf@visit)))) (begin (set-car! af25bd@pivot af25c1@visit-proc) (let ((af25c3@pivot (cdr af25bd@pivot))) (let ((af25c5@invoke (car af25c3@pivot))) (begin (set-car! af25c3@pivot (lambda () (af25b9@eval-compiled-core af25c5@invoke))) (apply af25b2@obj af25bb@code))))))))))) '#f))))) (set! af25ed@af24c8@load-serialized-library af24c8@load-serialized-library) (set! af24ca@make-record-printer (lambda (af25c7@name af25c8@printer) (lambda af25cb@x (begin (display '"record printer") (for-each display af25cb@x))))) (set! af25ee@af24ca@make-record-printer af24ca@make-record-printer) (set! af24cc@compile-core (lambda af25cd@x (apply error 'comile-core '"not implementated" af25cd@x))) (set! af25ef@af24cc@compile-core af24cc@compile-core) (set! af24ce@read-library-source-file (lambda (af25cf@file-name) (with-input-from-file af25cf@file-name af24b6@read-annotated))) (set! af25f0@af24ce@read-library-source-file af24ce@read-library-source-file) (set! af24d0@make-parameter (lambda af25df (let ((af25e0 (length af25df))) (if (= af25e0 '1) (apply (lambda (af25d1@x) (af24d0@make-parameter af25d1@x (lambda (af25d3@x) af25d3@x))) af25df) (if (= af25e0 '2) (apply (lambda (af25d5@x af25d6@fender) (let ((af25d9@x (af25d6@fender af25d5@x))) (lambda af25dd (let ((af25de (length af25dd))) (if (= af25de '0) (apply (lambda () af25d9@x) af25dd) (if (= af25de '1) (apply (lambda (af25db@v) (set! af25d9@x (af25d6@fender af25db@v))) af25dd) (error 'apply '"invalid arg count"))))))) af25df) (error 'apply '"invalid arg count")))))) (set! af25f1@af24d0@make-parameter af24d0@make-parameter) (set! af24d2@mosh-cache-dir (af24d0@make-parameter '#f)) (set! af25f2@af24d2@mosh-cache-dir af24d2@mosh-cache-dir) (set! af2568@file-options-spec (lambda (af25e1@x) af25e1@x)) (set! af25f3@af2568@file-options-spec af2568@file-options-spec) (void))
(begin (set! af25f9@current-primitive-locations (unspecified)) (set! af25fb@mutable? (unspecified)) (set! af25fd@rewriter (unspecified)) (set! af25ff@expanded->core (unspecified)) (set! af2601@compile-core-expr (unspecified)) (set! af2603@pretty-print (unspecified)) (set! af2605@compile-core-expr-to-port (unspecified)) (set! af25f9@current-primitive-locations (af25f1@af24d0@make-parameter (lambda (af2606@x) '#f) (lambda (af2608@p) af2608@p))) (set! af2644@af25f9@current-primitive-locations af25f9@current-primitive-locations) (set! af25fb@mutable? (lambda (af260a@x) (or (pair? af260a@x) (vector? af260a@x) (hashtable? af260a@x)))) (set! af2645@af25fb@mutable? af25fb@mutable?) (set! af25fd@rewriter (lambda (af260c@quote-hack?) (let ((af260f@f '#f)) (begin (set! af260f@f (lambda (af2610@x) (if (pair? af2610@x) (let ((af2612@t (car af2610@x))) (if (memv af2612@t '(quote)) (if (and af260c@quote-hack? (af25fb@mutable? (cadr af2610@x))) (let ((af2614@g (gensym))) (begin (set-symbol-value! af2614@g (cadr af2610@x)) af2614@g)) af2610@x) (if (memv af2612@t '(case-lambda)) (cons 'case-lambda (map (lambda (af2616@x) (cons (car af2616@x) (map af260f@f (cdr af2616@x)))) (cdr af2610@x))) (if (memv af2612@t '(lambda)) (cons* 'lambda (cadr af2610@x) (map af260f@f (cddr af2610@x))) (if (memv af2612@t '(letrec)) (let ((af2618@bindings (cadr af2610@x)) (af2619@body* (cddr af2610@x))) (let ((af261c@lhs* (map car af2618@bindings)) (af261d@rhs* (map cadr af2618@bindings))) (cons* 'letrec (map list af261c@lhs* (map af260f@f af261d@rhs*)) (map af260f@f af2619@body*)))) (if (memv af2612@t '(letrec*)) (let ((af2620@bindings (cadr af2610@x)) (af2621@body* (cddr af2610@x))) (let ((af2624@lhs* (map car af2620@bindings)) (af2625@rhs* (map cadr af2620@bindings))) (cons* 'letrec* (map list af2624@lhs* (map af260f@f af2625@rhs*)) (map af260f@f af2621@body*)))) (if (memv af2612@t '(library-letrec*)) (let ((af2628@name (cadr af2610@x)) (af2629@x (cdr af2610@x))) (let ((af262c@bindings (cadr af2629@x)) (af262d@body* (cddr af2629@x))) (let ((af2630@lhs* (map car af262c@bindings)) (af2631@lhs** (map cadr af262c@bindings)) (af2632@rhs* (map caddr af262c@bindings))) (cons* 'library-letrec* af2628@name (map list af2630@lhs* af2631@lhs** (map af260f@f af2632@rhs*)) (map af260f@f af262d@body*))))) (if (memv af2612@t '(begin)) (cons 'begin (map af260f@f (cdr af2610@x))) (if (memv af2612@t '(set!)) (list 'set! (cadr af2610@x) (af260f@f (caddr af2610@x))) (if (memv af2612@t '(primitive)) (let ((af2636@op (cadr af2610@x))) (let ((af2638@t ((af25f9@current-primitive-locations) af2636@op))) (if af2638@t ((lambda (af263a@loc) af263a@loc) af2638@t) af2636@op))) (if (memv af2612@t '(define)) af2610@x (if (list? af2610@x) (map af260f@f af2610@x) (error 'rewrite '"invalid form ~s ~s" af2610@x (list? af2610@x)))))))))))))) af2610@x))) af260f@f)))) (set! af2646@af25fd@rewriter af25fd@rewriter) (set! af25ff@expanded->core (lambda (af263c@x) ((af25fd@rewriter '#f) af263c@x))) (set! af2647@af25ff@expanded->core af25ff@expanded->core) (set! af2601@compile-core-expr (lambda (af263e@x) ((af25fd@rewriter '#f) af263e@x))) (set! af2648@af2601@compile-core-expr af2601@compile-core-expr) (set! af2603@pretty-print write) (set! af2649@af2603@pretty-print af2603@pretty-print) (set! af2605@compile-core-expr-to-port (lambda (af2640@x af2641@p) (af2603@pretty-print ((af25fd@rewriter '#f) af2640@x) af2641@p))) (set! af264a@af2605@compile-core-expr-to-port af2605@compile-core-expr-to-port) (void))
(begin (void))
(begin (set! af2699@make-collection (unspecified)) (set! af269b@current-library-collection (unspecified)) (set! af269d@rp (unspecified)) (set! af26a7@library? (unspecified)) (set! af26a9@library-id (unspecified)) (set! af26ab@set-library-id! (unspecified)) (set! af26ad@library-name (unspecified)) (set! af26af@set-library-name! (unspecified)) (set! af26b1@library-version (unspecified)) (set! af26b3@set-library-version! (unspecified)) (set! af26b5@library-imp* (unspecified)) (set! af26b7@set-library-imp*! (unspecified)) (set! af26b9@library-vis* (unspecified)) (set! af26bb@set-library-vis*! (unspecified)) (set! af26bd@library-inv* (unspecified)) (set! af26bf@set-library-inv*! (unspecified)) (set! af26c1@library-subst (unspecified)) (set! af26c3@set-library-subst! (unspecified)) (set! af26c5@library-env (unspecified)) (set! af26c7@set-library-env! (unspecified)) (set! af26c9@library-visit-state (unspecified)) (set! af26cb@set-library-visit-state! (unspecified)) (set! af26cd@library-invoke-state (unspecified)) (set! af26cf@set-library-invoke-state! (unspecified)) (set! af26d1@library-visit-code (unspecified)) (set! af26d3@set-library-visit-code! (unspecified)) (set! af26d5@library-invoke-code (unspecified)) (set! af26d7@set-library-invoke-code! (unspecified)) (set! af26d9@library-visible? (unspecified)) (set! af26db@set-library-visible?! (unspecified)) (set! af26dd@library-source-file-name (unspecified)) (set! af26df@set-library-source-file-name! (unspecified)) (set! af26e1@dummy (unspecified)) (set! af26e3@find-dependencies (unspecified)) (set! af26e5@find-library-by (unspecified)) (set! af26e7@library-path (unspecified)) (set! af26e9@library-extensions (unspecified)) (set! af26eb@library-name->file-name (unspecified)) (set! af26ed@file-locator (unspecified)) (set! af26ef@serialize-all (unspecified)) (set! af26f1@current-precompiled-library-loader (unspecified)) (set! af26f3@try-load-from-file (unspecified)) (set! af26f5@library-loader (unspecified)) (set! af26f7@current-library-expander (unspecified)) (set! af26f9@external-pending-libraries (unspecified)) (set! af26fb@find-external-library (unspecified)) (set! af26fd@find-library-by-name (unspecified)) (set! af26ff@library-exists? (unspecified)) (set! af2701@find-library-by-spec/die (unspecified)) (set! af2703@label->binding-table (unspecified)) (set! af2705@install-library-record (unspecified)) (set! af2707@install-library (unspecified)) (set! af2709@imported-label->binding (unspecified)) (set! af270b@invoke-library (unspecified)) (set! af270d@visit-library (unspecified)) (set! af270f@invoke-library-by-spec (unspecified)) (set! af2711@installed-libraries (unspecified)) (set! af2713@library-spec (unspecified)) (set! af2699@make-collection (lambda () (let ((af2714@set '())) (let ((af2717@set-cons '#f)) (begin (set! af2717@set-cons (lambda (af271c@x af271d@ls) (if (memq af271c@x af271d@ls) af271d@ls (cons af271c@x af271d@ls)))) (lambda af271a (let ((af271b (length af271a))) (if (= af271b '0) (apply (lambda () af2714@set) af271a) (if (= af271b '1) (apply (lambda (af2718@x) (set! af2714@set (af2717@set-cons af2718@x af2714@set))) af271a) (error 'apply '"invalid arg count")))))))))) (set! af2888@af2699@make-collection af2699@make-collection) (set! af269b@current-library-collection (af25f1@af24d0@make-parameter (af2699@make-collection) (lambda (af2720@x) (begin (if (not (procedure? af2720@x)) (assertion-violation 'current-library-collection '"not a procedure" af2720@x) (void)) af2720@x)))) (set! af2889@af269b@current-library-collection af269b@current-library-collection) (set! af269d@rp (af25ee@af24ca@make-record-printer 'library (lambda (af2722@x af2723@p af2724@wr) (begin (if (not (af26a7@library? af2722@x)) (assertion-violation 'record-type-printer '"not a library") (void)) (display (format '"#<library ~s>" (if (null? (af26b1@library-version af2722@x)) (af26ad@library-name af2722@x) (append (af26ad@library-name af2722@x) (list (af26b1@library-version af2722@x))))) af2723@p))))) (set! af288a@af269d@rp af269d@rp) (set! af26a7@library? (lambda (af2728@x) (and (simple-struct? af2728@x) (eq? (simple-struct-name af2728@x) 'library)))) (set! af288b@af26a7@library? af26a7@library?) (set! af26a9@library-id (lambda (af272a@x) (simple-struct-ref af272a@x '0))) (set! af288c@af26a9@library-id af26a9@library-id) (set! af26ab@set-library-id! (lambda (af272c@x af272d@val) (simple-struct-set! af272c@x '0 af272d@val))) (set! af288d@af26ab@set-library-id! af26ab@set-library-id!) (set! af26ad@library-name (lambda (af2730@x) (simple-struct-ref af2730@x '1))) (set! af288e@af26ad@library-name af26ad@library-name) (set! af26af@set-library-name! (lambda (af2732@x af2733@val) (simple-struct-set! af2732@x '1 af2733@val))) (set! af288f@af26af@set-library-name! af26af@set-library-name!) (set! af26b1@library-version (lambda (af2736@x) (simple-struct-ref af2736@x '2))) (set! af2890@af26b1@library-version af26b1@library-version) (set! af26b3@set-library-version! (lambda (af2738@x af2739@val) (simple-struct-set! af2738@x '2 af2739@val))) (set! af2891@af26b3@set-library-version! af26b3@set-library-version!) (set! af26b5@library-imp* (lambda (af273c@x) (simple-struct-ref af273c@x '3))) (set! af2892@af26b5@library-imp* af26b5@library-imp*) (set! af26b7@set-library-imp*! (lambda (af273e@x af273f@val) (simple-struct-set! af273e@x '3 af273f@val))) (set! af2893@af26b7@set-library-imp*! af26b7@set-library-imp*!) (set! af26b9@library-vis* (lambda (af2742@x) (simple-struct-ref af2742@x '4))) (set! af2894@af26b9@library-vis* af26b9@library-vis*) (set! af26bb@set-library-vis*! (lambda (af2744@x af2745@val) (simple-struct-set! af2744@x '4 af2745@val))) (set! af2895@af26bb@set-library-vis*! af26bb@set-library-vis*!) (set! af26bd@library-inv* (lambda (af2748@x) (simple-struct-ref af2748@x '5))) (set! af2896@af26bd@library-inv* af26bd@library-inv*) (set! af26bf@set-library-inv*! (lambda (af274a@x af274b@val) (simple-struct-set! af274a@x '5 af274b@val))) (set! af2897@af26bf@set-library-inv*! af26bf@set-library-inv*!) (set! af26c1@library-subst (lambda (af274e@x) (simple-struct-ref af274e@x '6))) (set! af2898@af26c1@library-subst af26c1@library-subst) (set! af26c3@set-library-subst! (lambda (af2750@x af2751@val) (simple-struct-set! af2750@x '6 af2751@val))) (set! af2899@af26c3@set-library-subst! af26c3@set-library-subst!) (set! af26c5@library-env (lambda (af2754@x) (simple-struct-ref af2754@x '7))) (set! af289a@af26c5@library-env af26c5@library-env) (set! af26c7@set-library-env! (lambda (af2756@x af2757@val) (simple-struct-set! af2756@x '7 af2757@val))) (set! af289b@af26c7@set-library-env! af26c7@set-library-env!) (set! af26c9@library-visit-state (lambda (af275a@x) (simple-struct-ref af275a@x '8))) (set! af289c@af26c9@library-visit-state af26c9@library-visit-state) (set! af26cb@set-library-visit-state! (lambda (af275c@x af275d@val) (simple-struct-set! af275c@x '8 af275d@val))) (set! af289d@af26cb@set-library-visit-state! af26cb@set-library-visit-state!) (set! af26cd@library-invoke-state (lambda (af2760@x) (simple-struct-ref af2760@x '9))) (set! af289e@af26cd@library-invoke-state af26cd@library-invoke-state) (set! af26cf@set-library-invoke-state! (lambda (af2762@x af2763@val) (simple-struct-set! af2762@x '9 af2763@val))) (set! af289f@af26cf@set-library-invoke-state! af26cf@set-library-invoke-state!) (set! af26d1@library-visit-code (lambda (af2766@x) (simple-struct-ref af2766@x '10))) (set! af28a0@af26d1@library-visit-code af26d1@library-visit-code) (set! af26d3@set-library-visit-code! (lambda (af2768@x af2769@val) (simple-struct-set! af2768@x '10 af2769@val))) (set! af28a1@af26d3@set-library-visit-code! af26d3@set-library-visit-code!) (set! af26d5@library-invoke-code (lambda (af276c@x) (simple-struct-ref af276c@x '11))) (set! af28a2@af26d5@library-invoke-code af26d5@library-invoke-code) (set! af26d7@set-library-invoke-code! (lambda (af276e@x af276f@val) (simple-struct-set! af276e@x '11 af276f@val))) (set! af28a3@af26d7@set-library-invoke-code! af26d7@set-library-invoke-code!) (set! af26d9@library-visible? (lambda (af2772@x) (simple-struct-ref af2772@x '12))) (set! af28a4@af26d9@library-visible? af26d9@library-visible?) (set! af26db@set-library-visible?! (lambda (af2774@x af2775@val) (simple-struct-set! af2774@x '12 af2775@val))) (set! af28a5@af26db@set-library-visible?! af26db@set-library-visible?!) (set! af26dd@library-source-file-name (lambda (af2778@x) (simple-struct-ref af2778@x '13))) (set! af28a6@af26dd@library-source-file-name af26dd@library-source-file-name) (set! af26df@set-library-source-file-name! (lambda (af277a@x af277b@val) (simple-struct-set! af277a@x '13 af277b@val))) (set! af28a7@af26df@set-library-source-file-name! af26df@set-library-source-file-name!) (set! af26e1@dummy '3) (set! af28a8@af26e1@dummy af26e1@dummy) (set! af26e3@find-dependencies (lambda (af277e@ls) (if (null? af277e@ls) '() (assertion-violation 'find-dependencies '"cannot handle deps yet")))) (set! af28a9@af26e3@find-dependencies af26e3@find-dependencies) (set! af26e5@find-library-by (lambda (af2780@pred) (let af2784@f ((af2782@ls ((af269b@current-library-collection)))) (if (null? af2782@ls) '#f (if (af2780@pred (car af2782@ls)) (car af2782@ls) (af2784@f (cdr af2782@ls))))))) (set! af28aa@af26e5@find-library-by af26e5@find-library-by) (set! af26e7@library-path (af25f1@af24d0@make-parameter '(".") (lambda (af2786@x) (if (and (list? af2786@x) (for-all string? af2786@x)) (map (lambda (af2788@x) af2788@x) af2786@x) (assertion-violation 'library-path '"not a list of strings" af2786@x))))) (set! af28ab@af26e7@library-path af26e7@library-path) (set! af26e9@library-extensions (af25f1@af24d0@make-parameter '(".sls" ".ss" ".scm") (lambda (af278a@x) (if (and (list? af278a@x) (for-all string? af278a@x)) (map (lambda (af278c@x) af278c@x) af278a@x) (assertion-violation 'library-extensions '"not a list of strings" af278a@x))))) (set! af28ac@af26e9@library-extensions af26e9@library-extensions) (set! af26eb@library-name->file-name (lambda (af278e@x) (call-with-values (lambda () (open-string-output-port)) (lambda (af2794@af2791 af2795@af2793) (let ((af2798@extract af2795@af2793) (af2799@p af2794@af2791)) (let ((af279d@display-hex '#f)) (begin (set! af279d@display-hex (lambda (af27a6@n) (if (<= '0 af27a6@n '9) (display af27a6@n af2799@p) (display (integer->char (+ (char->integer '#\a) (- af27a6@n '10))) af2799@p)))) (begin (let af27a0@f ((af279e@ls af278e@x)) (if (not (null? af279e@ls)) (begin (display '"/" af2799@p) (for-each (lambda (af27a2@c) (if (or (char<=? '#\a af27a2@c '#\z) (char<=? '#\A af27a2@c '#\Z) (char<=? '#\0 af27a2@c '#\9) (memv af27a2@c '(#\- #\. #\_ #\~))) (display af27a2@c af2799@p) (begin (display '"%" af2799@p) (let ((af27a4@n (char->integer af27a2@c))) (begin (af279d@display-hex (quotient af27a4@n '16)) (af279d@display-hex (remainder af27a4@n '16))))))) (string->list (symbol->string (car af279e@ls)))) (af27a0@f (cdr af279e@ls))) (void))) (af2798@extract))))))))) (set! af28ad@af26eb@library-name->file-name af26eb@library-name->file-name) (set! af26ed@file-locator (af25f1@af24d0@make-parameter (lambda (af27a8@x) (let ((af27aa@str (af26eb@library-name->file-name af27a8@x))) (let af27b2@f ((af27ac@ls (af26e7@library-path)) (af27ad@exts (af26e9@library-extensions)) (af27ae@failed-list '())) (if (null? af27ac@ls) (let ((af27bc@af27b7 '#f) (af27be@af27b9 '#f) (af27c0@af27b8 '#f) (af27c3@af27b6 '#f) (af27c5@make-library-resolution-condition '#f) (af27c7@af27b4 '#f) (af27c9@af27b5 '#f) (af27cb@library-resolution-condition? '#f) (af27cd@condition-library '#f) (af27cf@condition-files '#f)) (begin (set! af27bc@af27b7 (make-record-type-descriptor '&library-resolution af4ac1@af4808@&condition-rtd 'af27ba '#f '#f '#((immutable library) (immutable files)))) (set! af27be@af27b9 '#f) (set! af27c0@af27b8 (make-record-constructor-descriptor af27bc@af27b7 af4ac2@af480a@&condition-rcd af27be@af27b9)) (set! af27c3@af27b6 (record-predicate af27bc@af27b7)) (set! af27c5@make-library-resolution-condition (record-constructor af27c0@af27b8)) (set! af27c7@af27b4 (record-accessor af27bc@af27b7 '0)) (set! af27c9@af27b5 (record-accessor af27bc@af27b7 '1)) (set! af27cb@library-resolution-condition? (condition-predicate af27bc@af27b7)) (set! af27cd@condition-library (condition-accessor af27bc@af27b7 af27c7@af27b4)) (set! af27cf@condition-files (condition-accessor af27bc@af27b7 af27c9@af27b5)) (raise (condition (af4ae1@af48a2@make-error) (af4b03@af48fe@make-who-condition 'expander) (af4ac7@af485f@make-message-condition '"cannot locate library in library-path") (af27c5@make-library-resolution-condition af27a8@x (reverse af27ae@failed-list)))))) (if (null? af27ad@exts) (af27b2@f (cdr af27ac@ls) (af26e9@library-extensions) af27ae@failed-list) (let ((af27d0@name (string-append (car af27ac@ls) af27aa@str (car af27ad@exts)))) (if (file-exists? af27d0@name) af27d0@name (af27b2@f af27ac@ls (cdr af27ad@exts) (cons af27d0@name af27ae@failed-list))))))))) (lambda (af27d2@f) (if (procedure? af27d2@f) af27d2@f (assertion-violation 'file-locator '"not a procedure" af27d2@f))))) (set! af28ae@af26ed@file-locator af26ed@file-locator) (set! af26ef@serialize-all (lambda (af27d4@serialize af27d5@compile) (let ((af27d9@library-desc '#f)) (begin (set! af27d9@library-desc (lambda (af27dc@x) (list (af26a9@library-id af27dc@x) (af26ad@library-name af27dc@x)))) (for-each (lambda (af27da@x) (if (af26dd@library-source-file-name af27da@x) (af27d4@serialize (af26dd@library-source-file-name af27da@x) (list (af26a9@library-id af27da@x) (af26ad@library-name af27da@x) (af26b1@library-version af27da@x) (map af27d9@library-desc (af26b5@library-imp* af27da@x)) (map af27d9@library-desc (af26b9@library-vis* af27da@x)) (map af27d9@library-desc (af26bd@library-inv* af27da@x)) (af26c1@library-subst af27da@x) (af26c5@library-env af27da@x) (af27d5@compile (af26d1@library-visit-code af27da@x)) (af27d5@compile (af26d5@library-invoke-code af27da@x)) (af26d9@library-visible? af27da@x))) (void))) ((af269b@current-library-collection))))))) (set! af28af@af26ef@serialize-all af26ef@serialize-all) (set! af26f1@current-precompiled-library-loader (af25f1@af24d0@make-parameter (lambda (af27de@filename af27df@sk) '#f))) (set! af28b0@af26f1@current-precompiled-library-loader af26f1@current-precompiled-library-loader) (set! af26f3@try-load-from-file (lambda (af27e2@filename) ((af26f1@current-precompiled-library-loader) af27e2@filename (lambda af2808 (let ((af2809 (length af2808))) (if (= af2809 '11) (apply (lambda (af27e4@id af27e5@name af27e6@ver af27e7@imp* af27e8@vis* af27e9@inv* af27ea@exp-subst af27eb@exp-env af27ec@visit-proc af27ed@invoke-proc af27ee@visible?) (let af27fc@f ((af27fa@deps (append af27e7@imp* af27e8@vis* af27e9@inv*))) (if (null? af27fa@deps) (begin (af2707@install-library af27e4@id af27e5@name af27e6@ver af27e7@imp* af27e8@vis* af27e9@inv* af27ea@exp-subst af27eb@exp-env af27ec@visit-proc af27ed@invoke-proc '#f '#f af27ee@visible? '#f) '#t) (let ((af27fe@d (car af27fa@deps))) (let ((af2800@label (car af27fe@d)) (af2801@dname (cadr af27fe@d))) (let ((af2804@l (af26fd@find-library-by-name af2801@dname))) (if (and (af26a7@library? af2804@l) (eq? af2800@label (af26a9@library-id af2804@l))) (af27fc@f (cdr af27fa@deps)) (begin (format (current-error-port) '"WARNING: library ~s has an inconsistent dependency on library ~s; file ~s will be recompiled from source. l=~a label=~a (library-id l)=~a\n" af27e5@name af2801@dname af27e2@filename af2804@l af2800@label (af26a9@library-id af2804@l)) '#f)))))))) af2808) (if (>= af2809 '0) (apply (lambda af2806@others '#f) af2808) (error 'apply '"invalid arg count")))))))) (set! af28b1@af26f3@try-load-from-file af26f3@try-load-from-file) (set! af26f5@library-loader (af25f1@af24d0@make-parameter (lambda (af280a@x) (let ((af280c@file-name ((af26ed@file-locator) af280a@x))) (if (not af280c@file-name) (assertion-violation '#f '"cannot file library" af280a@x) (or (af26f3@try-load-from-file af280c@file-name) ((af26f7@current-library-expander) (af25f0@af24ce@read-library-source-file af280c@file-name) af280c@file-name (lambda (af280e@name) (if (not (fast-equal? af280e@name af280a@x)) (assertion-violation 'import (call-with-values (lambda () (open-string-output-port)) (lambda (af2814@af2811 af2815@af2813) (let ((af2818@e af2815@af2813) (af2819@p af2814@af2811)) (begin (display '"expected to find library " af2819@p) (write af280a@x af2819@p) (display '" in file " af2819@p) (display af280c@file-name af2819@p) (display '", found " af2819@p) (write af280e@name af2819@p) (display '" instead" af2819@p) (af2818@e)))))) (void)))))))) (lambda (af281c@f) (if (procedure? af281c@f) af281c@f (assertion-violation 'library-locator '"not a procedure" af281c@f))))) (set! af28b2@af26f5@library-loader af26f5@library-loader) (set! af26f7@current-library-expander (af25f1@af24d0@make-parameter (lambda (af281e@x) (assertion-violation 'library-expander '"not initialized")) (lambda (af2820@f) (if (procedure? af2820@f) af2820@f (assertion-violation 'library-expander '"not a procedure" af2820@f))))) (set! af28b3@af26f7@current-library-expander af26f7@current-library-expander) (set! af26f9@external-pending-libraries (af25f1@af24d0@make-parameter '())) (set! af28b4@af26f9@external-pending-libraries af26f9@external-pending-libraries) (set! af26fb@find-external-library (lambda (af2822@name) (begin (if (member af2822@name (af26f9@external-pending-libraries)) (assertion-violation '#f '"circular attempt to import library was detected" af2822@name) (void)) (let ((af2828@af2825 af26f9@external-pending-libraries) (af2829@af2827 (cons af2822@name (af26f9@external-pending-libraries)))) (let ((af282c@swap (lambda () (let ((af282e@t (af2828@af2825))) (begin (af2828@af2825 af2829@af2827) (set! af2829@af2827 af282e@t)))))) (dynamic-wind af282c@swap (lambda () (begin ((af26f5@library-loader) af2822@name) (or (af26e5@find-library-by (lambda (af2830@x) (fast-equal? (af26ad@library-name af2830@x) af2822@name))) (assertion-violation '#f '"handling external library did not yield the correct library" af2822@name)))) af282c@swap)))))) (set! af28b5@af26fb@find-external-library af26fb@find-external-library) (set! af26fd@find-library-by-name (lambda (af2832@name) (or (af26e5@find-library-by (lambda (af2834@x) (fast-equal? (af26ad@library-name af2834@x) af2832@name))) (af26fb@find-external-library af2832@name)))) (set! af28b6@af26fd@find-library-by-name af26fd@find-library-by-name) (set! af26ff@library-exists? (lambda (af2836@name) (and (af26e5@find-library-by (lambda (af2838@x) (fast-equal? (af26ad@library-name af2838@x) af2836@name))) '#t))) (set! af28b7@af26ff@library-exists? af26ff@library-exists?) (set! af2701@find-library-by-spec/die (lambda (af283a@spec) (let ((af283c@id (car af283a@spec))) (or (af26e5@find-library-by (lambda (af283e@x) (eq? af283c@id (af26a9@library-id af283e@x)))) (assertion-violation '#f '"cannot find library with required spec" af283a@spec))))) (set! af28b8@af2701@find-library-by-spec/die af2701@find-library-by-spec/die) (set! af2703@label->binding-table (make-eq-hashtable)) (set! af28b9@af2703@label->binding-table af2703@label->binding-table) (set! af2705@install-library-record (lambda (af2840@lib) (begin (let ((af2842@exp-env (af26c5@library-env af2840@lib))) (for-each (lambda (af2844@x) (let ((af2846@label (car af2844@x)) (af2847@binding (cdr af2844@x))) (let ((af284a@binding (let ((af284c@t (car af2847@binding))) (if (memv af284c@t '(global)) (cons 'global (cons af2840@lib (cdr af2847@binding))) (if (memv af284c@t '(global-macro)) (cons 'global-macro (cons af2840@lib (cdr af2847@binding))) (if (memv af284c@t '(global-macro!)) (cons 'global-macro! (cons af2840@lib (cdr af2847@binding))) af2847@binding)))))) (begin (if (hashtable-ref af2703@label->binding-table af2846@label '#f) (begin (format (current-error-port) '"FATAL overwrite !! key=~a value=~a to ~a\n" af2846@label (hashtable-ref af2703@label->binding-table af2846@label '#f) af284a@binding) (exit)) (void)) (hashtable-set! af2703@label->binding-table af2846@label af284a@binding))))) af2842@exp-env)) ((af269b@current-library-collection) af2840@lib)))) (set! af28ba@af2705@install-library-record af2705@install-library-record) (set! af2707@install-library (lambda (af284e@id af284f@name af2850@ver af2851@imp* af2852@vis* af2853@inv* af2854@exp-subst af2855@exp-env af2856@visit-proc af2857@invoke-proc af2858@visit-code af2859@invoke-code af285a@visible? af285b@source-file-name) (let ((af286a@imp-lib* (map af2701@find-library-by-spec/die af2851@imp*)) (af286b@vis-lib* (map af2701@find-library-by-spec/die af2852@vis*)) (af286c@inv-lib* (map af2701@find-library-by-spec/die af2853@inv*))) (begin (if (not (and (symbol? af284e@id) (list? af284f@name) (list? af2850@ver))) (assertion-violation 'install-library '"invalid spec with id/name/ver" af284e@id af284f@name af2850@ver) (void)) (if (af26ff@library-exists? af284f@name) (assertion-violation 'install-library '"library is already installed" af284f@name) (void)) (let ((af2870@lib (make-simple-struct 'library '15 (list af284e@id af284f@name af2850@ver af286a@imp-lib* af286b@vis-lib* af286c@inv-lib* af2854@exp-subst af2855@exp-env af2856@visit-proc af2857@invoke-proc af2858@visit-code af2859@invoke-code af285a@visible? af285b@source-file-name)))) (af2705@install-library-record af2870@lib)))))) (set! af28bb@af2707@install-library af2707@install-library) (set! af2709@imported-label->binding (lambda (af2872@lab) (hashtable-ref af2703@label->binding-table af2872@lab '#f))) (set! af28bc@af2709@imported-label->binding af2709@imported-label->binding) (set! af270b@invoke-library (lambda (af2874@lib) (let ((af2876@invoke (af26cd@library-invoke-state af2874@lib))) (if (procedure? af2876@invoke) (begin (af26cf@set-library-invoke-state! af2874@lib (lambda () (assertion-violation 'invoke '"circularity detected" af2874@lib))) (for-each af270b@invoke-library (af26bd@library-inv* af2874@lib)) (af26cf@set-library-invoke-state! af2874@lib (lambda () (assertion-violation 'invoke '"first invoke did not return" af2874@lib))) (af2876@invoke) (af26cf@set-library-invoke-state! af2874@lib '#t)) (void))))) (set! af28bd@af270b@invoke-library af270b@invoke-library) (set! af270d@visit-library (lambda (af2878@lib) (let ((af287a@visit (af26c9@library-visit-state af2878@lib))) (if (procedure? af287a@visit) (begin (af26cb@set-library-visit-state! af2878@lib (lambda () (assertion-violation 'visit '"circularity detected" af2878@lib))) (for-each af270b@invoke-library (af26b9@library-vis* af2878@lib)) (af26cb@set-library-visit-state! af2878@lib (lambda () (assertion-violation 'invoke '"first visit did not return" af2878@lib))) (af287a@visit) (af26cb@set-library-visit-state! af2878@lib '#t)) (void))))) (set! af28be@af270d@visit-library af270d@visit-library) (set! af270f@invoke-library-by-spec (lambda (af287c@spec) (af270b@invoke-library (af2701@find-library-by-spec/die af287c@spec)))) (set! af28bf@af270f@invoke-library-by-spec af270f@invoke-library-by-spec) (set! af2711@installed-libraries (lambda af2884 (let ((af2885 (length af2884))) (if (= af2885 '1) (apply (lambda (af287e@all?) (let af2882@f ((af2880@ls ((af269b@current-library-collection)))) (if (null? af2880@ls) '() (if (or af287e@all? (af26d9@library-visible? (car af2880@ls))) (cons (car af2880@ls) (af2882@f (cdr af2880@ls))) (af2882@f (cdr af2880@ls)))))) af2884) (if (= af2885 '0) (apply (lambda () (af2711@installed-libraries '#f)) af2884) (error 'apply '"invalid arg count")))))) (set! af28c0@af2711@installed-libraries af2711@installed-libraries) (set! af2713@library-spec (lambda (af2886@x) (begin (if (not (af26a7@library? af2886@x)) (assertion-violation 'library-spec '"not a library" af2886@x) (void)) (list (af26a9@library-id af2886@x) (af26ad@library-name af2886@x) (af26b1@library-version af2886@x))))) (set! af28c1@af2713@library-spec af2713@library-spec) (void))
(begin (set! af28c5@build-global-define (unspecified)) (set! af2936@build-lambda (unspecified)) (set! af2938@build-case-lambda (unspecified)) (set! af2966@build-sequence (unspecified)) (set! af2968@build-void (unspecified)) (set! af296a@build-letrec (unspecified)) (set! af296c@build-let (unspecified)) (set! af296e@build-named-let (unspecified)) (set! af2970@build-letrec* (unspecified)) (set! af2972@build-library-letrec* (unspecified)) (set! af2974@build-receive (unspecified)) (set! af28c5@build-global-define (lambda (af2975@x) (af2968@build-void))) (set! af2a09@af28c5@build-global-define af28c5@build-global-define) (set! af2936@build-lambda (lambda (af2977@ae af2978@vars af2979@exp) (list 'lambda af2978@vars af2979@exp))) (set! af2a0a@af2936@build-lambda af2936@build-lambda) (set! af2938@build-case-lambda (lambda (af297d@ae af297e@vars* af297f@exp*) (let ((af2984@build-error '#f) (af2986@build-pred '#f) (af2988@build-apply '#f) (af298a@expand-case-lambda '#f)) (begin (set! af2984@build-error (lambda (af29bb@ae) (list '(primitive error) ''apply (list 'quote '"invalid arg count")))) (set! af2986@build-pred (lambda (af29a3@ae af29a4@n af29a5@vars) (call-with-values (lambda () (let af29b1@f ((af29ad@vars af29a5@vars) (af29ae@count '0)) (if (pair? af29ad@vars) (af29b1@f (cdr af29ad@vars) (+ af29ae@count '1)) (if (null? af29ad@vars) (values af29ae@count '=) (values af29ae@count '>=))))) (lambda (af29b3@af29aa af29b4@af29ac) (let ((af29b7@pred af29b4@af29ac) (af29b8@count af29b3@af29aa)) (list (list 'primitive af29b7@pred) af29a4@n (list 'quote af29b8@count))))))) (set! af2988@build-apply (lambda (af299b@ae af299c@g af299d@vars af299e@exp) (list '(primitive apply) (af2936@build-lambda af299b@ae af299d@vars af299e@exp) af299c@g))) (set! af298a@expand-case-lambda (lambda (af298b@ae af298c@vars af298d@exp*) (let ((af2991@g (gensym)) (af2992@n (gensym))) (list 'lambda af2991@g (af296c@build-let af298b@ae (list af2992@n) (list (list '(primitive length) af2991@g)) (let af2999@f ((af2995@vars* af297e@vars*) (af2996@exp* af298d@exp*)) (if (null? af2995@vars*) (af2984@build-error af298b@ae) (list 'if (af2986@build-pred af298b@ae af2992@n (car af2995@vars*)) (af2988@build-apply af298b@ae af2991@g (car af2995@vars*) (car af2996@exp*)) (af2999@f (cdr af2995@vars*) (cdr af2996@exp*)))))))))) (if (= (length af297f@exp*) '1) (af2936@build-lambda af297d@ae (car af297e@vars*) (car af297f@exp*)) (af298a@expand-case-lambda af297d@ae af297e@vars* af297f@exp*)))))) (set! af2a0b@af2938@build-case-lambda af2938@build-case-lambda) (set! af2966@build-sequence (lambda (af29bd@ae af29be@exps) (let af29c3@loop ((af29c1@exps af29be@exps)) (if (null? (cdr af29c1@exps)) (car af29c1@exps) (if (equal? (car af29c1@exps) (af2968@build-void)) (af29c3@loop (cdr af29c1@exps)) (cons 'begin af29c1@exps)))))) (set! af2a0c@af2966@build-sequence af2966@build-sequence) (set! af2968@build-void (lambda () '((primitive void)))) (set! af2a0d@af2968@build-void af2968@build-void) (set! af296a@build-letrec (lambda (af29c5@ae af29c6@vars af29c7@val-exps af29c8@body-exp) (if (null? af29c6@vars) af29c8@body-exp (list 'letrec (map list af29c6@vars af29c7@val-exps) af29c8@body-exp)))) (set! af2a0e@af296a@build-letrec af296a@build-letrec) (set! af296c@build-let (lambda (af29cd@ae af29ce@vars af29cf@val-exps af29d0@body-exp) (if (null? af29ce@vars) af29d0@body-exp (list 'let (map list af29ce@vars af29cf@val-exps) af29d0@body-exp)))) (set! af2a0f@af296c@build-let af296c@build-let) (set! af296e@build-named-let (lambda (af29d5@ae af29d6@name af29d7@vars af29d8@val-exps af29d9@body-exp) (list 'let af29d6@name (map list af29d7@vars af29d8@val-exps) af29d9@body-exp))) (set! af2a10@af296e@build-named-let af296e@build-named-let) (set! af2970@build-letrec* (lambda (af29df@ae af29e0@vars af29e1@val-exps af29e2@body-exp) (if (null? af29e0@vars) af29e2@body-exp (af296c@build-let af29df@ae af29e0@vars (map (lambda (af29e7@x) (list 'quote '#f)) af29e0@vars) (af2966@build-sequence af29df@ae (append (map (lambda (af29e9@lhs af29ea@rhs) (list 'set! af29e9@lhs af29ea@rhs)) af29e0@vars af29e1@val-exps) (list af29e2@body-exp))))))) (set! af2a11@af2970@build-letrec* af2970@build-letrec*) (set! af2972@build-library-letrec* (lambda (af29ed@ae af29ee@name af29ef@vars af29f0@locs af29f1@val-exps af29f2@body-exp) (cons 'begin (append (map (lambda (af29f9@var) (cons 'set! (cons af29f9@var '((unspecified))))) af29ef@vars) (append (apply append (map (lambda (af29fb@var af29fc@loc af29fd@val-exp) (list (list 'set! af29fb@var af29fd@val-exp) (list 'set! af29fc@loc af29fb@var))) af29ef@vars af29f0@locs af29f1@val-exps)) (list af29f2@body-exp)))))) (set! af2a12@af2972@build-library-letrec* af2972@build-library-letrec*) (set! af2974@build-receive (lambda (af2a01@ae af2a02@vars af2a03@producer af2a04@body*) (begin (display '"************** in ") (cons 'receive (cons af2a02@vars (cons af2a03@producer af2a04@body*)))))) (set! af2a13@af2974@build-receive af2974@build-receive) (void))
(begin (set! af2a22@file-options-macro (unspecified)) (set! af2a24@set-cons (unspecified)) (set! af2a26@set-union (unspecified)) (set! af2a2b@top-mark* (unspecified)) (set! af2a2d@top-marked? (unspecified)) (set! af2a2f@gen-lexical (unspecified)) (set! af2a31@gen-global (unspecified)) (set! af2a33@gen-label (unspecified)) (set! af2a35@gen-top-level-label (unspecified)) (set! af2a37@gen-define-label+loc (unspecified)) (set! af2a39@gen-define-label (unspecified)) (set! af2a43@rib? (unspecified)) (set! af2a45@rib-sym* (unspecified)) (set! af2a47@set-rib-sym*! (unspecified)) (set! af2a49@rib-mark** (unspecified)) (set! af2a4b@set-rib-mark**! (unspecified)) (set! af2a4d@rib-label* (unspecified)) (set! af2a4f@set-rib-label*! (unspecified)) (set! af2a51@rib-sealed/freq (unspecified)) (set! af2a53@set-rib-sealed/freq! (unspecified)) (set! af2a55@rib-cache (unspecified)) (set! af2a57@set-rib-cache! (unspecified)) (set! af2a59@dummy (unspecified)) (set! af2a5b@make-empty-rib (unspecified)) (set! af2a5d@extend-rib! (unspecified)) (set! af2a5f@extend-rib/nc! (unspecified)) (set! af2a61@make-rib-map (unspecified)) (set! af2a63@seal-rib! (unspecified)) (set! af2a65@unseal-rib! (unspecified)) (set! af2a67@make-full-rib (unspecified)) (set! af2a69@rp (unspecified)) (set! af2a73@stx? (unspecified)) (set! af2a75@stx-expr (unspecified)) (set! af2a77@set-stx-expr! (unspecified)) (set! af2a79@stx-mark* (unspecified)) (set! af2a7b@set-stx-mark*! (unspecified)) (set! af2a7d@stx-subst* (unspecified)) (set! af2a7f@set-stx-subst*! (unspecified)) (set! af2a81@stx-ae* (unspecified)) (set! af2a83@set-stx-ae*! (unspecified)) (set! af2a85@dummy (unspecified)) (set! af2a87@datum->stx (unspecified)) (set! af2a89@gen-mark (unspecified)) (set! af2a8b@anti-mark (unspecified)) (set! af2a8d@anti-mark? (unspecified)) (set! af2a8f@mkstx (unspecified)) (set! af2a91@add-mark (unspecified)) (set! af2a93@add-subst (unspecified)) (set! af2a95@syntax-kind? (unspecified)) (set! af2a97@syntax-vector->list (unspecified)) (set! af2a99@syntax-pair? (unspecified)) (set! af2a9b@syntax-vector? (unspecified)) (set! af2a9d@syntax-null? (unspecified)) (set! af2a9f@syntax-list? (unspecified)) (set! af2aa1@syntax-car (unspecified)) (set! af2aa3@syntax-cdr (unspecified)) (set! af2aa5@syntax->list (unspecified)) (set! af2aa7@id? (unspecified)) (set! af2aa9@id->sym (unspecified)) (set! af2aab@bound-id=? (unspecified)) (set! af2aad@free-id=? (unspecified)) (set! af2aaf@valid-bound-ids? (unspecified)) (set! af2ab1@distinct-bound-ids? (unspecified)) (set! af2ab3@bound-id-member? (unspecified)) (set! af2ab5@self-evaluating? (unspecified)) (set! af2ab7@strip-annotations (unspecified)) (set! af2ab9@strip (unspecified)) (set! af2abb@stx->datum (unspecified)) (set! af2abd@id->label (unspecified)) (set! af2abf@label->binding (unspecified)) (set! af2ac1@make-binding (unspecified)) (set! af2ac3@binding-type (unspecified)) (set! af2ac5@binding-value (unspecified)) (set! af2ac7@raise-unbound-error (unspecified)) (set! af2ac9@syntax-type (unspecified)) (set! af2ad7@sanitize-binding (unspecified)) (set! af2ad9@make-variable-transformer (unspecified)) (set! af2adb@variable-transformer? (unspecified)) (set! af2add@variable-transformer-procedure (unspecified)) (set! af2adf@make-eval-transformer (unspecified)) (set! af2c30@parse-define (unspecified)) (set! af2c32@parse-define-syntax (unspecified)) (set! af2c34@scheme-stx-hashtable (unspecified)) (set! af2c36@scheme-stx (unspecified)) (set! af2c38@lexical-var (unspecified)) (set! af2c3a@lexical-mutable? (unspecified)) (set! af2c3c@set-lexical-mutable! (unspecified)) (set! af2c3e@add-lexical (unspecified)) (set! af2c40@add-lexicals (unspecified)) (set! af2c42@letrec-helper (unspecified)) (set! af2c44@let-transformer (unspecified)) (set! af2c46@letrec-transformer (unspecified)) (set! af2c48@letrec*-transformer (unspecified)) (set! af2c4a@fluid-let-syntax-transformer (unspecified)) (set! af2c4c@type-descriptor-transformer (unspecified)) (set! af2c4e@record-type-descriptor-transformer (unspecified)) (set! af2c50@record-constructor-descriptor-transformer (unspecified)) (set! af2c52@when-macro (unspecified)) (set! af2c54@unless-macro (unspecified)) (set! af2c56@if-transformer (unspecified)) (set! af2c58@and-transformer (unspecified)) (set! af2c5a@or-transformer (unspecified)) (set! af2c5c@case-macro (unspecified)) (set! af2c5e@quote-transformer (unspecified)) (set! af2c60@case-lambda-transformer (unspecified)) (set! af2c62@lambda-transformer (unspecified)) (set! af2c64@bless (unspecified)) (set! af2c66@with-syntax-macro (unspecified)) (set! af2c68@invalid-fmls-error (unspecified)) (set! af2c6a@let-macro (unspecified)) (set! af2c6c@let-values-macro (unspecified)) (set! af2c6e@let*-values-macro (unspecified)) (set! af2c70@trace-lambda-macro (unspecified)) (set! af2c72@trace-define-macro (unspecified)) (set! af2c74@trace-define-syntax-macro (unspecified)) (set! af2c76@trace-let/rec-syntax (unspecified)) (set! af2c78@trace-let-syntax-macro (unspecified)) (set! af2c7a@trace-letrec-syntax-macro (unspecified)) (set! af2c7c@guard-macro (unspecified)) (set! af2c7e@define-enumeration-macro (unspecified)) (set! af2c80@time-macro (unspecified)) (set! af2c82@delay-macro (unspecified)) (set! af2c84@assert-macro (unspecified)) (set! af2c86@endianness-macro (unspecified)) (set! af2c88@identifier-syntax-macro (unspecified)) (set! af2c8a@do-macro (unspecified)) (set! af2c8c@let*-macro (unspecified)) (set! af2c8e@or-macro (unspecified)) (set! af2c90@and-macro (unspecified)) (set! af2c92@cond-macro (unspecified)) (set! af2c94@do-include (unspecified)) (set! af2c96@include-macro (unspecified)) (set! af2c98@include-into-macro (unspecified)) (set! af2c9a@syntax-rules-macro (unspecified)) (set! af2c9c@quasiquote-macro (unspecified)) (set! af2c9e@quasisyntax-macro (unspecified)) (set! af2ca0@define-struct-macro (unspecified)) (set! af2ca2@define-record-type-macro (unspecified)) (set! af2ca4@define-condition-type-macro (unspecified)) (set! af2ca6@incorrect-usage-macro (unspecified)) (set! af2ca8@parameterize-macro (unspecified)) (set! af2caa@foreign-call-transformer (unspecified)) (set! af2cac@convert-pattern (unspecified)) (set! af2cae@syntax-dispatch (unspecified)) (set! af2cb0@ellipsis? (unspecified)) (set! af2cb2@underscore? (unspecified)) (set! af2cb4@verify-literals (unspecified)) (set! af2cb6@syntax-case-transformer (unspecified)) (set! af2cb8@ellipsis-map (unspecified)) (set! af2cba@syntax-transformer (unspecified)) (set! af2cbc@core-macro-transformer (unspecified)) (set! af2cbe@symbol-macro (unspecified)) (set! af2cc0@macro-transformer (unspecified)) (set! af2cc2@local-macro-transformer (unspecified)) (set! af2cc4@do-macro-call (unspecified)) (set! af2cc6@chi-macro (unspecified)) (set! af2cc8@chi-local-macro (unspecified)) (set! af2cca@chi-global-macro (unspecified)) (set! af2ccc@chi-expr* (unspecified)) (set! af2cce@chi-application (unspecified)) (set! af2cd0@chi-expr (unspecified)) (set! af2cd2@chi-set! (unspecified)) (set! af2cd4@verify-formals (unspecified)) (set! af2cd6@chi-lambda-clause (unspecified)) (set! af2cd8@chi-lambda-clause* (unspecified)) (set! af2cda@chi-defun (unspecified)) (set! af2cdc@chi-rhs (unspecified)) (set! af2cde@expand-interaction-rhs*/init* (unspecified)) (set! af2ce0@chi-rhs* (unspecified)) (set! af2ce2@find-bound=? (unspecified)) (set! af2ce4@find-dups (unspecified)) (set! af2ce6@chi-internal (unspecified)) (set! af2ce8@parse-module (unspecified)) (set! af2cf2@module-interface? (unspecified)) (set! af2cf4@module-interface-first-mark (unspecified)) (set! af2cf6@set-module-interface-first-mark! (unspecified)) (set! af2cf8@module-interface-exp-id-vec (unspecified)) (set! af2cfa@set-module-interface-exp-id-vec! (unspecified)) (set! af2cfc@module-interface-exp-lab-vec (unspecified)) (set! af2cfe@set-module-interface-exp-lab-vec! (unspecified)) (set! af2d00@dummy (unspecified)) (set! af2d02@module-interface-exp-id* (unspecified)) (set! af2d04@chi-internal-module (unspecified)) (set! af2d06@chi-body* (unspecified)) (set! af2d08@expand-transformer (unspecified)) (set! af2d0a@parse-exports (unspecified)) (set! af2d0c@parse-library-name (unspecified)) (set! af2d0e@parse-library (unspecified)) (set! af2d10@parse-import-spec* (unspecified)) (set! af2d12@make-top-rib (unspecified)) (set! af2d14@make-collector (unspecified)) (set! af2d16@inv-collector (unspecified)) (set! af2d18@vis-collector (unspecified)) (set! af2d1a@imp-collector (unspecified)) (set! af2d1c@chi-library-internal (unspecified)) (set! af2d1e@chi-interaction-expr (unspecified)) (set! af2d20@library-body-expander (unspecified)) (set! af2d22@core-library-expander (unspecified)) (set! af2d24@parse-top-level-program (unspecified)) (set! af2d26@top-level-expander (unspecified)) (set! af2d28@rp (unspecified)) (set! af2d32@env? (unspecified)) (set! af2d34@env-names (unspecified)) (set! af2d36@set-env-names! (unspecified)) (set! af2d38@env-labels (unspecified)) (set! af2d3a@set-env-labels! (unspecified)) (set! af2d3c@env-itc (unspecified)) (set! af2d3e@set-env-itc! (unspecified)) (set! af2d40@dummy (unspecified)) (set! af2d42@rp (unspecified)) (set! af2d4c@interaction-env? (unspecified)) (set! af2d4e@interaction-env-rib (unspecified)) (set! af2d50@set-interaction-env-rib! (unspecified)) (set! af2d52@interaction-env-r (unspecified)) (set! af2d54@set-interaction-env-r! (unspecified)) (set! af2d56@interaction-env-locs (unspecified)) (set! af2d58@set-interaction-env-locs! (unspecified)) (set! af2d5a@dummy (unspecified)) (set! af2d5c@interaction-environment-symbols (unspecified)) (set! af2d5e@environment-bindings (unspecified)) (set! af2d60@parse-binding (unspecified)) (set! af2d62@environment? (unspecified)) (set! af2d64@environment-symbols (unspecified)) (set! af2d66@environment (unspecified)) (set! af2d68@null-environment (unspecified)) (set! af2d6a@scheme-report-environment (unspecified)) (set! af2d6c@expand (unspecified)) (set! af2d6e@eval (unspecified)) (set! af2d70@library-expander (unspecified)) (set! af2d72@boot-library-expand (unspecified)) (set! af2d74@rev-map-append (unspecified)) (set! af2d76@build-exports (unspecified)) (set! af2d78@make-export-subst (unspecified)) (set! af2d7a@make-export-env/macros (unspecified)) (set! af2d7c@generate-temporaries (unspecified)) (set! af2d7e@free-identifier=? (unspecified)) (set! af2d80@bound-identifier=? (unspecified)) (set! af2d82@make-source-condition (unspecified)) (set! af2d84@extract-position-condition (unspecified)) (set! af2d86@expression-position (unspecified)) (set! af2d88@assertion-error (unspecified)) (set! af2d8a@syntax-error (unspecified)) (set! af2d8c@syntax-violation* (unspecified)) (set! af2d8e@syntax-violation (unspecified)) (set! af2d90@identifier? (unspecified)) (set! af2d92@datum->syntax (unspecified)) (set! af2d94@syntax->datum (unspecified)) (set! af2d96@ungensym-all (unspecified)) (set! af2d98@compile-r6rs-top-level (unspecified)) (set! af2d9a@pre-compile-r6rs-top-level (unspecified)) (set! af2d9c@interaction-environment (unspecified)) (set! af2d9e@top-level-context (unspecified)) (set! af2a22@file-options-macro (lambda (af2d9f@x) (let ((af2da2@valid-option? '#f)) (begin (set! af2da2@valid-option? (lambda (af2dab@x) (and (af2aa7@id? af2dab@x) (memq (af2aa9@id->sym af2dab@x) '(no-fail no-create no-truncate))))) (let ((af2da3@t af2d9f@x)) (let ((af2da5@ls/false (af2cae@syntax-dispatch af2da3@t '(_ . each-any)))) (if (and af2da5@ls/false (apply (lambda (af2da7@opt*) (for-all af2da2@valid-option? af2da7@opt*)) af2da5@ls/false)) (apply (lambda (af2da9@opt*) (af2c64@bless (list 'make-file-options (list 'quote af2da9@opt*)))) af2da5@ls/false) (af2d8e@syntax-violation '#f '"invalid syntax" af2da3@t)))))))) (set! af46f3@af2a22@file-options-macro af2a22@file-options-macro) (set! af2a24@set-cons (lambda (af2dad@x af2dae@ls) (if (memq af2dad@x af2dae@ls) af2dae@ls (cons af2dad@x af2dae@ls)))) (set! af46f4@af2a24@set-cons af2a24@set-cons) (set! af2a26@set-union (lambda (af2db1@ls1 af2db2@ls2) (if (null? af2db1@ls1) af2db2@ls2 (if (memq (car af2db1@ls1) af2db2@ls2) (af2a26@set-union (cdr af2db1@ls1) af2db2@ls2) (cons (car af2db1@ls1) (af2a26@set-union (cdr af2db1@ls1) af2db2@ls2)))))) (set! af46f5@af2a26@set-union af2a26@set-union) (set! af2a2b@top-mark* '(top)) (set! af46f6@af2a2b@top-mark* af2a2b@top-mark*) (set! af2a2d@top-marked? (lambda (af2db5@m*) (memq 'top af2db5@m*))) (set! af46f7@af2a2d@top-marked? af2a2d@top-marked?) (set! af2a2f@gen-lexical (lambda (af2db7@sym) (if (symbol? af2db7@sym) (gensym af2db7@sym) (if (af2a73@stx? af2db7@sym) (af2a2f@gen-lexical (af2aa9@id->sym af2db7@sym)) (assertion-violation 'gen-lexical '"BUG: invalid arg" af2db7@sym))))) (set! af46f8@af2a2f@gen-lexical af2a2f@gen-lexical) (set! af2a31@gen-global (lambda (af2db9@x) (af2a2f@gen-lexical af2db9@x))) (set! af46f9@af2a31@gen-global af2a31@gen-global) (set! af2a33@gen-label (lambda (af2dbb@_) (gensym))) (set! af46fa@af2a33@gen-label af2a33@gen-label) (set! af2a35@gen-top-level-label (lambda (af2dbd@id af2dbe@rib) (let ((af2dc2@find '#f)) (begin (set! af2dc2@find (lambda (af2dcd@sym af2dce@mark* af2dcf@sym* af2dd0@mark** af2dd1@label*) (and (pair? af2dcf@sym*) (if (and (eq? af2dcd@sym (car af2dcf@sym*)) (same-marks? af2dce@mark* (car af2dd0@mark**))) (car af2dd1@label*) (af2dc2@find af2dcd@sym af2dce@mark* (cdr af2dcf@sym*) (cdr af2dd0@mark**) (cdr af2dd1@label*)))))) (let ((af2dc3@sym (af2aa9@id->sym af2dbd@id)) (af2dc4@mark* (af2a79@stx-mark* af2dbd@id))) (let ((af2dc7@sym* (af2a45@rib-sym* af2dbe@rib))) (let ((af2dc9@t (and (memq af2dc3@sym (af2a45@rib-sym* af2dbe@rib)) (af2dc2@find af2dc3@sym af2dc4@mark* af2dc7@sym* (af2a49@rib-mark** af2dbe@rib) (af2a4d@rib-label* af2dbe@rib))))) (if af2dc9@t ((lambda (af2dcb@label) (if (af28bc@af2709@imported-label->binding af2dcb@label) (gensym) af2dcb@label)) af2dc9@t) (gensym))))))))) (set! af46fb@af2a35@gen-top-level-label af2a35@gen-top-level-label) (set! af2a37@gen-define-label+loc (lambda (af2dd7@id af2dd8@rib) (let ((af2ddb@t (af2d9e@top-level-context))) (if af2ddb@t ((lambda (af2ddd@env) (let ((af2ddf@label (af2a35@gen-top-level-label af2dd7@id af2dd8@rib)) (af2de0@locs (af2d56@interaction-env-locs af2ddd@env))) (values af2ddf@label (let ((af2de3@t (assq af2ddf@label af2de0@locs))) (if af2de3@t (cdr af2de3@t) (let ((af2de5@loc (af2a2f@gen-lexical af2dd7@id))) (begin (af2d58@set-interaction-env-locs! af2ddd@env (cons (cons af2ddf@label af2de5@loc) af2de0@locs)) af2de5@loc))))))) af2ddb@t) (values (gensym) (af2a2f@gen-lexical af2dd7@id)))))) (set! af46fc@af2a37@gen-define-label+loc af2a37@gen-define-label+loc) (set! af2a39@gen-define-label (lambda (af2de7@id af2de8@rib) (if (af2d9e@top-level-context) (af2a35@gen-top-level-label af2de7@id af2de8@rib) (gensym)))) (set! af46fd@af2a39@gen-define-label af2a39@gen-define-label) (set! af2a43@rib? (lambda (af2deb@x) (and (simple-struct? af2deb@x) (eq? (simple-struct-name af2deb@x) 'rib)))) (set! af46fe@af2a43@rib? af2a43@rib?) (set! af2a45@rib-sym* (lambda (af2ded@x) (simple-struct-ref af2ded@x '0))) (set! af46ff@af2a45@rib-sym* af2a45@rib-sym*) (set! af2a47@set-rib-sym*! (lambda (af2def@x af2df0@val) (simple-struct-set! af2def@x '0 af2df0@val))) (set! af4700@af2a47@set-rib-sym*! af2a47@set-rib-sym*!) (set! af2a49@rib-mark** (lambda (af2df3@x) (simple-struct-ref af2df3@x '1))) (set! af4701@af2a49@rib-mark** af2a49@rib-mark**) (set! af2a4b@set-rib-mark**! (lambda (af2df5@x af2df6@val) (simple-struct-set! af2df5@x '1 af2df6@val))) (set! af4702@af2a4b@set-rib-mark**! af2a4b@set-rib-mark**!) (set! af2a4d@rib-label* (lambda (af2df9@x) (simple-struct-ref af2df9@x '2))) (set! af4703@af2a4d@rib-label* af2a4d@rib-label*) (set! af2a4f@set-rib-label*! (lambda (af2dfb@x af2dfc@val) (simple-struct-set! af2dfb@x '2 af2dfc@val))) (set! af4704@af2a4f@set-rib-label*! af2a4f@set-rib-label*!) (set! af2a51@rib-sealed/freq (lambda (af2dff@x) (simple-struct-ref af2dff@x '3))) (set! af4705@af2a51@rib-sealed/freq af2a51@rib-sealed/freq) (set! af2a53@set-rib-sealed/freq! (lambda (af2e01@x af2e02@val) (simple-struct-set! af2e01@x '3 af2e02@val))) (set! af4706@af2a53@set-rib-sealed/freq! af2a53@set-rib-sealed/freq!) (set! af2a55@rib-cache (lambda (af2e05@x) (simple-struct-ref af2e05@x '4))) (set! af4707@af2a55@rib-cache af2a55@rib-cache) (set! af2a57@set-rib-cache! (lambda (af2e07@x af2e08@val) (simple-struct-set! af2e07@x '4 af2e08@val))) (set! af4708@af2a57@set-rib-cache! af2a57@set-rib-cache!) (set! af2a59@dummy '3) (set! af4709@af2a59@dummy af2a59@dummy) (set! af2a5b@make-empty-rib (lambda () (make-simple-struct 'rib '6 (list '() '() '() '#f '#f)))) (set! af470a@af2a5b@make-empty-rib af2a5b@make-empty-rib) (set! af2a5d@extend-rib! (lambda (af2e0b@rib af2e0c@id af2e0d@label) (let ((af2e12@find '#f)) (begin (set! af2e12@find (lambda (af2e1f@sym af2e20@mark* af2e21@sym* af2e22@mark** af2e23@label*) (and (pair? af2e21@sym*) (if (and (eq? af2e1f@sym (car af2e21@sym*)) (same-marks? af2e20@mark* (car af2e22@mark**))) af2e23@label* (af2e12@find af2e1f@sym af2e20@mark* (cdr af2e21@sym*) (cdr af2e22@mark**) (cdr af2e23@label*)))))) (begin (if (af2a51@rib-sealed/freq af2e0b@rib) (assertion-violation 'extend-rib! '"BUG: rib is sealed" af2e0b@rib) (void)) (let ((af2e13@sym (af2aa9@id->sym af2e0c@id)) (af2e14@mark* (af2a79@stx-mark* af2e0c@id))) (let ((af2e17@sym* (af2a45@rib-sym* af2e0b@rib))) (let ((af2e19@t (and (memq af2e13@sym (af2a45@rib-sym* af2e0b@rib)) (af2e12@find af2e13@sym af2e14@mark* af2e17@sym* (af2a49@rib-mark** af2e0b@rib) (af2a4d@rib-label* af2e0b@rib))))) (if af2e19@t ((lambda (af2e1b@p) (if (not (eq? af2e0d@label (car af2e1b@p))) (if (af2d9e@top-level-context) (set-car! af2e1b@p af2e0d@label) (af2d8e@syntax-violation '#f '"multiple definitions of identifier" af2e0c@id)) (void))) af2e19@t) (begin (if (af2a55@rib-cache af2e0b@rib) (hashtable-update! (af2a55@rib-cache af2e0b@rib) af2e13@sym (lambda (af2e1d@e) (cons (cons af2e14@mark* af2e0d@label) af2e1d@e)) '()) (void)) (af2a47@set-rib-sym*! af2e0b@rib (cons af2e13@sym af2e17@sym*)) (af2a4b@set-rib-mark**! af2e0b@rib (cons af2e14@mark* (af2a49@rib-mark** af2e0b@rib))) (af2a4f@set-rib-label*! af2e0b@rib (cons af2e0d@label (af2a4d@rib-label* af2e0b@rib))))))))))))) (set! af470b@af2a5d@extend-rib! af2a5d@extend-rib!) (set! af2a5f@extend-rib/nc! (lambda (af2e29@rib af2e2a@id af2e2b@label) (let ((af2e2f@sym (af2aa9@id->sym af2e2a@id)) (af2e30@mark* (af2a79@stx-mark* af2e2a@id))) (let ((af2e33@sym* (af2a45@rib-sym* af2e29@rib))) (begin (if (af2a55@rib-cache af2e29@rib) (hashtable-update! (af2a55@rib-cache af2e29@rib) af2e2f@sym (lambda (af2e35@e) (cons (cons af2e30@mark* af2e2b@label) af2e35@e)) '()) (void)) (af2a47@set-rib-sym*! af2e29@rib (cons af2e2f@sym af2e33@sym*)) (af2a4b@set-rib-mark**! af2e29@rib (cons af2e30@mark* (af2a49@rib-mark** af2e29@rib))) (af2a4f@set-rib-label*! af2e29@rib (cons af2e2b@label (af2a4d@rib-label* af2e29@rib)))))))) (set! af470c@af2a5f@extend-rib/nc! af2a5f@extend-rib/nc!) (set! af2a61@make-rib-map (lambda (af2e37@sym*) (let ((af2e39@ht (make-eq-hashtable))) (let af2e3f@f ((af2e3b@i '0) (af2e3c@sym* af2e37@sym*)) (if (null? af2e3c@sym*) af2e39@ht (begin (hashtable-update! af2e39@ht (car af2e3c@sym*) (lambda (af2e41@x) (cons af2e3b@i af2e41@x)) '()) (af2e3f@f (+ af2e3b@i '1) (cdr af2e3c@sym*)))))))) (set! af470d@af2a61@make-rib-map af2a61@make-rib-map) (set! af2a63@seal-rib! (lambda (af2e43@rib) (let ((af2e45@sym* (af2a45@rib-sym* af2e43@rib))) (if (not (null? af2e45@sym*)) (begin (af2a47@set-rib-sym*! af2e43@rib (list->vector af2e45@sym*)) (af2a4b@set-rib-mark**! af2e43@rib (list->vector (af2a49@rib-mark** af2e43@rib))) (af2a4f@set-rib-label*! af2e43@rib (list->vector (af2a4d@rib-label* af2e43@rib))) (af2a53@set-rib-sealed/freq! af2e43@rib (af2a61@make-rib-map af2e45@sym*))) (void))))) (set! af470e@af2a63@seal-rib! af2a63@seal-rib!) (set! af2a65@unseal-rib! (lambda (af2e47@rib) (if (af2a51@rib-sealed/freq af2e47@rib) (begin (af2a53@set-rib-sealed/freq! af2e47@rib '#f) (af2a47@set-rib-sym*! af2e47@rib (vector->list (af2a45@rib-sym* af2e47@rib))) (af2a4b@set-rib-mark**! af2e47@rib (vector->list (af2a49@rib-mark** af2e47@rib))) (af2a4f@set-rib-label*! af2e47@rib (vector->list (af2a4d@rib-label* af2e47@rib)))) (void)))) (set! af470f@af2a65@unseal-rib! af2a65@unseal-rib!) (set! af2a67@make-full-rib (lambda (af2e49@id* af2e4a@label*) (let ((af2e4d@r (make-simple-struct 'rib '6 (list (map af2aa9@id->sym af2e49@id*) (map af2a79@stx-mark* af2e49@id*) af2e4a@label* '#f '#f)))) (begin (af2a63@seal-rib! af2e4d@r) af2e4d@r)))) (set! af4710@af2a67@make-full-rib af2a67@make-full-rib) (set! af2a69@rp (af25ee@af24ca@make-record-printer 'stx (lambda (af2e4f@x af2e50@p af2e51@wr) (begin (display '"#<syntax " af2e50@p) (write (af2abb@stx->datum af2e4f@x) af2e50@p) (let ((af2e55@expr (af2a75@stx-expr af2e4f@x))) (if (af25e6@af24ba@annotation? af2e55@expr) (let ((af2e57@src (af25e7@af24bc@annotation-source af2e55@expr))) (if (pair? af2e57@src) (begin (display '" [" af2e50@p) (display (cdr af2e57@src) af2e50@p) (display '" of " af2e50@p) (display (car af2e57@src) af2e50@p) (display '"]" af2e50@p)) (void))) (void))) (display '">" af2e50@p))))) (set! af4711@af2a69@rp af2a69@rp) (set! af2a73@stx? (lambda (af2e59@x) (and (simple-struct? af2e59@x) (eq? (simple-struct-name af2e59@x) 'stx)))) (set! af4712@af2a73@stx? af2a73@stx?) (set! af2a75@stx-expr (lambda (af2e5b@x) (simple-struct-ref af2e5b@x '0))) (set! af4713@af2a75@stx-expr af2a75@stx-expr) (set! af2a77@set-stx-expr! (lambda (af2e5d@x af2e5e@val) (simple-struct-set! af2e5d@x '0 af2e5e@val))) (set! af4714@af2a77@set-stx-expr! af2a77@set-stx-expr!) (set! af2a79@stx-mark* (lambda (af2e61@x) (simple-struct-ref af2e61@x '1))) (set! af4715@af2a79@stx-mark* af2a79@stx-mark*) (set! af2a7b@set-stx-mark*! (lambda (af2e63@x af2e64@val) (simple-struct-set! af2e63@x '1 af2e64@val))) (set! af4716@af2a7b@set-stx-mark*! af2a7b@set-stx-mark*!) (set! af2a7d@stx-subst* (lambda (af2e67@x) (simple-struct-ref af2e67@x '2))) (set! af4717@af2a7d@stx-subst* af2a7d@stx-subst*) (set! af2a7f@set-stx-subst*! (lambda (af2e69@x af2e6a@val) (simple-struct-set! af2e69@x '2 af2e6a@val))) (set! af4718@af2a7f@set-stx-subst*! af2a7f@set-stx-subst*!) (set! af2a81@stx-ae* (lambda (af2e6d@x) (simple-struct-ref af2e6d@x '3))) (set! af4719@af2a81@stx-ae* af2a81@stx-ae*) (set! af2a83@set-stx-ae*! (lambda (af2e6f@x af2e70@val) (simple-struct-set! af2e6f@x '3 af2e70@val))) (set! af471a@af2a83@set-stx-ae*! af2a83@set-stx-ae*!) (set! af2a85@dummy '3) (set! af471b@af2a85@dummy af2a85@dummy) (set! af2a87@datum->stx (lambda (af2e73@id af2e74@datum) (make-simple-struct 'stx '5 (list af2e74@datum (af2a79@stx-mark* af2e73@id) (af2a7d@stx-subst* af2e73@id) (af2a81@stx-ae* af2e73@id))))) (set! af471c@af2a87@datum->stx af2a87@datum->stx) (set! af2a89@gen-mark (lambda () (string '#\m))) (set! af471d@af2a89@gen-mark af2a89@gen-mark) (set! af2a8b@anti-mark '#f) (set! af471e@af2a8b@anti-mark af2a8b@anti-mark) (set! af2a8d@anti-mark? not) (set! af471f@af2a8d@anti-mark? af2a8d@anti-mark?) (set! af2a8f@mkstx (lambda (af2e77@e af2e78@m* af2e79@s* af2e7a@ae*) (if (and (af2a73@stx? af2e77@e) (not (af2a2d@top-marked? af2e78@m*))) (call-with-values (lambda () (join-wraps af2e78@m* af2e79@s* af2e7a@ae* af2e77@e)) (lambda (af2e85@af2e80 af2e86@af2e82 af2e87@af2e84) (let ((af2e8b@ae* af2e87@af2e84) (af2e8c@s* af2e86@af2e82) (af2e8d@m* af2e85@af2e80)) (make-simple-struct 'stx '5 (list (af2a75@stx-expr af2e77@e) af2e8d@m* af2e8c@s* af2e8b@ae*))))) (make-simple-struct 'stx '5 (list af2e77@e af2e78@m* af2e79@s* af2e7a@ae*))))) (set! af4720@af2a8f@mkstx af2a8f@mkstx) (set! af2a91@add-mark (lambda (af2e91@m af2e92@e af2e93@ae) (af2a8f@mkstx af2e92@e (list af2e91@m) '(shift) (list af2e93@ae)))) (set! af4721@af2a91@add-mark af2a91@add-mark) (set! af2a93@add-subst (lambda (af2e97@subst af2e98@e) (af2a8f@mkstx af2e98@e '() (list af2e97@subst) '()))) (set! af4722@af2a93@add-subst af2a93@add-subst) (set! af2a95@syntax-kind? (lambda (af2e9b@x af2e9c@p?) (if (af2a73@stx? af2e9b@x) (af2a95@syntax-kind? (af2a75@stx-expr af2e9b@x) af2e9c@p?) (if (af25e6@af24ba@annotation? af2e9b@x) (af2a95@syntax-kind? (af25e8@af24be@annotation-expression af2e9b@x) af2e9c@p?) (af2e9c@p? af2e9b@x))))) (set! af4723@af2a95@syntax-kind? af2a95@syntax-kind?) (set! af2a97@syntax-vector->list (lambda (af2e9f@x) (if (af2a73@stx? af2e9f@x) (let ((af2ea1@ls (af2a97@syntax-vector->list (af2a75@stx-expr af2e9f@x))) (af2ea2@m* (af2a79@stx-mark* af2e9f@x)) (af2ea3@s* (af2a7d@stx-subst* af2e9f@x)) (af2ea4@ae* (af2a81@stx-ae* af2e9f@x))) (map (lambda (af2ea9@x) (af2a8f@mkstx af2ea9@x af2ea2@m* af2ea3@s* af2ea4@ae*)) af2ea1@ls)) (if (af25e6@af24ba@annotation? af2e9f@x) (af2a97@syntax-vector->list (af25e8@af24be@annotation-expression af2e9f@x)) (if (vector? af2e9f@x) (vector->list af2e9f@x) (assertion-violation 'syntax-vector->list '"BUG: not a syntax vector" af2e9f@x)))))) (set! af4724@af2a97@syntax-vector->list af2a97@syntax-vector->list) (set! af2a99@syntax-pair? (lambda (af2eab@x) (af2a95@syntax-kind? af2eab@x pair?))) (set! af4725@af2a99@syntax-pair? af2a99@syntax-pair?) (set! af2a9b@syntax-vector? (lambda (af2ead@x) (af2a95@syntax-kind? af2ead@x vector?))) (set! af4726@af2a9b@syntax-vector? af2a9b@syntax-vector?) (set! af2a9d@syntax-null? (lambda (af2eaf@x) (af2a95@syntax-kind? af2eaf@x null?))) (set! af4727@af2a9d@syntax-null? af2a9d@syntax-null?) (set! af2a9f@syntax-list? (lambda (af2eb1@x) (or (af2a9d@syntax-null? af2eb1@x) (and (af2a99@syntax-pair? af2eb1@x) (af2a9f@syntax-list? (af2aa3@syntax-cdr af2eb1@x)))))) (set! af4728@af2a9f@syntax-list? af2a9f@syntax-list?) (set! af2aa1@syntax-car (lambda (af2eb3@x) (if (af2a73@stx? af2eb3@x) (af2a8f@mkstx (af2aa1@syntax-car (af2a75@stx-expr af2eb3@x)) (af2a79@stx-mark* af2eb3@x) (af2a7d@stx-subst* af2eb3@x) (af2a81@stx-ae* af2eb3@x)) (if (af25e6@af24ba@annotation? af2eb3@x) (af2aa1@syntax-car (af25e8@af24be@annotation-expression af2eb3@x)) (if (pair? af2eb3@x) (car af2eb3@x) (assertion-violation 'syntax-car '"BUG: not a pair" af2eb3@x)))))) (set! af4729@af2aa1@syntax-car af2aa1@syntax-car) (set! af2aa3@syntax-cdr (lambda (af2eb5@x) (if (af2a73@stx? af2eb5@x) (af2a8f@mkstx (af2aa3@syntax-cdr (af2a75@stx-expr af2eb5@x)) (af2a79@stx-mark* af2eb5@x) (af2a7d@stx-subst* af2eb5@x) (af2a81@stx-ae* af2eb5@x)) (if (af25e6@af24ba@annotation? af2eb5@x) (af2aa3@syntax-cdr (af25e8@af24be@annotation-expression af2eb5@x)) (if (pair? af2eb5@x) (cdr af2eb5@x) (assertion-violation 'syntax-cdr '"BUG: not a pair" af2eb5@x)))))) (set! af472a@af2aa3@syntax-cdr af2aa3@syntax-cdr) (set! af2aa5@syntax->list (lambda (af2eb7@x) (if (af2a99@syntax-pair? af2eb7@x) (cons (af2aa1@syntax-car af2eb7@x) (af2aa5@syntax->list (af2aa3@syntax-cdr af2eb7@x))) (if (af2a9d@syntax-null? af2eb7@x) '() (assertion-violation 'syntax->list '"BUG: invalid argument" af2eb7@x))))) (set! af472b@af2aa5@syntax->list af2aa5@syntax->list) (set! af2aa7@id? (lambda (af2eb9@x) (and (af2a73@stx? af2eb9@x) (symbol? (af2a75@stx-expr af2eb9@x))))) (set! af472c@af2aa7@id? af2aa7@id?) (set! af2aa9@id->sym (lambda (af2ebb@x) (af2a75@stx-expr af2ebb@x))) (set! af472d@af2aa9@id->sym af2aa9@id->sym) (set! af2aab@bound-id=? (lambda (af2ebd@x af2ebe@y) (and (eq? (af2aa9@id->sym af2ebd@x) (af2aa9@id->sym af2ebe@y)) (same-marks? (af2a79@stx-mark* af2ebd@x) (af2a79@stx-mark* af2ebe@y))))) (set! af472e@af2aab@bound-id=? af2aab@bound-id=?) (set! af2aad@free-id=? (lambda (af2ec1@i af2ec2@j) (let ((af2ec5@t0 (id->real-label af2ec1@i)) (af2ec6@t1 (id->real-label af2ec2@j))) (if (or af2ec5@t0 af2ec6@t1) (eq? af2ec5@t0 af2ec6@t1) (eq? (af2aa9@id->sym af2ec1@i) (af2aa9@id->sym af2ec2@j)))))) (set! af472f@af2aad@free-id=? af2aad@free-id=?) (set! af2aaf@valid-bound-ids? (lambda (af2ec9@id*) (and (for-all af2aa7@id? af2ec9@id*) (af2ab1@distinct-bound-ids? af2ec9@id*)))) (set! af4730@af2aaf@valid-bound-ids? af2aaf@valid-bound-ids?) (set! af2ab1@distinct-bound-ids? (lambda (af2ecb@id*) (or (null? af2ecb@id*) (and (not (af2ab3@bound-id-member? (car af2ecb@id*) (cdr af2ecb@id*))) (af2ab1@distinct-bound-ids? (cdr af2ecb@id*)))))) (set! af4731@af2ab1@distinct-bound-ids? af2ab1@distinct-bound-ids?) (set! af2ab3@bound-id-member? (lambda (af2ecd@id af2ece@id*) (and (pair? af2ece@id*) (or (af2aab@bound-id=? af2ecd@id (car af2ece@id*)) (af2ab3@bound-id-member? af2ecd@id (cdr af2ece@id*)))))) (set! af4732@af2ab3@bound-id-member? af2ab3@bound-id-member?) (set! af2ab5@self-evaluating? (lambda (af2ed1@x) (or (number? af2ed1@x) (string? af2ed1@x) (char? af2ed1@x) (boolean? af2ed1@x) (regexp? af2ed1@x) (bytevector? af2ed1@x)))) (set! af4733@af2ab5@self-evaluating? af2ab5@self-evaluating?) (set! af2ab7@strip-annotations (lambda (af2ed3@x) (if (pair? af2ed3@x) (cons (af2ab7@strip-annotations (car af2ed3@x)) (af2ab7@strip-annotations (cdr af2ed3@x))) (if (vector? af2ed3@x) (vector-map af2ab7@strip-annotations af2ed3@x) (if (af25e6@af24ba@annotation? af2ed3@x) (af25e5@af24b8@annotation-stripped af2ed3@x) af2ed3@x))))) (set! af4734@af2ab7@strip-annotations af2ab7@strip-annotations) (set! af2ab9@strip (lambda (af2ed5@x af2ed6@m*) (if (af2a2d@top-marked? af2ed6@m*) (if (or (af25e6@af24ba@annotation? af2ed5@x) (and (pair? af2ed5@x) (af25e6@af24ba@annotation? (car af2ed5@x))) (and (vector? af2ed5@x) (> (vector-length af2ed5@x) '0) (af25e6@af24ba@annotation? (vector-ref af2ed5@x '0)))) (af2ab7@strip-annotations af2ed5@x) af2ed5@x) (let af2edb@f ((af2ed9@x af2ed5@x)) (if (af2a73@stx? af2ed9@x) (af2ab9@strip (af2a75@stx-expr af2ed9@x) (af2a79@stx-mark* af2ed9@x)) (if (af25e6@af24ba@annotation? af2ed9@x) (af25e5@af24b8@annotation-stripped af2ed9@x) (if (pair? af2ed9@x) (let ((af2edd@a (af2edb@f (car af2ed9@x))) (af2ede@d (af2edb@f (cdr af2ed9@x)))) (if (and (eq? af2edd@a (car af2ed9@x)) (eq? af2ede@d (cdr af2ed9@x))) af2ed9@x (cons af2edd@a af2ede@d))) (if (vector? af2ed9@x) (let ((af2ee1@old (vector->list af2ed9@x))) (let ((af2ee3@new (map af2edb@f af2ee1@old))) (if (for-all eq? af2ee1@old af2ee3@new) af2ed9@x (list->vector af2ee3@new)))) af2ed9@x)))))))) (set! af4735@af2ab9@strip af2ab9@strip) (set! af2abb@stx->datum (lambda (af2ee5@x) (af2ab9@strip af2ee5@x '()))) (set! af4736@af2abb@stx->datum af2abb@stx->datum) (set! af2abd@id->label (lambda (af2ee7@id) (or (id->real-label af2ee7@id) (let ((af2ee9@t (af2d9e@top-level-context))) (if af2ee9@t ((lambda (af2eeb@env) (let ((af2eed@rib (af2d4e@interaction-env-rib af2eeb@env))) (call-with-values (lambda () (af2a37@gen-define-label+loc af2ee7@id af2eed@rib)) (lambda (af2ef3@af2ef0 af2ef4@af2ef2) (let ((af2ef7@loc_ af2ef4@af2ef2) (af2ef8@lab af2ef3@af2ef0)) (begin (af2a5d@extend-rib! af2eed@rib af2ee7@id af2ef8@lab) af2ef8@lab)))))) af2ee9@t) '#f))))) (set! af4737@af2abd@id->label af2abd@id->label) (set! af2abf@label->binding (lambda (af2efb@x af2efc@r) (let ((af2eff@t (af28bc@af2709@imported-label->binding af2efb@x))) (if af2eff@t ((lambda (af2f01@b) (if (and (pair? af2f01@b) (eq? (car af2f01@b) '$core-rtd)) (cons '$rtd (map af2c64@bless (cdr af2f01@b))) (if (and (pair? af2f01@b) (eq? (car af2f01@b) 'global-rtd)) (let ((af2f03@lib (cadr af2f01@b)) (af2f04@loc (cddr af2f01@b))) (cons '$rtd (symbol-value af2f04@loc))) af2f01@b))) af2eff@t) (let ((af2f07@t (assq af2efb@x af2efc@r))) (if af2f07@t (cdr af2f07@t) (let ((af2f09@t (af2d9e@top-level-context))) (if af2f09@t ((lambda (af2f0b@env) (let ((af2f0d@t (assq af2efb@x (af2d56@interaction-env-locs af2f0b@env)))) (if af2f0d@t ((lambda (af2f0f@p) (cons* 'lexical (cdr af2f0f@p) '#f)) af2f0d@t) '(displaced-lexical . #f)))) af2f09@t) '(displaced-lexical . #f))))))))) (set! af4738@af2abf@label->binding af2abf@label->binding) (set! af2ac1@make-binding cons) (set! af4739@af2ac1@make-binding af2ac1@make-binding) (set! af2ac3@binding-type car) (set! af473a@af2ac3@binding-type af2ac3@binding-type) (set! af2ac5@binding-value cdr) (set! af473b@af2ac5@binding-value af2ac5@binding-value) (set! af2ac7@raise-unbound-error (lambda (af2f11@id) (af2d8c@syntax-violation* '#f '"unbound identifier" af2f11@id (af4b31@af4977@make-undefined-violation)))) (set! af473c@af2ac7@raise-unbound-error af2ac7@raise-unbound-error) (set! af2ac9@syntax-type (lambda (af2f13@e af2f14@r) (if (af2aa7@id? af2f13@e) (let ((af2f17@id af2f13@e)) (let ((af2f19@label (af2abd@id->label af2f17@id))) (let ((af2f1b@b (af2abf@label->binding af2f19@label af2f14@r))) (let ((af2f1d@type (af2ac3@binding-type af2f1b@b))) (begin (if (not af2f19@label) (af2ac7@raise-unbound-error af2f17@id) (void)) (let ((af2f1f@t af2f1d@type)) (if (memv af2f1f@t '(lexical core-prim macro macro! global local-macro local-macro! global-macro global-macro! displaced-lexical syntax import export $module $core-rtd library mutable)) (values af2f1d@type (af2ac5@binding-value af2f1b@b) af2f17@id) (values 'other '#f '#f)))))))) (if (af2a99@syntax-pair? af2f13@e) (let ((af2f21@id (af2aa1@syntax-car af2f13@e))) (if (af2aa7@id? af2f21@id) (let ((af2f23@label (af2abd@id->label af2f21@id))) (let ((af2f25@b (af2abf@label->binding af2f23@label af2f14@r))) (let ((af2f27@type (af2ac3@binding-type af2f25@b))) (begin (if (not af2f23@label) (af2ac7@raise-unbound-error af2f21@id) (void)) (let ((af2f29@t af2f27@type)) (if (memv af2f29@t '(define define-syntax core-macro begin macro macro! local-macro local-macro! global-macro global-macro! module library set! let-syntax letrec-syntax import export $core-rtd)) (values af2f27@type (af2ac5@binding-value af2f25@b) af2f21@id) (values 'call '#f '#f))))))) (values 'call '#f '#f))) (let ((af2f2b@d (af2abb@stx->datum af2f13@e))) (if (af2ab5@self-evaluating? af2f2b@d) (values 'constant af2f2b@d '#f) (values 'other '#f '#f))))))) (set! af473d@af2ac9@syntax-type af2ac9@syntax-type) (set! af2ad7@sanitize-binding (lambda (af2f2d@x af2f2e@src) (if (procedure? af2f2d@x) (cons* 'local-macro af2f2d@x af2f2e@src) (if (and (pair? af2f2d@x) (eq? (car af2f2d@x) 'macro!) (procedure? (cdr af2f2d@x))) (cons* 'local-macro! (cdr af2f2d@x) af2f2e@src) (if (and (pair? af2f2d@x) (eq? (car af2f2d@x) '$rtd)) af2f2d@x (assertion-violation 'expand '"invalid transformer" af2f2d@x)))))) (set! af473e@af2ad7@sanitize-binding af2ad7@sanitize-binding) (set! af2ad9@make-variable-transformer (lambda (af2f31@x) (if (procedure? af2f31@x) (cons 'macro! af2f31@x) (assertion-violation 'make-variable-transformer '"not a procedure" af2f31@x)))) (set! af473f@af2ad9@make-variable-transformer af2ad9@make-variable-transformer) (set! af2adb@variable-transformer? (lambda (af2f33@x) (and (pair? af2f33@x) (eq? (car af2f33@x) 'macro!) (procedure? (cdr af2f33@x))))) (set! af4740@af2adb@variable-transformer? af2adb@variable-transformer?) (set! af2add@variable-transformer-procedure (lambda (af2f35@x) (if (af2adb@variable-transformer? af2f35@x) (cdr af2f35@x) (assertion-violation 'variable-transformer-procedure '"not a variable transformer" af2f35@x)))) (set! af4741@af2add@variable-transformer-procedure af2add@variable-transformer-procedure) (set! af2adf@make-eval-transformer (lambda (af2f37@x) (af2ad7@sanitize-binding (eval-core (af2647@af25ff@expanded->core af2f37@x)) af2f37@x))) (set! af4742@af2adf@make-eval-transformer af2adf@make-eval-transformer) (set! af2c30@parse-define (lambda (af2f39@x) (let ((af2f3b@t af2f39@x)) (let ((af2f3d@ls/false (af2cae@syntax-dispatch af2f3b@t '(_ (any . any) any . each-any)))) (if (and af2f3d@ls/false (apply (lambda (af2f3f@id af2f40@fmls af2f41@b af2f42@b*) (af2aa7@id? af2f3f@id)) af2f3d@ls/false)) (apply (lambda (af2f47@id af2f48@fmls af2f49@b af2f4a@b*) (begin (af2cd4@verify-formals af2f48@fmls af2f39@x) (values af2f47@id (cons 'defun (cons af2f48@fmls (cons af2f49@b af2f4a@b*)))))) af2f3d@ls/false) (let ((af2f4f@t af2f3b@t)) (let ((af2f51@ls/false (af2cae@syntax-dispatch af2f4f@t '(_ any any)))) (if (and af2f51@ls/false (apply (lambda (af2f53@id af2f54@val) (af2aa7@id? af2f53@id)) af2f51@ls/false)) (apply (lambda (af2f57@id af2f58@val) (values af2f57@id (cons 'expr af2f58@val))) af2f51@ls/false) (let ((af2f5b@t af2f4f@t)) (let ((af2f5d@ls/false (af2cae@syntax-dispatch af2f5b@t '(_ any)))) (if (and af2f5d@ls/false (apply (lambda (af2f5f@id) (af2aa7@id? af2f5f@id)) af2f5d@ls/false)) (apply (lambda (af2f61@id) (values af2f61@id (cons 'expr (af2c64@bless '(void))))) af2f5d@ls/false) (af2d8e@syntax-violation '#f '"invalid syntax" af2f5b@t)))))))))))) (set! af4743@af2c30@parse-define af2c30@parse-define) (set! af2c32@parse-define-syntax (lambda (af2f63@x) (let ((af2f65@t af2f63@x)) (let ((af2f67@ls/false (af2cae@syntax-dispatch af2f65@t '(_ any any)))) (if (and af2f67@ls/false (apply (lambda (af2f69@id af2f6a@val) (af2aa7@id? af2f69@id)) af2f67@ls/false)) (apply (lambda (af2f6d@id af2f6e@val) (values af2f6d@id af2f6e@val)) af2f67@ls/false) (af2d8e@syntax-violation '#f '"invalid syntax" af2f65@t)))))) (set! af4744@af2c32@parse-define-syntax af2c32@parse-define-syntax) (set! af2c34@scheme-stx-hashtable (make-eq-hashtable)) (set! af4745@af2c34@scheme-stx-hashtable af2c34@scheme-stx-hashtable) (set! af2c36@scheme-stx (lambda (af2f71@sym) (or (hashtable-ref af2c34@scheme-stx-hashtable af2f71@sym '#f) (let ((af2f73@subst (af2898@af26c1@library-subst (af28b6@af26fd@find-library-by-name '(psyntax system $all))))) (let ((af2f75@stx (make-simple-struct 'stx '5 (list af2f71@sym af2a2b@top-mark* '() '())))) (let ((af2f77@stx (let ((af2f79@t (assq af2f71@sym af2f73@subst))) (if af2f79@t ((lambda (af2f7b@x) (let ((af2f7d@name (car af2f7b@x)) (af2f7e@label (cdr af2f7b@x))) (af2a93@add-subst (make-simple-struct 'rib '6 (list (list af2f7d@name) (list af2a2b@top-mark*) (list af2f7e@label) '#f '#f)) af2f75@stx))) af2f79@t) af2f75@stx)))) (begin (hashtable-set! af2c34@scheme-stx-hashtable af2f71@sym af2f77@stx) af2f77@stx))))))) (set! af4746@af2c36@scheme-stx af2c36@scheme-stx) (set! af2c38@lexical-var car) (set! af4747@af2c38@lexical-var af2c38@lexical-var) (set! af2c3a@lexical-mutable? cdr) (set! af4748@af2c3a@lexical-mutable? af2c3a@lexical-mutable?) (set! af2c3c@set-lexical-mutable! set-cdr!) (set! af4749@af2c3c@set-lexical-mutable! af2c3c@set-lexical-mutable!) (set! af2c3e@add-lexical (lambda (af2f81@lab af2f82@lex af2f83@r) (cons (cons* af2f81@lab 'lexical af2f82@lex '#f) af2f83@r))) (set! af474a@af2c3e@add-lexical af2c3e@add-lexical) (set! af2c40@add-lexicals (lambda (af2f87@lab* af2f88@lex* af2f89@r) (if (null? af2f87@lab*) af2f89@r (af2c40@add-lexicals (cdr af2f87@lab*) (cdr af2f88@lex*) (af2c3e@add-lexical (car af2f87@lab*) (car af2f88@lex*) af2f89@r))))) (set! af474b@af2c40@add-lexicals af2c40@add-lexicals) (set! af2c42@letrec-helper (lambda (af2f8d@e af2f8e@r af2f8f@mr af2f90@build) (let ((af2f95@t af2f8d@e)) (let ((af2f97@ls/false (af2cae@syntax-dispatch af2f95@t '(_ #(each (any any)) any . each-any)))) (if af2f97@ls/false (apply (lambda (af2f99@lhs* af2f9a@rhs* af2f9b@b af2f9c@b*) (if (not (af2aaf@valid-bound-ids? af2f99@lhs*)) (af2c68@invalid-fmls-error af2f8d@e af2f99@lhs*) (let ((af2fa1@lex* (map af2a2f@gen-lexical af2f99@lhs*)) (af2fa2@lab* (map af2a33@gen-label af2f99@lhs*))) (let ((af2fa5@rib (af2a67@make-full-rib af2f99@lhs* af2fa2@lab*)) (af2fa6@r (af2c40@add-lexicals af2fa2@lab* af2fa1@lex* af2f8e@r))) (let ((af2fa9@body (af2ce6@chi-internal (af2a93@add-subst af2fa5@rib (cons af2f9b@b af2f9c@b*)) af2fa6@r af2f8f@mr)) (af2faa@rhs* (af2ccc@chi-expr* (map (lambda (af2fad@x) (af2a93@add-subst af2fa5@rib af2fad@x)) af2f9a@rhs*) af2fa6@r af2f8f@mr))) (af2f90@build '#f af2fa1@lex* af2faa@rhs* af2fa9@body)))))) af2f97@ls/false) (af2d8e@syntax-violation '#f '"invalid syntax" af2f95@t)))))) (set! af474c@af2c42@letrec-helper af2c42@letrec-helper) (set! af2c44@let-transformer (lambda (af2faf@e af2fb0@r af2fb1@mr) (let ((af2fb5@t af2faf@e)) (let ((af2fb7@ls/false (af2cae@syntax-dispatch af2fb5@t '(_ #(each (any any)) any . each-any)))) (if af2fb7@ls/false (apply (lambda (af2fb9@lhs* af2fba@rhs* af2fbb@b af2fbc@b*) (if (not (af2aaf@valid-bound-ids? af2fb9@lhs*)) (af2c68@invalid-fmls-error af2faf@e af2fb9@lhs*) (let ((af2fc1@lex* (map af2a2f@gen-lexical af2fb9@lhs*)) (af2fc2@lab* (map af2a33@gen-label af2fb9@lhs*)) (af2fc3@rhs* (af2ccc@chi-expr* af2fba@rhs* af2fb0@r af2fb1@mr))) (let ((af2fc7@rib (af2a67@make-full-rib af2fb9@lhs* af2fc2@lab*)) (af2fc8@r (af2c40@add-lexicals af2fc2@lab* af2fc1@lex* af2fb0@r))) (let ((af2fcb@body (af2ce6@chi-internal (af2a93@add-subst af2fc7@rib (cons af2fbb@b af2fbc@b*)) af2fc8@r af2fb1@mr))) (af2a0f@af296c@build-let '#f af2fc1@lex* af2fc3@rhs* af2fcb@body)))))) af2fb7@ls/false) (let ((af2fcd@t af2fb5@t)) (let ((af2fcf@ls/false (af2cae@syntax-dispatch af2fcd@t '(_ any #(each (any any)) any . each-any)))) (if af2fcf@ls/false (apply (lambda (af2fd1@loop af2fd2@lhs* af2fd3@rhs* af2fd4@b af2fd5@b*) (if (not (af2aaf@valid-bound-ids? af2fd2@lhs*)) (af2c68@invalid-fmls-error af2faf@e af2fd2@lhs*) (let ((af2fdb@lex* (map af2a2f@gen-lexical af2fd2@lhs*)) (af2fdc@lab* (map af2a33@gen-label af2fd2@lhs*)) (af2fdd@rhs* (af2ccc@chi-expr* af2fd3@rhs* af2fb0@r af2fb1@mr)) (af2fde@loop-lex (af2a2f@gen-lexical af2fd1@loop)) (af2fdf@loop-lab (af2a33@gen-label af2fd1@loop))) (let ((af2fe5@rib (af2a67@make-full-rib (cons af2fd1@loop af2fd2@lhs*) (cons af2fdf@loop-lab af2fdc@lab*))) (af2fe6@r (af2c40@add-lexicals (cons af2fdf@loop-lab af2fdc@lab*) (cons af2fde@loop-lex af2fdb@lex*) af2fb0@r))) (let ((af2fe9@body (af2ce6@chi-internal (af2a93@add-subst af2fe5@rib (cons af2fd4@b af2fd5@b*)) af2fe6@r af2fb1@mr))) (af2a10@af296e@build-named-let '#f af2fde@loop-lex af2fdb@lex* af2fdd@rhs* af2fe9@body)))))) af2fcf@ls/false) (af2d8e@syntax-violation '#f '"invalid syntax" af2fcd@t))))))))) (set! af474d@af2c44@let-transformer af2c44@let-transformer) (set! af2c46@letrec-transformer (lambda (af2feb@e af2fec@r af2fed@mr) (af2c42@letrec-helper af2feb@e af2fec@r af2fed@mr af2a0e@af296a@build-letrec))) (set! af474e@af2c46@letrec-transformer af2c46@letrec-transformer) (set! af2c48@letrec*-transformer (lambda (af2ff1@e af2ff2@r af2ff3@mr) (af2c42@letrec-helper af2ff1@e af2ff2@r af2ff3@mr af2a11@af2970@build-letrec*))) (set! af474f@af2c48@letrec*-transformer af2c48@letrec*-transformer) (set! af2c4a@fluid-let-syntax-transformer (lambda (af2ff7@e af2ff8@r af2ff9@mr) (let ((af2ffe@lookup '#f)) (begin (set! af2ffe@lookup (lambda (af3011@x) (or (af2abd@id->label af3011@x) (af2d8e@syntax-violation '#f '"unbound identifier" af2ff7@e af3011@x)))) (let ((af2fff@t af2ff7@e)) (let ((af3001@ls/false (af2cae@syntax-dispatch af2fff@t '(_ #(each (any any)) any . each-any)))) (if af3001@ls/false (apply (lambda (af3003@lhs* af3004@rhs* af3005@b af3006@b*) (if (not (af2aaf@valid-bound-ids? af3003@lhs*)) (af2c68@invalid-fmls-error af2ff7@e af3003@lhs*) (let ((af300b@lab* (map af2ffe@lookup af3003@lhs*)) (af300c@rhs* (map (lambda (af300f@x) (af2adf@make-eval-transformer (af2d08@expand-transformer af300f@x af2ff9@mr))) af3004@rhs*))) (af2ce6@chi-internal (cons af3005@b af3006@b*) (append (map cons af300b@lab* af300c@rhs*) af2ff8@r) (append (map cons af300b@lab* af300c@rhs*) af2ff9@mr))))) af3001@ls/false) (af2d8e@syntax-violation '#f '"invalid syntax" af2fff@t)))))))) (set! af4750@af2c4a@fluid-let-syntax-transformer af2c4a@fluid-let-syntax-transformer) (set! af2c4c@type-descriptor-transformer (lambda (af3013@e af3014@r af3015@mr) (let ((af3019@t af3013@e)) (let ((af301b@ls/false (af2cae@syntax-dispatch af3019@t '(_ any)))) (if (and af301b@ls/false (apply (lambda (af301d@id) (af2aa7@id? af301d@id)) af301b@ls/false)) (apply (lambda (af301f@id) (let ((af3021@lab (af2abd@id->label af301f@id))) (let ((af3023@b (af2abf@label->binding af3021@lab af3014@r))) (let ((af3025@type (af2ac3@binding-type af3023@b))) (begin (if (not af3021@lab) (af2ac7@raise-unbound-error af301f@id) (void)) (if (not (and (eq? af3025@type '$rtd) (not (list? (af2ac5@binding-value af3023@b))))) (af2d8e@syntax-violation '#f '"not a record type" af3013@e) (void)) (list 'quote (af2ac5@binding-value af3023@b))))))) af301b@ls/false) (af2d8e@syntax-violation '#f '"invalid syntax" af3019@t)))))) (set! af4751@af2c4c@type-descriptor-transformer af2c4c@type-descriptor-transformer) (set! af2c4e@record-type-descriptor-transformer (lambda (af3027@e af3028@r af3029@mr) (let ((af302d@t af3027@e)) (let ((af302f@ls/false (af2cae@syntax-dispatch af302d@t '(_ any)))) (if (and af302f@ls/false (apply (lambda (af3031@id) (af2aa7@id? af3031@id)) af302f@ls/false)) (apply (lambda (af3033@id) (let ((af3035@lab (af2abd@id->label af3033@id))) (let ((af3037@b (af2abf@label->binding af3035@lab af3028@r))) (let ((af3039@type (af2ac3@binding-type af3037@b))) (begin (if (not af3035@lab) (af2ac7@raise-unbound-error af3033@id) (void)) (if (not (and (eq? af3039@type '$rtd) (list? (af2ac5@binding-value af3037@b)))) (af2d8e@syntax-violation '#f '"not a record type" af3027@e) (void)) (af2cd0@chi-expr (car (af2ac5@binding-value af3037@b)) af3028@r af3029@mr)))))) af302f@ls/false) (af2d8e@syntax-violation '#f '"invalid syntax" af302d@t)))))) (set! af4752@af2c4e@record-type-descriptor-transformer af2c4e@record-type-descriptor-transformer) (set! af2c50@record-constructor-descriptor-transformer (lambda (af303b@e af303c@r af303d@mr) (let ((af3041@t af303b@e)) (let ((af3043@ls/false (af2cae@syntax-dispatch af3041@t '(_ any)))) (if (and af3043@ls/false (apply (lambda (af3045@id) (af2aa7@id? af3045@id)) af3043@ls/false)) (apply (lambda (af3047@id) (let ((af3049@lab (af2abd@id->label af3047@id))) (let ((af304b@b (af2abf@label->binding af3049@lab af303c@r))) (let ((af304d@type (af2ac3@binding-type af304b@b))) (begin (if (not af3049@lab) (af2ac7@raise-unbound-error af3047@id) (void)) (if (not (and (eq? af304d@type '$rtd) (list? (af2ac5@binding-value af304b@b)))) (af2d8e@syntax-violation '#f '"invalid type" af303b@e) (void)) (af2cd0@chi-expr (cadr (af2ac5@binding-value af304b@b)) af303c@r af303d@mr)))))) af3043@ls/false) (af2d8e@syntax-violation '#f '"invalid syntax" af3041@t)))))) (set! af4753@af2c50@record-constructor-descriptor-transformer af2c50@record-constructor-descriptor-transformer) (set! af2c52@when-macro (lambda (af304f@e) (let ((af3051@t af304f@e)) (let ((af3053@ls/false (af2cae@syntax-dispatch af3051@t '(_ any any . each-any)))) (if af3053@ls/false (apply (lambda (af3055@test af3056@e af3057@e*) (af2c64@bless (list 'if af3055@test (cons 'begin (cons af3056@e af3057@e*))))) af3053@ls/false) (af2d8e@syntax-violation '#f '"invalid syntax" af3051@t)))))) (set! af4754@af2c52@when-macro af2c52@when-macro) (set! af2c54@unless-macro (lambda (af305b@e) (let ((af305d@t af305b@e)) (let ((af305f@ls/false (af2cae@syntax-dispatch af305d@t '(_ any any . each-any)))) (if af305f@ls/false (apply (lambda (af3061@test af3062@e af3063@e*) (af2c64@bless (list 'if (list 'not af3061@test) (cons 'begin (cons af3062@e af3063@e*))))) af305f@ls/false) (af2d8e@syntax-violation '#f '"invalid syntax" af305d@t)))))) (set! af4755@af2c54@unless-macro af2c54@unless-macro) (set! af2c56@if-transformer (lambda (af3067@e af3068@r af3069@mr) (let ((af306d@t af3067@e)) (let ((af306f@ls/false (af2cae@syntax-dispatch af306d@t '(_ any any any)))) (if af306f@ls/false (apply (lambda (af3071@e0 af3072@e1 af3073@e2) (list 'if (af2cd0@chi-expr af3071@e0 af3068@r af3069@mr) (af2cd0@chi-expr af3072@e1 af3068@r af3069@mr) (af2cd0@chi-expr af3073@e2 af3068@r af3069@mr))) af306f@ls/false) (let ((af3077@t af306d@t)) (let ((af3079@ls/false (af2cae@syntax-dispatch af3077@t '(_ any any)))) (if af3079@ls/false (apply (lambda (af307b@e0 af307c@e1) (list 'if (af2cd0@chi-expr af307b@e0 af3068@r af3069@mr) (af2cd0@chi-expr af307c@e1 af3068@r af3069@mr) (af2a0d@af2968@build-void))) af3079@ls/false) (af2d8e@syntax-violation '#f '"invalid syntax" af3077@t))))))))) (set! af4756@af2c56@if-transformer af2c56@if-transformer) (set! af2c58@and-transformer (lambda (af307f@e af3080@r af3081@mr) (let ((af3085@t af307f@e)) (let ((af3087@ls/false (af2cae@syntax-dispatch af3085@t '(_ . each-any)))) (if af3087@ls/false (apply (lambda (af3089@e*) (cons 'and (af2ccc@chi-expr* af3089@e* af3080@r af3081@mr))) af3087@ls/false) (af2d8e@syntax-violation '#f '"invalid syntax" af3085@t)))))) (set! af4757@af2c58@and-transformer af2c58@and-transformer) (set! af2c5a@or-transformer (lambda (af308b@e af308c@r af308d@mr) (let ((af3091@t af308b@e)) (let ((af3093@ls/false (af2cae@syntax-dispatch af3091@t '(_ . each-any)))) (if af3093@ls/false (apply (lambda (af3095@e*) (cons 'or (af2ccc@chi-expr* af3095@e* af308c@r af308d@mr))) af3093@ls/false) (af2d8e@syntax-violation '#f '"invalid syntax" af3091@t)))))) (set! af4758@af2c5a@or-transformer af2c5a@or-transformer) (set! af2c5c@case-macro (lambda (af3097@e) (let ((af309a@build-last '#f) (af309c@build-one '#f)) (begin (set! af309a@build-last (lambda (af30c1@cls) (let ((af30c3@t af30c1@cls)) (let ((af30c5@ls/false (af2cae@syntax-dispatch af30c3@t '(#(scheme-id else) any . each-any)))) (if af30c5@ls/false (apply (lambda (af30c7@e af30c8@e*) (cons 'begin (cons af30c7@e af30c8@e*))) af30c5@ls/false) (let ((af30cb@t af30c3@t)) (let ((af30cd@ls/false (af2cae@syntax-dispatch af30cb@t '_))) (if af30cd@ls/false (apply (lambda () (af309c@build-one af30c1@cls '(if #f #f))) af30cd@ls/false) (af2d8e@syntax-violation '#f '"invalid syntax" af30cb@t))))))))) (set! af309c@build-one (lambda (af30b3@cls af30b4@k) (let ((af30b7@t af30b3@cls)) (let ((af30b9@ls/false (af2cae@syntax-dispatch af30b7@t '(each-any any . each-any)))) (if af30b9@ls/false (apply (lambda (af30bb@d* af30bc@e af30bd@e*) (list 'if (list 'memv 't (list 'quote af30bb@d*)) (cons 'begin (cons af30bc@e af30bd@e*)) af30b4@k)) af30b9@ls/false) (af2d8e@syntax-violation '#f '"invalid syntax" af30b7@t)))))) (let ((af309d@t af3097@e)) (let ((af309f@ls/false (af2cae@syntax-dispatch af309d@t '(_ any)))) (if af309f@ls/false (apply (lambda (af30a1@expr) (af2c64@bless (cons 'let (cons (list (list 't af30a1@expr)) '((if #f #f)))))) af309f@ls/false) (let ((af30a3@t af309d@t)) (let ((af30a5@ls/false (af2cae@syntax-dispatch af30a3@t '(_ any any . each-any)))) (if af30a5@ls/false (apply (lambda (af30a7@expr af30a8@cls af30a9@cls*) (af2c64@bless (list 'let (list (list 't af30a7@expr)) (let af30b1@f ((af30ad@cls af30a8@cls) (af30ae@cls* af30a9@cls*)) (if (null? af30ae@cls*) (af309a@build-last af30ad@cls) (af309c@build-one af30ad@cls (af30b1@f (car af30ae@cls*) (cdr af30ae@cls*)))))))) af30a5@ls/false) (af2d8e@syntax-violation '#f '"invalid syntax" af30a3@t))))))))))) (set! af4759@af2c5c@case-macro af2c5c@case-macro) (set! af2c5e@quote-transformer (lambda (af30cf@e af30d0@r af30d1@mr) (let ((af30d5@t af30cf@e)) (let ((af30d7@ls/false (af2cae@syntax-dispatch af30d5@t '(_ any)))) (if af30d7@ls/false (apply (lambda (af30d9@datum) (list 'quote (af2abb@stx->datum af30d9@datum))) af30d7@ls/false) (af2d8e@syntax-violation '#f '"invalid syntax" af30d5@t)))))) (set! af475a@af2c5e@quote-transformer af2c5e@quote-transformer) (set! af2c60@case-lambda-transformer (lambda (af30db@e af30dc@r af30dd@mr) (let ((af30e1@t af30db@e)) (let ((af30e3@ls/false (af2cae@syntax-dispatch af30e1@t '(_ . #(each (any any . each-any)))))) (if af30e3@ls/false (apply (lambda (af30e5@fmls* af30e6@b* af30e7@b**) (call-with-values (lambda () (af2cd8@chi-lambda-clause* af30db@e af30e5@fmls* (map cons af30e6@b* af30e7@b**) af30dc@r af30dd@mr)) (lambda (af30ef@af30ec af30f0@af30ee) (let ((af30f3@body* af30f0@af30ee) (af30f4@fmls* af30ef@af30ec)) (af2a0b@af2938@build-case-lambda '#f af30f4@fmls* af30f3@body*))))) af30e3@ls/false) (af2d8e@syntax-violation '#f '"invalid syntax" af30e1@t)))))) (set! af475b@af2c60@case-lambda-transformer af2c60@case-lambda-transformer) (set! af2c62@lambda-transformer (lambda (af30f7@e af30f8@r af30f9@mr) (let ((af30fd@t af30f7@e)) (let ((af30ff@ls/false (af2cae@syntax-dispatch af30fd@t '(_ any any . each-any)))) (if af30ff@ls/false (apply (lambda (af3101@fmls af3102@b af3103@b*) (call-with-values (lambda () (af2cd6@chi-lambda-clause af30f7@e af3101@fmls (cons af3102@b af3103@b*) af30f8@r af30f9@mr)) (lambda (af310b@af3108 af310c@af310a) (let ((af310f@body af310c@af310a) (af3110@fmls af310b@af3108)) (af2a0a@af2936@build-lambda '#f af3110@fmls af310f@body))))) af30ff@ls/false) (af2d8e@syntax-violation '#f '"invalid syntax" af30fd@t)))))) (set! af475c@af2c62@lambda-transformer af2c62@lambda-transformer) (set! af2c64@bless (lambda (af3113@x) (af2a8f@mkstx (let af3117@f ((af3115@x af3113@x)) (if (af2a73@stx? af3115@x) af3115@x (if (pair? af3115@x) (cons (af3117@f (car af3115@x)) (af3117@f (cdr af3115@x))) (if (symbol? af3115@x) (af2c36@scheme-stx af3115@x) (if (vector? af3115@x) (vector-map af3117@f af3115@x) af3115@x))))) '() '() '()))) (set! af475d@af2c64@bless af2c64@bless) (set! af2c66@with-syntax-macro (lambda (af3119@e) (let ((af311b@t af3119@e)) (let ((af311d@ls/false (af2cae@syntax-dispatch af311b@t '(_ #(each (any any)) any . each-any)))) (if af311d@ls/false (apply (lambda (af311f@pat* af3120@expr* af3121@b af3122@b*) (let ((af3127@idn* (let af312b@f ((af3129@pat* af311f@pat*)) (if (null? af3129@pat*) '() (call-with-values (lambda () (af2cac@convert-pattern (car af3129@pat*) '())) (lambda (af3131@af312e af3132@af3130) (let ((af3135@idn* af3132@af3130) (af3136@pat af3131@af312e)) (append af3135@idn* (af312b@f (cdr af3129@pat*)))))))))) (begin (af2cd4@verify-formals (map car af3127@idn*) af3119@e) (let ((af3139@t* (af2d7c@generate-temporaries af3120@expr*))) (af2c64@bless (list 'let (map list af3139@t* af3120@expr*) (let af313f@f ((af313b@pat* af311f@pat*) (af313c@t* af3139@t*)) (if (null? af313b@pat*) (cons 'begin (cons '#f (cons af3121@b af3122@b*))) (list 'syntax-case (car af313c@t*) '() (list (car af313b@pat*) (af313f@f (cdr af313b@pat*) (cdr af313c@t*))) (list '_ (list 'assertion-violation ''with-syntax '"pattern does not match value" (list 'quote (car af313b@pat*)) (car af313c@t*)))))))))))) af311d@ls/false) (af2d8e@syntax-violation '#f '"invalid syntax" af311b@t)))))) (set! af475e@af2c66@with-syntax-macro af2c66@with-syntax-macro) (set! af2c68@invalid-fmls-error (lambda (af3141@stx af3142@fmls) (let ((af3145@t af3142@fmls)) (let ((af3147@ls/false (af2cae@syntax-dispatch af3145@t '#(each+ any () any)))) (if af3147@ls/false (apply (lambda (af3149@id* af314a@last) (let af314f@f ((af314d@id* (if (af2aa7@id? af314a@last) (cons af314a@last af3149@id*) (if (af2a9d@syntax-null? af314a@last) af3149@id* (af2d8e@syntax-violation '#f '"not an identifier" af3141@stx af314a@last))))) (if (null? af314d@id*) (values) (if (not (af2aa7@id? (car af314d@id*))) (af2d8e@syntax-violation '#f '"not an identifier" af3141@stx (car af314d@id*)) (begin (af314f@f (cdr af314d@id*)) (if (af2ab3@bound-id-member? (car af314d@id*) (cdr af314d@id*)) (af2d8e@syntax-violation '#f '"duplicate binding" af3141@stx (car af314d@id*)) (void))))))) af3147@ls/false) (let ((af3151@t af3145@t)) (let ((af3153@ls/false (af2cae@syntax-dispatch af3151@t '_))) (if af3153@ls/false (apply (lambda () (af2d8e@syntax-violation '#f '"malformed binding form" af3141@stx af3142@fmls)) af3153@ls/false) (af2d8e@syntax-violation '#f '"invalid syntax" af3151@t))))))))) (set! af475f@af2c68@invalid-fmls-error af2c68@invalid-fmls-error) (set! af2c6a@let-macro (lambda (af3155@stx) (let ((af3157@t af3155@stx)) (let ((af3159@ls/false (af2cae@syntax-dispatch af3157@t '(_ #(each (any any)) any . each-any)))) (if af3159@ls/false (apply (lambda (af315b@lhs* af315c@rhs* af315d@b af315e@b*) (if (af2aaf@valid-bound-ids? af315b@lhs*) (af2c64@bless (cons (cons 'lambda (cons af315b@lhs* (cons af315d@b af315e@b*))) af315c@rhs*)) (af2c68@invalid-fmls-error af3155@stx af315b@lhs*))) af3159@ls/false) (let ((af3163@t af3157@t)) (let ((af3165@ls/false (af2cae@syntax-dispatch af3163@t '(_ any #(each (any any)) any . each-any)))) (if (and af3165@ls/false (apply (lambda (af3167@f af3168@lhs* af3169@rhs* af316a@b af316b@b*) (af2aa7@id? af3167@f)) af3165@ls/false)) (apply (lambda (af3171@f af3172@lhs* af3173@rhs* af3174@b af3175@b*) (if (af2aaf@valid-bound-ids? af3172@lhs*) (af2c64@bless (cons (list 'letrec (list (list af3171@f (cons 'lambda (cons af3172@lhs* (cons af3174@b af3175@b*))))) af3171@f) af3173@rhs*)) (af2c68@invalid-fmls-error af3155@stx af3172@lhs*))) af3165@ls/false) (af2d8e@syntax-violation '#f '"invalid syntax" af3163@t))))))))) (set! af4760@af2c6a@let-macro af2c6a@let-macro) (set! af2c6c@let-values-macro (lambda (af317b@stx) (let ((af317e@rename '#f) (af3180@rename* '#f)) (begin (set! af317e@rename (lambda (af31e3@x af31e4@old* af31e5@new*) (begin (if (not (af2aa7@id? af31e3@x)) (af2d8e@syntax-violation '#f '"not an indentifier" af317b@stx af31e3@x) (void)) (if (af2ab3@bound-id-member? af31e3@x af31e4@old*) (af2d8e@syntax-violation '#f '"duplicate binding" af317b@stx af31e3@x) (void)) (let ((af31e9@y (gensym (af2d94@syntax->datum af31e3@x)))) (values af31e9@y (cons af31e3@x af31e4@old*) (cons af31e9@y af31e5@new*)))))) (set! af3180@rename* (lambda (af31d1@x* af31d2@old* af31d3@new*) (if (null? af31d1@x*) (values '() af31d2@old* af31d3@new*) (call-with-values (lambda () (af317e@rename (car af31d1@x*) af31d2@old* af31d3@new*)) (lambda (af31d7@x af31d8@old* af31d9@new*) (call-with-values (lambda () (af3180@rename* (cdr af31d1@x*) af31d8@old* af31d9@new*)) (lambda (af31dd@x* af31de@old* af31df@new*) (values (cons af31d7@x af31dd@x*) af31de@old* af31df@new*)))))))) (let ((af3181@t af317b@stx)) (let ((af3183@ls/false (af2cae@syntax-dispatch af3181@t '(_ () any . each-any)))) (if af3183@ls/false (apply (lambda (af3185@b af3186@b*) (cons* (af2c64@bless 'let) '() af3185@b af3186@b*)) af3183@ls/false) (let ((af3189@t af3181@t)) (let ((af318b@ls/false (af2cae@syntax-dispatch af3189@t '(_ #(each (any any)) any . each-any)))) (if af318b@ls/false (apply (lambda (af318d@lhs* af318e@rhs* af318f@b af3190@b*) (af2c64@bless (let af319d@f ((af3195@lhs* af318d@lhs*) (af3196@rhs* af318e@rhs*) (af3197@old* '()) (af3198@new* '())) (if (null? af3195@lhs*) (cons 'let (cons (map list af3197@old* af3198@new*) (cons af318f@b af3190@b*))) (let ((af319f@t (car af3195@lhs*))) (let ((af31a1@ls/false (af2cae@syntax-dispatch af319f@t 'each-any))) (if af31a1@ls/false (apply (lambda (af31a3@x*) (call-with-values (lambda () (af3180@rename* af31a3@x* af3197@old* af3198@new*)) (lambda (af31ab@af31a6 af31ac@af31a8 af31ad@af31aa) (let ((af31b1@new* af31ad@af31aa) (af31b2@old* af31ac@af31a8) (af31b3@y* af31ab@af31a6)) (list 'call-with-values (list 'lambda '() (car af3196@rhs*)) (list 'lambda af31b3@y* (af319d@f (cdr af3195@lhs*) (cdr af3196@rhs*) af31b2@old* af31b1@new*))))))) af31a1@ls/false) (let ((af31b7@t af319f@t)) (let ((af31b9@ls/false (af2cae@syntax-dispatch af31b7@t '#(each+ any () any)))) (if af31b9@ls/false (apply (lambda (af31bb@x* af31bc@x) (call-with-values (lambda () (af317e@rename af31bc@x af3197@old* af3198@new*)) (lambda (af31bf@y af31c0@old* af31c1@new*) (call-with-values (lambda () (af3180@rename* af31bb@x* af31c0@old* af31c1@new*)) (lambda (af31c5@y* af31c6@old* af31c7@new*) (list 'call-with-values (list 'lambda '() (car af3196@rhs*)) (list 'lambda (append af31c5@y* af31bf@y) (af319d@f (cdr af3195@lhs*) (cdr af3196@rhs*) af31c6@old* af31c7@new*)))))))) af31b9@ls/false) (let ((af31cb@t af31b7@t)) (let ((af31cd@ls/false (af2cae@syntax-dispatch af31cb@t 'any))) (if af31cd@ls/false (apply (lambda (af31cf@others) (af2d8e@syntax-violation '#f '"malformed bindings" af317b@stx af31cf@others)) af31cd@ls/false) (af2d8e@syntax-violation '#f '"invalid syntax" af31cb@t)))))))))))))) af318b@ls/false) (af2d8e@syntax-violation '#f '"invalid syntax" af3189@t))))))))))) (set! af4761@af2c6c@let-values-macro af2c6c@let-values-macro) (set! af2c6e@let*-values-macro (lambda (af31eb@stx) (let ((af31ee@check '#f)) (begin (set! af31ee@check (lambda (af321d@x*) (if (not (null? af321d@x*)) (let ((af321f@x (car af321d@x*))) (begin (if (not (af2aa7@id? af321f@x)) (af2d8e@syntax-violation '#f '"not an identifier" af31eb@stx af321f@x) (void)) (af31ee@check (cdr af321d@x*)) (if (af2ab3@bound-id-member? af321f@x (cdr af321d@x*)) (af2d8e@syntax-violation '#f '"duplicate identifier" af31eb@stx af321f@x) (void)))) (void)))) (let ((af31ef@t af31eb@stx)) (let ((af31f1@ls/false (af2cae@syntax-dispatch af31ef@t '(_ () any . each-any)))) (if af31f1@ls/false (apply (lambda (af31f3@b af31f4@b*) (cons* (af2c64@bless 'let) '() af31f3@b af31f4@b*)) af31f1@ls/false) (let ((af31f7@t af31ef@t)) (let ((af31f9@ls/false (af2cae@syntax-dispatch af31f7@t '(_ #(each (any any)) any . each-any)))) (if af31f9@ls/false (apply (lambda (af31fb@lhs* af31fc@rhs* af31fd@b af31fe@b*) (af2c64@bless (let af3207@f ((af3203@lhs* af31fb@lhs*) (af3204@rhs* af31fc@rhs*)) (if (null? af3203@lhs*) (cons 'begin (cons af31fd@b af31fe@b*)) (let ((af3209@t (car af3203@lhs*))) (let ((af320b@ls/false (af2cae@syntax-dispatch af3209@t 'each-any))) (if af320b@ls/false (apply (lambda (af320d@x*) (begin (af31ee@check af320d@x*) (list 'call-with-values (list 'lambda '() (car af3204@rhs*)) (list 'lambda af320d@x* (af3207@f (cdr af3203@lhs*) (cdr af3204@rhs*)))))) af320b@ls/false) (let ((af320f@t af3209@t)) (let ((af3211@ls/false (af2cae@syntax-dispatch af320f@t '#(each+ any () any)))) (if af3211@ls/false (apply (lambda (af3213@x* af3214@x) (begin (af31ee@check (cons af3214@x af3213@x*)) (list 'call-with-values (list 'lambda '() (car af3204@rhs*)) (list 'lambda (append af3213@x* af3214@x) (af3207@f (cdr af3203@lhs*) (cdr af3204@rhs*)))))) af3211@ls/false) (let ((af3217@t af320f@t)) (let ((af3219@ls/false (af2cae@syntax-dispatch af3217@t 'any))) (if af3219@ls/false (apply (lambda (af321b@others) (af2d8e@syntax-violation '#f '"malformed bindings" af31eb@stx af321b@others)) af3219@ls/false) (af2d8e@syntax-violation '#f '"invalid syntax" af3217@t)))))))))))))) af31f9@ls/false) (af2d8e@syntax-violation '#f '"invalid syntax" af31f7@t))))))))))) (set! af4762@af2c6e@let*-values-macro af2c6e@let*-values-macro) (set! af2c70@trace-lambda-macro (lambda (af3221@stx) (let ((af3223@t af3221@stx)) (let ((af3225@ls/false (af2cae@syntax-dispatch af3223@t '(_ any each-any any . each-any)))) (if af3225@ls/false (apply (lambda (af3227@who af3228@fmls af3229@b af322a@b*) (if (af2aaf@valid-bound-ids? af3228@fmls) (af2c64@bless (list 'make-traced-procedure (list 'quote af3227@who) (cons 'lambda (cons af3228@fmls (cons af3229@b af322a@b*))))) (af2c68@invalid-fmls-error af3221@stx af3228@fmls))) af3225@ls/false) (let ((af322f@t af3223@t)) (let ((af3231@ls/false (af2cae@syntax-dispatch af322f@t '(_ any #(each+ any () any) any . each-any)))) (if af3231@ls/false (apply (lambda (af3233@who af3234@fmls af3235@last af3236@b af3237@b*) (if (af2aaf@valid-bound-ids? (cons af3235@last af3234@fmls)) (af2c64@bless (list 'make-traced-procedure (list 'quote af3233@who) (cons 'lambda (cons (append af3234@fmls af3235@last) (cons af3236@b af3237@b*))))) (af2c68@invalid-fmls-error af3221@stx (append af3234@fmls af3235@last)))) af3231@ls/false) (af2d8e@syntax-violation '#f '"invalid syntax" af322f@t))))))))) (set! af4763@af2c70@trace-lambda-macro af2c70@trace-lambda-macro) (set! af2c72@trace-define-macro (lambda (af323d@stx) (let ((af323f@t af323d@stx)) (let ((af3241@ls/false (af2cae@syntax-dispatch af323f@t '(_ (any . each-any) any . each-any)))) (if af3241@ls/false (apply (lambda (af3243@who af3244@fmls af3245@b af3246@b*) (if (af2aaf@valid-bound-ids? af3244@fmls) (af2c64@bless (list 'define af3243@who (list 'make-traced-procedure (list 'quote af3243@who) (cons 'lambda (cons af3244@fmls (cons af3245@b af3246@b*)))))) (af2c68@invalid-fmls-error af323d@stx af3244@fmls))) af3241@ls/false) (let ((af324b@t af323f@t)) (let ((af324d@ls/false (af2cae@syntax-dispatch af324b@t '(_ (any . #(each+ any () any)) any . each-any)))) (if af324d@ls/false (apply (lambda (af324f@who af3250@fmls af3251@last af3252@b af3253@b*) (if (af2aaf@valid-bound-ids? (cons af3251@last af3250@fmls)) (af2c64@bless (list 'define af324f@who (list 'make-traced-procedure (list 'quote af324f@who) (cons 'lambda (cons (append af3250@fmls af3251@last) (cons af3252@b af3253@b*)))))) (af2c68@invalid-fmls-error af323d@stx (append af3250@fmls af3251@last)))) af324d@ls/false) (let ((af3259@t af324b@t)) (let ((af325b@ls/false (af2cae@syntax-dispatch af3259@t '(_ any any)))) (if af325b@ls/false (apply (lambda (af325d@who af325e@expr) (if (af2aa7@id? af325d@who) (af2c64@bless (list 'define af325d@who (list 'let (list (list 'v af325e@expr)) (cons 'if (cons '(procedure? v) (cons (cons 'make-traced-procedure (cons (list 'quote af325d@who) '(v))) '((assertion-violation 'trace-define "not a procedure" v)))))))) (af2d8e@syntax-violation '#f '"invalid name" af323d@stx))) af325b@ls/false) (af2d8e@syntax-violation '#f '"invalid syntax" af3259@t)))))))))))) (set! af4764@af2c72@trace-define-macro af2c72@trace-define-macro) (set! af2c74@trace-define-syntax-macro (lambda (af3261@stx) (let ((af3263@t af3261@stx)) (let ((af3265@ls/false (af2cae@syntax-dispatch af3263@t '(_ any any)))) (if af3265@ls/false (apply (lambda (af3267@who af3268@expr) (if (af2aa7@id? af3267@who) (af2c64@bless (list 'define-syntax af3267@who (list 'make-traced-macro (list 'quote af3267@who) af3268@expr))) (af2d8e@syntax-violation '#f '"invalid name" af3261@stx))) af3265@ls/false) (af2d8e@syntax-violation '#f '"invalid syntax" af3263@t)))))) (set! af4765@af2c74@trace-define-syntax-macro af2c74@trace-define-syntax-macro) (set! af2c76@trace-let/rec-syntax (lambda (af326b@who) (lambda (af326d@stx) (let ((af326f@t af326d@stx)) (let ((af3271@ls/false (af2cae@syntax-dispatch af326f@t '(_ #(each (any any)) any . each-any)))) (if af3271@ls/false (apply (lambda (af3273@lhs* af3274@rhs* af3275@b af3276@b*) (if (af2aaf@valid-bound-ids? af3273@lhs*) (let ((af327b@rhs* (map (lambda (af327d@lhs af327e@rhs) (list 'make-traced-macro (list 'quote af327d@lhs) af327e@rhs)) af3273@lhs* af3274@rhs*))) (af2c64@bless (cons af326b@who (cons (map list af3273@lhs* af327b@rhs*) (cons af3275@b af3276@b*))))) (af2c68@invalid-fmls-error af326d@stx af3273@lhs*))) af3271@ls/false) (af2d8e@syntax-violation '#f '"invalid syntax" af326f@t))))))) (set! af4766@af2c76@trace-let/rec-syntax af2c76@trace-let/rec-syntax) (set! af2c78@trace-let-syntax-macro (af2c76@trace-let/rec-syntax 'let-syntax)) (set! af4767@af2c78@trace-let-syntax-macro af2c78@trace-let-syntax-macro) (set! af2c7a@trace-letrec-syntax-macro (af2c76@trace-let/rec-syntax 'letrec-syntax)) (set! af4768@af2c7a@trace-letrec-syntax-macro af2c7a@trace-letrec-syntax-macro) (set! af2c7c@guard-macro (lambda (af3281@x) (let ((af3284@gen-clauses '#f)) (begin (set! af3284@gen-clauses (lambda (af329b@con af329c@outerk af329d@clause*) (let ((af32a2@f '#f) (af32a4@f* '#f)) (begin (set! af32a2@f (lambda (af32db@x af32dc@k) (let ((af32df@t af32db@x)) (let ((af32e1@ls/false (af2cae@syntax-dispatch af32df@t '(any #(scheme-id =>) any)))) (if af32e1@ls/false (apply (lambda (af32e3@e af32e4@p) (let ((af32e7@t (gensym))) (list 'let (list (list af32e7@t af32e3@e)) (list 'if af32e7@t (list af32e4@p af32e7@t) af32dc@k)))) af32e1@ls/false) (let ((af32e9@t af32df@t)) (let ((af32eb@ls/false (af2cae@syntax-dispatch af32e9@t '(any)))) (if af32eb@ls/false (apply (lambda (af32ed@e) (let ((af32ef@t (gensym))) (list 'let (list (list af32ef@t af32ed@e)) (list 'if af32ef@t af32ef@t af32dc@k)))) af32eb@ls/false) (let ((af32f1@t af32e9@t)) (let ((af32f3@ls/false (af2cae@syntax-dispatch af32f1@t '(any any . each-any)))) (if af32f3@ls/false (apply (lambda (af32f5@e af32f6@v af32f7@v*) (list 'if af32f5@e (cons 'begin (cons af32f6@v af32f7@v*)) af32dc@k)) af32f3@ls/false) (let ((af32fb@t af32f1@t)) (let ((af32fd@ls/false (af2cae@syntax-dispatch af32fb@t '_))) (if af32fd@ls/false (apply (lambda () (af2d8e@syntax-violation '#f '"invalid guard clause" af32db@x)) af32fd@ls/false) (af2d8e@syntax-violation '#f '"invalid syntax" af32fb@t))))))))))))))) (set! af32a4@f* (lambda (af32b1@x*) (let ((af32b3@t af32b1@x*)) (let ((af32b5@ls/false (af2cae@syntax-dispatch af32b3@t '()))) (if af32b5@ls/false (apply (lambda () (let ((af32b7@g (gensym))) (values (list af32b7@g (list 'lambda '() (list 'raise-continuable af329b@con))) af32b7@g))) af32b5@ls/false) (let ((af32b9@t af32b3@t)) (let ((af32bb@ls/false (af2cae@syntax-dispatch af32b9@t '((#(scheme-id else) any . each-any))))) (if af32bb@ls/false (apply (lambda (af32bd@e af32be@e*) (values (cons 'begin (cons af32bd@e af32be@e*)) '#f)) af32bb@ls/false) (let ((af32c1@t af32b9@t)) (let ((af32c3@ls/false (af2cae@syntax-dispatch af32c1@t '(any . any)))) (if af32c3@ls/false (apply (lambda (af32c5@cls af32c6@cls*) (call-with-values (lambda () (af32a4@f* af32c6@cls*)) (lambda (af32cd@af32ca af32ce@af32cc) (let ((af32d1@g af32ce@af32cc) (af32d2@e af32cd@af32ca)) (values (af32a2@f af32c5@cls af32d2@e) af32d1@g))))) af32c3@ls/false) (let ((af32d5@t af32c1@t)) (let ((af32d7@ls/false (af2cae@syntax-dispatch af32d5@t 'any))) (if af32d7@ls/false (apply (lambda (af32d9@others) (af2d8e@syntax-violation '#f '"invalid guard clause" af32d9@others)) af32d7@ls/false) (af2d8e@syntax-violation '#f '"invalid syntax" af32d5@t))))))))))))))) (call-with-values (lambda () (af32a4@f* af329d@clause*)) (lambda (af32a9@af32a6 af32aa@af32a8) (let ((af32ad@raisek af32aa@af32a8) (af32ae@code af32a9@af32a6)) (if af32ad@raisek (list (list 'call/cc (list 'lambda (list af32ad@raisek) (list af329c@outerk (list 'lambda '() af32ae@code))))) (list af329c@outerk (list 'lambda '() af32ae@code)))))))))) (let ((af3285@t af3281@x)) (let ((af3287@ls/false (af2cae@syntax-dispatch af3285@t '(_ (any . each-any) any . each-any)))) (if (and af3287@ls/false (apply (lambda (af3289@con af328a@clause* af328b@b af328c@b*) (af2aa7@id? af3289@con)) af3287@ls/false)) (apply (lambda (af3291@con af3292@clause* af3293@b af3294@b*) (let ((af3299@outerk (gensym))) (af2c64@bless (list (list 'call/cc (list 'lambda (list af3299@outerk) (list 'lambda '() (list 'with-exception-handler (list 'lambda (list af3291@con) (af3284@gen-clauses af3291@con af3299@outerk af3292@clause*)) (cons 'lambda (cons '() (cons af3293@b af3294@b*))))))))))) af3287@ls/false) (af2d8e@syntax-violation '#f '"invalid syntax" af3285@t)))))))) (set! af4769@af2c7c@guard-macro af2c7c@guard-macro) (set! af2c7e@define-enumeration-macro (lambda (af32ff@stx) (let ((af3302@set? '#f) (af3304@remove-dups '#f)) (begin (set! af3302@set? (lambda (af331b@x) (or (null? af331b@x) (and (not (memq (car af331b@x) (cdr af331b@x))) (af3302@set? (cdr af331b@x)))))) (set! af3304@remove-dups (lambda (af3319@ls) (if (null? af3319@ls) '() (cons (car af3319@ls) (af3304@remove-dups (remq (car af3319@ls) (cdr af3319@ls))))))) (let ((af3305@t af32ff@stx)) (let ((af3307@ls/false (af2cae@syntax-dispatch af3305@t '(_ any each-any any)))) (if (and af3307@ls/false (apply (lambda (af3309@name af330a@id* af330b@maker) (and (af2aa7@id? af3309@name) (af2aa7@id? af330b@maker) (for-all af2aa7@id? af330a@id*))) af3307@ls/false)) (apply (lambda (af330f@name af3310@id* af3311@maker) (let ((af3315@name* (af3304@remove-dups (af2d94@syntax->datum af3310@id*))) (af3316@mk (gensym))) (af2c64@bless (list 'begin (list 'define af3316@mk (list 'enum-set-constructor (list 'make-enumeration (list 'quote af3315@name*)))) (list 'define-syntax af330f@name (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n) '(identifier? (syntax n)) (list 'if (list 'memq '(syntax->datum (syntax n)) (list 'quote af3315@name*)) '(syntax 'n) (cons 'syntax-violation (cons (list 'quote af330f@name) '("not a member of set" x (syntax n))))))))) (list 'define-syntax af3311@maker (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n* ...) (list 'begin (cons 'for-each (cons (list 'lambda '(n) (list 'unless '(identifier? n) (cons 'syntax-violation (cons (list 'quote af3311@maker) '("non-identifier argument" x n)))) (list 'unless (list 'memq '(syntax->datum n) (list 'quote af3315@name*)) (cons 'syntax-violation (cons (list 'quote af3311@maker) '("not a member of set" x n))))) '((syntax (n* ...))))) (list 'syntax (cons af3316@mk '('(n* ...))))))))))))) af3307@ls/false) (af2d8e@syntax-violation '#f '"invalid syntax" af3305@t)))))))) (set! af476a@af2c7e@define-enumeration-macro af2c7e@define-enumeration-macro) (set! af2c80@time-macro (lambda (af331d@stx) (let ((af331f@t af331d@stx)) (let ((af3321@ls/false (af2cae@syntax-dispatch af331f@t '(_ any)))) (if af3321@ls/false (apply (lambda (af3323@expr) (af2c64@bless (cons 'let* (cons (cons '(start (time-usage)) (cons (list 'result (list (list 'lambda '() af3323@expr))) '((end (time-usage)) (used (map - end start)) (real (car used)) (user (cadr used)) (sys (caddr used))))) '((format #t "~%;;~a real ~a user ~a sys~%~!" real user sys) result))))) af3321@ls/false) (af2d8e@syntax-violation '#f '"invalid syntax" af331f@t)))))) (set! af476b@af2c80@time-macro af2c80@time-macro) (set! af2c82@delay-macro (lambda (af3325@stx) (let ((af3327@t af3325@stx)) (let ((af3329@ls/false (af2cae@syntax-dispatch af3327@t '(_ any)))) (if af3329@ls/false (apply (lambda (af332b@expr) (af2c64@bless (list 'make-promise (list 'lambda '() af332b@expr)))) af3329@ls/false) (af2d8e@syntax-violation '#f '"invalid syntax" af3327@t)))))) (set! af476c@af2c82@delay-macro af2c82@delay-macro) (set! af2c84@assert-macro (lambda (af332d@stx) (let ((af332f@t af332d@stx)) (let ((af3331@ls/false (af2cae@syntax-dispatch af332f@t '(_ any)))) (if af3331@ls/false (apply (lambda (af3333@expr) (let ((af3335@pos (or (af2d86@expression-position af332d@stx) (af2d86@expression-position af3333@expr)))) (af2c64@bless (list 'unless af3333@expr (list 'assertion-error (list 'quote af3333@expr) (list 'quote af3335@pos)))))) af3331@ls/false) (af2d8e@syntax-violation '#f '"invalid syntax" af332f@t)))))) (set! af476d@af2c84@assert-macro af2c84@assert-macro) (set! af2c86@endianness-macro (lambda (af3337@stx) (let ((af3339@t af3337@stx)) (let ((af333b@ls/false (af2cae@syntax-dispatch af3339@t '(_ any)))) (if af333b@ls/false (apply (lambda (af333d@e) (let ((af333f@t (af2d94@syntax->datum af333d@e))) (if (memv af333f@t '(little)) (af2c64@bless ''little) (if (memv af333f@t '(big)) (af2c64@bless ''big) (af2d8e@syntax-violation '#f '"endianness must be big or little" af3337@stx))))) af333b@ls/false) (af2d8e@syntax-violation '#f '"invalid syntax" af3339@t)))))) (set! af476e@af2c86@endianness-macro af2c86@endianness-macro) (set! af2c88@identifier-syntax-macro (lambda (af3341@stx) (let ((af3343@t af3341@stx)) (let ((af3345@ls/false (af2cae@syntax-dispatch af3343@t '(_ any)))) (if af3345@ls/false (apply (lambda (af3347@expr) (af2c64@bless (list 'lambda '(x) (list 'syntax-case 'x '() (list 'id '(identifier? (syntax id)) (list 'syntax af3347@expr)) (list '(id e* ...) '(identifier? (syntax id)) (cons 'cons (cons (list 'syntax af3347@expr) '((syntax (e* ...)))))))))) af3345@ls/false) (let ((af3349@t af3343@t)) (let ((af334b@ls/false (af2cae@syntax-dispatch af3349@t '(_ (any any) ((#(scheme-id set!) any any) any))))) (if (and af334b@ls/false (apply (lambda (af334d@id1 af334e@expr1 af334f@id2 af3350@expr2 af3351@expr3) (and (af2aa7@id? af334d@id1) (af2aa7@id? af334f@id2) (af2aa7@id? af3350@expr2))) af334b@ls/false)) (apply (lambda (af3357@id1 af3358@expr1 af3359@id2 af335a@expr2 af335b@expr3) (af2c64@bless (list 'cons ''macro! (list 'lambda '(x) (list 'syntax-case 'x '(set!) (list 'id '(identifier? (syntax id)) (list 'syntax af3358@expr1)) (list (list 'set! 'id af335a@expr2) (list 'syntax af335b@expr3)) (list '(id e* ...) '(identifier? (syntax id)) (list 'syntax (cons af3358@expr1 '(e* ...))))))))) af334b@ls/false) (af2d8e@syntax-violation '#f '"invalid syntax" af3349@t))))))))) (set! af476f@af2c88@identifier-syntax-macro af2c88@identifier-syntax-macro) (set! af2c8a@do-macro (lambda (af3361@stx) (let ((af3364@bind '#f)) (begin (set! af3364@bind (lambda (af337b@x) (let ((af337d@t af337b@x)) (let ((af337f@ls/false (af2cae@syntax-dispatch af337d@t '(any any)))) (if af337f@ls/false (apply (lambda (af3381@x af3382@init) (list af3381@x af3382@init af3381@x)) af337f@ls/false) (let ((af3385@t af337d@t)) (let ((af3387@ls/false (af2cae@syntax-dispatch af3385@t '(any any any)))) (if af3387@ls/false (apply (lambda (af3389@x af338a@init af338b@step) (list af3389@x af338a@init af338b@step)) af3387@ls/false) (let ((af338f@t af3385@t)) (let ((af3391@ls/false (af2cae@syntax-dispatch af338f@t '_))) (if af3391@ls/false (apply (lambda () (af2d8e@syntax-violation '#f '"invalid binding" af3361@stx)) af3391@ls/false) (af2d8e@syntax-violation '#f '"invalid syntax" af338f@t)))))))))))) (let ((af3365@t af3361@stx)) (let ((af3367@ls/false (af2cae@syntax-dispatch af3365@t '(_ each-any (any . each-any) . each-any)))) (if af3367@ls/false (apply (lambda (af3369@binding* af336a@test af336b@expr* af336c@command*) (let ((af3371@t (map af3364@bind af3369@binding*))) (let ((af3373@ls/false (af2cae@syntax-dispatch af3371@t '#(each (any any any))))) (if af3373@ls/false (apply (lambda (af3375@x* af3376@init* af3377@step*) (if (af2aaf@valid-bound-ids? af3375@x*) (af2c64@bless (list 'letrec (list (list 'loop (list 'lambda af3375@x* (list 'if af336a@test (cons 'begin (cons '(if #f #f) af336b@expr*)) (cons 'begin (append af336c@command* (list (cons 'loop af3377@step*)))))))) (cons 'loop af3376@init*))) (af2d8e@syntax-violation '#f '"invalid bindings" af3361@stx))) af3373@ls/false) (af2d8e@syntax-violation '#f '"invalid syntax" af3371@t))))) af3367@ls/false) (af2d8e@syntax-violation '#f '"invalid syntax" af3365@t)))))))) (set! af4770@af2c8a@do-macro af2c8a@do-macro) (set! af2c8c@let*-macro (lambda (af3393@stx) (let ((af3395@t af3393@stx)) (let ((af3397@ls/false (af2cae@syntax-dispatch af3395@t '(_ #(each (any any)) any . each-any)))) (if (and af3397@ls/false (apply (lambda (af3399@lhs* af339a@rhs* af339b@b af339c@b*) (for-all af2aa7@id? af3399@lhs*)) af3397@ls/false)) (apply (lambda (af33a1@lhs* af33a2@rhs* af33a3@b af33a4@b*) (af2c64@bless (let af33ab@f ((af33a9@x* (map list af33a1@lhs* af33a2@rhs*))) (if (null? af33a9@x*) (cons 'let (cons '() (cons af33a3@b af33a4@b*))) (list 'let (list (car af33a9@x*)) (af33ab@f (cdr af33a9@x*))))))) af3397@ls/false) (af2d8e@syntax-violation '#f '"invalid syntax" af3395@t)))))) (set! af4771@af2c8c@let*-macro af2c8c@let*-macro) (set! af2c8e@or-macro (lambda (af33ad@stx) (let ((af33af@t af33ad@stx)) (let ((af33b1@ls/false (af2cae@syntax-dispatch af33af@t '(_)))) (if af33b1@ls/false (apply (lambda () '#f) af33b1@ls/false) (let ((af33b3@t af33af@t)) (let ((af33b5@ls/false (af2cae@syntax-dispatch af33b3@t '(_ any . each-any)))) (if af33b5@ls/false (apply (lambda (af33b7@e af33b8@e*) (af2c64@bless (let af33bf@f ((af33bb@e af33b7@e) (af33bc@e* af33b8@e*)) (if (null? af33bc@e*) (list 'begin '#f af33bb@e) (list 'let (list (list 't af33bb@e)) (list 'if 't 't (af33bf@f (car af33bc@e*) (cdr af33bc@e*)))))))) af33b5@ls/false) (af2d8e@syntax-violation '#f '"invalid syntax" af33b3@t))))))))) (set! af4772@af2c8e@or-macro af2c8e@or-macro) (set! af2c90@and-macro (lambda (af33c1@stx) (let ((af33c3@t af33c1@stx)) (let ((af33c5@ls/false (af2cae@syntax-dispatch af33c3@t '(_)))) (if af33c5@ls/false (apply (lambda () '#t) af33c5@ls/false) (let ((af33c7@t af33c3@t)) (let ((af33c9@ls/false (af2cae@syntax-dispatch af33c7@t '(_ any . each-any)))) (if af33c9@ls/false (apply (lambda (af33cb@e af33cc@e*) (af2c64@bless (let af33d3@f ((af33cf@e af33cb@e) (af33d0@e* af33cc@e*)) (if (null? af33d0@e*) (list 'begin '#f af33cf@e) (cons 'if (cons af33cf@e (cons (af33d3@f (car af33d0@e*) (cdr af33d0@e*)) '(#f)))))))) af33c9@ls/false) (af2d8e@syntax-violation '#f '"invalid syntax" af33c7@t))))))))) (set! af4773@af2c90@and-macro af2c90@and-macro) (set! af2c92@cond-macro (lambda (af33d5@stx) (let ((af33d7@t af33d5@stx)) (let ((af33d9@ls/false (af2cae@syntax-dispatch af33d7@t '(_ any . each-any)))) (if af33d9@ls/false (apply (lambda (af33db@cls af33dc@cls*) (af2c64@bless (let af33e3@f ((af33df@cls af33db@cls) (af33e0@cls* af33dc@cls*)) (if (null? af33e0@cls*) (let ((af33e5@t af33df@cls)) (let ((af33e7@ls/false (af2cae@syntax-dispatch af33e5@t '(#(scheme-id else) any . each-any)))) (if af33e7@ls/false (apply (lambda (af33e9@e af33ea@e*) (cons 'begin (cons af33e9@e af33ea@e*))) af33e7@ls/false) (let ((af33ed@t af33e5@t)) (let ((af33ef@ls/false (af2cae@syntax-dispatch af33ed@t '(any #(scheme-id =>) any)))) (if af33ef@ls/false (apply (lambda (af33f1@e af33f2@p) (list 'let (list (list 't af33f1@e)) (list 'if 't (cons af33f2@p '(t))))) af33ef@ls/false) (let ((af33f5@t af33ed@t)) (let ((af33f7@ls/false (af2cae@syntax-dispatch af33f5@t '(any)))) (if af33f7@ls/false (apply (lambda (af33f9@e) (cons 'or (cons af33f9@e '((if #f #f))))) af33f7@ls/false) (let ((af33fb@t af33f5@t)) (let ((af33fd@ls/false (af2cae@syntax-dispatch af33fb@t '(any . each-any)))) (if af33fd@ls/false (apply (lambda (af33ff@e af3400@e*) (list 'if af33ff@e (cons 'begin af3400@e*))) af33fd@ls/false) (let ((af3403@t af33fb@t)) (let ((af3405@ls/false (af2cae@syntax-dispatch af3403@t '_))) (if af3405@ls/false (apply (lambda () (af2d8e@syntax-violation '#f '"invalid last clause" af33d5@stx)) af3405@ls/false) (af2d8e@syntax-violation '#f '"invalid syntax" af3403@t)))))))))))))))) (let ((af3407@t af33df@cls)) (let ((af3409@ls/false (af2cae@syntax-dispatch af3407@t '(#(scheme-id else) any . each-any)))) (if af3409@ls/false (apply (lambda (af340b@e af340c@e*) (af2d8e@syntax-violation '#f '"incorrect position of keyword else" af33d5@stx)) af3409@ls/false) (let ((af340f@t af3407@t)) (let ((af3411@ls/false (af2cae@syntax-dispatch af340f@t '(any #(scheme-id =>) any)))) (if af3411@ls/false (apply (lambda (af3413@e af3414@p) (list 'let (list (list 't af3413@e)) (list 'if 't (cons af3414@p '(t)) (af33e3@f (car af33e0@cls*) (cdr af33e0@cls*))))) af3411@ls/false) (let ((af3417@t af340f@t)) (let ((af3419@ls/false (af2cae@syntax-dispatch af3417@t '(any)))) (if af3419@ls/false (apply (lambda (af341b@e) (list 'or af341b@e (af33e3@f (car af33e0@cls*) (cdr af33e0@cls*)))) af3419@ls/false) (let ((af341d@t af3417@t)) (let ((af341f@ls/false (af2cae@syntax-dispatch af341d@t '(any . each-any)))) (if af341f@ls/false (apply (lambda (af3421@e af3422@e*) (list 'if af3421@e (cons 'begin af3422@e*) (af33e3@f (car af33e0@cls*) (cdr af33e0@cls*)))) af341f@ls/false) (let ((af3425@t af341d@t)) (let ((af3427@ls/false (af2cae@syntax-dispatch af3425@t '_))) (if af3427@ls/false (apply (lambda () (af2d8e@syntax-violation '#f '"invalid last clause" af33d5@stx)) af3427@ls/false) (af2d8e@syntax-violation '#f '"invalid syntax" af3425@t)))))))))))))))))))) af33d9@ls/false) (af2d8e@syntax-violation '#f '"invalid syntax" af33d7@t)))))) (set! af4774@af2c92@cond-macro af2c92@cond-macro) (set! af2c94@do-include (lambda (af3429@stx af342a@id af342b@filename) (let ((af342f@filename (af2abb@stx->datum af342b@filename))) (begin (if (not (and (string? af342f@filename) (af2aa7@id? af342a@id))) (af2d8e@syntax-violation '#f '"invalid syntax" af3429@stx) (void)) (cons (af2c64@bless 'begin) (with-input-from-file af342f@filename (lambda () (let af3433@f ((af3431@ls '())) (let ((af3435@x (af25e4@af24b6@read-annotated))) (if (eof-object? af3435@x) (reverse af3431@ls) (af3433@f (cons (af2a87@datum->stx af342a@id af3435@x) af3431@ls)))))))))))) (set! af4775@af2c94@do-include af2c94@do-include) (set! af2c96@include-macro (lambda (af3437@e) (let ((af3439@t af3437@e)) (let ((af343b@ls/false (af2cae@syntax-dispatch af3439@t '(any any)))) (if af343b@ls/false (apply (lambda (af343d@id af343e@filename) (af2c94@do-include af3437@e af343d@id af343e@filename)) af343b@ls/false) (af2d8e@syntax-violation '#f '"invalid syntax" af3439@t)))))) (set! af4776@af2c96@include-macro af2c96@include-macro) (set! af2c98@include-into-macro (lambda (af3441@e) (let ((af3443@t af3441@e)) (let ((af3445@ls/false (af2cae@syntax-dispatch af3443@t '(_ any any)))) (if af3445@ls/false (apply (lambda (af3447@id af3448@filename) (af2c94@do-include af3441@e af3447@id af3448@filename)) af3445@ls/false) (af2d8e@syntax-violation '#f '"invalid syntax" af3443@t)))))) (set! af4777@af2c98@include-into-macro af2c98@include-into-macro) (set! af2c9a@syntax-rules-macro (lambda (af344b@e) (let ((af344d@t af344b@e)) (let ((af344f@ls/false (af2cae@syntax-dispatch af344d@t '(_ each-any . #(each (any any)))))) (if af344f@ls/false (apply (lambda (af3451@lits af3452@pat* af3453@tmp*) (begin (af2cb4@verify-literals af3451@lits af344b@e) (af2c64@bless (list 'lambda '(x) (cons 'syntax-case (cons 'x (cons af3451@lits (map (lambda (af3457@pat af3458@tmp) (let ((af345b@t af3457@pat)) (let ((af345d@ls/false (af2cae@syntax-dispatch af345b@t '(_ . any)))) (if af345d@ls/false (apply (lambda (af345f@rest) (list (cons 'g af345f@rest) (list 'syntax af3458@tmp))) af345d@ls/false) (let ((af3461@t af345b@t)) (let ((af3463@ls/false (af2cae@syntax-dispatch af3461@t '_))) (if af3463@ls/false (apply (lambda () (af2d8e@syntax-violation '#f '"invalid syntax-rules pattern" af344b@e af3457@pat)) af3463@ls/false) (af2d8e@syntax-violation '#f '"invalid syntax" af3461@t)))))))) af3452@pat* af3453@tmp*)))))))) af344f@ls/false) (af2d8e@syntax-violation '#f '"invalid syntax" af344d@t)))))) (set! af4778@af2c9a@syntax-rules-macro af2c9a@syntax-rules-macro) (set! af2c9c@quasiquote-macro (let ((af3466@datum '#f) (af3482@quasicons* '#f) (af3484@quasicons '#f) (af3486@quasiappend '#f) (af3488@quasivector '#f) (af348a@vquasi '#f) (af348c@quasi '#f)) (begin (set! af3466@datum (lambda (af3567@x) (list (af2c36@scheme-stx 'quote) (af2a8f@mkstx af3567@x '() '() '())))) (set! af3482@quasicons* (lambda (af355f@x af3560@y) (let af3565@f ((af3563@x af355f@x)) (if (null? af3563@x) af3560@y (af3484@quasicons (car af3563@x) (af3565@f (cdr af3563@x))))))) (set! af3484@quasicons (lambda (af3539@x af353a@y) (let ((af353d@t af353a@y)) (let ((af353f@ls/false (af2cae@syntax-dispatch af353d@t '(#(scheme-id quote) any)))) (if af353f@ls/false (apply (lambda (af3541@dy) (let ((af3543@t af3539@x)) (let ((af3545@ls/false (af2cae@syntax-dispatch af3543@t '(#(scheme-id quote) any)))) (if af3545@ls/false (apply (lambda (af3547@dx) (list (af2c36@scheme-stx 'quote) (cons af3547@dx af3541@dy))) af3545@ls/false) (let ((af3549@t af3543@t)) (let ((af354b@ls/false (af2cae@syntax-dispatch af3549@t '_))) (if af354b@ls/false (apply (lambda () (let ((af354d@t af3541@dy)) (let ((af354f@ls/false (af2cae@syntax-dispatch af354d@t '()))) (if af354f@ls/false (apply (lambda () (list (af2c36@scheme-stx 'list) af3539@x)) af354f@ls/false) (let ((af3551@t af354d@t)) (let ((af3553@ls/false (af2cae@syntax-dispatch af3551@t '_))) (if af3553@ls/false (apply (lambda () (list (af2c36@scheme-stx 'cons) af3539@x af353a@y)) af3553@ls/false) (af2d8e@syntax-violation '#f '"invalid syntax" af3551@t)))))))) af354b@ls/false) (af2d8e@syntax-violation '#f '"invalid syntax" af3549@t)))))))) af353f@ls/false) (let ((af3555@t af353d@t)) (let ((af3557@ls/false (af2cae@syntax-dispatch af3555@t '(#(scheme-id list) . each-any)))) (if af3557@ls/false (apply (lambda (af3559@stuff) (cons* (af2c36@scheme-stx 'list) af3539@x af3559@stuff)) af3557@ls/false) (let ((af355b@t af3555@t)) (let ((af355d@ls/false (af2cae@syntax-dispatch af355b@t '_))) (if af355d@ls/false (apply (lambda () (list (af2c36@scheme-stx 'cons) af3539@x af353a@y)) af355d@ls/false) (af2d8e@syntax-violation '#f '"invalid syntax" af355b@t)))))))))))) (set! af3486@quasiappend (lambda (af351f@x af3520@y) (let ((af3523@ls (let af3527@f ((af3525@x af351f@x)) (if (null? af3525@x) (let ((af3529@t af3520@y)) (let ((af352b@ls/false (af2cae@syntax-dispatch af3529@t '(#(scheme-id quote) ())))) (if af352b@ls/false (apply (lambda () '()) af352b@ls/false) (let ((af352d@t af3529@t)) (let ((af352f@ls/false (af2cae@syntax-dispatch af352d@t '_))) (if af352f@ls/false (apply (lambda () (list af3520@y)) af352f@ls/false) (af2d8e@syntax-violation '#f '"invalid syntax" af352d@t))))))) (let ((af3531@t (car af3525@x))) (let ((af3533@ls/false (af2cae@syntax-dispatch af3531@t '(#(scheme-id quote) ())))) (if af3533@ls/false (apply (lambda () (af3527@f (cdr af3525@x))) af3533@ls/false) (let ((af3535@t af3531@t)) (let ((af3537@ls/false (af2cae@syntax-dispatch af3535@t '_))) (if af3537@ls/false (apply (lambda () (cons (car af3525@x) (af3527@f (cdr af3525@x)))) af3537@ls/false) (af2d8e@syntax-violation '#f '"invalid syntax" af3535@t))))))))))) (if (null? af3523@ls) (list (af2c36@scheme-stx 'quote) '()) (if (null? (cdr af3523@ls)) (car af3523@ls) (cons* (af2c36@scheme-stx 'append) af3523@ls)))))) (set! af3488@quasivector (lambda (af34ed@x) (let ((af34ef@pat-x af34ed@x)) (let ((af34f1@t af34ef@pat-x)) (let ((af34f3@ls/false (af2cae@syntax-dispatch af34f1@t '(#(scheme-id quote) each-any)))) (if af34f3@ls/false (apply (lambda (af34f5@x*) (list (af2c36@scheme-stx 'quote) (list->vector af34f5@x*))) af34f3@ls/false) (let ((af34f7@t af34f1@t)) (let ((af34f9@ls/false (af2cae@syntax-dispatch af34f7@t '_))) (if af34f9@ls/false (apply (lambda () (let af3501@f ((af34fb@x af34ed@x) (af34fc@k (lambda (af34ff@ls) (cons* (af2c36@scheme-stx 'vector) af34ff@ls)))) (let ((af3503@t af34fb@x)) (let ((af3505@ls/false (af2cae@syntax-dispatch af3503@t '(#(scheme-id quote) each-any)))) (if af3505@ls/false (apply (lambda (af3507@x*) (af34fc@k (map (lambda (af3509@x) (list (af2c36@scheme-stx 'quote) af3509@x)) af3507@x*))) af3505@ls/false) (let ((af350b@t af3503@t)) (let ((af350d@ls/false (af2cae@syntax-dispatch af350b@t '(#(scheme-id list) . each-any)))) (if af350d@ls/false (apply (lambda (af350f@x*) (af34fc@k af350f@x*)) af350d@ls/false) (let ((af3511@t af350b@t)) (let ((af3513@ls/false (af2cae@syntax-dispatch af3511@t '(#(scheme-id cons) any any)))) (if af3513@ls/false (apply (lambda (af3515@x af3516@y) (af3501@f af3516@y (lambda (af3519@ls) (af34fc@k (cons af3515@x af3519@ls))))) af3513@ls/false) (let ((af351b@t af3511@t)) (let ((af351d@ls/false (af2cae@syntax-dispatch af351b@t '_))) (if af351d@ls/false (apply (lambda () (list (af2c36@scheme-stx 'list->vector) af34ef@pat-x)) af351d@ls/false) (af2d8e@syntax-violation '#f '"invalid syntax" af351b@t))))))))))))))) af34f9@ls/false) (af2d8e@syntax-violation '#f '"invalid syntax" af34f7@t)))))))))) (set! af348a@vquasi (lambda (af34cb@p af34cc@lev) (let ((af34cf@t af34cb@p)) (let ((af34d1@ls/false (af2cae@syntax-dispatch af34cf@t '(any . any)))) (if af34d1@ls/false (apply (lambda (af34d3@p af34d4@q) (let ((af34d7@t af34d3@p)) (let ((af34d9@ls/false (af2cae@syntax-dispatch af34d7@t '(#(scheme-id unquote) . each-any)))) (if af34d9@ls/false (apply (lambda (af34db@p) (if (= af34cc@lev '0) (af3482@quasicons* af34db@p (af348a@vquasi af34d4@q af34cc@lev)) (af3484@quasicons (af3484@quasicons (af3466@datum 'unquote) (af348c@quasi af34db@p (- af34cc@lev '1))) (af348a@vquasi af34d4@q af34cc@lev)))) af34d9@ls/false) (let ((af34dd@t af34d7@t)) (let ((af34df@ls/false (af2cae@syntax-dispatch af34dd@t '(#(scheme-id unquote-splicing) . each-any)))) (if af34df@ls/false (apply (lambda (af34e1@p) (if (= af34cc@lev '0) (af3486@quasiappend af34e1@p (af348a@vquasi af34d4@q af34cc@lev)) (af3484@quasicons (af3484@quasicons (af3466@datum 'unquote-splicing) (af348c@quasi af34e1@p (- af34cc@lev '1))) (af348a@vquasi af34d4@q af34cc@lev)))) af34df@ls/false) (let ((af34e3@t af34dd@t)) (let ((af34e5@ls/false (af2cae@syntax-dispatch af34e3@t 'any))) (if af34e5@ls/false (apply (lambda (af34e7@p) (af3484@quasicons (af348c@quasi af34e7@p af34cc@lev) (af348a@vquasi af34d4@q af34cc@lev))) af34e5@ls/false) (af2d8e@syntax-violation '#f '"invalid syntax" af34e3@t))))))))))) af34d1@ls/false) (let ((af34e9@t af34cf@t)) (let ((af34eb@ls/false (af2cae@syntax-dispatch af34e9@t '()))) (if af34eb@ls/false (apply (lambda () (list (af2c36@scheme-stx 'quote) '())) af34eb@ls/false) (af2d8e@syntax-violation '#f '"invalid syntax" af34e9@t))))))))) (set! af348c@quasi (lambda (af3495@p af3496@lev) (let ((af3499@t af3495@p)) (let ((af349b@ls/false (af2cae@syntax-dispatch af3499@t '(#(scheme-id unquote) any)))) (if af349b@ls/false (apply (lambda (af349d@p) (if (= af3496@lev '0) af349d@p (af3484@quasicons (af3466@datum 'unquote) (af348c@quasi (list af349d@p) (- af3496@lev '1))))) af349b@ls/false) (let ((af349f@t af3499@t)) (let ((af34a1@ls/false (af2cae@syntax-dispatch af349f@t '((#(scheme-id unquote) . each-any) . any)))) (if af34a1@ls/false (apply (lambda (af34a3@p af34a4@q) (if (= af3496@lev '0) (af3482@quasicons* af34a3@p (af348c@quasi af34a4@q af3496@lev)) (af3484@quasicons (af3484@quasicons (af3466@datum 'unquote) (af348c@quasi af34a3@p (- af3496@lev '1))) (af348c@quasi af34a4@q af3496@lev)))) af34a1@ls/false) (let ((af34a7@t af349f@t)) (let ((af34a9@ls/false (af2cae@syntax-dispatch af34a7@t '((#(scheme-id unquote-splicing) . each-any) . any)))) (if af34a9@ls/false (apply (lambda (af34ab@p af34ac@q) (if (= af3496@lev '0) (af3486@quasiappend af34ab@p (af348c@quasi af34ac@q af3496@lev)) (af3484@quasicons (af3484@quasicons (af3466@datum 'unquote-splicing) (af348c@quasi af34ab@p (- af3496@lev '1))) (af348c@quasi af34ac@q af3496@lev)))) af34a9@ls/false) (let ((af34af@t af34a7@t)) (let ((af34b1@ls/false (af2cae@syntax-dispatch af34af@t '(#(scheme-id quasiquote) any)))) (if af34b1@ls/false (apply (lambda (af34b3@p) (af3484@quasicons (af3466@datum 'quasiquote) (af348c@quasi (list af34b3@p) (+ af3496@lev '1)))) af34b1@ls/false) (let ((af34b5@t af34af@t)) (let ((af34b7@ls/false (af2cae@syntax-dispatch af34b5@t '(any . any)))) (if af34b7@ls/false (apply (lambda (af34b9@p af34ba@q) (af3484@quasicons (af348c@quasi af34b9@p af3496@lev) (af348c@quasi af34ba@q af3496@lev))) af34b7@ls/false) (let ((af34bd@t af34b5@t)) (let ((af34bf@ls/false (af2cae@syntax-dispatch af34bd@t '#(vector each-any)))) (if (and af34bf@ls/false (apply (lambda (af34c1@x) (not (af2a73@stx? af34c1@x))) af34bf@ls/false)) (apply (lambda (af34c3@x) (af3488@quasivector (af348a@vquasi af34c3@x af3496@lev))) af34bf@ls/false) (let ((af34c5@t af34bd@t)) (let ((af34c7@ls/false (af2cae@syntax-dispatch af34c5@t 'any))) (if af34c7@ls/false (apply (lambda (af34c9@p) (list (af2c36@scheme-stx 'quote) af34c9@p)) af34c7@ls/false) (af2d8e@syntax-violation '#f '"invalid syntax" af34c5@t)))))))))))))))))))))))) (lambda (af348d@x) (let ((af348f@t af348d@x)) (let ((af3491@ls/false (af2cae@syntax-dispatch af348f@t '(_ any)))) (if af3491@ls/false (apply (lambda (af3493@e) (af348c@quasi af3493@e '0)) af3491@ls/false) (af2d8e@syntax-violation '#f '"invalid syntax" af348f@t)))))))) (set! af4779@af2c9c@quasiquote-macro af2c9c@quasiquote-macro) (set! af2c9e@quasisyntax-macro (let ((af356a@quasi '#f)) (begin (set! af356a@quasi (lambda (af3585@p af3586@lev) (let ((af3589@t af3585@p)) (let ((af358b@ls/false (af2cae@syntax-dispatch af3589@t '(#(scheme-id unsyntax) any)))) (if af358b@ls/false (apply (lambda (af358d@p) (if (= af3586@lev '0) (let ((af358f@g (gensym))) (values (list af358f@g) (list af358d@p) af358f@g)) (call-with-values (lambda () (af356a@quasi af358d@p (- af3586@lev '1))) (lambda (af3597@af3592 af3598@af3594 af3599@af3596) (let ((af359d@p af3599@af3596) (af359e@rhs* af3598@af3594) (af359f@lhs* af3597@af3592)) (values af359f@lhs* af359e@rhs* (list 'unsyntax af359d@p))))))) af358b@ls/false) (let ((af35a3@t af3589@t)) (let ((af35a5@ls/false (af2cae@syntax-dispatch af35a3@t '#(scheme-id unsyntax)))) (if (and af35a5@ls/false (apply (lambda () (= af3586@lev '0)) af35a5@ls/false)) (apply (lambda () (af2d8e@syntax-violation '#f '"incorrect use of unsyntax" af3585@p)) af35a5@ls/false) (let ((af35a7@t af35a3@t)) (let ((af35a9@ls/false (af2cae@syntax-dispatch af35a7@t '((#(scheme-id unsyntax) . each-any) . any)))) (if af35a9@ls/false (apply (lambda (af35ab@p* af35ac@q) (call-with-values (lambda () (af356a@quasi af35ac@q af3586@lev)) (lambda (af35b5@af35b0 af35b6@af35b2 af35b7@af35b4) (let ((af35bb@q af35b7@af35b4) (af35bc@rhs* af35b6@af35b2) (af35bd@lhs* af35b5@af35b0)) (if (= af3586@lev '0) (let ((af35c1@g* (map (lambda (af35c3@x) (gensym)) af35ab@p*))) (values (append af35c1@g* af35bd@lhs*) (append af35ab@p* af35bc@rhs*) (append af35c1@g* af35bb@q))) (call-with-values (lambda () (af356a@quasi af35ab@p* (- af3586@lev '1))) (lambda (af35cb@af35c6 af35cc@af35c8 af35cd@af35ca) (let ((af35d1@p* af35cd@af35ca) (af35d2@rhs2* af35cc@af35c8) (af35d3@lhs2* af35cb@af35c6)) (values (append af35d3@lhs2* af35bd@lhs*) (append af35d2@rhs2* af35bc@rhs*) (cons (cons 'unsyntax af35d1@p*) af35bb@q)))))))))) af35a9@ls/false) (let ((af35d7@t af35a7@t)) (let ((af35d9@ls/false (af2cae@syntax-dispatch af35d7@t '((#(scheme-id unsyntax-splicing) . each-any) . any)))) (if af35d9@ls/false (apply (lambda (af35db@p* af35dc@q) (call-with-values (lambda () (af356a@quasi af35dc@q af3586@lev)) (lambda (af35e5@af35e0 af35e6@af35e2 af35e7@af35e4) (let ((af35eb@q af35e7@af35e4) (af35ec@rhs* af35e6@af35e2) (af35ed@lhs* af35e5@af35e0)) (if (= af3586@lev '0) (let ((af35f1@g* (map (lambda (af35f3@x) (gensym)) af35db@p*))) (values (append (map (lambda (af35f5@g) (cons af35f5@g '(...))) af35f1@g*) af35ed@lhs*) (append af35db@p* af35ec@rhs*) (append (apply append (map (lambda (af35f7@g) (cons af35f7@g '(...))) af35f1@g*)) af35eb@q))) (call-with-values (lambda () (af356a@quasi af35db@p* (- af3586@lev '1))) (lambda (af35ff@af35fa af3600@af35fc af3601@af35fe) (let ((af3605@p* af3601@af35fe) (af3606@rhs2* af3600@af35fc) (af3607@lhs2* af35ff@af35fa)) (values (append af3607@lhs2* af35ed@lhs*) (append af3606@rhs2* af35ec@rhs*) (cons (cons 'unsyntax-splicing af3605@p*) af35eb@q)))))))))) af35d9@ls/false) (let ((af360b@t af35d7@t)) (let ((af360d@ls/false (af2cae@syntax-dispatch af360b@t '#(scheme-id unsyntax-splicing)))) (if (and af360d@ls/false (apply (lambda () (= af3586@lev '0)) af360d@ls/false)) (apply (lambda () (af2d8e@syntax-violation '#f '"incorrect use of unsyntax-splicing" af3585@p)) af360d@ls/false) (let ((af360f@t af360b@t)) (let ((af3611@ls/false (af2cae@syntax-dispatch af360f@t '(#(scheme-id quasisyntax) any)))) (if af3611@ls/false (apply (lambda (af3613@p) (call-with-values (lambda () (af356a@quasi af3613@p (+ af3586@lev '1))) (lambda (af361b@af3616 af361c@af3618 af361d@af361a) (let ((af3621@p af361d@af361a) (af3622@rhs* af361c@af3618) (af3623@lhs* af361b@af3616)) (values af3623@lhs* af3622@rhs* (list 'quasisyntax af3621@p)))))) af3611@ls/false) (let ((af3627@t af360f@t)) (let ((af3629@ls/false (af2cae@syntax-dispatch af3627@t '(any . any)))) (if af3629@ls/false (apply (lambda (af362b@p af362c@q) (call-with-values (lambda () (af356a@quasi af362b@p af3586@lev)) (lambda (af363b@af3630 af363c@af3632 af363d@af3634) (call-with-values (lambda () (af356a@quasi af362c@q af3586@lev)) (lambda (af3641@af3636 af3642@af3638 af3643@af363a) (let ((af3647@q af3643@af363a) (af3648@rhs2* af3642@af3638) (af3649@lhs2* af3641@af3636) (af364a@p af363d@af3634) (af364b@rhs* af363c@af3632) (af364c@lhs* af363b@af3630)) (values (append af3649@lhs2* af364c@lhs*) (append af3648@rhs2* af364b@rhs*) (cons af364a@p af3647@q)))))))) af3629@ls/false) (let ((af3653@t af3627@t)) (let ((af3655@ls/false (af2cae@syntax-dispatch af3653@t '#(vector each-any)))) (if af3655@ls/false (apply (lambda (af3657@x*) (call-with-values (lambda () (af356a@quasi af3657@x* af3586@lev)) (lambda (af365f@af365a af3660@af365c af3661@af365e) (let ((af3665@x* af3661@af365e) (af3666@rhs* af3660@af365c) (af3667@lhs* af365f@af365a)) (values af3667@lhs* af3666@rhs* (list->vector af3665@x*)))))) af3655@ls/false) (let ((af366b@t af3653@t)) (let ((af366d@ls/false (af2cae@syntax-dispatch af366b@t '_))) (if af366d@ls/false (apply (lambda () (values '() '() af3585@p)) af366d@ls/false) (af2d8e@syntax-violation '#f '"invalid syntax" af366b@t)))))))))))))))))))))))))))))) (lambda (af356b@x) (let ((af356d@t af356b@x)) (let ((af356f@ls/false (af2cae@syntax-dispatch af356d@t '(_ any)))) (if af356f@ls/false (apply (lambda (af3571@e) (call-with-values (lambda () (af356a@quasi af3571@e '0)) (lambda (af3579@af3574 af357a@af3576 af357b@af3578) (let ((af357f@v af357b@af3578) (af3580@rhs* af357a@af3576) (af3581@lhs* af3579@af3574)) (af2c64@bless (list 'syntax-case (cons 'list af3580@rhs*) '() (list af3581@lhs* (list 'syntax af357f@v)))))))) af356f@ls/false) (af2d8e@syntax-violation '#f '"invalid syntax" af356d@t)))))))) (set! af477a@af2c9e@quasisyntax-macro af2c9e@quasisyntax-macro) (set! af2ca0@define-struct-macro (lambda (af366f@stx) (af2d8e@syntax-violation '#f '"define-struct not supported" af366f@stx))) (set! af477b@af2ca0@define-struct-macro af2ca0@define-struct-macro) (set! af2ca2@define-record-type-macro (lambda (af3671@x) (let ((af3674@id '#f) (af3676@get-record-name '#f) (af3678@get-record-constructor-name '#f) (af367a@get-record-predicate-name '#f) (af367c@get-clause '#f) (af367e@foo-rtd-code '#f) (af3680@parent-rtd-code '#f) (af3682@parent-rcd-code '#f) (af3684@foo-rcd-code '#f) (af3686@get-protocol-code '#f) (af3688@get-fields '#f) (af368a@get-mutator-indices '#f) (af368c@get-mutators '#f) (af368e@get-accessors '#f) (af3690@enumerate '#f) (af3692@do-define-record '#f) (af3694@verify-clauses '#f)) (begin (set! af3674@id (lambda (af3867@ctxt . af3869@str*) (af2d92@datum->syntax af3867@ctxt (string->symbol (apply string-append (map (lambda (af386b@x) (if (symbol? af386b@x) (symbol->string af386b@x) (if (string? af386b@x) af386b@x (assertion-violation 'define-record-type '"BUG")))) af3869@str*)))))) (set! af3676@get-record-name (lambda (af3855@spec) (let ((af3857@t af3855@spec)) (let ((af3859@ls/false (af2cae@syntax-dispatch af3857@t '(any any any)))) (if af3859@ls/false (apply (lambda (af385b@foo af385c@make-foo af385d@foo?) af385b@foo) af3859@ls/false) (let ((af3861@t af3857@t)) (let ((af3863@ls/false (af2cae@syntax-dispatch af3861@t 'any))) (if af3863@ls/false (apply (lambda (af3865@foo) af3865@foo) af3863@ls/false) (af2d8e@syntax-violation '#f '"invalid syntax" af3861@t))))))))) (set! af3678@get-record-constructor-name (lambda (af3841@spec) (let ((af3843@t af3841@spec)) (let ((af3845@ls/false (af2cae@syntax-dispatch af3843@t '(any any any)))) (if af3845@ls/false (apply (lambda (af3847@foo af3848@make-foo af3849@foo?) af3848@make-foo) af3845@ls/false) (let ((af384d@t af3843@t)) (let ((af384f@ls/false (af2cae@syntax-dispatch af384d@t 'any))) (if (and af384f@ls/false (apply (lambda (af3851@foo) (af2aa7@id? af3851@foo)) af384f@ls/false)) (apply (lambda (af3853@foo) (af3674@id af3853@foo '"make-" (af2abb@stx->datum af3853@foo))) af384f@ls/false) (af2d8e@syntax-violation '#f '"invalid syntax" af384d@t))))))))) (set! af367a@get-record-predicate-name (lambda (af382d@spec) (let ((af382f@t af382d@spec)) (let ((af3831@ls/false (af2cae@syntax-dispatch af382f@t '(any any any)))) (if af3831@ls/false (apply (lambda (af3833@foo af3834@make-foo af3835@foo?) af3835@foo?) af3831@ls/false) (let ((af3839@t af382f@t)) (let ((af383b@ls/false (af2cae@syntax-dispatch af3839@t 'any))) (if (and af383b@ls/false (apply (lambda (af383d@foo) (af2aa7@id? af383d@foo)) af383b@ls/false)) (apply (lambda (af383f@foo) (af3674@id af383f@foo (af2abb@stx->datum af383f@foo) '"?")) af383b@ls/false) (af2d8e@syntax-violation '#f '"invalid syntax" af3839@t))))))))) (set! af367c@get-clause (lambda (af381b@id af381c@ls) (let ((af381f@t af381c@ls)) (let ((af3821@ls/false (af2cae@syntax-dispatch af381f@t '()))) (if af3821@ls/false (apply (lambda () '#f) af3821@ls/false) (let ((af3823@t af381f@t)) (let ((af3825@ls/false (af2cae@syntax-dispatch af3823@t '((any . any) . any)))) (if af3825@ls/false (apply (lambda (af3827@x af3828@rest af3829@ls) (if (af2aad@free-id=? (af2c64@bless af381b@id) af3827@x) (cons af3827@x af3828@rest) (af367c@get-clause af381b@id af3829@ls))) af3825@ls/false) (af2d8e@syntax-violation '#f '"invalid syntax" af3823@t))))))))) (set! af367e@foo-rtd-code (lambda (af37c9@name af37ca@clause* af37cb@parent-rtd-code) (let ((af37d0@convert-field-spec* '#f)) (begin (set! af37d0@convert-field-spec* (lambda (af3801@ls) (list->vector (map (lambda (af3803@x) (let ((af3805@t af3803@x)) (let ((af3807@ls/false (af2cae@syntax-dispatch af3805@t '(#(scheme-id mutable) any . any)))) (if af3807@ls/false (apply (lambda (af3809@name af380a@rest) (list 'mutable af3809@name)) af3807@ls/false) (let ((af380d@t af3805@t)) (let ((af380f@ls/false (af2cae@syntax-dispatch af380d@t '(#(scheme-id immutable) any . any)))) (if af380f@ls/false (apply (lambda (af3811@name af3812@rest) (list 'immutable af3811@name)) af380f@ls/false) (let ((af3815@t af380d@t)) (let ((af3817@ls/false (af2cae@syntax-dispatch af3815@t 'any))) (if af3817@ls/false (apply (lambda (af3819@name) (list 'immutable af3819@name)) af3817@ls/false) (af2d8e@syntax-violation '#f '"invalid syntax" af3815@t))))))))))) af3801@ls)))) (let ((af37d1@uid-code (let ((af37d9@t (af367c@get-clause 'nongenerative af37ca@clause*))) (let ((af37db@ls/false (af2cae@syntax-dispatch af37d9@t '(_)))) (if af37db@ls/false (apply (lambda () (list 'quote (gensym))) af37db@ls/false) (let ((af37dd@t af37d9@t)) (let ((af37df@ls/false (af2cae@syntax-dispatch af37dd@t '(_ any)))) (if af37df@ls/false (apply (lambda (af37e1@uid) (list 'quote af37e1@uid)) af37df@ls/false) (let ((af37e3@t af37dd@t)) (let ((af37e5@ls/false (af2cae@syntax-dispatch af37e3@t '_))) (if af37e5@ls/false (apply (lambda () '#f) af37e5@ls/false) (af2d8e@syntax-violation '#f '"invalid syntax" af37e3@t))))))))))) (af37d2@sealed? (let ((af37e7@t (af367c@get-clause 'sealed af37ca@clause*))) (let ((af37e9@ls/false (af2cae@syntax-dispatch af37e7@t '(_ #(atom #t))))) (if af37e9@ls/false (apply (lambda () '#t) af37e9@ls/false) (let ((af37eb@t af37e7@t)) (let ((af37ed@ls/false (af2cae@syntax-dispatch af37eb@t '_))) (if af37ed@ls/false (apply (lambda () '#f) af37ed@ls/false) (af2d8e@syntax-violation '#f '"invalid syntax" af37eb@t)))))))) (af37d3@opaque? (let ((af37ef@t (af367c@get-clause 'opaque af37ca@clause*))) (let ((af37f1@ls/false (af2cae@syntax-dispatch af37ef@t '(_ #(atom #t))))) (if af37f1@ls/false (apply (lambda () '#t) af37f1@ls/false) (let ((af37f3@t af37ef@t)) (let ((af37f5@ls/false (af2cae@syntax-dispatch af37f3@t '_))) (if af37f5@ls/false (apply (lambda () '#f) af37f5@ls/false) (af2d8e@syntax-violation '#f '"invalid syntax" af37f3@t)))))))) (af37d4@fields (let ((af37f7@t (af367c@get-clause 'fields af37ca@clause*))) (let ((af37f9@ls/false (af2cae@syntax-dispatch af37f7@t '(_ . each-any)))) (if af37f9@ls/false (apply (lambda (af37fb@field-spec*) (list 'quote (af37d0@convert-field-spec* af37fb@field-spec*))) af37f9@ls/false) (let ((af37fd@t af37f7@t)) (let ((af37ff@ls/false (af2cae@syntax-dispatch af37fd@t '_))) (if af37ff@ls/false (apply (lambda () ''#()) af37ff@ls/false) (af2d8e@syntax-violation '#f '"invalid syntax" af37fd@t))))))))) (af2c64@bless (list 'make-record-type-descriptor (list 'quote af37c9@name) af37cb@parent-rtd-code af37d1@uid-code af37d2@sealed? af37d3@opaque? af37d4@fields))))))) (set! af3680@parent-rtd-code (lambda (af37b1@clause*) (let ((af37b3@t (af367c@get-clause 'parent af37b1@clause*))) (let ((af37b5@ls/false (af2cae@syntax-dispatch af37b3@t '(_ any)))) (if af37b5@ls/false (apply (lambda (af37b7@name) (list 'record-type-descriptor af37b7@name)) af37b5@ls/false) (let ((af37b9@t af37b3@t)) (let ((af37bb@ls/false (af2cae@syntax-dispatch af37b9@t '#(atom #f)))) (if af37bb@ls/false (apply (lambda () (let ((af37bd@t (af367c@get-clause 'parent-rtd af37b1@clause*))) (let ((af37bf@ls/false (af2cae@syntax-dispatch af37bd@t '(_ any any)))) (if af37bf@ls/false (apply (lambda (af37c1@rtd af37c2@rcd) af37c1@rtd) af37bf@ls/false) (let ((af37c5@t af37bd@t)) (let ((af37c7@ls/false (af2cae@syntax-dispatch af37c5@t '#(atom #f)))) (if af37c7@ls/false (apply (lambda () '#f) af37c7@ls/false) (af2d8e@syntax-violation '#f '"invalid syntax" af37c5@t)))))))) af37bb@ls/false) (af2d8e@syntax-violation '#f '"invalid syntax" af37b9@t))))))))) (set! af3682@parent-rcd-code (lambda (af3799@clause*) (let ((af379b@t (af367c@get-clause 'parent af3799@clause*))) (let ((af379d@ls/false (af2cae@syntax-dispatch af379b@t '(_ any)))) (if af379d@ls/false (apply (lambda (af379f@name) (list 'record-constructor-descriptor af379f@name)) af379d@ls/false) (let ((af37a1@t af379b@t)) (let ((af37a3@ls/false (af2cae@syntax-dispatch af37a1@t '#(atom #f)))) (if af37a3@ls/false (apply (lambda () (let ((af37a5@t (af367c@get-clause 'parent-rtd af3799@clause*))) (let ((af37a7@ls/false (af2cae@syntax-dispatch af37a5@t '(_ any any)))) (if af37a7@ls/false (apply (lambda (af37a9@rtd af37aa@rcd) af37aa@rcd) af37a7@ls/false) (let ((af37ad@t af37a5@t)) (let ((af37af@ls/false (af2cae@syntax-dispatch af37ad@t '#(atom #f)))) (if af37af@ls/false (apply (lambda () '#f) af37af@ls/false) (af2d8e@syntax-violation '#f '"invalid syntax" af37ad@t)))))))) af37a3@ls/false) (af2d8e@syntax-violation '#f '"invalid syntax" af37a1@t))))))))) (set! af3684@foo-rcd-code (lambda (af3791@clause* af3792@foo-rtd af3793@protocol af3794@parent-rcd-code) (list 'make-record-constructor-descriptor af3792@foo-rtd af3794@parent-rcd-code af3793@protocol))) (set! af3686@get-protocol-code (lambda (af3785@clause*) (let ((af3787@t (af367c@get-clause 'protocol af3785@clause*))) (let ((af3789@ls/false (af2cae@syntax-dispatch af3787@t '(_ any)))) (if af3789@ls/false (apply (lambda (af378b@expr) af378b@expr) af3789@ls/false) (let ((af378d@t af3787@t)) (let ((af378f@ls/false (af2cae@syntax-dispatch af378d@t '_))) (if af378f@ls/false (apply (lambda () '#f) af378f@ls/false) (af2d8e@syntax-violation '#f '"invalid syntax" af378d@t))))))))) (set! af3688@get-fields (lambda (af3773@clause*) (let ((af3775@t af3773@clause*)) (let ((af3777@ls/false (af2cae@syntax-dispatch af3775@t '()))) (if af3777@ls/false (apply (lambda () '()) af3777@ls/false) (let ((af3779@t af3775@t)) (let ((af377b@ls/false (af2cae@syntax-dispatch af3779@t '((#(scheme-id fields) . each-any) . _)))) (if af377b@ls/false (apply (lambda (af377d@f*) af377d@f*) af377b@ls/false) (let ((af377f@t af3779@t)) (let ((af3781@ls/false (af2cae@syntax-dispatch af377f@t '(_ . any)))) (if af3781@ls/false (apply (lambda (af3783@rest) (af3688@get-fields af3783@rest)) af3781@ls/false) (af2d8e@syntax-violation '#f '"invalid syntax" af377f@t)))))))))))) (set! af368a@get-mutator-indices (lambda (af375b@fields) (let af3761@f ((af375d@fields af375b@fields) (af375e@i '0)) (let ((af3763@t af375d@fields)) (let ((af3765@ls/false (af2cae@syntax-dispatch af3763@t '()))) (if af3765@ls/false (apply (lambda () '()) af3765@ls/false) (let ((af3767@t af3763@t)) (let ((af3769@ls/false (af2cae@syntax-dispatch af3767@t '((#(scheme-id mutable) . _) . any)))) (if af3769@ls/false (apply (lambda (af376b@rest) (cons af375e@i (af3761@f af376b@rest (+ af375e@i '1)))) af3769@ls/false) (let ((af376d@t af3767@t)) (let ((af376f@ls/false (af2cae@syntax-dispatch af376d@t '(_ . any)))) (if af376f@ls/false (apply (lambda (af3771@rest) (af3761@f af3771@rest (+ af375e@i '1))) af376f@ls/false) (af2d8e@syntax-violation '#f '"invalid syntax" af376d@t))))))))))))) (set! af368c@get-mutators (lambda (af3731@foo af3732@fields) (let ((af3736@gen-name '#f)) (begin (set! af3736@gen-name (lambda (af3759@x) (af2d92@datum->syntax af3731@foo (string->symbol (string-append (symbol->string (af2d94@syntax->datum af3731@foo)) '"-" (symbol->string (af2d94@syntax->datum af3759@x)) '"-set!"))))) (let af3739@f ((af3737@fields af3732@fields)) (let ((af373b@t af3737@fields)) (let ((af373d@ls/false (af2cae@syntax-dispatch af373b@t '()))) (if af373d@ls/false (apply (lambda () '()) af373d@ls/false) (let ((af373f@t af373b@t)) (let ((af3741@ls/false (af2cae@syntax-dispatch af373f@t '((#(scheme-id mutable) any any any) . any)))) (if af3741@ls/false (apply (lambda (af3743@name af3744@accessor af3745@mutator af3746@rest) (cons af3745@mutator (af3739@f af3746@rest))) af3741@ls/false) (let ((af374b@t af373f@t)) (let ((af374d@ls/false (af2cae@syntax-dispatch af374b@t '((#(scheme-id mutable) any) . any)))) (if af374d@ls/false (apply (lambda (af374f@name af3750@rest) (cons (af3736@gen-name af374f@name) (af3739@f af3750@rest))) af374d@ls/false) (let ((af3753@t af374b@t)) (let ((af3755@ls/false (af2cae@syntax-dispatch af3753@t '(_ . any)))) (if af3755@ls/false (apply (lambda (af3757@rest) (af3739@f af3757@rest)) af3755@ls/false) (af2d8e@syntax-violation '#f '"invalid syntax" af3753@t)))))))))))))))))) (set! af368e@get-accessors (lambda (af36ed@foo af36ee@fields) (let ((af36f2@gen-name '#f)) (begin (set! af36f2@gen-name (lambda (af372f@x) (af2d92@datum->syntax af36ed@foo (string->symbol (string-append (symbol->string (af2d94@syntax->datum af36ed@foo)) '"-" (symbol->string (af2d94@syntax->datum af372f@x))))))) (map (lambda (af36f3@field) (let ((af36f5@t af36f3@field)) (let ((af36f7@ls/false (af2cae@syntax-dispatch af36f5@t '(#(scheme-id mutable) any any any)))) (if (and af36f7@ls/false (apply (lambda (af36f9@name af36fa@accessor af36fb@mutator) (af2aa7@id? af36fa@accessor)) af36f7@ls/false)) (apply (lambda (af36ff@name af3700@accessor af3701@mutator) af3700@accessor) af36f7@ls/false) (let ((af3705@t af36f5@t)) (let ((af3707@ls/false (af2cae@syntax-dispatch af3705@t '(#(scheme-id immutable) any any)))) (if (and af3707@ls/false (apply (lambda (af3709@name af370a@accessor) (af2aa7@id? af370a@accessor)) af3707@ls/false)) (apply (lambda (af370d@name af370e@accessor) af370e@accessor) af3707@ls/false) (let ((af3711@t af3705@t)) (let ((af3713@ls/false (af2cae@syntax-dispatch af3711@t '(#(scheme-id mutable) any)))) (if (and af3713@ls/false (apply (lambda (af3715@name) (af2aa7@id? af3715@name)) af3713@ls/false)) (apply (lambda (af3717@name) (af36f2@gen-name af3717@name)) af3713@ls/false) (let ((af3719@t af3711@t)) (let ((af371b@ls/false (af2cae@syntax-dispatch af3719@t '(#(scheme-id immutable) any)))) (if (and af371b@ls/false (apply (lambda (af371d@name) (af2aa7@id? af371d@name)) af371b@ls/false)) (apply (lambda (af371f@name) (af36f2@gen-name af371f@name)) af371b@ls/false) (let ((af3721@t af3719@t)) (let ((af3723@ls/false (af2cae@syntax-dispatch af3721@t 'any))) (if (and af3723@ls/false (apply (lambda (af3725@name) (af2aa7@id? af3725@name)) af3723@ls/false)) (apply (lambda (af3727@name) (af36f2@gen-name af3727@name)) af3723@ls/false) (let ((af3729@t af3721@t)) (let ((af372b@ls/false (af2cae@syntax-dispatch af3729@t 'any))) (if af372b@ls/false (apply (lambda (af372d@others) (af2d8e@syntax-violation '#f '"invalid field spec" af36f3@field)) af372b@ls/false) (af2d8e@syntax-violation '#f '"invalid syntax" af3729@t)))))))))))))))))))) af36ee@fields))))) (set! af3690@enumerate (lambda (af36e5@ls) (let af36eb@f ((af36e7@ls af36e5@ls) (af36e8@i '0)) (if (null? af36e7@ls) '() (cons af36e8@i (af36eb@f (cdr af36e7@ls) (+ af36e8@i '1))))))) (set! af3692@do-define-record (lambda (af36bd@namespec af36be@clause*) (let ((af36c1@foo (af3676@get-record-name af36bd@namespec))) (let ((af36c3@foo-rtd (gensym))) (let ((af36c5@foo-rcd (gensym))) (let ((af36c7@protocol (gensym))) (let ((af36c9@make-foo (af3678@get-record-constructor-name af36bd@namespec))) (let ((af36cb@fields (af3688@get-fields af36be@clause*))) (let ((af36cd@idx* (af3690@enumerate af36cb@fields))) (let ((af36cf@foo-x* (af368e@get-accessors af36c1@foo af36cb@fields))) (let ((af36d1@set-foo-x!* (af368c@get-mutators af36c1@foo af36cb@fields))) (let ((af36d3@set-foo-idx* (af368a@get-mutator-indices af36cb@fields))) (let ((af36d5@foo? (af367a@get-record-predicate-name af36bd@namespec))) (let ((af36d7@foo-rtd-code (af367e@foo-rtd-code af36c1@foo af36be@clause* (af3680@parent-rtd-code af36be@clause*)))) (let ((af36d9@foo-rcd-code (af3684@foo-rcd-code af36be@clause* af36c3@foo-rtd af36c7@protocol (af3682@parent-rcd-code af36be@clause*)))) (let ((af36db@protocol-code (af3686@get-protocol-code af36be@clause*))) (af2c64@bless (cons 'begin (cons (list 'define af36c3@foo-rtd af36d7@foo-rtd-code) (cons (list 'define af36c7@protocol af36db@protocol-code) (cons (list 'define af36c5@foo-rcd af36d9@foo-rcd-code) (cons (list 'define-syntax af36c1@foo (list 'list ''$rtd (list 'syntax af36c3@foo-rtd) (list 'syntax af36c5@foo-rcd))) (cons (list 'define af36d5@foo? (list 'record-predicate af36c3@foo-rtd)) (cons (list 'define af36c9@make-foo (list 'record-constructor af36c5@foo-rcd)) (append (map (lambda (af36dd@foo-x af36de@idx) (list 'define af36dd@foo-x (list 'record-accessor af36c3@foo-rtd af36de@idx))) af36cf@foo-x* af36cd@idx*) (map (lambda (af36e1@set-foo-x! af36e2@idx) (list 'define af36e1@set-foo-x! (list 'record-mutator af36c3@foo-rtd af36e2@idx))) af36d1@set-foo-x!* af36d3@set-foo-idx*)))))))))))))))))))))))))) (set! af3694@verify-clauses (lambda (af369d@x af369e@cls*) (let ((af36a2@valid-kwds '#f) (af36a4@free-id-member? '#f)) (begin (set! af36a2@valid-kwds (map af2c64@bless '(fields parent parent-rtd protocol sealed opaque nongenerative))) (set! af36a4@free-id-member? (lambda (af36b9@x af36ba@ls) (and (pair? af36ba@ls) (or (af2aad@free-id=? af36b9@x (car af36ba@ls)) (af36a4@free-id-member? af36b9@x (cdr af36ba@ls)))))) (let af36a9@f ((af36a5@cls* af369e@cls*) (af36a6@seen* '())) (if (not (null? af36a5@cls*)) (let ((af36ab@t (car af36a5@cls*))) (let ((af36ad@ls/false (af2cae@syntax-dispatch af36ab@t '(any . any)))) (if af36ad@ls/false (apply (lambda (af36af@kwd af36b0@rest) (if (or (not (af2aa7@id? af36af@kwd)) (not (af36a4@free-id-member? af36af@kwd af36a2@valid-kwds))) (af2d8e@syntax-violation '#f '"not a valid define-record-type keyword" af36af@kwd) (if (af2ab3@bound-id-member? af36af@kwd af36a6@seen*) (af2d8e@syntax-violation '#f '"duplicate use of keyword " af369d@x af36af@kwd) (af36a9@f (cdr af36a5@cls*) (cons af36af@kwd af36a6@seen*))))) af36ad@ls/false) (let ((af36b3@t af36ab@t)) (let ((af36b5@ls/false (af2cae@syntax-dispatch af36b3@t 'any))) (if af36b5@ls/false (apply (lambda (af36b7@cls) (af2d8e@syntax-violation '#f '"malformed define-record-type clause" af36b7@cls)) af36b5@ls/false) (af2d8e@syntax-violation '#f '"invalid syntax" af36b3@t))))))) (void))))))) (let ((af3695@t af3671@x)) (let ((af3697@ls/false (af2cae@syntax-dispatch af3695@t '(_ any . each-any)))) (if af3697@ls/false (apply (lambda (af3699@namespec af369a@clause*) (begin (af3694@verify-clauses af3671@x af369a@clause*) (af3692@do-define-record af3699@namespec af369a@clause*))) af3697@ls/false) (af2d8e@syntax-violation '#f '"invalid syntax" af3695@t)))))))) (set! af477c@af2ca2@define-record-type-macro af2ca2@define-record-type-macro) (set! af2ca4@define-condition-type-macro (lambda (af386d@x) (let ((af3870@mkname '#f)) (begin (set! af3870@mkname (lambda (af389d@name af389e@suffix) (af2d92@datum->syntax af389d@name (string->symbol (string-append (symbol->string (af2d94@syntax->datum af389d@name)) af389e@suffix))))) (let ((af3871@t af386d@x)) (let ((af3873@ls/false (af2cae@syntax-dispatch af3871@t '(any any any any any . #(each (any any)))))) (if (and af3873@ls/false (apply (lambda (af3875@ctxt af3876@name af3877@super af3878@constructor af3879@predicate af387a@field* af387b@accessor*) (and (af2aa7@id? af3876@name) (af2aa7@id? af3877@super) (af2aa7@id? af3878@constructor) (af2aa7@id? af3879@predicate) (for-all af2aa7@id? af387a@field*) (for-all af2aa7@id? af387b@accessor*))) af3873@ls/false)) (apply (lambda (af3883@ctxt af3884@name af3885@super af3886@constructor af3887@predicate af3888@field* af3889@accessor*) (let ((af3891@aux-accessor* (map (lambda (af3893@x) (gensym)) af3889@accessor*))) (af2c64@bless (cons 'begin (cons (cons 'define-record-type (cons (list af3884@name af3886@constructor (gensym)) (cons (list 'parent af3885@super) (cons (cons 'fields (map (lambda (af3895@field af3896@aux) (list 'immutable af3895@field af3896@aux)) af3888@field* af3891@aux-accessor*)) '((nongenerative) (sealed #f) (opaque #f)))))) (cons (list 'define af3887@predicate (list 'condition-predicate (list 'record-type-descriptor af3884@name))) (map (lambda (af3899@accessor af389a@aux) (list 'define af3899@accessor (list 'condition-accessor (list 'record-type-descriptor af3884@name) af389a@aux))) af3889@accessor* af3891@aux-accessor*))))))) af3873@ls/false) (af2d8e@syntax-violation '#f '"invalid syntax" af3871@t)))))))) (set! af477d@af2ca4@define-condition-type-macro af2ca4@define-condition-type-macro) (set! af2ca6@incorrect-usage-macro (lambda (af38a1@e) (af2d8e@syntax-violation '#f '"incorrect usage of auxiliary keyword" af38a1@e))) (set! af477e@af2ca6@incorrect-usage-macro af2ca6@incorrect-usage-macro) (set! af2ca8@parameterize-macro (lambda (af38a3@e) (let ((af38a5@t af38a3@e)) (let ((af38a7@ls/false (af2cae@syntax-dispatch af38a5@t '(_ () any . each-any)))) (if af38a7@ls/false (apply (lambda (af38a9@b af38aa@b*) (af2c64@bless (cons 'let (cons '() (cons af38a9@b af38aa@b*))))) af38a7@ls/false) (let ((af38ad@t af38a5@t)) (let ((af38af@ls/false (af2cae@syntax-dispatch af38ad@t '(_ #(each (any any)) any . each-any)))) (if af38af@ls/false (apply (lambda (af38b1@olhs* af38b2@orhs* af38b3@b af38b4@b*) (let ((af38b9@lhs* (af2d7c@generate-temporaries af38b1@olhs*)) (af38ba@rhs* (af2d7c@generate-temporaries af38b2@orhs*))) (af2c64@bless (cons (list 'lambda (append af38b9@lhs* af38ba@rhs*) (list 'let (list (list 'swap (cons 'lambda (cons '() (map (lambda (af38bd@lhs af38be@rhs) (list 'let (list (list 't (list af38bd@lhs))) (list af38bd@lhs af38be@rhs) (cons 'set! (cons af38be@rhs '(t))))) af38b9@lhs* af38ba@rhs*))))) (cons 'dynamic-wind (cons 'swap (cons (cons 'lambda (cons '() (cons af38b3@b af38b4@b*))) '(swap)))))) (append af38b1@olhs* af38b2@orhs*))))) af38af@ls/false) (af2d8e@syntax-violation '#f '"invalid syntax" af38ad@t))))))))) (set! af477f@af2ca8@parameterize-macro af2ca8@parameterize-macro) (set! af2caa@foreign-call-transformer (lambda (af38c1@e af38c2@r af38c3@mr) (let ((af38c7@t af38c1@e)) (let ((af38c9@ls/false (af2cae@syntax-dispatch af38c7@t '(_ any . each-any)))) (if af38c9@ls/false (apply (lambda (af38cb@name af38cc@arg*) (cons 'foreign-call (cons (af2cd0@chi-expr af38cb@name af38c2@r af38c3@mr) (af2ccc@chi-expr* af38cc@arg* af38c2@r af38c3@mr)))) af38c9@ls/false) (af2d8e@syntax-violation '#f '"invalid syntax" af38c7@t)))))) (set! af4780@af2caa@foreign-call-transformer af2caa@foreign-call-transformer) (set! af2cac@convert-pattern (lambda (af38cf@pattern af38d0@keys) (let ((af38d4@cvt* '#f) (af38d6@cvt '#f)) (begin (set! af38d4@cvt* (lambda (af3973@p* af3974@n af3975@ids) (if (null? af3973@p*) (values '() af3975@ids) (call-with-values (lambda () (af38d4@cvt* (cdr af3973@p*) af3974@n af3975@ids)) (lambda (af397d@af397a af397e@af397c) (let ((af3981@ids af397e@af397c) (af3982@y af397d@af397a)) (call-with-values (lambda () (af38d6@cvt (car af3973@p*) af3974@n af3981@ids)) (lambda (af3989@af3986 af398a@af3988) (let ((af398d@ids af398a@af3988) (af398e@x af3989@af3986)) (values (cons af398e@x af3982@y) af398d@ids)))))))))) (set! af38d6@cvt (lambda (af38d7@p af38d8@n af38d9@ids) (let ((af38dd@t af38d7@p)) (let ((af38df@ls/false (af2cae@syntax-dispatch af38dd@t 'any))) (if (and af38df@ls/false (apply (lambda (af38e1@id) (af2aa7@id? af38e1@id)) af38df@ls/false)) (apply (lambda (af38e3@id) (if (af2ab3@bound-id-member? af38d7@p af38d0@keys) (values (vector 'free-id af38d7@p) af38d9@ids) (if (af2aad@free-id=? af38d7@p (af2c36@scheme-stx '_)) (values '_ af38d9@ids) (values 'any (cons (cons af38d7@p af38d8@n) af38d9@ids))))) af38df@ls/false) (let ((af38e5@t af38dd@t)) (let ((af38e7@ls/false (af2cae@syntax-dispatch af38e5@t '(any any)))) (if (and af38e7@ls/false (apply (lambda (af38e9@p af38ea@dots) (af2cb0@ellipsis? af38ea@dots)) af38e7@ls/false)) (apply (lambda (af38ed@p af38ee@dots) (call-with-values (lambda () (af38d6@cvt af38ed@p (+ af38d8@n '1) af38d9@ids)) (lambda (af38f5@af38f2 af38f6@af38f4) (let ((af38f9@ids af38f6@af38f4) (af38fa@p af38f5@af38f2)) (values (if (eq? af38fa@p 'any) 'each-any (vector 'each af38fa@p)) af38f9@ids))))) af38e7@ls/false) (let ((af38fd@t af38e5@t)) (let ((af38ff@ls/false (af2cae@syntax-dispatch af38fd@t '(any any . #(each+ any () any))))) (if (and af38ff@ls/false (apply (lambda (af3901@x af3902@dots af3903@ys af3904@z) (af2cb0@ellipsis? af3902@dots)) af38ff@ls/false)) (apply (lambda (af3909@x af390a@dots af390b@ys af390c@z) (call-with-values (lambda () (af38d6@cvt af390c@z af38d8@n af38d9@ids)) (lambda (af3915@af3912 af3916@af3914) (let ((af3919@ids af3916@af3914) (af391a@z af3915@af3912)) (call-with-values (lambda () (af38d4@cvt* af390b@ys af38d8@n af3919@ids)) (lambda (af3921@af391e af3922@af3920) (let ((af3925@ids af3922@af3920) (af3926@ys af3921@af391e)) (call-with-values (lambda () (af38d6@cvt af3909@x (+ af38d8@n '1) af3925@ids)) (lambda (af392d@af392a af392e@af392c) (let ((af3931@ids af392e@af392c) (af3932@x af392d@af392a)) (values (vector 'each+ af3932@x (reverse af3926@ys) af391a@z) af3931@ids))))))))))) af38ff@ls/false) (let ((af3935@t af38fd@t)) (let ((af3937@ls/false (af2cae@syntax-dispatch af3935@t '(any . any)))) (if af3937@ls/false (apply (lambda (af3939@x af393a@y) (call-with-values (lambda () (af38d6@cvt af393a@y af38d8@n af38d9@ids)) (lambda (af3941@af393e af3942@af3940) (let ((af3945@ids af3942@af3940) (af3946@y af3941@af393e)) (call-with-values (lambda () (af38d6@cvt af3939@x af38d8@n af3945@ids)) (lambda (af394d@af394a af394e@af394c) (let ((af3951@ids af394e@af394c) (af3952@x af394d@af394a)) (values (cons af3952@x af3946@y) af3951@ids)))))))) af3937@ls/false) (let ((af3955@t af3935@t)) (let ((af3957@ls/false (af2cae@syntax-dispatch af3955@t '()))) (if af3957@ls/false (apply (lambda () (values '() af38d9@ids)) af3957@ls/false) (let ((af3959@t af3955@t)) (let ((af395b@ls/false (af2cae@syntax-dispatch af3959@t '#(vector each-any)))) (if (and af395b@ls/false (apply (lambda (af395d@p) (not (af2a73@stx? af395d@p))) af395b@ls/false)) (apply (lambda (af395f@p) (call-with-values (lambda () (af38d6@cvt af395f@p af38d8@n af38d9@ids)) (lambda (af3965@af3962 af3966@af3964) (let ((af3969@ids af3966@af3964) (af396a@p af3965@af3962)) (values (vector 'vector af396a@p) af3969@ids))))) af395b@ls/false) (let ((af396d@t af3959@t)) (let ((af396f@ls/false (af2cae@syntax-dispatch af396d@t 'any))) (if af396f@ls/false (apply (lambda (af3971@datum) (values (vector 'atom (af2abb@stx->datum af3971@datum)) af38d9@ids)) af396f@ls/false) (af2d8e@syntax-violation '#f '"invalid syntax" af396d@t)))))))))))))))))))))))) (af38d6@cvt af38cf@pattern '0 '()))))) (set! af4781@af2cac@convert-pattern af2cac@convert-pattern) (set! af2cae@syntax-dispatch (let ((af3992@stx^ '#f) (af3994@match-each '#f) (af3996@match-each+ '#f) (af3998@match-each-any '#f) (af399a@match-empty '#f) (af399c@combine '#f) (af399e@match* '#f) (af39a0@match '#f)) (begin (set! af3992@stx^ (lambda (af3a6d@e af3a6e@m* af3a6f@s* af3a70@ae*) (if (and (null? af3a6e@m*) (null? af3a6f@s*) (null? af3a70@ae*)) af3a6d@e (af2a8f@mkstx af3a6d@e af3a6e@m* af3a6f@s* af3a70@ae*)))) (set! af3994@match-each (lambda (af3a4d@e af3a4e@p af3a4f@m* af3a50@s* af3a51@ae*) (if (pair? af3a4d@e) (let ((af3a57@first (af39a0@match (car af3a4d@e) af3a4e@p af3a4f@m* af3a50@s* af3a51@ae* '()))) (and af3a57@first (let ((af3a59@rest (af3994@match-each (cdr af3a4d@e) af3a4e@p af3a4f@m* af3a50@s* af3a51@ae*))) (and af3a59@rest (cons af3a57@first af3a59@rest))))) (if (null? af3a4d@e) '() (if (af2a73@stx? af3a4d@e) (and (not (af2a2d@top-marked? af3a4f@m*)) (call-with-values (lambda () (join-wraps af3a4f@m* af3a50@s* af3a51@ae* af3a4d@e)) (lambda (af3a61@af3a5c af3a62@af3a5e af3a63@af3a60) (let ((af3a67@ae* af3a63@af3a60) (af3a68@s* af3a62@af3a5e) (af3a69@m* af3a61@af3a5c)) (af3994@match-each (af2a75@stx-expr af3a4d@e) af3a4e@p af3a69@m* af3a68@s* af3a67@ae*))))) (if (af25e6@af24ba@annotation? af3a4d@e) (af3994@match-each (af25e8@af24be@annotation-expression af3a4d@e) af3a4e@p af3a4f@m* af3a50@s* af3a51@ae*) '#f)))))) (set! af3996@match-each+ (lambda (af3a0d@e af3a0e@x-pat af3a0f@y-pat af3a10@z-pat af3a11@m* af3a12@s* af3a13@ae* af3a14@r) (let af3a25@f ((af3a1d@e af3a0d@e) (af3a1e@m* af3a11@m*) (af3a1f@s* af3a12@s*) (af3a20@ae* af3a13@ae*)) (if (pair? af3a1d@e) (call-with-values (lambda () (af3a25@f (cdr af3a1d@e) af3a1e@m* af3a1f@s* af3a20@ae*)) (lambda (af3a2d@af3a28 af3a2e@af3a2a af3a2f@af3a2c) (let ((af3a33@r af3a2f@af3a2c) (af3a34@y-pat af3a2e@af3a2a) (af3a35@xr* af3a2d@af3a28)) (if af3a33@r (if (null? af3a34@y-pat) (let ((af3a39@xr (af39a0@match (car af3a1d@e) af3a0e@x-pat af3a1e@m* af3a1f@s* af3a20@ae* '()))) (if af3a39@xr (values (cons af3a39@xr af3a35@xr*) af3a34@y-pat af3a33@r) (values '#f '#f '#f))) (values '() (cdr af3a34@y-pat) (af39a0@match (car af3a1d@e) (car af3a34@y-pat) af3a1e@m* af3a1f@s* af3a20@ae* af3a33@r))) (values '#f '#f '#f))))) (if (af2a73@stx? af3a1d@e) (if (af2a2d@top-marked? af3a1e@m*) (values '() af3a0f@y-pat (af39a0@match af3a1d@e af3a10@z-pat af3a1e@m* af3a1f@s* af3a20@ae* af3a14@r)) (call-with-values (lambda () (join-wraps af3a1e@m* af3a1f@s* af3a20@ae* af3a1d@e)) (lambda (af3a41@af3a3c af3a42@af3a3e af3a43@af3a40) (let ((af3a47@ae* af3a43@af3a40) (af3a48@s* af3a42@af3a3e) (af3a49@m* af3a41@af3a3c)) (af3a25@f (af2a75@stx-expr af3a1d@e) af3a49@m* af3a48@s* af3a47@ae*))))) (if (af25e6@af24ba@annotation? af3a1d@e) (af3a25@f (af25e8@af24be@annotation-expression af3a1d@e) af3a1e@m* af3a1f@s* af3a20@ae*) (values '() af3a0f@y-pat (af39a0@match af3a1d@e af3a10@z-pat af3a1e@m* af3a1f@s* af3a20@ae* af3a14@r)))))))) (set! af3998@match-each-any (lambda (af39f1@e af39f2@m* af39f3@s* af39f4@ae*) (if (pair? af39f1@e) (let ((af39f9@l (af3998@match-each-any (cdr af39f1@e) af39f2@m* af39f3@s* af39f4@ae*))) (and af39f9@l (cons (af3992@stx^ (car af39f1@e) af39f2@m* af39f3@s* af39f4@ae*) af39f9@l))) (if (null? af39f1@e) '() (if (af2a73@stx? af39f1@e) (and (not (af2a2d@top-marked? af39f2@m*)) (call-with-values (lambda () (join-wraps af39f2@m* af39f3@s* af39f4@ae* af39f1@e)) (lambda (af3a01@af39fc af3a02@af39fe af3a03@af3a00) (let ((af3a07@ae* af3a03@af3a00) (af3a08@s* af3a02@af39fe) (af3a09@m* af3a01@af39fc)) (af3998@match-each-any (af2a75@stx-expr af39f1@e) af3a09@m* af3a08@s* af3a07@ae*))))) (if (af25e6@af24ba@annotation? af39f1@e) (af3998@match-each-any (af25e8@af24be@annotation-expression af39f1@e) af39f2@m* af39f3@s* af39f4@ae*) '#f)))))) (set! af399a@match-empty (lambda (af39eb@p af39ec@r) (if (null? af39eb@p) af39ec@r (if (eq? af39eb@p '_) af39ec@r (if (eq? af39eb@p 'any) (cons '() af39ec@r) (if (pair? af39eb@p) (af399a@match-empty (car af39eb@p) (af399a@match-empty (cdr af39eb@p) af39ec@r)) (if (eq? af39eb@p 'each-any) (cons '() af39ec@r) (let ((af39ef@t (vector-ref af39eb@p '0))) (if (memv af39ef@t '(each)) (af399a@match-empty (vector-ref af39eb@p '1) af39ec@r) (if (memv af39ef@t '(each+)) (af399a@match-empty (vector-ref af39eb@p '1) (af399a@match-empty (reverse (vector-ref af39eb@p '2)) (af399a@match-empty (vector-ref af39eb@p '3) af39ec@r))) (if (memv af39ef@t '(free-id atom)) af39ec@r (if (memv af39ef@t '(scheme-id atom)) af39ec@r (if (memv af39ef@t '(vector)) (af399a@match-empty (vector-ref af39eb@p '1) af39ec@r) (assertion-violation 'syntax-dispatch '"invalid pattern" af39eb@p)))))))))))))) (set! af399c@combine (lambda (af39e7@r* af39e8@r) (if (null? (car af39e7@r*)) af39e8@r (cons (map car af39e7@r*) (af399c@combine (map cdr af39e7@r*) af39e8@r))))) (set! af399e@match* (lambda (af39c3@e af39c4@p af39c5@m* af39c6@s* af39c7@ae* af39c8@r) (if (null? af39c4@p) (and (null? af39c3@e) af39c8@r) (if (pair? af39c4@p) (and (pair? af39c3@e) (af39a0@match (car af39c3@e) (car af39c4@p) af39c5@m* af39c6@s* af39c7@ae* (af39a0@match (cdr af39c3@e) (cdr af39c4@p) af39c5@m* af39c6@s* af39c7@ae* af39c8@r))) (if (eq? af39c4@p 'each-any) (let ((af39cf@l (af3998@match-each-any af39c3@e af39c5@m* af39c6@s* af39c7@ae*))) (and af39cf@l (cons af39cf@l af39c8@r))) (let ((af39d1@t (vector-ref af39c4@p '0))) (if (memv af39d1@t '(each)) (if (null? af39c3@e) (af399a@match-empty (vector-ref af39c4@p '1) af39c8@r) (let ((af39d3@r* (af3994@match-each af39c3@e (vector-ref af39c4@p '1) af39c5@m* af39c6@s* af39c7@ae*))) (and af39d3@r* (af399c@combine af39d3@r* af39c8@r)))) (if (memv af39d1@t '(free-id)) (and (symbol? af39c3@e) (af2a2d@top-marked? af39c5@m*) (af2aad@free-id=? (af3992@stx^ af39c3@e af39c5@m* af39c6@s* af39c7@ae*) (vector-ref af39c4@p '1)) af39c8@r) (if (memv af39d1@t '(scheme-id)) (and (symbol? af39c3@e) (af2a2d@top-marked? af39c5@m*) (af2aad@free-id=? (af3992@stx^ af39c3@e af39c5@m* af39c6@s* af39c7@ae*) (af2c36@scheme-stx (vector-ref af39c4@p '1))) af39c8@r) (if (memv af39d1@t '(each+)) (call-with-values (lambda () (af3996@match-each+ af39c3@e (vector-ref af39c4@p '1) (vector-ref af39c4@p '2) (vector-ref af39c4@p '3) af39c5@m* af39c6@s* af39c7@ae* af39c8@r)) (lambda (af39db@af39d6 af39dc@af39d8 af39dd@af39da) (let ((af39e1@r af39dd@af39da) (af39e2@y-pat af39dc@af39d8) (af39e3@xr* af39db@af39d6)) (and af39e1@r (null? af39e2@y-pat) (if (null? af39e3@xr*) (af399a@match-empty (vector-ref af39c4@p '1) af39e1@r) (af399c@combine af39e3@xr* af39e1@r)))))) (if (memv af39d1@t '(atom)) (and (fast-equal? (vector-ref af39c4@p '1) (af2ab9@strip af39c3@e af39c5@m*)) af39c8@r) (if (memv af39d1@t '(vector)) (and (vector? af39c3@e) (af39a0@match (vector->list af39c3@e) (vector-ref af39c4@p '1) af39c5@m* af39c6@s* af39c7@ae* af39c8@r)) (assertion-violation 'syntax-dispatch '"invalid pattern" af39c4@p))))))))))))) (set! af39a0@match (lambda (af39a5@e af39a6@p af39a7@m* af39a8@s* af39a9@ae* af39aa@r) (if (not af39aa@r) '#f (if (eq? af39a6@p '_) af39aa@r (if (eq? af39a6@p 'any) (cons (af3992@stx^ af39a5@e af39a7@m* af39a8@s* af39a9@ae*) af39aa@r) (if (af2a73@stx? af39a5@e) (and (not (af2a2d@top-marked? af39a7@m*)) (call-with-values (lambda () (join-wraps af39a7@m* af39a8@s* af39a9@ae* af39a5@e)) (lambda (af39b7@af39b2 af39b8@af39b4 af39b9@af39b6) (let ((af39bd@ae* af39b9@af39b6) (af39be@s* af39b8@af39b4) (af39bf@m* af39b7@af39b2)) (af39a0@match (af2a75@stx-expr af39a5@e) af39a6@p af39bf@m* af39be@s* af39bd@ae* af39aa@r))))) (if (af25e6@af24ba@annotation? af39a5@e) (af39a0@match (af25e8@af24be@annotation-expression af39a5@e) af39a6@p af39a7@m* af39a8@s* af39a9@ae* af39aa@r) (af399e@match* af39a5@e af39a6@p af39a7@m* af39a8@s* af39a9@ae* af39aa@r)))))))) (lambda (af39a1@e af39a2@p) (af39a0@match af39a1@e af39a2@p '() '() '() '()))))) (set! af4782@af2cae@syntax-dispatch af2cae@syntax-dispatch) (set! af2cb0@ellipsis? (lambda (af3a75@x) (and (af2aa7@id? af3a75@x) (af2aad@free-id=? af3a75@x (af2c36@scheme-stx '...))))) (set! af4783@af2cb0@ellipsis? af2cb0@ellipsis?) (set! af2cb2@underscore? (lambda (af3a77@x) (and (af2aa7@id? af3a77@x) (af2aad@free-id=? af3a77@x (af2c36@scheme-stx '_))))) (set! af4784@af2cb2@underscore? af2cb2@underscore?) (set! af2cb4@verify-literals (lambda (af3a79@lits af3a7a@expr) (for-each (lambda (af3a7d@x) (if (or (not (af2aa7@id? af3a7d@x)) (af2cb0@ellipsis? af3a7d@x) (af2cb2@underscore? af3a7d@x)) (af2d8e@syntax-violation '#f '"invalid literal" af3a7a@expr af3a7d@x) (void))) af3a79@lits))) (set! af4785@af2cb4@verify-literals af2cb4@verify-literals) (set! af2cb6@syntax-case-transformer (let ((af3a80@build-dispatch-call '#f) (af3a82@invalid-ids-error '#f) (af3a84@gen-clause '#f) (af3a86@gen-syntax-case '#f)) (begin (set! af3a80@build-dispatch-call (lambda (af3af1@pvars af3af2@expr af3af3@y af3af4@r af3af5@mr) (let ((af3afb@ids (map car af3af1@pvars)) (af3afc@levels (map cdr af3af1@pvars))) (let ((af3aff@labels (map af2a33@gen-label af3afb@ids)) (af3b00@new-vars (map af2a2f@gen-lexical af3afb@ids))) (let ((af3b03@body (af2cd0@chi-expr (af2a93@add-subst (af2a67@make-full-rib af3afb@ids af3aff@labels) af3af2@expr) (append (map (lambda (af3b05@label af3b06@var af3b07@level) (cons af3b05@label (af2ac1@make-binding 'syntax (cons af3b06@var af3b07@level)))) af3aff@labels af3b00@new-vars (map cdr af3af1@pvars)) af3af4@r) af3af5@mr))) (list '(primitive apply) (af2a0a@af2936@build-lambda '#f af3b00@new-vars af3b03@body) af3af3@y)))))) (set! af3a82@invalid-ids-error (lambda (af3ae5@id* af3ae6@e af3ae7@class) (let af3aef@find ((af3aeb@id* af3ae5@id*) (af3aec@ok* '())) (if (null? af3aeb@id*) (af2d8e@syntax-violation '#f '"invalid syntax" af3ae6@e) (if (af2aa7@id? (car af3aeb@id*)) (if (af2ab3@bound-id-member? (car af3aeb@id*) af3aec@ok*) (af2d8a@syntax-error (car af3aeb@id*) '"duplicate " af3ae7@class) (af3aef@find (cdr af3aeb@id*) (cons (car af3aeb@id*) af3aec@ok*))) (af2d8a@syntax-error (car af3aeb@id*) '"invalid " af3ae7@class)))))) (set! af3a84@gen-clause (lambda (af3abd@x af3abe@keys af3abf@clauses af3ac0@r af3ac1@mr af3ac2@pat af3ac3@fender af3ac4@expr) (call-with-values (lambda () (af2cac@convert-pattern af3ac2@pat af3abe@keys)) (lambda (af3ad1@af3ace af3ad2@af3ad0) (let ((af3ad5@pvars af3ad2@af3ad0) (af3ad6@p af3ad1@af3ace)) (if (not (af2ab1@distinct-bound-ids? (map car af3ad5@pvars))) (af3a82@invalid-ids-error (map car af3ad5@pvars) af3ac2@pat '"pattern variable") (if (not (for-all (lambda (af3ad9@x) (not (af2cb0@ellipsis? (car af3ad9@x)))) af3ad5@pvars)) (af2d8e@syntax-violation '#f '"misplaced ellipsis in syntax-case pattern" af3ac2@pat) (let ((af3adb@y (af2a2f@gen-lexical 'tmp))) (let ((af3add@test (if (eq? af3ac3@fender '#t) af3adb@y (let ((af3adf@call (af3a80@build-dispatch-call af3ad5@pvars af3ac3@fender af3adb@y af3ac0@r af3ac1@mr))) (list 'if af3adb@y af3adf@call (list 'quote '#f)))))) (let ((af3ae1@conseq (af3a80@build-dispatch-call af3ad5@pvars af3ac4@expr af3adb@y af3ac0@r af3ac1@mr))) (let ((af3ae3@altern (af3a86@gen-syntax-case af3abd@x af3abe@keys af3abf@clauses af3ac0@r af3ac1@mr))) (list (af2a0a@af2936@build-lambda '#f (list af3adb@y) (list 'if af3add@test af3ae1@conseq af3ae3@altern)) (list '(primitive syntax-dispatch) af3abd@x (list 'quote af3ad6@p)))))))))))))) (set! af3a86@gen-syntax-case (lambda (af3a9b@x af3a9c@keys af3a9d@clauses af3a9e@r af3a9f@mr) (if (null? af3a9d@clauses) (list '(primitive syntax-error) af3a9b@x) (let ((af3aa5@t (car af3a9d@clauses))) (let ((af3aa7@ls/false (af2cae@syntax-dispatch af3aa5@t '(any any)))) (if af3aa7@ls/false (apply (lambda (af3aa9@pat af3aaa@expr) (if (and (af2aa7@id? af3aa9@pat) (not (af2ab3@bound-id-member? af3aa9@pat af3a9c@keys)) (not (af2cb0@ellipsis? af3aa9@pat))) (if (af2aad@free-id=? af3aa9@pat (af2c36@scheme-stx '_)) (af2cd0@chi-expr af3aaa@expr af3a9e@r af3a9f@mr) (let ((af3aad@lab (af2a33@gen-label af3aa9@pat)) (af3aae@lex (af2a2f@gen-lexical af3aa9@pat))) (let ((af3ab1@body (af2cd0@chi-expr (af2a93@add-subst (af2a67@make-full-rib (list af3aa9@pat) (list af3aad@lab)) af3aaa@expr) (cons (cons af3aad@lab (af2ac1@make-binding 'syntax (cons af3aae@lex '0))) af3a9e@r) af3a9f@mr))) (list (af2a0a@af2936@build-lambda '#f (list af3aae@lex) af3ab1@body) af3a9b@x)))) (af3a84@gen-clause af3a9b@x af3a9c@keys (cdr af3a9d@clauses) af3a9e@r af3a9f@mr af3aa9@pat '#t af3aaa@expr))) af3aa7@ls/false) (let ((af3ab3@t af3aa5@t)) (let ((af3ab5@ls/false (af2cae@syntax-dispatch af3ab3@t '(any any any)))) (if af3ab5@ls/false (apply (lambda (af3ab7@pat af3ab8@fender af3ab9@expr) (af3a84@gen-clause af3a9b@x af3a9c@keys (cdr af3a9d@clauses) af3a9e@r af3a9f@mr af3ab7@pat af3ab8@fender af3ab9@expr)) af3ab5@ls/false) (af2d8e@syntax-violation '#f '"invalid syntax" af3ab3@t)))))))))) (lambda (af3a87@e af3a88@r af3a89@mr) (let ((af3a8d@t af3a87@e)) (let ((af3a8f@ls/false (af2cae@syntax-dispatch af3a8d@t '(_ any each-any . each-any)))) (if af3a8f@ls/false (apply (lambda (af3a91@expr af3a92@keys af3a93@clauses) (begin (af2cb4@verify-literals af3a92@keys af3a87@e) (let ((af3a97@x (af2a2f@gen-lexical 'tmp))) (let ((af3a99@body (af3a86@gen-syntax-case af3a97@x af3a92@keys af3a93@clauses af3a88@r af3a89@mr))) (list (af2a0a@af2936@build-lambda '#f (list af3a97@x) af3a99@body) (af2cd0@chi-expr af3a91@expr af3a88@r af3a89@mr)))))) af3a8f@ls/false) (af2d8e@syntax-violation '#f '"invalid syntax" af3a8d@t)))))))) (set! af4786@af2cb6@syntax-case-transformer af2cb6@syntax-case-transformer) (set! af2cb8@ellipsis-map (lambda (af3b0b@proc af3b0c@ls . af3b0f@ls*) (let ((af3b12@who '#f)) (begin (set! af3b12@who '...) (begin (if (not (list? af3b0c@ls)) (assertion-violation af3b12@who '"not a list" af3b0c@ls) (void)) (if (not (null? af3b0f@ls*)) (let ((af3b13@n (length af3b0c@ls))) (for-each (lambda (af3b15@x) (begin (if (not (list? af3b15@x)) (assertion-violation af3b12@who '"not a list" af3b15@x) (void)) (if (not (= (length af3b15@x) af3b13@n)) (assertion-violation af3b12@who '"length mismatch" af3b0c@ls af3b15@x) (void)))) af3b0f@ls*)) (void)) (apply map af3b0b@proc af3b0c@ls af3b0f@ls*)))))) (set! af4787@af2cb8@ellipsis-map af2cb8@ellipsis-map) (set! af2cba@syntax-transformer (let ((af3b18@gen-syntax '#f) (af3b1a@gen-ref '#f) (af3b1c@gen-append '#f) (af3b1e@gen-mappend '#f) (af3b20@gen-map '#f) (af3b22@gen-cons '#f) (af3b24@gen-vector '#f) (af3b26@regen '#f)) (begin (set! af3b18@gen-syntax (lambda (af3b8f@src af3b90@e af3b91@r af3b92@maps af3b93@ellipsis? af3b94@vec?) (let ((af3b9b@t af3b90@e)) (let ((af3b9d@ls/false (af2cae@syntax-dispatch af3b9b@t 'any))) (if (and af3b9d@ls/false (apply (lambda (af3b9f@dots) (af3b93@ellipsis? af3b9f@dots)) af3b9d@ls/false)) (apply (lambda (af3ba1@dots) (af2d8e@syntax-violation '#f '"misplaced ellipsis in syntax form" af3b8f@src)) af3b9d@ls/false) (let ((af3ba3@t af3b9b@t)) (let ((af3ba5@ls/false (af2cae@syntax-dispatch af3ba3@t 'any))) (if (and af3ba5@ls/false (apply (lambda (af3ba7@id) (af2aa7@id? af3ba7@id)) af3ba5@ls/false)) (apply (lambda (af3ba9@id) (let ((af3bab@label (af2abd@id->label af3b90@e))) (let ((af3bad@b (af2abf@label->binding af3bab@label af3b91@r))) (if (eq? (af2ac3@binding-type af3bad@b) 'syntax) (call-with-values (lambda () (let ((af3bb3@var.lev (af2ac5@binding-value af3bad@b))) (af3b1a@gen-ref af3b8f@src (car af3bb3@var.lev) (cdr af3bb3@var.lev) af3b92@maps))) (lambda (af3bb5@af3bb0 af3bb6@af3bb2) (let ((af3bb9@maps af3bb6@af3bb2) (af3bba@var af3bb5@af3bb0)) (values (list 'ref af3bba@var) af3bb9@maps)))) (values (list 'quote af3b90@e) af3b92@maps))))) af3ba5@ls/false) (let ((af3bbd@t af3ba3@t)) (let ((af3bbf@ls/false (af2cae@syntax-dispatch af3bbd@t '(any any)))) (if (and af3bbf@ls/false (apply (lambda (af3bc1@dots af3bc2@e) (af3b93@ellipsis? af3bc1@dots)) af3bbf@ls/false)) (apply (lambda (af3bc5@dots af3bc6@e) (if af3b94@vec? (af2d8e@syntax-violation '#f '"misplaced ellipsis in syntax form" af3b8f@src) (af3b18@gen-syntax af3b8f@src af3bc6@e af3b91@r af3b92@maps (lambda (af3bc9@x) '#f) '#f))) af3bbf@ls/false) (let ((af3bcb@t af3bbd@t)) (let ((af3bcd@ls/false (af2cae@syntax-dispatch af3bcb@t '(any any . any)))) (if (and af3bcd@ls/false (apply (lambda (af3bcf@x af3bd0@dots af3bd1@y) (af3b93@ellipsis? af3bd0@dots)) af3bcd@ls/false)) (apply (lambda (af3bd5@x af3bd6@dots af3bd7@y) (let af3bed@f ((af3bdb@y af3bd7@y) (af3bdc@k (lambda (af3bdf@maps) (call-with-values (lambda () (af3b18@gen-syntax af3b8f@src af3bd5@x af3b91@r (cons '() af3bdf@maps) af3b93@ellipsis? '#f)) (lambda (af3be5@af3be2 af3be6@af3be4) (let ((af3be9@maps af3be6@af3be4) (af3bea@x af3be5@af3be2)) (if (null? (car af3be9@maps)) (af2d8e@syntax-violation '#f '"extra ellipsis in syntax form" af3b8f@src) (values (af3b20@gen-map af3bea@x (car af3be9@maps)) (cdr af3be9@maps))))))))) (let ((af3bef@t af3bdb@y)) (let ((af3bf1@ls/false (af2cae@syntax-dispatch af3bef@t '()))) (if af3bf1@ls/false (apply (lambda () (af3bdc@k af3b92@maps)) af3bf1@ls/false) (let ((af3bf3@t af3bef@t)) (let ((af3bf5@ls/false (af2cae@syntax-dispatch af3bf3@t '(any . any)))) (if (and af3bf5@ls/false (apply (lambda (af3bf7@dots af3bf8@y) (af3b93@ellipsis? af3bf7@dots)) af3bf5@ls/false)) (apply (lambda (af3bfb@dots af3bfc@y) (af3bed@f af3bfc@y (lambda (af3bff@maps) (call-with-values (lambda () (af3bdc@k (cons '() af3bff@maps))) (lambda (af3c05@af3c02 af3c06@af3c04) (let ((af3c09@maps af3c06@af3c04) (af3c0a@x af3c05@af3c02)) (if (null? (car af3c09@maps)) (af2d8e@syntax-violation '#f '"extra ellipsis in syntax form" af3b8f@src) (values (af3b1e@gen-mappend af3c0a@x (car af3c09@maps)) (cdr af3c09@maps))))))))) af3bf5@ls/false) (let ((af3c0d@t af3bf3@t)) (let ((af3c0f@ls/false (af2cae@syntax-dispatch af3c0d@t '_))) (if af3c0f@ls/false (apply (lambda () (call-with-values (lambda () (af3b18@gen-syntax af3b8f@src af3bdb@y af3b91@r af3b92@maps af3b93@ellipsis? af3b94@vec?)) (lambda (af3c15@af3c12 af3c16@af3c14) (let ((af3c19@maps af3c16@af3c14) (af3c1a@y af3c15@af3c12)) (call-with-values (lambda () (af3bdc@k af3c19@maps)) (lambda (af3c21@af3c1e af3c22@af3c20) (let ((af3c25@maps af3c22@af3c20) (af3c26@x af3c21@af3c1e)) (values (af3b1c@gen-append af3c26@x af3c1a@y) af3c25@maps)))))))) af3c0f@ls/false) (af2d8e@syntax-violation '#f '"invalid syntax" af3c0d@t)))))))))))) af3bcd@ls/false) (let ((af3c29@t af3bcb@t)) (let ((af3c2b@ls/false (af2cae@syntax-dispatch af3c29@t '(any . any)))) (if af3c2b@ls/false (apply (lambda (af3c2d@x af3c2e@y) (call-with-values (lambda () (af3b18@gen-syntax af3b8f@src af3c2d@x af3b91@r af3b92@maps af3b93@ellipsis? '#f)) (lambda (af3c35@af3c32 af3c36@af3c34) (let ((af3c39@maps af3c36@af3c34) (af3c3a@xnew af3c35@af3c32)) (call-with-values (lambda () (af3b18@gen-syntax af3b8f@src af3c2e@y af3b91@r af3c39@maps af3b93@ellipsis? af3b94@vec?)) (lambda (af3c41@af3c3e af3c42@af3c40) (let ((af3c45@maps af3c42@af3c40) (af3c46@ynew af3c41@af3c3e)) (values (af3b22@gen-cons af3b90@e af3c2d@x af3c2e@y af3c3a@xnew af3c46@ynew) af3c45@maps)))))))) af3c2b@ls/false) (let ((af3c49@t af3c29@t)) (let ((af3c4b@ls/false (af2cae@syntax-dispatch af3c49@t '#(vector each-any)))) (if af3c4b@ls/false (apply (lambda (af3c4d@ls) (call-with-values (lambda () (af3b18@gen-syntax af3b8f@src af3c4d@ls af3b91@r af3b92@maps af3b93@ellipsis? '#t)) (lambda (af3c53@af3c50 af3c54@af3c52) (let ((af3c57@maps af3c54@af3c52) (af3c58@lsnew af3c53@af3c50)) (values (af3b24@gen-vector af3b90@e af3c4d@ls af3c58@lsnew) af3c57@maps))))) af3c4b@ls/false) (let ((af3c5b@t af3c49@t)) (let ((af3c5d@ls/false (af2cae@syntax-dispatch af3c5b@t '_))) (if af3c5d@ls/false (apply (lambda () (values (list 'quote af3b90@e) af3b92@maps)) af3c5d@ls/false) (af2d8e@syntax-violation '#f '"invalid syntax" af3c5b@t)))))))))))))))))))))))) (set! af3b1a@gen-ref (lambda (af3b75@src af3b76@var af3b77@level af3b78@maps) (if (= af3b77@level '0) (values af3b76@var af3b78@maps) (if (null? af3b78@maps) (af2d8e@syntax-violation '#f '"missing ellipsis in syntax form" af3b75@src) (call-with-values (lambda () (af3b1a@gen-ref af3b75@src af3b76@var (- af3b77@level '1) (cdr af3b78@maps))) (lambda (af3b81@af3b7e af3b82@af3b80) (let ((af3b85@outer-maps af3b82@af3b80) (af3b86@outer-var af3b81@af3b7e)) (let ((af3b89@t (assq af3b86@outer-var (car af3b78@maps)))) (if af3b89@t ((lambda (af3b8b@b) (values (cdr af3b8b@b) af3b78@maps)) af3b89@t) (let ((af3b8d@inner-var (af2a2f@gen-lexical 'tmp))) (values af3b8d@inner-var (cons (cons (cons af3b86@outer-var af3b8d@inner-var) (car af3b78@maps)) af3b85@outer-maps)))))))))))) (set! af3b1c@gen-append (lambda (af3b71@x af3b72@y) (if (fast-equal? af3b72@y ''()) af3b71@x (list 'append af3b71@x af3b72@y)))) (set! af3b1e@gen-mappend (lambda (af3b6d@e af3b6e@map-env) (list 'apply '(primitive append) (af3b20@gen-map af3b6d@e af3b6e@map-env)))) (set! af3b20@gen-map (lambda (af3b5b@e af3b5c@map-env) (let ((af3b5f@formals (map cdr af3b5c@map-env)) (af3b60@actuals (map (lambda (af3b63@x) (list 'ref (car af3b63@x))) af3b5c@map-env))) (if (eq? (car af3b5b@e) 'ref) (car af3b60@actuals) (if (for-all (lambda (af3b65@x) (and (eq? (car af3b65@x) 'ref) (memq (cadr af3b65@x) af3b5f@formals))) (cdr af3b5b@e)) (let ((af3b67@args (map (let ((af3b69@r (map cons af3b5f@formals af3b60@actuals))) (lambda (af3b6b@x) (cdr (assq (cadr af3b6b@x) af3b69@r)))) (cdr af3b5b@e)))) (cons 'map (cons (list 'primitive (car af3b5b@e)) af3b67@args))) (cons* 'map (list 'lambda af3b5f@formals af3b5b@e) af3b60@actuals)))))) (set! af3b22@gen-cons (lambda (af3b4b@e af3b4c@x af3b4d@y af3b4e@xnew af3b4f@ynew) (let ((af3b55@t (car af3b4f@ynew))) (if (memv af3b55@t '(quote)) (if (eq? (car af3b4e@xnew) 'quote) (let ((af3b57@xnew (cadr af3b4e@xnew)) (af3b58@ynew (cadr af3b4f@ynew))) (if (and (eq? af3b57@xnew af3b4c@x) (eq? af3b58@ynew af3b4d@y)) (list 'quote af3b4b@e) (list 'quote (cons af3b57@xnew af3b58@ynew)))) (if (null? (cadr af3b4f@ynew)) (list 'list af3b4e@xnew) (list 'cons af3b4e@xnew af3b4f@ynew))) (if (memv af3b55@t '(list)) (cons 'list (cons af3b4e@xnew (cdr af3b4f@ynew))) (list 'cons af3b4e@xnew af3b4f@ynew)))))) (set! af3b24@gen-vector (lambda (af3b45@e af3b46@ls af3b47@lsnew) (if (eq? (car af3b47@lsnew) 'quote) (if (eq? (cadr af3b47@lsnew) af3b46@ls) (list 'quote af3b45@e) (list 'quote (list->vector (cadr af3b47@lsnew)))) (if (eq? (car af3b47@lsnew) 'list) (cons 'vector (cdr af3b47@lsnew)) (list 'list->vector af3b47@lsnew))))) (set! af3b26@regen (lambda (af3b3f@x) (let ((af3b41@t (car af3b3f@x))) (if (memv af3b41@t '(ref)) (cadr af3b3f@x) (if (memv af3b41@t '(primitive)) (list 'primitive (cadr af3b3f@x)) (if (memv af3b41@t '(quote)) (list 'quote (cadr af3b3f@x)) (if (memv af3b41@t '(lambda)) (af2a0a@af2936@build-lambda '#f (cadr af3b3f@x) (af3b26@regen (caddr af3b3f@x))) (if (memv af3b41@t '(map)) (let ((af3b43@ls (map af3b26@regen (cdr af3b3f@x)))) (cons '(primitive ellipsis-map) af3b43@ls)) (cons (list 'primitive (car af3b3f@x)) (map af3b26@regen (cdr af3b3f@x))))))))))) (lambda (af3b27@e af3b28@r af3b29@mr) (let ((af3b2d@t af3b27@e)) (let ((af3b2f@ls/false (af2cae@syntax-dispatch af3b2d@t '(_ any)))) (if af3b2f@ls/false (apply (lambda (af3b31@x) (call-with-values (lambda () (af3b18@gen-syntax af3b27@e af3b31@x af3b28@r '() af2cb0@ellipsis? '#f)) (lambda (af3b37@af3b34 af3b38@af3b36) (let ((af3b3b@maps af3b38@af3b36) (af3b3c@e af3b37@af3b34)) (af3b26@regen af3b3c@e))))) af3b2f@ls/false) (af2d8e@syntax-violation '#f '"invalid syntax" af3b2d@t)))))))) (set! af4788@af2cba@syntax-transformer af2cba@syntax-transformer) (set! af2cbc@core-macro-transformer (lambda (af3c5f@name) (let ((af3c61@t af3c5f@name)) (if (memv af3c61@t '(quote)) af2c5e@quote-transformer (if (memv af3c61@t '(lambda)) af2c62@lambda-transformer (if (memv af3c61@t '(case-lambda)) af2c60@case-lambda-transformer (if (memv af3c61@t '(letrec)) af2c46@letrec-transformer (if (memv af3c61@t '(letrec*)) af2c48@letrec*-transformer (if (memv af3c61@t '(let)) af2c44@let-transformer (if (memv af3c61@t '(if)) af2c56@if-transformer (if (memv af3c61@t '(and)) af2c58@and-transformer (if (memv af3c61@t '(or)) af2c5a@or-transformer (if (memv af3c61@t '(foreign-call)) af2caa@foreign-call-transformer (if (memv af3c61@t '(syntax-case)) af2cb6@syntax-case-transformer (if (memv af3c61@t '(syntax)) af2cba@syntax-transformer (if (memv af3c61@t '(type-descriptor)) af2c4c@type-descriptor-transformer (if (memv af3c61@t '(record-type-descriptor)) af2c4e@record-type-descriptor-transformer (if (memv af3c61@t '(record-constructor-descriptor)) af2c50@record-constructor-descriptor-transformer (if (memv af3c61@t '(fluid-let-syntax)) af2c4a@fluid-let-syntax-transformer (assertion-violation 'macro-transformer '"BUG: cannot find transformer" af3c5f@name)))))))))))))))))))) (set! af4789@af2cbc@core-macro-transformer af2cbc@core-macro-transformer) (set! af2cbe@symbol-macro (lambda (af3c63@x af3c64@set) (let ((af3c67@t af3c63@x)) (let ((af3c69@ls/false (af2cae@syntax-dispatch af3c67@t '(_ any)))) (if (and af3c69@ls/false (apply (lambda (af3c6b@name) (and (af2aa7@id? af3c6b@name) (memq (af2aa9@id->sym af3c6b@name) af3c64@set))) af3c69@ls/false)) (apply (lambda (af3c6d@name) (af2c64@bless (list 'quote af3c6d@name))) af3c69@ls/false) (af2d8e@syntax-violation '#f '"invalid syntax" af3c67@t)))))) (set! af478a@af2cbe@symbol-macro af2cbe@symbol-macro) (set! af2cc0@macro-transformer (lambda (af3c6f@x) (if (procedure? af3c6f@x) af3c6f@x (if (symbol? af3c6f@x) (let ((af3c71@t af3c6f@x)) (if (memv af3c71@t '(define-record-type)) af2ca2@define-record-type-macro (if (memv af3c71@t '(define-struct)) af2ca0@define-struct-macro (if (memv af3c71@t '(include)) af2c96@include-macro (if (memv af3c71@t '(cond)) af2c92@cond-macro (if (memv af3c71@t '(let)) af2c6a@let-macro (if (memv af3c71@t '(do)) af2c8a@do-macro (if (memv af3c71@t '(or)) af2c8e@or-macro (if (memv af3c71@t '(and)) af2c90@and-macro (if (memv af3c71@t '(let*)) af2c8c@let*-macro (if (memv af3c71@t '(let-values)) af2c6c@let-values-macro (if (memv af3c71@t '(let*-values)) af2c6e@let*-values-macro (if (memv af3c71@t '(syntax-rules)) af2c9a@syntax-rules-macro (if (memv af3c71@t '(quasiquote)) af2c9c@quasiquote-macro (if (memv af3c71@t '(quasisyntax)) af2c9e@quasisyntax-macro (if (memv af3c71@t '(with-syntax)) af2c66@with-syntax-macro (if (memv af3c71@t '(when)) af2c52@when-macro (if (memv af3c71@t '(unless)) af2c54@unless-macro (if (memv af3c71@t '(case)) af2c5c@case-macro (if (memv af3c71@t '(identifier-syntax)) af2c88@identifier-syntax-macro (if (memv af3c71@t '(time)) af2c80@time-macro (if (memv af3c71@t '(delay)) af2c82@delay-macro (if (memv af3c71@t '(assert)) af2c84@assert-macro (if (memv af3c71@t '(endianness)) af2c86@endianness-macro (if (memv af3c71@t '(guard)) af2c7c@guard-macro (if (memv af3c71@t '(define-enumeration)) af2c7e@define-enumeration-macro (if (memv af3c71@t '(trace-lambda)) af2c70@trace-lambda-macro (if (memv af3c71@t '(trace-define)) af2c72@trace-define-macro (if (memv af3c71@t '(trace-define-syntax)) af2c74@trace-define-syntax-macro (if (memv af3c71@t '(trace-let-syntax)) af2c78@trace-let-syntax-macro (if (memv af3c71@t '(trace-letrec-syntax)) af2c7a@trace-letrec-syntax-macro (if (memv af3c71@t '(define-condition-type)) af2ca4@define-condition-type-macro (if (memv af3c71@t '(parameterize)) af2ca8@parameterize-macro (if (memv af3c71@t '(include-into)) af2c98@include-into-macro (if (memv af3c71@t '(eol-style)) (lambda (af3c73@x) (af2cbe@symbol-macro af3c73@x '(none lf cr crlf nel crnel ls))) (if (memv af3c71@t '(error-handling-mode)) (lambda (af3c75@x) (af2cbe@symbol-macro af3c75@x '(ignore raise replace))) (if (memv af3c71@t '(buffer-mode)) (lambda (af3c77@x) (af2cbe@symbol-macro af3c77@x '(none line block))) (if (memv af3c71@t '(file-options)) af2a22@file-options-macro (if (memv af3c71@t '(... => _ else unquote unquote-splicing unsyntax unsyntax-splicing fields mutable immutable parent protocol sealed opaque nongenerative parent-rtd)) af2ca6@incorrect-usage-macro (error 'macro-transformer '"BUG: invalid macro" af3c6f@x)))))))))))))))))))))))))))))))))))))))) (error 'core-macro-transformer '"BUG: invalid macro" af3c6f@x))))) (set! af478b@af2cc0@macro-transformer af2cc0@macro-transformer) (set! af2cc2@local-macro-transformer (lambda (af3c79@x) (car af3c79@x))) (set! af478c@af2cc2@local-macro-transformer af2cc2@local-macro-transformer) (set! af2cc4@do-macro-call (lambda (af3c7b@transformer af3c7c@expr) (let ((af3c7f@out (af3c7b@transformer (af2a91@add-mark af2a8b@anti-mark af3c7c@expr '#f)))) (begin (let af3c83@f ((af3c81@x af3c7f@out)) (if (not (af2a73@stx? af3c81@x)) (if (pair? af3c81@x) (begin (af3c83@f (car af3c81@x)) (af3c83@f (cdr af3c81@x))) (if (vector? af3c81@x) (vector-for-each af3c83@f af3c81@x) (if (symbol? af3c81@x) (af2d8e@syntax-violation '#f '"raw symbol encountered in output of macro" af3c7c@expr af3c81@x) (void)))) (void))) (af2a91@add-mark (af2a89@gen-mark) af3c7f@out af3c7c@expr))))) (set! af478d@af2cc4@do-macro-call af2cc4@do-macro-call) (set! af2cc6@chi-macro (lambda (af3c85@p af3c86@e) (af2cc4@do-macro-call (af2cc0@macro-transformer af3c85@p) af3c86@e))) (set! af478e@af2cc6@chi-macro af2cc6@chi-macro) (set! af2cc8@chi-local-macro (lambda (af3c89@p af3c8a@e) (af2cc4@do-macro-call (af2cc2@local-macro-transformer af3c89@p) af3c8a@e))) (set! af478f@af2cc8@chi-local-macro af2cc8@chi-local-macro) (set! af2cca@chi-global-macro (lambda (af3c8d@p af3c8e@e) (let ((af3c91@lib (car af3c8d@p)) (af3c92@loc (cdr af3c8d@p))) (begin (af28be@af270d@visit-library af3c91@lib) (let ((af3c95@x (symbol-value af3c92@loc))) (let ((af3c97@transformer (if (procedure? af3c95@x) af3c95@x (assertion-violation 'chi-global-macro '"BUG: not a procedure" af3c95@x)))) (af2cc4@do-macro-call af3c97@transformer af3c8e@e))))))) (set! af4790@af2cca@chi-global-macro af2cca@chi-global-macro) (set! af2ccc@chi-expr* (lambda (af3c99@e* af3c9a@r af3c9b@mr) (if (null? af3c99@e*) '() (let ((af3c9f@e (af2cd0@chi-expr (car af3c99@e*) af3c9a@r af3c9b@mr))) (cons af3c9f@e (af2ccc@chi-expr* (cdr af3c99@e*) af3c9a@r af3c9b@mr)))))) (set! af4791@af2ccc@chi-expr* af2ccc@chi-expr*) (set! af2cce@chi-application (lambda (af3ca1@e af3ca2@r af3ca3@mr) (let ((af3ca7@t af3ca1@e)) (let ((af3ca9@ls/false (af2cae@syntax-dispatch af3ca7@t '(any . each-any)))) (if af3ca9@ls/false (apply (lambda (af3cab@rator af3cac@rands) (let ((af3caf@rator (af2cd0@chi-expr af3cab@rator af3ca2@r af3ca3@mr))) (cons af3caf@rator (af2ccc@chi-expr* af3cac@rands af3ca2@r af3ca3@mr)))) af3ca9@ls/false) (af2d8e@syntax-violation '#f '"invalid syntax" af3ca7@t)))))) (set! af4792@af2cce@chi-application af2cce@chi-application) (set! af2cd0@chi-expr (lambda (af3cb1@e af3cb2@r af3cb3@mr) (call-with-values (lambda () (af2ac9@syntax-type af3cb1@e af3cb2@r)) (lambda (af3cbd@af3cb8 af3cbe@af3cba af3cbf@af3cbc) (let ((af3cc3@kwd af3cbf@af3cbc) (af3cc4@value af3cbe@af3cba) (af3cc5@type af3cbd@af3cb8)) (let ((af3cc9@t af3cc5@type)) (if (memv af3cc9@t '(core-macro)) (let ((af3ccb@transformer (af2cbc@core-macro-transformer af3cc4@value))) (af3ccb@transformer af3cb1@e af3cb2@r af3cb3@mr)) (if (memv af3cc9@t '(global)) (let ((af3ccd@lib (car af3cc4@value))) (let ((af3ccf@loc (cdr af3cc4@value))) (begin ((af2d16@inv-collector) af3ccd@lib) af3ccf@loc))) (if (memv af3cc9@t '(core-prim)) (let ((af3cd1@name af3cc4@value)) (list 'primitive af3cd1@name)) (if (memv af3cc9@t '(call)) (af2cce@chi-application af3cb1@e af3cb2@r af3cb3@mr) (if (memv af3cc9@t '(lexical)) (let ((af3cd3@lex (af2c38@lexical-var af3cc4@value))) af3cd3@lex) (if (memv af3cc9@t '(global-macro global-macro!)) (af2cd0@chi-expr (af2cca@chi-global-macro af3cc4@value af3cb1@e) af3cb2@r af3cb3@mr) (if (memv af3cc9@t '(local-macro local-macro!)) (af2cd0@chi-expr (af2cc8@chi-local-macro af3cc4@value af3cb1@e) af3cb2@r af3cb3@mr) (if (memv af3cc9@t '(macro macro!)) (af2cd0@chi-expr (af2cc6@chi-macro af3cc4@value af3cb1@e) af3cb2@r af3cb3@mr) (if (memv af3cc9@t '(constant)) (let ((af3cd5@datum af3cc4@value)) (list 'quote af3cd5@datum)) (if (memv af3cc9@t '(set!)) (af2cd2@chi-set! af3cb1@e af3cb2@r af3cb3@mr) (if (memv af3cc9@t '(begin)) (let ((af3cd7@t af3cb1@e)) (let ((af3cd9@ls/false (af2cae@syntax-dispatch af3cd7@t '(_ any . each-any)))) (if af3cd9@ls/false (apply (lambda (af3cdb@x af3cdc@x*) (af2a0c@af2966@build-sequence '#f (af2ccc@chi-expr* (cons af3cdb@x af3cdc@x*) af3cb2@r af3cb3@mr))) af3cd9@ls/false) (af2d8e@syntax-violation '#f '"invalid syntax" af3cd7@t)))) (if (memv af3cc9@t '(let-syntax letrec-syntax)) (let ((af3cdf@t af3cb1@e)) (let ((af3ce1@ls/false (af2cae@syntax-dispatch af3cdf@t '(_ #(each (any any)) any . each-any)))) (if (and af3ce1@ls/false (apply (lambda (af3ce3@xlhs* af3ce4@xrhs* af3ce5@xbody af3ce6@xbody*) (if (not (af2aaf@valid-bound-ids? af3ce3@xlhs*)) (af2d8e@syntax-violation '#f '"invalid identifiers" af3cb1@e) (void))) af3ce1@ls/false)) (apply (lambda (af3ceb@xlhs* af3cec@xrhs* af3ced@xbody af3cee@xbody*) (let ((af3cf3@xlab* (map af2a33@gen-label af3ceb@xlhs*))) (let ((af3cf5@xrib (af2a67@make-full-rib af3ceb@xlhs* af3cf3@xlab*))) (let ((af3cf7@xb* (map (lambda (af3cf9@x) (af2adf@make-eval-transformer (af2d08@expand-transformer (if (eq? af3cc5@type 'let-syntax) af3cf9@x (af2a93@add-subst af3cf5@xrib af3cf9@x)) af3cb3@mr))) af3cec@xrhs*))) (af2a0c@af2966@build-sequence '#f (af2ccc@chi-expr* (map (lambda (af3cfb@x) (af2a93@add-subst af3cf5@xrib af3cfb@x)) (cons af3ced@xbody af3cee@xbody*)) (append (map cons af3cf3@xlab* af3cf7@xb*) af3cb2@r) (append (map cons af3cf3@xlab* af3cf7@xb*) af3cb3@mr))))))) af3ce1@ls/false) (af2d8e@syntax-violation '#f '"invalid syntax" af3cdf@t)))) (if (memv af3cc9@t '(displaced-lexical)) (af2d8e@syntax-violation '#f '"identifier out of context" af3cb1@e) (if (memv af3cc9@t '(syntax)) (af2d8e@syntax-violation '#f '"reference to pattern variable outside a syntax form" af3cb1@e) (if (memv af3cc9@t '(define define-syntax module import library)) (af2d8e@syntax-violation '#f (string-append (let ((af3cfd@t af3cc5@type)) (if (memv af3cfd@t '(define)) '"a definition" (if (memv af3cfd@t '(define-syntax)) '"a define-syntax" (if (memv af3cfd@t '(module)) '"a module definition" (if (memv af3cfd@t '(library)) '"a library definition" (if (memv af3cfd@t '(import)) '"an import declaration" (if (memv af3cfd@t '(export)) '"an export declaration" '"a non-expression"))))))) '" was found where an expression was expected") af3cb1@e) (if (memv af3cc9@t '(mutable)) (af2d8e@syntax-violation '#f '"attempt to reference an unexportable variable" af3cb1@e) (af2d8e@syntax-violation '#f '"invalid expression" af3cb1@e))))))))))))))))))))))) (set! af4793@af2cd0@chi-expr af2cd0@chi-expr) (set! af2cd2@chi-set! (lambda (af3cff@e af3d00@r af3d01@mr) (let ((af3d05@t af3cff@e)) (let ((af3d07@ls/false (af2cae@syntax-dispatch af3d05@t '(_ any any)))) (if (and af3d07@ls/false (apply (lambda (af3d09@x af3d0a@v) (af2aa7@id? af3d09@x)) af3d07@ls/false)) (apply (lambda (af3d0d@x af3d0e@v) (call-with-values (lambda () (af2ac9@syntax-type af3d0d@x af3d00@r)) (lambda (af3d17@af3d12 af3d18@af3d14 af3d19@af3d16) (let ((af3d1d@kwd af3d19@af3d16) (af3d1e@value af3d18@af3d14) (af3d1f@type af3d17@af3d12)) (let ((af3d23@t af3d1f@type)) (if (memv af3d23@t '(lexical)) (begin (af2c3c@set-lexical-mutable! af3d1e@value '#t) (list 'set! (af2c38@lexical-var af3d1e@value) (af2cd0@chi-expr af3d0e@v af3d00@r af3d01@mr))) (if (memv af3d23@t '(core-prim)) (af2d8e@syntax-violation '#f '"cannot modify imported core primitive" af3cff@e) (if (memv af3d23@t '(global)) (af2d8e@syntax-violation '#f '"attempt to modify imported binding" af3cff@e) (if (memv af3d23@t '(global-macro!)) (af2cd0@chi-expr (af2cca@chi-global-macro af3d1e@value af3cff@e) af3d00@r af3d01@mr) (if (memv af3d23@t '(local-macro!)) (af2cd0@chi-expr (af2cc8@chi-local-macro af3d1e@value af3cff@e) af3d00@r af3d01@mr) (if (memv af3d23@t '(mutable)) (af2d8e@syntax-violation '#f '"attempt to assign to an unexportable variable" af3cff@e) (af2d8e@syntax-violation '#f '"invalid syntax" af3cff@e)))))))))))) af3d07@ls/false) (af2d8e@syntax-violation '#f '"invalid syntax" af3d05@t)))))) (set! af4794@af2cd2@chi-set! af2cd2@chi-set!) (set! af2cd4@verify-formals (lambda (af3d25@fmls af3d26@stx) (let ((af3d29@t af3d25@fmls)) (let ((af3d2b@ls/false (af2cae@syntax-dispatch af3d29@t 'each-any))) (if af3d2b@ls/false (apply (lambda (af3d2d@x*) (if (not (af2aaf@valid-bound-ids? af3d2d@x*)) (af2c68@invalid-fmls-error af3d26@stx af3d25@fmls) (void))) af3d2b@ls/false) (let ((af3d2f@t af3d29@t)) (let ((af3d31@ls/false (af2cae@syntax-dispatch af3d2f@t '#(each+ any () any)))) (if af3d31@ls/false (apply (lambda (af3d33@x* af3d34@x) (if (not (af2aaf@valid-bound-ids? (cons af3d34@x af3d33@x*))) (af2c68@invalid-fmls-error af3d26@stx af3d25@fmls) (void))) af3d31@ls/false) (let ((af3d37@t af3d2f@t)) (let ((af3d39@ls/false (af2cae@syntax-dispatch af3d37@t '_))) (if af3d39@ls/false (apply (lambda () (af2d8e@syntax-violation '#f '"invalid syntax" af3d26@stx)) af3d39@ls/false) (af2d8e@syntax-violation '#f '"invalid syntax" af3d37@t)))))))))))) (set! af4795@af2cd4@verify-formals af2cd4@verify-formals) (set! af2cd6@chi-lambda-clause (lambda (af3d3b@stx af3d3c@fmls af3d3d@body* af3d3e@r af3d3f@mr) (let ((af3d45@t af3d3c@fmls)) (let ((af3d47@ls/false (af2cae@syntax-dispatch af3d45@t 'each-any))) (if af3d47@ls/false (apply (lambda (af3d49@x*) (begin (af2cd4@verify-formals af3d3c@fmls af3d3b@stx) (let ((af3d4b@lex* (map af2a2f@gen-lexical af3d49@x*)) (af3d4c@lab* (map af2a33@gen-label af3d49@x*))) (values af3d4b@lex* (af2ce6@chi-internal (af2a93@add-subst (af2a67@make-full-rib af3d49@x* af3d4c@lab*) af3d3d@body*) (af2c40@add-lexicals af3d4c@lab* af3d4b@lex* af3d3e@r) af3d3f@mr))))) af3d47@ls/false) (let ((af3d4f@t af3d45@t)) (let ((af3d51@ls/false (af2cae@syntax-dispatch af3d4f@t '#(each+ any () any)))) (if af3d51@ls/false (apply (lambda (af3d53@x* af3d54@x) (begin (af2cd4@verify-formals af3d3c@fmls af3d3b@stx) (let ((af3d57@lex* (map af2a2f@gen-lexical af3d53@x*)) (af3d58@lab* (map af2a33@gen-label af3d53@x*)) (af3d59@lex (af2a2f@gen-lexical af3d54@x)) (af3d5a@lab (af2a33@gen-label af3d54@x))) (values (append af3d57@lex* af3d59@lex) (af2ce6@chi-internal (af2a93@add-subst (af2a67@make-full-rib (cons af3d54@x af3d53@x*) (cons af3d5a@lab af3d58@lab*)) af3d3d@body*) (af2c40@add-lexicals (cons af3d5a@lab af3d58@lab*) (cons af3d59@lex af3d57@lex*) af3d3e@r) af3d3f@mr))))) af3d51@ls/false) (let ((af3d5f@t af3d4f@t)) (let ((af3d61@ls/false (af2cae@syntax-dispatch af3d5f@t '_))) (if af3d61@ls/false (apply (lambda () (af2d8e@syntax-violation '#f '"invalid syntax" af3d3c@fmls)) af3d61@ls/false) (af2d8e@syntax-violation '#f '"invalid syntax" af3d5f@t)))))))))))) (set! af4796@af2cd6@chi-lambda-clause af2cd6@chi-lambda-clause) (set! af2cd8@chi-lambda-clause* (lambda (af3d63@stx af3d64@fmls* af3d65@body** af3d66@r af3d67@mr) (if (null? af3d64@fmls*) (values '() '()) (call-with-values (lambda () (af2cd6@chi-lambda-clause af3d63@stx (car af3d64@fmls*) (car af3d65@body**) af3d66@r af3d67@mr)) (lambda (af3d71@af3d6e af3d72@af3d70) (let ((af3d75@b af3d72@af3d70) (af3d76@a af3d71@af3d6e)) (call-with-values (lambda () (af2cd8@chi-lambda-clause* af3d63@stx (cdr af3d64@fmls*) (cdr af3d65@body**) af3d66@r af3d67@mr)) (lambda (af3d7d@af3d7a af3d7e@af3d7c) (let ((af3d81@b* af3d7e@af3d7c) (af3d82@a* af3d7d@af3d7a)) (values (cons af3d76@a af3d82@a*) (cons af3d75@b af3d81@b*))))))))))) (set! af4797@af2cd8@chi-lambda-clause* af2cd8@chi-lambda-clause*) (set! af2cda@chi-defun (lambda (af3d85@x af3d86@r af3d87@mr) (let ((af3d8b@fmls (car af3d85@x)) (af3d8c@body* (cdr af3d85@x))) (call-with-values (lambda () (af2cd6@chi-lambda-clause af3d8b@fmls af3d8b@fmls af3d8c@body* af3d86@r af3d87@mr)) (lambda (af3d93@af3d90 af3d94@af3d92) (let ((af3d97@body af3d94@af3d92) (af3d98@fmls af3d93@af3d90)) (af2a0a@af2936@build-lambda '#f af3d98@fmls af3d97@body))))))) (set! af4798@af2cda@chi-defun af2cda@chi-defun) (set! af2cdc@chi-rhs (lambda (af3d9b@rhs af3d9c@r af3d9d@mr) (let ((af3da1@t (car af3d9b@rhs))) (if (memv af3da1@t '(defun)) (af2cda@chi-defun (cdr af3d9b@rhs) af3d9c@r af3d9d@mr) (if (memv af3da1@t '(expr)) (let ((af3da3@expr (cdr af3d9b@rhs))) (af2cd0@chi-expr af3da3@expr af3d9c@r af3d9d@mr)) (if (memv af3da1@t '(top-expr)) (let ((af3da5@expr (cdr af3d9b@rhs))) (af2a0c@af2966@build-sequence '#f (list (af2cd0@chi-expr af3da5@expr af3d9c@r af3d9d@mr) (af2a0d@af2968@build-void)))) (assertion-violation 'chi-rhs '"BUG: invalid rhs" af3d9b@rhs))))))) (set! af4799@af2cdc@chi-rhs af2cdc@chi-rhs) (set! af2cde@expand-interaction-rhs*/init* (lambda (af3da7@lhs* af3da8@rhs* af3da9@init* af3daa@r af3dab@mr) (let af3db5@f ((af3db1@lhs* af3da7@lhs*) (af3db2@rhs* af3da8@rhs*)) (if (null? af3db1@lhs*) (map (lambda (af3db7@x) (af2cd0@chi-expr af3db7@x af3daa@r af3dab@mr)) af3da9@init*) (let ((af3db9@lhs (car af3db1@lhs*)) (af3dba@rhs (car af3db2@rhs*))) (let ((af3dbd@t (car af3dba@rhs))) (if (memv af3dbd@t '(defun)) (let ((af3dbf@rhs (af2cda@chi-defun (cdr af3dba@rhs) af3daa@r af3dab@mr))) (cons (list 'set! af3db9@lhs af3dbf@rhs) (af3db5@f (cdr af3db1@lhs*) (cdr af3db2@rhs*)))) (if (memv af3dbd@t '(expr)) (let ((af3dc1@rhs (af2cd0@chi-expr (cdr af3dba@rhs) af3daa@r af3dab@mr))) (cons (list 'set! af3db9@lhs af3dc1@rhs) (af3db5@f (cdr af3db1@lhs*) (cdr af3db2@rhs*)))) (if (memv af3dbd@t '(top-expr)) (let ((af3dc3@e (af2cd0@chi-expr (cdr af3dba@rhs) af3daa@r af3dab@mr))) (cons af3dc3@e (af3db5@f (cdr af3db1@lhs*) (cdr af3db2@rhs*)))) (error 'expand-interaction '"invallid" af3dba@rhs)))))))))) (set! af479a@af2cde@expand-interaction-rhs*/init* af2cde@expand-interaction-rhs*/init*) (set! af2ce0@chi-rhs* (lambda (af3dc5@rhs* af3dc6@r af3dc7@mr) (let af3dcd@f ((af3dcb@ls af3dc5@rhs*)) (if (null? af3dcb@ls) '() (let ((af3dcf@a (af2cdc@chi-rhs (car af3dcb@ls) af3dc6@r af3dc7@mr))) (cons af3dcf@a (af3dcd@f (cdr af3dcb@ls)))))))) (set! af479b@af2ce0@chi-rhs* af2ce0@chi-rhs*) (set! af2ce2@find-bound=? (lambda (af3dd1@x af3dd2@lhs* af3dd3@rhs*) (if (null? af3dd2@lhs*) '#f (if (af2aab@bound-id=? af3dd1@x (car af3dd2@lhs*)) (car af3dd3@rhs*) (af2ce2@find-bound=? af3dd1@x (cdr af3dd2@lhs*) (cdr af3dd3@rhs*)))))) (set! af479c@af2ce2@find-bound=? af2ce2@find-bound=?) (set! af2ce4@find-dups (lambda (af3dd7@ls) (let af3ddd@f ((af3dd9@ls af3dd7@ls) (af3dda@dups '())) (if (null? af3dd9@ls) af3dda@dups (let ((af3ddf@t (af2ce2@find-bound=? (car af3dd9@ls) (cdr af3dd9@ls) (cdr af3dd9@ls)))) (if af3ddf@t ((lambda (af3de1@x) (af3ddd@f (cdr af3dd9@ls) (cons (list (car af3dd9@ls) af3de1@x) af3dda@dups))) af3ddf@t) (af3ddd@f (cdr af3dd9@ls) af3dda@dups))))))) (set! af479d@af2ce4@find-dups af2ce4@find-dups) (set! af2ce6@chi-internal (lambda (af3de3@e* af3de4@r af3de5@mr) (let ((af3de9@rib (af2a5b@make-empty-rib))) (call-with-values (lambda () (af2d06@chi-body* (map (lambda (af3dfb@x) (af2a93@add-subst af3de9@rib af3dfb@x)) (af2aa5@syntax->list af3de3@e*)) af3de4@r af3de5@mr '() '() '() '() '() af3de9@rib '#f)) (lambda (af3dfd@af3dec af3dfe@af3dee af3dff@af3df0 af3e00@af3df2 af3e01@af3df4 af3e02@af3df6 af3e03@af3df8 af3e04@af3dfa) (let ((af3e0d@_exp* af3e04@af3dfa) (af3e0e@kwd* af3e03@af3df8) (af3e0f@mod** af3e02@af3df6) (af3e10@rhs* af3e01@af3df4) (af3e11@lex* af3e00@af3df2) (af3e12@mr af3dff@af3df0) (af3e13@r af3dfe@af3dee) (af3e14@e* af3dfd@af3dec)) (begin (if (null? af3e14@e*) (af2d8e@syntax-violation '#f '"no expression in body" af3e14@e*) (void)) (let ((af3e1d@init* (af2ccc@chi-expr* (append (apply append (reverse af3e0f@mod**)) af3e14@e*) af3e13@r af3e12@mr))) (let ((af3e1f@rhs* (af2ce0@chi-rhs* af3e10@rhs* af3e13@r af3e12@mr))) (af2a11@af2970@build-letrec* '#f (reverse af3e11@lex*) (reverse af3e1f@rhs*) (af2a0c@af2966@build-sequence '#f af3e1d@init*))))))))))) (set! af479e@af2ce6@chi-internal af2ce6@chi-internal) (set! af2ce8@parse-module (lambda (af3e21@e) (let ((af3e23@t af3e21@e)) (let ((af3e25@ls/false (af2cae@syntax-dispatch af3e23@t '(_ each-any . each-any)))) (if af3e25@ls/false (apply (lambda (af3e27@export* af3e28@b*) (begin (if (not (for-all af2aa7@id? af3e27@export*)) (af2d8e@syntax-violation '#f '"module exports must be identifiers" af3e21@e) (void)) (values '#f (list->vector af3e27@export*) af3e28@b*))) af3e25@ls/false) (let ((af3e2b@t af3e23@t)) (let ((af3e2d@ls/false (af2cae@syntax-dispatch af3e2b@t '(_ any each-any . each-any)))) (if af3e2d@ls/false (apply (lambda (af3e2f@name af3e30@export* af3e31@b*) (begin (if (not (af2aa7@id? af3e2f@name)) (af2d8e@syntax-violation '#f '"module name must be an identifier" af3e21@e) (void)) (if (not (for-all af2aa7@id? af3e30@export*)) (af2d8e@syntax-violation '#f '"module exports must be identifiers" af3e21@e) (void)) (values af3e2f@name (list->vector af3e30@export*) af3e31@b*))) af3e2d@ls/false) (af2d8e@syntax-violation '#f '"invalid syntax" af3e2b@t))))))))) (set! af479f@af2ce8@parse-module af2ce8@parse-module) (set! af2cf2@module-interface? (lambda (af3e35@x) (and (simple-struct? af3e35@x) (eq? (simple-struct-name af3e35@x) 'module-interface)))) (set! af47a0@af2cf2@module-interface? af2cf2@module-interface?) (set! af2cf4@module-interface-first-mark (lambda (af3e37@x) (simple-struct-ref af3e37@x '0))) (set! af47a1@af2cf4@module-interface-first-mark af2cf4@module-interface-first-mark) (set! af2cf6@set-module-interface-first-mark! (lambda (af3e39@x af3e3a@val) (simple-struct-set! af3e39@x '0 af3e3a@val))) (set! af47a2@af2cf6@set-module-interface-first-mark! af2cf6@set-module-interface-first-mark!) (set! af2cf8@module-interface-exp-id-vec (lambda (af3e3d@x) (simple-struct-ref af3e3d@x '1))) (set! af47a3@af2cf8@module-interface-exp-id-vec af2cf8@module-interface-exp-id-vec) (set! af2cfa@set-module-interface-exp-id-vec! (lambda (af3e3f@x af3e40@val) (simple-struct-set! af3e3f@x '1 af3e40@val))) (set! af47a4@af2cfa@set-module-interface-exp-id-vec! af2cfa@set-module-interface-exp-id-vec!) (set! af2cfc@module-interface-exp-lab-vec (lambda (af3e43@x) (simple-struct-ref af3e43@x '2))) (set! af47a5@af2cfc@module-interface-exp-lab-vec af2cfc@module-interface-exp-lab-vec) (set! af2cfe@set-module-interface-exp-lab-vec! (lambda (af3e45@x af3e46@val) (simple-struct-set! af3e45@x '2 af3e46@val))) (set! af47a6@af2cfe@set-module-interface-exp-lab-vec! af2cfe@set-module-interface-exp-lab-vec!) (set! af2d00@dummy '3) (set! af47a7@af2d00@dummy af2d00@dummy) (set! af2d02@module-interface-exp-id* (lambda (af3e49@iface af3e4a@id) (let ((af3e4e@diff-marks '#f)) (begin (set! af3e4e@diff-marks (lambda (af3e55@ls af3e56@x) (begin (if (null? af3e55@ls) (error 'diff-marks '"BUG: should not happen") (void)) (let ((af3e59@a (car af3e55@ls))) (if (eq? af3e59@a af3e56@x) '() (cons af3e59@a (af3e4e@diff-marks (cdr af3e55@ls) af3e56@x))))))) (let ((af3e4f@diff (af3e4e@diff-marks (af2a79@stx-mark* af3e4a@id) (af2cf4@module-interface-first-mark af3e49@iface))) (af3e50@id-vec (af2cf8@module-interface-exp-id-vec af3e49@iface))) (if (null? af3e4f@diff) af3e50@id-vec (vector-map (lambda (af3e53@x) (make-simple-struct 'stx '5 (list (af2a75@stx-expr af3e53@x) (append af3e4f@diff (af2a79@stx-mark* af3e53@x)) '() '()))) af3e50@id-vec))))))) (set! af47a8@af2d02@module-interface-exp-id* af2d02@module-interface-exp-id*) (set! af2d04@chi-internal-module (lambda (af3e5b@e af3e5c@r af3e5d@mr af3e5e@lex* af3e5f@rhs* af3e60@mod** af3e61@kwd*) (call-with-values (lambda () (af2ce8@parse-module af3e5b@e)) (lambda (af3e6f@af3e6a af3e70@af3e6c af3e71@af3e6e) (let ((af3e75@e* af3e71@af3e6e) (af3e76@exp-id* af3e70@af3e6c) (af3e77@name af3e6f@af3e6a)) (let ((af3e7b@rib (af2a5b@make-empty-rib))) (let ((af3e7d@e* (map (lambda (af3e7f@x) (af2a93@add-subst af3e7b@rib af3e7f@x)) (af2aa5@syntax->list af3e75@e*)))) (call-with-values (lambda () (af2d06@chi-body* af3e7d@e* af3e5c@r af3e5d@mr af3e5e@lex* af3e5f@rhs* af3e60@mod** af3e61@kwd* '() af3e7b@rib '#f)) (lambda (af3e91@af3e82 af3e92@af3e84 af3e93@af3e86 af3e94@af3e88 af3e95@af3e8a af3e96@af3e8c af3e97@af3e8e af3e98@af3e90) (let ((af3ea1@_exp* af3e98@af3e90) (af3ea2@kwd* af3e97@af3e8e) (af3ea3@mod** af3e96@af3e8c) (af3ea4@rhs* af3e95@af3e8a) (af3ea5@lex* af3e94@af3e88) (af3ea6@mr af3e93@af3e86) (af3ea7@r af3e92@af3e84) (af3ea8@e* af3e91@af3e82)) (let ((af3eb1@exp-lab* (vector-map (lambda (af3eb5@x) (or (af2abd@id->label (make-simple-struct 'stx '5 (list (af2aa9@id->sym af3eb5@x) (af2a79@stx-mark* af3eb5@x) (list af3e7b@rib) '()))) (af2d8e@syntax-violation '#f '"cannot find module export" af3eb5@x))) af3e76@exp-id*)) (af3eb2@mod** (cons af3ea8@e* af3ea3@mod**))) (if (not af3e77@name) (values af3ea5@lex* af3ea4@rhs* af3e76@exp-id* af3eb1@exp-lab* af3ea7@r af3ea6@mr af3eb2@mod** af3ea2@kwd*) (let ((af3eb7@lab (af2a33@gen-label 'module)) (af3eb8@iface (make-simple-struct 'module-interface '4 (list (car (af2a79@stx-mark* af3e77@name)) (vector-map (lambda (af3ebb@x) (make-simple-struct 'stx '5 (list (af2a75@stx-expr af3ebb@x) (af2a79@stx-mark* af3ebb@x) '() '()))) af3e76@exp-id*) af3eb1@exp-lab*)))) (values af3ea5@lex* af3ea4@rhs* (vector af3e77@name) (vector af3eb7@lab) (cons (cons af3eb7@lab (cons '$module af3eb8@iface)) af3ea7@r) (cons (cons af3eb7@lab (cons '$module af3eb8@iface)) af3ea6@mr) af3eb2@mod** af3ea2@kwd*)))))))))))))) (set! af47a9@af2d04@chi-internal-module af2d04@chi-internal-module) (set! af2d06@chi-body* (lambda (af3ebd@e* af3ebe@r af3ebf@mr af3ec0@lex* af3ec1@rhs* af3ec2@mod** af3ec3@kwd* af3ec4@exp* af3ec5@rib af3ec6@top?) (if (null? af3ebd@e*) (values af3ebd@e* af3ebe@r af3ebf@mr af3ec0@lex* af3ec1@rhs* af3ec2@mod** af3ec3@kwd* af3ec4@exp*) (let ((af3ed1@e (car af3ebd@e*))) (call-with-values (lambda () (af2ac9@syntax-type af3ed1@e af3ebe@r)) (lambda (af3ed9@af3ed4 af3eda@af3ed6 af3edb@af3ed8) (let ((af3edf@kwd af3edb@af3ed8) (af3ee0@value af3eda@af3ed6) (af3ee1@type af3ed9@af3ed4)) (let ((af3ee5@kwd* (if (af2aa7@id? af3edf@kwd) (cons af3edf@kwd af3ec3@kwd*) af3ec3@kwd*))) (let ((af3ee7@t af3ee1@type)) (if (memv af3ee7@t '(define)) (call-with-values (lambda () (af2c30@parse-define af3ed1@e)) (lambda (af3eed@af3eea af3eee@af3eec) (let ((af3ef1@rhs af3eee@af3eec) (af3ef2@id af3eed@af3eea)) (begin (if (af2ab3@bound-id-member? af3ef2@id af3ee5@kwd*) (af2d8e@syntax-violation '#f '"cannot redefine keyword" af3ed1@e) (void)) (call-with-values (lambda () (af2a37@gen-define-label+loc af3ef2@id af3ec5@rib)) (lambda (af3ef9@af3ef6 af3efa@af3ef8) (let ((af3efd@lex af3efa@af3ef8) (af3efe@lab af3ef9@af3ef6)) (begin (af2a5d@extend-rib! af3ec5@rib af3ef2@id af3efe@lab) (af2d06@chi-body* (cdr af3ebd@e*) (af2c3e@add-lexical af3efe@lab af3efd@lex af3ebe@r) af3ebf@mr (cons af3efd@lex af3ec0@lex*) (cons af3ef1@rhs af3ec1@rhs*) af3ec2@mod** af3ee5@kwd* af3ec4@exp* af3ec5@rib af3ec6@top?))))))))) (if (memv af3ee7@t '(define-syntax)) (call-with-values (lambda () (af2c32@parse-define-syntax af3ed1@e)) (lambda (af3f05@af3f02 af3f06@af3f04) (let ((af3f09@rhs af3f06@af3f04) (af3f0a@id af3f05@af3f02)) (begin (if (af2ab3@bound-id-member? af3f0a@id af3ee5@kwd*) (af2d8e@syntax-violation '#f '"cannot redefine keyword" af3ed1@e) (void)) (let ((af3f0d@lab (af2a39@gen-define-label af3f0a@id af3ec5@rib)) (af3f0e@expanded-rhs (af2d08@expand-transformer af3f09@rhs af3ebf@mr))) (begin (af2a5d@extend-rib! af3ec5@rib af3f0a@id af3f0d@lab) (let ((af3f11@b (af2adf@make-eval-transformer af3f0e@expanded-rhs))) (af2d06@chi-body* (cdr af3ebd@e*) (cons (cons af3f0d@lab af3f11@b) af3ebe@r) (cons (cons af3f0d@lab af3f11@b) af3ebf@mr) af3ec0@lex* af3ec1@rhs* af3ec2@mod** af3ee5@kwd* af3ec4@exp* af3ec5@rib af3ec6@top?)))))))) (if (memv af3ee7@t '(let-syntax letrec-syntax)) (let ((af3f13@t af3ed1@e)) (let ((af3f15@ls/false (af2cae@syntax-dispatch af3f13@t '(_ #(each (any any)) . each-any)))) (if (and af3f15@ls/false (apply (lambda (af3f17@xlhs* af3f18@xrhs* af3f19@xbody*) (if (not (af2aaf@valid-bound-ids? af3f17@xlhs*)) (af2d8e@syntax-violation '#f '"invalid identifiers" af3ed1@e) (void))) af3f15@ls/false)) (apply (lambda (af3f1d@xlhs* af3f1e@xrhs* af3f1f@xbody*) (let ((af3f23@xlab* (map af2a33@gen-label af3f1d@xlhs*))) (let ((af3f25@xrib (af2a67@make-full-rib af3f1d@xlhs* af3f23@xlab*))) (let ((af3f27@xb* (map (lambda (af3f29@x) (af2adf@make-eval-transformer (af2d08@expand-transformer (if (eq? af3ee1@type 'let-syntax) af3f29@x (af2a93@add-subst af3f25@xrib af3f29@x)) af3ebf@mr))) af3f1e@xrhs*))) (af2d06@chi-body* (append (map (lambda (af3f2b@x) (af2a93@add-subst af3f25@xrib af3f2b@x)) af3f1f@xbody*) (cdr af3ebd@e*)) (append (map cons af3f23@xlab* af3f27@xb*) af3ebe@r) (append (map cons af3f23@xlab* af3f27@xb*) af3ebf@mr) af3ec0@lex* af3ec1@rhs* af3ec2@mod** af3ee5@kwd* af3ec4@exp* af3ec5@rib af3ec6@top?))))) af3f15@ls/false) (af2d8e@syntax-violation '#f '"invalid syntax" af3f13@t)))) (if (memv af3ee7@t '(begin)) (let ((af3f2d@t af3ed1@e)) (let ((af3f2f@ls/false (af2cae@syntax-dispatch af3f2d@t '(_ . each-any)))) (if af3f2f@ls/false (apply (lambda (af3f31@x*) (af2d06@chi-body* (append af3f31@x* (cdr af3ebd@e*)) af3ebe@r af3ebf@mr af3ec0@lex* af3ec1@rhs* af3ec2@mod** af3ee5@kwd* af3ec4@exp* af3ec5@rib af3ec6@top?)) af3f2f@ls/false) (af2d8e@syntax-violation '#f '"invalid syntax" af3f2d@t)))) (if (memv af3ee7@t '(global-macro global-macro!)) (af2d06@chi-body* (cons (af2a93@add-subst af3ec5@rib (af2cca@chi-global-macro af3ee0@value af3ed1@e)) (cdr af3ebd@e*)) af3ebe@r af3ebf@mr af3ec0@lex* af3ec1@rhs* af3ec2@mod** af3ee5@kwd* af3ec4@exp* af3ec5@rib af3ec6@top?) (if (memv af3ee7@t '(local-macro local-macro!)) (af2d06@chi-body* (cons (af2a93@add-subst af3ec5@rib (af2cc8@chi-local-macro af3ee0@value af3ed1@e)) (cdr af3ebd@e*)) af3ebe@r af3ebf@mr af3ec0@lex* af3ec1@rhs* af3ec2@mod** af3ee5@kwd* af3ec4@exp* af3ec5@rib af3ec6@top?) (if (memv af3ee7@t '(macro macro!)) (af2d06@chi-body* (cons (af2a93@add-subst af3ec5@rib (af2cc6@chi-macro af3ee0@value af3ed1@e)) (cdr af3ebd@e*)) af3ebe@r af3ebf@mr af3ec0@lex* af3ec1@rhs* af3ec2@mod** af3ee5@kwd* af3ec4@exp* af3ec5@rib af3ec6@top?) (if (memv af3ee7@t '(module)) (call-with-values (lambda () (af2d04@chi-internal-module af3ed1@e af3ebe@r af3ebf@mr af3ec0@lex* af3ec1@rhs* af3ec2@mod** af3ee5@kwd*)) (lambda (af3f43@af3f34 af3f44@af3f36 af3f45@af3f38 af3f46@af3f3a af3f47@af3f3c af3f48@af3f3e af3f49@af3f40 af3f4a@af3f42) (let ((af3f53@kwd* af3f4a@af3f42) (af3f54@mod** af3f49@af3f40) (af3f55@mr af3f48@af3f3e) (af3f56@r af3f47@af3f3c) (af3f57@m-exp-lab* af3f46@af3f3a) (af3f58@m-exp-id* af3f45@af3f38) (af3f59@rhs* af3f44@af3f36) (af3f5a@lex* af3f43@af3f34)) (begin (vector-for-each (lambda (af3f63@id af3f64@lab) (af2a5d@extend-rib! af3ec5@rib af3f63@id af3f64@lab)) af3f58@m-exp-id* af3f57@m-exp-lab*) (af2d06@chi-body* (cdr af3ebd@e*) af3f56@r af3f55@mr af3f5a@lex* af3f59@rhs* af3f54@mod** af3f53@kwd* af3ec4@exp* af3ec5@rib af3ec6@top?))))) (if (memv af3ee7@t '(library)) (begin (af2d70@library-expander (af2abb@stx->datum af3ed1@e)) (af2d06@chi-body* (cdr af3ebd@e*) af3ebe@r af3ebf@mr af3ec0@lex* af3ec1@rhs* af3ec2@mod** af3ee5@kwd* af3ec4@exp* af3ec5@rib af3ec6@top?)) (if (memv af3ee7@t '(export)) (let ((af3f67@t af3ed1@e)) (let ((af3f69@ls/false (af2cae@syntax-dispatch af3f67@t '(_ . each-any)))) (if af3f69@ls/false (apply (lambda (af3f6b@exp-decl*) (af2d06@chi-body* (cdr af3ebd@e*) af3ebe@r af3ebf@mr af3ec0@lex* af3ec1@rhs* af3ec2@mod** af3ee5@kwd* (append af3f6b@exp-decl* af3ec4@exp*) af3ec5@rib af3ec6@top?)) af3f69@ls/false) (af2d8e@syntax-violation '#f '"invalid syntax" af3f67@t)))) (if (memv af3ee7@t '(import)) (let ((af3f6e@module-import? '#f) (af3f70@module-import '#f) (af3f72@library-import '#f)) (begin (set! af3f6e@module-import? (lambda (af3fc1@e) (let ((af3fc3@t af3fc1@e)) (let ((af3fc5@ls/false (af2cae@syntax-dispatch af3fc3@t '(_ any)))) (if (and af3fc5@ls/false (apply (lambda (af3fc7@id) (af2aa7@id? af3fc7@id)) af3fc5@ls/false)) (apply (lambda (af3fc9@id) '#t) af3fc5@ls/false) (let ((af3fcb@t af3fc3@t)) (let ((af3fcd@ls/false (af2cae@syntax-dispatch af3fcb@t '(_ . each-any)))) (if af3fcd@ls/false (apply (lambda (af3fcf@imp*) '#f) af3fcd@ls/false) (let ((af3fd1@t af3fcb@t)) (let ((af3fd3@ls/false (af2cae@syntax-dispatch af3fd1@t '_))) (if af3fd3@ls/false (apply (lambda () (af2d8e@syntax-violation '#f '"malformed import form" af3fc1@e)) af3fd3@ls/false) (af2d8e@syntax-violation '#f '"invalid syntax" af3fd1@t)))))))))))) (set! af3f70@module-import (lambda (af3f9f@e af3fa0@r) (let ((af3fa3@t af3f9f@e)) (let ((af3fa5@ls/false (af2cae@syntax-dispatch af3fa3@t '(_ any)))) (if (and af3fa5@ls/false (apply (lambda (af3fa7@id) (af2aa7@id? af3fa7@id)) af3fa5@ls/false)) (apply (lambda (af3fa9@id) (call-with-values (lambda () (af2ac9@syntax-type af3fa9@id af3fa0@r)) (lambda (af3fb1@af3fac af3fb2@af3fae af3fb3@af3fb0) (let ((af3fb7@kwd af3fb3@af3fb0) (af3fb8@value af3fb2@af3fae) (af3fb9@type af3fb1@af3fac)) (let ((af3fbd@t af3fb9@type)) (if (memv af3fbd@t '($module)) (let ((af3fbf@iface af3fb8@value)) (values (af2d02@module-interface-exp-id* af3fbf@iface af3fa9@id) (af2cfc@module-interface-exp-lab-vec af3fbf@iface))) (af2d8e@syntax-violation '#f '"invalid import" af3f9f@e))))))) af3fa5@ls/false) (af2d8e@syntax-violation '#f '"invalid syntax" af3fa3@t)))))) (set! af3f72@library-import (lambda (af3f83@e) (let ((af3f85@t af3f83@e)) (let ((af3f87@ls/false (af2cae@syntax-dispatch af3f85@t '(any . each-any)))) (if af3f87@ls/false (apply (lambda (af3f89@ctxt af3f8a@imp*) (call-with-values (lambda () (af2d10@parse-import-spec* (af2d94@syntax->datum af3f8a@imp*))) (lambda (af3f91@af3f8e af3f92@af3f90) (let ((af3f95@subst-labels af3f92@af3f90) (af3f96@subst-names af3f91@af3f8e)) (values (vector-map (lambda (af3f99@name) (af2a87@datum->stx af3f89@ctxt af3f99@name)) af3f96@subst-names) af3f95@subst-labels))))) af3f87@ls/false) (let ((af3f9b@t af3f85@t)) (let ((af3f9d@ls/false (af2cae@syntax-dispatch af3f9b@t '_))) (if af3f9d@ls/false (apply (lambda () (af2d8e@syntax-violation '#f '"invalid import form" af3f83@e)) af3f9d@ls/false) (af2d8e@syntax-violation '#f '"invalid syntax" af3f9b@t))))))))) (begin (call-with-values (lambda () (if (af3f6e@module-import? af3ed1@e) (af3f70@module-import af3ed1@e af3ebe@r) (af3f72@library-import af3ed1@e))) (lambda (af3f77@af3f74 af3f78@af3f76) (let ((af3f7b@lab* af3f78@af3f76) (af3f7c@id* af3f77@af3f74)) (vector-for-each (lambda (af3f7f@id af3f80@lab) (af2a5d@extend-rib! af3ec5@rib af3f7f@id af3f80@lab)) af3f7c@id* af3f7b@lab*)))) (af2d06@chi-body* (cdr af3ebd@e*) af3ebe@r af3ebf@mr af3ec0@lex* af3ec1@rhs* af3ec2@mod** af3ee5@kwd* af3ec4@exp* af3ec5@rib af3ec6@top?)))) (if af3ec6@top? (af2d06@chi-body* (cdr af3ebd@e*) af3ebe@r af3ebf@mr (cons (af2a2f@gen-lexical 'dummy) af3ec0@lex*) (cons (cons 'top-expr af3ed1@e) af3ec1@rhs*) af3ec2@mod** af3ee5@kwd* af3ec4@exp* af3ec5@rib af3ec6@top?) (values af3ebd@e* af3ebe@r af3ebf@mr af3ec0@lex* af3ec1@rhs* af3ec2@mod** af3ee5@kwd* af3ec4@exp*)))))))))))))))))))))) (set! af47aa@af2d06@chi-body* af2d06@chi-body*) (set! af2d08@expand-transformer (lambda (af3fd5@expr af3fd6@r) (let ((af3fd9@rtc (af2d14@make-collector))) (let ((af3fdb@expanded-rhs (let ((af3fe5@af3fde af2d16@inv-collector) (af3fe6@af3fe0 af2d18@vis-collector) (af3fe7@af3fe2 af3fd9@rtc) (af3fe8@af3fe4 (lambda (af3fed@x) (values)))) (let ((af3fef@swap (lambda () (begin (let ((af3ff1@t (af3fe5@af3fde))) (begin (af3fe5@af3fde af3fe7@af3fe2) (set! af3fe7@af3fe2 af3ff1@t))) (let ((af3ff3@t (af3fe6@af3fe0))) (begin (af3fe6@af3fe0 af3fe8@af3fe4) (set! af3fe8@af3fe4 af3ff3@t))))))) (dynamic-wind af3fef@swap (lambda () (af2cd0@chi-expr af3fd5@expr af3fd6@r af3fd6@r)) af3fef@swap))))) (begin (for-each (let ((af3ff5@mark-visit (af2d18@vis-collector))) (lambda (af3ff7@x) (begin (af28bd@af270b@invoke-library af3ff7@x) (af3ff5@mark-visit af3ff7@x)))) (af3fd9@rtc)) af3fdb@expanded-rhs))))) (set! af47ab@af2d08@expand-transformer af2d08@expand-transformer) (set! af2d0a@parse-exports (lambda (af3ff9@exp*) (let af4001@f ((af3ffb@exp* af3ff9@exp*) (af3ffc@int* '()) (af3ffd@ext* '())) (if (null? af3ffb@exp*) (begin (if (not (af2aaf@valid-bound-ids? af3ffd@ext*)) (af2d8e@syntax-violation 'export '"invalid exports" (af2ce4@find-dups af3ffd@ext*)) (void)) (values (map af2d94@syntax->datum af3ffd@ext*) af3ffc@int*)) (let ((af4003@t (car af3ffb@exp*))) (let ((af4005@ls/false (af2cae@syntax-dispatch af4003@t '(any . #(each (any any)))))) (if af4005@ls/false (apply (lambda (af4007@rename af4008@i* af4009@e*) (begin (if (not (and (eq? (af2d94@syntax->datum af4007@rename) 'rename) (for-all af2aa7@id? af4008@i*) (for-all af2aa7@id? af4009@e*))) (af2d8e@syntax-violation 'export '"invalid export specifier" (car af3ffb@exp*)) (void)) (af4001@f (cdr af3ffb@exp*) (append af4008@i* af3ffc@int*) (append af4009@e* af3ffd@ext*)))) af4005@ls/false) (let ((af400d@t af4003@t)) (let ((af400f@ls/false (af2cae@syntax-dispatch af400d@t 'any))) (if af400f@ls/false (apply (lambda (af4011@ie) (begin (if (not (af2aa7@id? af4011@ie)) (af2d8e@syntax-violation 'export '"invalid export" af4011@ie) (void)) (af4001@f (cdr af3ffb@exp*) (cons af4011@ie af3ffc@int*) (cons af4011@ie af3ffd@ext*)))) af400f@ls/false) (af2d8e@syntax-violation '#f '"invalid syntax" af400d@t))))))))))) (set! af47ac@af2d0a@parse-exports af2d0a@parse-exports) (set! af2d0c@parse-library-name (lambda (af4013@spec) (let ((af4016@parse '#f)) (begin (set! af4016@parse (lambda (af4023@x) (let ((af4025@t af4023@x)) (let ((af4027@ls/false (af2cae@syntax-dispatch af4025@t '(each-any)))) (if (and af4027@ls/false (apply (lambda (af4029@v*) (for-all (lambda (af402b@x) (let ((af402d@x (af2d94@syntax->datum af402b@x))) (and (integer? af402d@x) (exact? af402d@x)))) af4029@v*)) af4027@ls/false)) (apply (lambda (af402f@v*) (values '() (map af2d94@syntax->datum af402f@v*))) af4027@ls/false) (let ((af4031@t af4025@t)) (let ((af4033@ls/false (af2cae@syntax-dispatch af4031@t '(any . any)))) (if (and af4033@ls/false (apply (lambda (af4035@x af4036@rest) (symbol? (af2d94@syntax->datum af4035@x))) af4033@ls/false)) (apply (lambda (af4039@x af403a@rest) (call-with-values (lambda () (af4016@parse af403a@rest)) (lambda (af4041@af403e af4042@af4040) (let ((af4045@v* af4042@af4040) (af4046@x* af4041@af403e)) (values (cons (af2d94@syntax->datum af4039@x) af4046@x*) af4045@v*))))) af4033@ls/false) (let ((af4049@t af4031@t)) (let ((af404b@ls/false (af2cae@syntax-dispatch af4049@t '()))) (if af404b@ls/false (apply (lambda () (values '() '())) af404b@ls/false) (let ((af404d@t af4049@t)) (let ((af404f@ls/false (af2cae@syntax-dispatch af404d@t '_))) (if af404f@ls/false (apply (lambda () (af2d8e@syntax-violation '#f '"invalid library name" af4013@spec)) af404f@ls/false) (af2d8e@syntax-violation '#f '"invalid syntax" af404d@t))))))))))))))) (call-with-values (lambda () (af4016@parse af4013@spec)) (lambda (af401b@af4018 af401c@af401a) (let ((af401f@ver* af401c@af401a) (af4020@name* af401b@af4018)) (begin (if (null? af4020@name*) (af2d8e@syntax-violation '#f '"empty library name" af4013@spec) (void)) (values af4020@name* af401f@ver*))))))))) (set! af47ad@af2d0c@parse-library-name af2d0c@parse-library-name) (set! af2d0e@parse-library (lambda (af4051@e) (let ((af4053@t af4051@e)) (let ((af4055@ls/false (af2cae@syntax-dispatch af4053@t '(any each-any (any . each-any) (any . each-any) . each-any)))) (if (and af4055@ls/false (apply (lambda (af4057@library af4058@name* af4059@export af405a@exp* af405b@import af405c@imp* af405d@b*) (and (eq? (af2d94@syntax->datum af4059@export) 'export) (eq? (af2d94@syntax->datum af405b@import) 'import) (eq? (af2d94@syntax->datum af4057@library) 'library))) af4055@ls/false)) (apply (lambda (af4065@library af4066@name* af4067@export af4068@exp* af4069@import af406a@imp* af406b@b*) (values af4066@name* af4068@exp* af406a@imp* af406b@b*)) af4055@ls/false) (let ((af4073@t af4053@t)) (let ((af4075@ls/false (af2cae@syntax-dispatch af4073@t '_))) (if af4075@ls/false (apply (lambda () (af2d8e@syntax-violation '#f '"malformed library" af4051@e)) af4075@ls/false) (af2d8e@syntax-violation '#f '"invalid syntax" af4073@t))))))))) (set! af47ae@af2d0e@parse-library af2d0e@parse-library) (set! af2d10@parse-import-spec* (let ((af4078@idsyn? '#f) (af407a@dup-error '#f) (af407c@merge-substs '#f) (af407e@exclude* '#f) (af4080@find* '#f) (af4082@rem* '#f) (af4084@remove-dups '#f) (af4086@parse-library-name '#f) (af4088@import-library '#f) (af408a@get-import '#f) (af408c@add-imports! '#f)) (begin (set! af4078@idsyn? (lambda (af4281@x) (symbol? (af2d94@syntax->datum af4281@x)))) (set! af407a@dup-error (lambda (af427f@name) (af2d8e@syntax-violation 'import '"two imports with different bindings" af427f@name))) (set! af407c@merge-substs (lambda (af426d@s af426e@subst) (let ((af4272@insert-to-subst '#f)) (begin (set! af4272@insert-to-subst (lambda (af4273@a af4274@subst) (let ((af4277@name (car af4273@a)) (af4278@label (cdr af4273@a))) (let ((af427b@t (assq af4277@name af4274@subst))) (if af427b@t ((lambda (af427d@x) (if (eq? (cdr af427d@x) af4278@label) af4274@subst (af407a@dup-error af4277@name))) af427b@t) (cons af4273@a af4274@subst)))))) (if (null? af426d@s) af426e@subst (af4272@insert-to-subst (car af426d@s) (af407c@merge-substs (cdr af426d@s) af426e@subst))))))) (set! af407e@exclude* (lambda (af423d@sym* af423e@subst) (let ((af4242@exclude '#f)) (begin (set! af4242@exclude (lambda (af425b@sym af425c@subst) (if (null? af425c@subst) (af2d8e@syntax-violation 'import '"cannot rename unbound identifier" af425b@sym) (if (eq? af425b@sym (caar af425c@subst)) (values (cdar af425c@subst) (cdr af425c@subst)) (let ((af425f@a (car af425c@subst))) (call-with-values (lambda () (af4242@exclude af425b@sym (cdr af425c@subst))) (lambda (af4265@af4262 af4266@af4264) (let ((af4269@subst af4266@af4264) (af426a@old af4265@af4262)) (values af426a@old (cons af425f@a af4269@subst)))))))))) (if (null? af423d@sym*) (values '() af423e@subst) (call-with-values (lambda () (af4242@exclude (car af423d@sym*) af423e@subst)) (lambda (af4247@af4244 af4248@af4246) (let ((af424b@subst af4248@af4246) (af424c@old af4247@af4244)) (call-with-values (lambda () (af407e@exclude* (cdr af423d@sym*) af424b@subst)) (lambda (af4253@af4250 af4254@af4252) (let ((af4257@subst af4254@af4252) (af4258@old* af4253@af4250)) (values (cons af424c@old af4258@old*) af4257@subst)))))))))))) (set! af4080@find* (lambda (af4235@sym* af4236@subst) (map (lambda (af4239@x) (let ((af423b@t (assq af4239@x af4236@subst))) (if af423b@t (cdr af423b@t) (af2d8e@syntax-violation 'import '"cannot find identifier" af4239@x)))) af4235@sym*))) (set! af4082@rem* (lambda (af422d@sym* af422e@subst) (let af4233@f ((af4231@subst af422e@subst)) (if (null? af4231@subst) '() (if (memq (caar af4231@subst) af422d@sym*) (af4233@f (cdr af4231@subst)) (cons (car af4231@subst) (af4233@f (cdr af4231@subst)))))))) (set! af4084@remove-dups (lambda (af422b@ls) (if (null? af422b@ls) '() (if (memq (car af422b@ls) (cdr af422b@ls)) (af4084@remove-dups (cdr af422b@ls)) (cons (car af422b@ls) (af4084@remove-dups (cdr af422b@ls))))))) (set! af4086@parse-library-name (lambda (af4143@spec) (let ((af4146@subversion? '#f) (af4148@subversion-pred '#f) (af414a@version-pred '#f)) (begin (set! af4146@subversion? (lambda (af4227@x) (let ((af4229@x (af2d94@syntax->datum af4227@x))) (and (integer? af4229@x) (exact? af4229@x) (>= af4229@x '0))))) (set! af4148@subversion-pred (lambda (af41c7@x*) (let ((af41c9@t af41c7@x*)) (let ((af41cb@ls/false (af2cae@syntax-dispatch af41c9@t 'any))) (if (and af41cb@ls/false (apply (lambda (af41cd@n) (af4146@subversion? af41cd@n)) af41cb@ls/false)) (apply (lambda (af41cf@n) (lambda (af41d1@x) (= af41d1@x (af2d94@syntax->datum af41cf@n)))) af41cb@ls/false) (let ((af41d3@t af41c9@t)) (let ((af41d5@ls/false (af2cae@syntax-dispatch af41d3@t '(any . each-any)))) (if (and af41d5@ls/false (apply (lambda (af41d7@p? af41d8@sub*) (eq? (af2d94@syntax->datum af41d7@p?) 'and)) af41d5@ls/false)) (apply (lambda (af41db@p? af41dc@sub*) (let ((af41df@p* (map af4148@subversion-pred af41dc@sub*))) (lambda (af41e1@x) (for-all (lambda (af41e3@p) (af41e3@p af41e1@x)) af41df@p*)))) af41d5@ls/false) (let ((af41e5@t af41d3@t)) (let ((af41e7@ls/false (af2cae@syntax-dispatch af41e5@t '(any . each-any)))) (if (and af41e7@ls/false (apply (lambda (af41e9@p? af41ea@sub*) (eq? (af2d94@syntax->datum af41e9@p?) 'or)) af41e7@ls/false)) (apply (lambda (af41ed@p? af41ee@sub*) (let ((af41f1@p* (map af4148@subversion-pred af41ee@sub*))) (lambda (af41f3@x) (exists (lambda (af41f5@p) (af41f5@p af41f3@x)) af41f1@p*)))) af41e7@ls/false) (let ((af41f7@t af41e5@t)) (let ((af41f9@ls/false (af2cae@syntax-dispatch af41f7@t '(any any)))) (if (and af41f9@ls/false (apply (lambda (af41fb@p? af41fc@sub) (eq? (af2d94@syntax->datum af41fb@p?) 'not)) af41f9@ls/false)) (apply (lambda (af41ff@p? af4200@sub) (let ((af4203@p (af4148@subversion-pred af4200@sub))) (lambda (af4205@x) (not (af4203@p af4205@x))))) af41f9@ls/false) (let ((af4207@t af41f7@t)) (let ((af4209@ls/false (af2cae@syntax-dispatch af4207@t '(any any)))) (if (and af4209@ls/false (apply (lambda (af420b@p? af420c@n) (and (eq? (af2d94@syntax->datum af420b@p?) '<=) (af4146@subversion? af420c@n))) af4209@ls/false)) (apply (lambda (af420f@p? af4210@n) (lambda (af4213@x) (<= af4213@x (af2d94@syntax->datum af4210@n)))) af4209@ls/false) (let ((af4215@t af4207@t)) (let ((af4217@ls/false (af2cae@syntax-dispatch af4215@t '(any any)))) (if (and af4217@ls/false (apply (lambda (af4219@p? af421a@n) (and (eq? (af2d94@syntax->datum af4219@p?) '>=) (af4146@subversion? af421a@n))) af4217@ls/false)) (apply (lambda (af421d@p? af421e@n) (lambda (af4221@x) (>= af4221@x (af2d94@syntax->datum af421e@n)))) af4217@ls/false) (let ((af4223@t af4215@t)) (let ((af4225@ls/false (af2cae@syntax-dispatch af4223@t '_))) (if af4225@ls/false (apply (lambda () (af2d8e@syntax-violation 'import '"invalid sub-version spec" af4143@spec af41c7@x*)) af4225@ls/false) (af2d8e@syntax-violation '#f '"invalid syntax" af4223@t)))))))))))))))))))))))) (set! af414a@version-pred (lambda (af4177@x*) (let ((af4179@t af4177@x*)) (let ((af417b@ls/false (af2cae@syntax-dispatch af4179@t '()))) (if af417b@ls/false (apply (lambda () (lambda (af417d@x) '#t)) af417b@ls/false) (let ((af417f@t af4179@t)) (let ((af4181@ls/false (af2cae@syntax-dispatch af417f@t '(any . each-any)))) (if (and af4181@ls/false (apply (lambda (af4183@c af4184@ver*) (eq? (af2d94@syntax->datum af4183@c) 'and)) af4181@ls/false)) (apply (lambda (af4187@c af4188@ver*) (let ((af418b@p* (map af414a@version-pred af4188@ver*))) (lambda (af418d@x) (for-all (lambda (af418f@p) (af418f@p af418d@x)) af418b@p*)))) af4181@ls/false) (let ((af4191@t af417f@t)) (let ((af4193@ls/false (af2cae@syntax-dispatch af4191@t '(any . each-any)))) (if (and af4193@ls/false (apply (lambda (af4195@c af4196@ver*) (eq? (af2d94@syntax->datum af4195@c) 'or)) af4193@ls/false)) (apply (lambda (af4199@c af419a@ver*) (let ((af419d@p* (map af414a@version-pred af419a@ver*))) (lambda (af419f@x) (exists (lambda (af41a1@p) (af41a1@p af419f@x)) af419d@p*)))) af4193@ls/false) (let ((af41a3@t af4191@t)) (let ((af41a5@ls/false (af2cae@syntax-dispatch af41a3@t '(any any)))) (if (and af41a5@ls/false (apply (lambda (af41a7@c af41a8@ver) (eq? (af2d94@syntax->datum af41a7@c) 'not)) af41a5@ls/false)) (apply (lambda (af41ab@c af41ac@ver) (let ((af41af@p (af414a@version-pred af41ac@ver))) (lambda (af41b1@x) (not (af41af@p af41b1@x))))) af41a5@ls/false) (let ((af41b3@t af41a3@t)) (let ((af41b5@ls/false (af2cae@syntax-dispatch af41b3@t 'each-any))) (if af41b5@ls/false (apply (lambda (af41b7@sub*) (let ((af41b9@p* (map af4148@subversion-pred af41b7@sub*))) (lambda (af41bb@x) (let af41c1@f ((af41bd@p* af41b9@p*) (af41be@x af41bb@x)) (if (null? af41bd@p*) '#t (if (null? af41be@x) '#f (and ((car af41bd@p*) (car af41be@x)) (af41c1@f (cdr af41bd@p*) (cdr af41be@x))))))))) af41b5@ls/false) (let ((af41c3@t af41b3@t)) (let ((af41c5@ls/false (af2cae@syntax-dispatch af41c3@t '_))) (if af41c5@ls/false (apply (lambda () (af2d8e@syntax-violation 'import '"invalid version spec" af4143@spec af4177@x*)) af41c5@ls/false) (af2d8e@syntax-violation '#f '"invalid syntax" af41c3@t))))))))))))))))))))) (let af414d@f ((af414b@x af4143@spec)) (let ((af414f@t af414b@x)) (let ((af4151@ls/false (af2cae@syntax-dispatch af414f@t '(each-any)))) (if af4151@ls/false (apply (lambda (af4153@version-spec*) (values '() (af414a@version-pred af4153@version-spec*))) af4151@ls/false) (let ((af4155@t af414f@t)) (let ((af4157@ls/false (af2cae@syntax-dispatch af4155@t '(any . any)))) (if (and af4157@ls/false (apply (lambda (af4159@x af415a@x*) (af4078@idsyn? af4159@x)) af4157@ls/false)) (apply (lambda (af415d@x af415e@x*) (call-with-values (lambda () (af414d@f af415e@x*)) (lambda (af4165@af4162 af4166@af4164) (let ((af4169@pred af4166@af4164) (af416a@name af4165@af4162)) (values (cons (af2d94@syntax->datum af415d@x) af416a@name) af4169@pred))))) af4157@ls/false) (let ((af416d@t af4155@t)) (let ((af416f@ls/false (af2cae@syntax-dispatch af416d@t '()))) (if af416f@ls/false (apply (lambda () (values '() (lambda (af4171@x) '#t))) af416f@ls/false) (let ((af4173@t af416d@t)) (let ((af4175@ls/false (af2cae@syntax-dispatch af4173@t '_))) (if af4175@ls/false (apply (lambda () (af2d8e@syntax-violation '#f '"invalid import spec" af4143@spec)) af4175@ls/false) (af2d8e@syntax-violation '#f '"invalid syntax" af4173@t)))))))))))))))))) (set! af4088@import-library (lambda (af4133@spec*) (call-with-values (lambda () (af4086@parse-library-name af4133@spec*)) (lambda (af4139@af4136 af413a@af4138) (let ((af413d@pred af413a@af4138) (af413e@name af4139@af4136)) (begin (if (null? af413e@name) (af2d8e@syntax-violation 'import '"empty library name" af4133@spec*) (void)) (let ((af4141@lib (af28b6@af26fd@find-library-by-name af413e@name))) (begin (if (not af4141@lib) (af2d8e@syntax-violation 'import '"cannot find library with required name" af413e@name) (void)) (if (not (af413d@pred (af2890@af26b1@library-version af4141@lib))) (af2d8e@syntax-violation 'import '"library does not satisfy version specification" af4133@spec* af4141@lib) (void)) ((af2d1a@imp-collector) af4141@lib) (af2898@af26c1@library-subst af4141@lib))))))))) (set! af408a@get-import (lambda (af40a5@spec) (let ((af40a7@t af40a5@spec)) (let ((af40a9@ls/false (af2cae@syntax-dispatch af40a7@t '(any . each-any)))) (if (and af40a9@ls/false (apply (lambda (af40ab@x af40ac@x*) (not (memq (af2d94@syntax->datum af40ab@x) '(for rename except only prefix library)))) af40a9@ls/false)) (apply (lambda (af40af@x af40b0@x*) (af4088@import-library (cons af40af@x af40b0@x*))) af40a9@ls/false) (let ((af40b3@t af40a7@t)) (let ((af40b5@ls/false (af2cae@syntax-dispatch af40b3@t '(any any . #(each (any any)))))) (if (and af40b5@ls/false (apply (lambda (af40b7@rename af40b8@isp af40b9@old* af40ba@new*) (and (eq? (af2d94@syntax->datum af40b7@rename) 'rename) (for-all af4078@idsyn? af40b9@old*) (for-all af4078@idsyn? af40ba@new*))) af40b5@ls/false)) (apply (lambda (af40bf@rename af40c0@isp af40c1@old* af40c2@new*) (let ((af40c7@subst (af408a@get-import af40c0@isp)) (af40c8@old* (map af2d94@syntax->datum af40c1@old*)) (af40c9@new* (map af2d94@syntax->datum af40c2@new*))) (let ((af40cd@old-label* (af4080@find* af40c8@old* af40c7@subst))) (let ((af40cf@subst (af4082@rem* af40c8@old* af40c7@subst))) (af407c@merge-substs (map cons af40c9@new* af40cd@old-label*) af40cf@subst))))) af40b5@ls/false) (let ((af40d1@t af40b3@t)) (let ((af40d3@ls/false (af2cae@syntax-dispatch af40d1@t '(any any . each-any)))) (if (and af40d3@ls/false (apply (lambda (af40d5@except af40d6@isp af40d7@sym*) (and (eq? (af2d94@syntax->datum af40d5@except) 'except) (for-all af4078@idsyn? af40d7@sym*))) af40d3@ls/false)) (apply (lambda (af40db@except af40dc@isp af40dd@sym*) (let ((af40e1@subst (af408a@get-import af40dc@isp))) (af4082@rem* (map af2d94@syntax->datum af40dd@sym*) af40e1@subst))) af40d3@ls/false) (let ((af40e3@t af40d1@t)) (let ((af40e5@ls/false (af2cae@syntax-dispatch af40e3@t '(any any . each-any)))) (if (and af40e5@ls/false (apply (lambda (af40e7@only af40e8@isp af40e9@sym*) (and (eq? (af2d94@syntax->datum af40e7@only) 'only) (for-all af4078@idsyn? af40e9@sym*))) af40e5@ls/false)) (apply (lambda (af40ed@only af40ee@isp af40ef@sym*) (let ((af40f3@subst (af408a@get-import af40ee@isp)) (af40f4@sym* (map af2d94@syntax->datum af40ef@sym*))) (let ((af40f7@sym* (af4084@remove-dups af40f4@sym*))) (let ((af40f9@lab* (af4080@find* af40f7@sym* af40f3@subst))) (map cons af40f7@sym* af40f9@lab*))))) af40e5@ls/false) (let ((af40fb@t af40e3@t)) (let ((af40fd@ls/false (af2cae@syntax-dispatch af40fb@t '(any any any)))) (if (and af40fd@ls/false (apply (lambda (af40ff@prefix af4100@isp af4101@p) (and (eq? (af2d94@syntax->datum af40ff@prefix) 'prefix) (af4078@idsyn? af4101@p))) af40fd@ls/false)) (apply (lambda (af4105@prefix af4106@isp af4107@p) (let ((af410b@subst (af408a@get-import af4106@isp)) (af410c@prefix (symbol->string (af2d94@syntax->datum af4107@p)))) (map (lambda (af410f@x) (cons (string->symbol (string-append af410c@prefix (symbol->string (car af410f@x)))) (cdr af410f@x))) af410b@subst))) af40fd@ls/false) (let ((af4111@t af40fb@t)) (let ((af4113@ls/false (af2cae@syntax-dispatch af4111@t '(any each-any)))) (if (and af4113@ls/false (apply (lambda (af4115@library af4116@spec*) (eq? (af2d94@syntax->datum af4115@library) 'library)) af4113@ls/false)) (apply (lambda (af4119@library af411a@spec*) (af4088@import-library af411a@spec*)) af4113@ls/false) (let ((af411d@t af4111@t)) (let ((af411f@ls/false (af2cae@syntax-dispatch af411d@t '(any any . any)))) (if (and af411f@ls/false (apply (lambda (af4121@for af4122@isp af4123@rest) (eq? (af2d94@syntax->datum af4121@for) 'for)) af411f@ls/false)) (apply (lambda (af4127@for af4128@isp af4129@rest) (af408a@get-import af4128@isp)) af411f@ls/false) (let ((af412d@t af411d@t)) (let ((af412f@ls/false (af2cae@syntax-dispatch af412d@t 'any))) (if af412f@ls/false (apply (lambda (af4131@spec) (af2d8e@syntax-violation 'import '"invalid import spec" af4131@spec)) af412f@ls/false) (af2d8e@syntax-violation '#f '"invalid syntax" af412d@t))))))))))))))))))))))))))) (set! af408c@add-imports! (lambda (af4095@imp af4096@h) (let ((af4099@subst (af408a@get-import af4095@imp))) (for-each (lambda (af409b@x) (let ((af409d@name (car af409b@x)) (af409e@label (cdr af409b@x))) (let ((af40a1@t (hashtable-ref af4096@h af409d@name '#f))) (if af40a1@t ((lambda (af40a3@l) (if (not (eq? af40a3@l af409e@label)) (af407a@dup-error af409d@name) (void))) af40a1@t) (hashtable-set! af4096@h af409d@name af409e@label))))) af4099@subst)))) (lambda (af408d@imp*) (let af4093@f ((af408f@imp* af408d@imp*) (af4090@h (make-eq-hashtable))) (if (null? af408f@imp*) (hashtable-entries af4090@h) (begin (af408c@add-imports! (car af408f@imp*) af4090@h) (af4093@f (cdr af408f@imp*) af4090@h)))))))) (set! af47af@af2d10@parse-import-spec* af2d10@parse-import-spec*) (set! af2d12@make-top-rib (lambda (af4283@names af4284@labels) (let ((af4287@rib (af2a5b@make-empty-rib))) (begin (vector-for-each (lambda (af4289@name af428a@label) (begin (if (not (symbol? af4289@name)) (error 'make-top-rib '"BUG: not a symbol" af4289@name) (void)) (af2a5f@extend-rib/nc! af4287@rib (make-simple-struct 'stx '5 (list af4289@name af2a2b@top-mark* '() '())) af428a@label))) af4283@names af4284@labels) af4287@rib)))) (set! af47b0@af2d12@make-top-rib af2d12@make-top-rib) (set! af2d14@make-collector (lambda () (let ((af428d@ls '())) (lambda af4291 (let ((af4292 (length af4291))) (if (= af4292 '0) (apply (lambda () af428d@ls) af4291) (if (= af4292 '1) (apply (lambda (af428f@x) (set! af428d@ls (af2a24@set-cons af428f@x af428d@ls))) af4291) (error 'apply '"invalid arg count")))))))) (set! af47b1@af2d14@make-collector af2d14@make-collector) (set! af2d16@inv-collector (af25f1@af24d0@make-parameter (lambda af4293@args (assertion-violation 'inv-collector '"BUG: not initialized")) (lambda (af4295@x) (begin (if (not (procedure? af4295@x)) (assertion-violation 'inv-collector '"BUG: not a procedure" af4295@x) (void)) af4295@x)))) (set! af47b2@af2d16@inv-collector af2d16@inv-collector) (set! af2d18@vis-collector (af25f1@af24d0@make-parameter (lambda af4297@args (assertion-violation 'vis-collector '"BUG: not initialized")) (lambda (af4299@x) (begin (if (not (procedure? af4299@x)) (assertion-violation 'vis-collector '"BUG: not a procedure" af4299@x) (void)) af4299@x)))) (set! af47b3@af2d18@vis-collector af2d18@vis-collector) (set! af2d1a@imp-collector (af25f1@af24d0@make-parameter (lambda af429b@args (assertion-violation 'imp-collector '"BUG: not initialized")) (lambda (af429d@x) (begin (if (not (procedure? af429d@x)) (assertion-violation 'imp-collector '"BUG: not a procedure" af429d@x) (void)) af429d@x)))) (set! af47b4@af2d1a@imp-collector af2d1a@imp-collector) (set! af2d1c@chi-library-internal (lambda (af429f@e* af42a0@rib af42a1@top?) (call-with-values (lambda () (af2d06@chi-body* af429f@e* '() '() '() '() '() '() '() af42a0@rib af42a1@top?)) (lambda (af42b5@af42a6 af42b6@af42a8 af42b7@af42aa af42b8@af42ac af42b9@af42ae af42ba@af42b0 af42bb@af42b2 af42bc@af42b4) (let ((af42c5@exp* af42bc@af42b4) (af42c6@_kwd* af42bb@af42b2) (af42c7@mod** af42ba@af42b0) (af42c8@rhs* af42b9@af42ae) (af42c9@lex* af42b8@af42ac) (af42ca@mr af42b7@af42aa) (af42cb@r af42b6@af42a8) (af42cc@e* af42b5@af42a6)) (values (append (apply append (reverse af42c7@mod**)) af42cc@e*) af42cb@r af42ca@mr (reverse af42c9@lex*) (reverse af42c8@rhs*) af42c5@exp*)))))) (set! af47b5@af2d1c@chi-library-internal af2d1c@chi-library-internal) (set! af2d1e@chi-interaction-expr (lambda (af42d5@e af42d6@rib af42d7@r) (call-with-values (lambda () (af2d06@chi-body* (list af42d5@e) af42d7@r af42d7@r '() '() '() '() '() af42d6@rib '#t)) (lambda (af42eb@af42dc af42ec@af42de af42ed@af42e0 af42ee@af42e2 af42ef@af42e4 af42f0@af42e6 af42f1@af42e8 af42f2@af42ea) (let ((af42fb@_exp* af42f2@af42ea) (af42fc@_kwd* af42f1@af42e8) (af42fd@mod** af42f0@af42e6) (af42fe@rhs* af42ef@af42e4) (af42ff@lex* af42ee@af42e2) (af4300@mr af42ed@af42e0) (af4301@r af42ec@af42de) (af4302@e* af42eb@af42dc)) (let ((af430b@e* (af2cde@expand-interaction-rhs*/init* (reverse af42ff@lex*) (reverse af42fe@rhs*) (append (apply append (reverse af42fd@mod**)) af4302@e*) af4301@r af4300@mr))) (let ((af430d@e (if (null? af430b@e*) (af2a0d@af2968@build-void) (if (null? (cdr af430b@e*)) (car af430b@e*) (af2a0c@af2966@build-sequence '#f af430b@e*))))) (values af430d@e af4301@r)))))))) (set! af47b6@af2d1e@chi-interaction-expr af2d1e@chi-interaction-expr) (set! af2d20@library-body-expander (lambda (af430f@name af4310@main-exp* af4311@imp* af4312@b* af4313@top?) (let ((af431a@itc '#f)) (begin (set! af431a@itc (af2d14@make-collector)) (let ((af4323@af431c af2d1a@imp-collector) (af4324@af431e af2d9e@top-level-context) (af4325@af4320 af431a@itc) (af4326@af4322 '#f)) (let ((af432b@swap (lambda () (begin (let ((af432d@t (af4323@af431c))) (begin (af4323@af431c af4325@af4320) (set! af4325@af4320 af432d@t))) (let ((af432f@t (af4324@af431e))) (begin (af4324@af431e af4326@af4322) (set! af4326@af4322 af432f@t))))))) (dynamic-wind af432b@swap (lambda () (call-with-values (lambda () (af2d10@parse-import-spec* af4311@imp*)) (lambda (af4335@af4332 af4336@af4334) (let ((af4339@subst-labels af4336@af4334) (af433a@subst-names af4335@af4332)) (let ((af433d@rib (af2d12@make-top-rib af433a@subst-names af4339@subst-labels))) (let ((af4340@wrap '#f)) (begin (set! af4340@wrap (lambda (af43bb@x) (make-simple-struct 'stx '5 (list af43bb@x af2a2b@top-mark* (list af433d@rib) '())))) (let ((af4341@b* (map af4340@wrap af4312@b*)) (af4342@main-exp* (map af4340@wrap af4310@main-exp*)) (af4343@rtc (af2d14@make-collector)) (af4344@vtc (af2d14@make-collector))) (let ((af4351@af434a af2d16@inv-collector) (af4352@af434c af2d18@vis-collector) (af4353@af434e af4343@rtc) (af4354@af4350 af4344@vtc)) (let ((af4359@swap (lambda () (begin (let ((af435b@t (af4351@af434a))) (begin (af4351@af434a af4353@af434e) (set! af4353@af434e af435b@t))) (let ((af435d@t (af4352@af434c))) (begin (af4352@af434c af4354@af4350) (set! af4354@af4350 af435d@t))))))) (dynamic-wind af4359@swap (lambda () (call-with-values (lambda () (af2d1c@chi-library-internal af4341@b* af433d@rib af4313@top?)) (lambda (af436b@af4360 af436c@af4362 af436d@af4364 af436e@af4366 af436f@af4368 af4370@af436a) (let ((af4377@internal-exp* af4370@af436a) (af4378@rhs* af436f@af4368) (af4379@lex* af436e@af4366) (af437a@mr af436d@af4364) (af437b@r af436c@af4362) (af437c@init* af436b@af4360)) (call-with-values (lambda () (af2d0a@parse-exports (append af4342@main-exp* af4377@internal-exp*))) (lambda (af4387@af4384 af4388@af4386) (let ((af438b@exp-id* af4388@af4386) (af438c@exp-name* af4387@af4384)) (begin (af2a63@seal-rib! af433d@rib) (let ((af438f@init* (af2ccc@chi-expr* af437c@init* af437b@r af437a@mr))) (let ((af4391@rhs* (af2ce0@chi-rhs* af4378@rhs* af437b@r af437a@mr))) (begin (af2a65@unseal-rib! af433d@rib) (let ((af4393@loc* (map af2a31@gen-global af4379@lex*)) (af4394@export-subst (af2d78@make-export-subst af438c@exp-name* af438b@exp-id*))) (let ((af4398@errstr '#f)) (begin (set! af4398@errstr '"attempt to export mutated variable") (call-with-values (lambda () (af2d7a@make-export-env/macros af4379@lex* af4393@loc* af437b@r)) (lambda (af439f@af439a af43a0@af439c af43a1@af439e) (let ((af43a5@macro* af43a1@af439e) (af43a6@global* af43a0@af439c) (af43a7@export-env af439f@af439a)) (begin (for-each (lambda (af43ab@s) (let ((af43ad@name (car af43ab@s)) (af43ae@label (cdr af43ab@s))) (let ((af43b1@p (assq af43ae@label af43a7@export-env))) (if af43b1@p (let ((af43b3@b (cdr af43b1@p))) (let ((af43b5@type (car af43b3@b))) (if (eq? af43b5@type 'mutable) (af2d8e@syntax-violation 'export af4398@errstr af43ad@name) (void)))) (void))))) af4394@export-subst) (let ((af43b7@invoke-body (af2a12@af2972@build-library-letrec* '#f af430f@name af4379@lex* af4393@loc* af4391@rhs* (if (null? af438f@init*) (af2a0d@af2968@build-void) (af2a0c@af2966@build-sequence '#f af438f@init*)))) (af43b8@invoke-definitions (map af2a09@af28c5@build-global-define (map cdr af43a6@global*)))) (values (af431a@itc) (af4343@rtc) (af4344@vtc) (af2a0c@af2966@build-sequence '#f (append af43b8@invoke-definitions (list af43b7@invoke-body))) af43a5@macro* af4394@export-subst af43a7@export-env)))))))))))))))))))) af4359@swap))))))))))) af432b@swap))))))) (set! af47b7@af2d20@library-body-expander af2d20@library-body-expander) (set! af2d22@core-library-expander (lambda (af43bd@e af43be@verify-name) (call-with-values (lambda () (af2d0e@parse-library af43bd@e)) (lambda (af43c9@af43c2 af43ca@af43c4 af43cb@af43c6 af43cc@af43c8) (let ((af43d1@b* af43cc@af43c8) (af43d2@imp* af43cb@af43c6) (af43d3@exp* af43ca@af43c4) (af43d4@name* af43c9@af43c2)) (call-with-values (lambda () (af2d0c@parse-library-name af43d4@name*)) (lambda (af43dd@af43da af43de@af43dc) (let ((af43e1@ver af43de@af43dc) (af43e2@name af43dd@af43da)) (begin (af43be@verify-name af43e2@name) (call-with-values (lambda () (af2d20@library-body-expander af43e2@name af43d3@exp* af43d2@imp* af43d1@b* '#f)) (lambda (af43f3@af43e6 af43f4@af43e8 af43f5@af43ea af43f6@af43ec af43f7@af43ee af43f8@af43f0 af43f9@af43f2) (let ((af4401@export-env af43f9@af43f2) (af4402@export-subst af43f8@af43f0) (af4403@visit-code af43f7@af43ee) (af4404@invoke-code af43f6@af43ec) (af4405@visit-req* af43f5@af43ea) (af4406@invoke-req* af43f4@af43e8) (af4407@imp* af43f3@af43e6)) (values af43e2@name af43e1@ver af4407@imp* af4406@invoke-req* af4405@visit-req* af4404@invoke-code af4403@visit-code af4402@export-subst af4401@export-env))))))))))))) (set! af47b8@af2d22@core-library-expander af2d22@core-library-expander) (set! af2d24@parse-top-level-program (lambda (af440f@e*) (let ((af4411@t af440f@e*)) (let ((af4413@ls/false (af2cae@syntax-dispatch af4411@t '((any . each-any) . each-any)))) (if (and af4413@ls/false (apply (lambda (af4415@import af4416@imp* af4417@b*) (eq? (af2d94@syntax->datum af4415@import) 'import)) af4413@ls/false)) (apply (lambda (af441b@import af441c@imp* af441d@b*) (values af441c@imp* af441d@b*)) af4413@ls/false) (let ((af4421@t af4411@t)) (let ((af4423@ls/false (af2cae@syntax-dispatch af4421@t '((any . any) . any)))) (if (and af4423@ls/false (apply (lambda (af4425@import af4426@x af4427@y) (eq? (af2d94@syntax->datum af4425@import) 'import)) af4423@ls/false)) (apply (lambda (af442b@import af442c@x af442d@y) (af2d8e@syntax-violation 'expander '"invalid syntax of top-level program" (af2aa1@syntax-car af440f@e*))) af4423@ls/false) (let ((af4431@t af4421@t)) (let ((af4433@ls/false (af2cae@syntax-dispatch af4431@t '_))) (if af4433@ls/false (apply (lambda () (assertion-violation 'expander '"top-level program is missing an (import ---) clause")) af4433@ls/false) (af2d8e@syntax-violation '#f '"invalid syntax" af4431@t)))))))))))) (set! af47b9@af2d24@parse-top-level-program af2d24@parse-top-level-program) (set! af2d26@top-level-expander (lambda (af4435@e*) (call-with-values (lambda () (af2d24@parse-top-level-program af4435@e*)) (lambda (af443b@af4438 af443c@af443a) (let ((af443f@b* af443c@af443a) (af4440@imp* af443b@af4438)) (call-with-values (lambda () (af2d20@library-body-expander '() '() af4440@imp* af443f@b* '#t)) (lambda (af4451@af4444 af4452@af4446 af4453@af4448 af4454@af444a af4455@af444c af4456@af444e af4457@af4450) (let ((af445f@export-env af4457@af4450) (af4460@export-subst af4456@af444e) (af4461@visit-code af4455@af444c) (af4462@invoke-code af4454@af444a) (af4463@visit-req* af4453@af4448) (af4464@invoke-req* af4452@af4446) (af4465@imp* af4451@af4444)) (values af4464@invoke-req* af4462@invoke-code))))))))) (set! af47ba@af2d26@top-level-expander af2d26@top-level-expander) (set! af2d28@rp (af25ee@af24ca@make-record-printer 'env (lambda (af446d@x af446e@p af446f@wr) (display '"#<environment>" af446e@p)))) (set! af47bb@af2d28@rp af2d28@rp) (set! af2d32@env? (lambda (af4473@x) (and (simple-struct? af4473@x) (eq? (simple-struct-name af4473@x) 'env)))) (set! af47bc@af2d32@env? af2d32@env?) (set! af2d34@env-names (lambda (af4475@x) (simple-struct-ref af4475@x '0))) (set! af47bd@af2d34@env-names af2d34@env-names) (set! af2d36@set-env-names! (lambda (af4477@x af4478@val) (simple-struct-set! af4477@x '0 af4478@val))) (set! af47be@af2d36@set-env-names! af2d36@set-env-names!) (set! af2d38@env-labels (lambda (af447b@x) (simple-struct-ref af447b@x '1))) (set! af47bf@af2d38@env-labels af2d38@env-labels) (set! af2d3a@set-env-labels! (lambda (af447d@x af447e@val) (simple-struct-set! af447d@x '1 af447e@val))) (set! af47c0@af2d3a@set-env-labels! af2d3a@set-env-labels!) (set! af2d3c@env-itc (lambda (af4481@x) (simple-struct-ref af4481@x '2))) (set! af47c1@af2d3c@env-itc af2d3c@env-itc) (set! af2d3e@set-env-itc! (lambda (af4483@x af4484@val) (simple-struct-set! af4483@x '2 af4484@val))) (set! af47c2@af2d3e@set-env-itc! af2d3e@set-env-itc!) (set! af2d40@dummy '3) (set! af47c3@af2d40@dummy af2d40@dummy) (set! af2d42@rp (af25ee@af24ca@make-record-printer 'interaction-env (lambda (af4487@x af4488@p af4489@wr) (display '"#<environment>" af4488@p)))) (set! af47c4@af2d42@rp af2d42@rp) (set! af2d4c@interaction-env? (lambda (af448d@x) (and (simple-struct? af448d@x) (eq? (simple-struct-name af448d@x) 'interaction-env)))) (set! af47c5@af2d4c@interaction-env? af2d4c@interaction-env?) (set! af2d4e@interaction-env-rib (lambda (af448f@x) (simple-struct-ref af448f@x '0))) (set! af47c6@af2d4e@interaction-env-rib af2d4e@interaction-env-rib) (set! af2d50@set-interaction-env-rib! (lambda (af4491@x af4492@val) (simple-struct-set! af4491@x '0 af4492@val))) (set! af47c7@af2d50@set-interaction-env-rib! af2d50@set-interaction-env-rib!) (set! af2d52@interaction-env-r (lambda (af4495@x) (simple-struct-ref af4495@x '1))) (set! af47c8@af2d52@interaction-env-r af2d52@interaction-env-r) (set! af2d54@set-interaction-env-r! (lambda (af4497@x af4498@val) (simple-struct-set! af4497@x '1 af4498@val))) (set! af47c9@af2d54@set-interaction-env-r! af2d54@set-interaction-env-r!) (set! af2d56@interaction-env-locs (lambda (af449b@x) (simple-struct-ref af449b@x '2))) (set! af47ca@af2d56@interaction-env-locs af2d56@interaction-env-locs) (set! af2d58@set-interaction-env-locs! (lambda (af449d@x af449e@val) (simple-struct-set! af449d@x '2 af449e@val))) (set! af47cb@af2d58@set-interaction-env-locs! af2d58@set-interaction-env-locs!) (set! af2d5a@dummy '3) (set! af47cc@af2d5a@dummy af2d5a@dummy) (set! af2d5c@interaction-environment-symbols (lambda () (af2d64@environment-symbols (af2d9c@interaction-environment)))) (set! af47cd@af2d5c@interaction-environment-symbols af2d5c@interaction-environment-symbols) (set! af2d5e@environment-bindings (lambda (af44a1@e) (vector->list (vector-map (lambda (af44a3@name af44a4@label) (af2d60@parse-binding (cons af44a3@name (af28bc@af2709@imported-label->binding af44a4@label)))) (af2d34@env-names af44a1@e) (af2d38@env-labels af44a1@e))))) (set! af47ce@af2d5e@environment-bindings af2d5e@environment-bindings) (set! af2d60@parse-binding (lambda (af44a7@b) (cons (car af44a7@b) (let ((af44a9@t (cadr af44a7@b))) (if (memv af44a9@t '(core-prim global)) 'procedure (if (memv af44a9@t '(core-macro macro global-macro)) 'syntax (if (memv af44a9@t '($core-rtd)) 'record (if (eq? (car af44a7@b) (cadr af44a7@b)) 'syntax 'unknown)))))))) (set! af47cf@af2d60@parse-binding af2d60@parse-binding) (set! af2d62@environment? (lambda (af44ab@x) (or (af2d32@env? af44ab@x) (af2d4c@interaction-env? af44ab@x)))) (set! af47d0@af2d62@environment? af2d62@environment?) (set! af2d64@environment-symbols (lambda (af44ad@x) (if (af2d32@env? af44ad@x) (vector->list (af2d34@env-names af44ad@x)) (if (af2d4c@interaction-env? af44ad@x) (map values (af2a45@rib-sym* (af2d4e@interaction-env-rib af44ad@x))) (assertion-violation 'environment-symbols '"not an environment" af44ad@x))))) (set! af47d1@af2d64@environment-symbols af2d64@environment-symbols) (set! af2d66@environment (lambda af44af@imp* (let ((af44b1@itc (af2d14@make-collector))) (let ((af44b7@af44b4 af2d1a@imp-collector) (af44b8@af44b6 af44b1@itc)) (let ((af44bb@swap (lambda () (let ((af44bd@t (af44b7@af44b4))) (begin (af44b7@af44b4 af44b8@af44b6) (set! af44b8@af44b6 af44bd@t)))))) (dynamic-wind af44bb@swap (lambda () (call-with-values (lambda () (af2d10@parse-import-spec* af44af@imp*)) (lambda (af44c3@af44c0 af44c4@af44c2) (let ((af44c7@subst-labels af44c4@af44c2) (af44c8@subst-names af44c3@af44c0)) (make-simple-struct 'env '4 (list af44c8@subst-names af44c7@subst-labels af44b1@itc)))))) af44bb@swap)))))) (set! af47d2@af2d66@environment af2d66@environment) (set! af2d68@null-environment (lambda (af44cb@n) (begin (if (not (eqv? af44cb@n '5)) (assertion-violation 'null-environment '"not 5" af44cb@n) (void)) (af2d66@environment '(psyntax null-environment-5))))) (set! af47d3@af2d68@null-environment af2d68@null-environment) (set! af2d6a@scheme-report-environment (lambda (af44cd@n) (begin (if (not (eqv? af44cd@n '5)) (assertion-violation 'scheme-report-environment '"not 5" af44cd@n) (void)) (af2d66@environment '(psyntax scheme-report-environment-5))))) (set! af47d4@af2d6a@scheme-report-environment af2d6a@scheme-report-environment) (set! af2d6c@expand (lambda (af44cf@x af44d0@env) (if (af2d32@env? af44d0@env) (let ((af44d3@rib (af2d12@make-top-rib (af2d34@env-names af44d0@env) (af2d38@env-labels af44d0@env)))) (let ((af44d5@x (make-simple-struct 'stx '5 (list af44cf@x af2a2b@top-mark* (list af44d3@rib) '()))) (af44d6@itc (af2d3c@env-itc af44d0@env)) (af44d7@rtc (af2d14@make-collector)) (af44d8@vtc (af2d14@make-collector))) (let ((af44dd@x (let ((af44ef@af44e0 af2d9e@top-level-context) (af44f0@af44e2 af2d16@inv-collector) (af44f1@af44e4 af2d18@vis-collector) (af44f2@af44e6 af2d1a@imp-collector) (af44f3@af44e8 '#f) (af44f4@af44ea af44d7@rtc) (af44f5@af44ec af44d8@vtc) (af44f6@af44ee af44d6@itc)) (let ((af44ff@swap (lambda () (begin (let ((af4501@t (af44ef@af44e0))) (begin (af44ef@af44e0 af44f3@af44e8) (set! af44f3@af44e8 af4501@t))) (let ((af4503@t (af44f0@af44e2))) (begin (af44f0@af44e2 af44f4@af44ea) (set! af44f4@af44ea af4503@t))) (let ((af4505@t (af44f1@af44e4))) (begin (af44f1@af44e4 af44f5@af44ec) (set! af44f5@af44ec af4505@t))) (let ((af4507@t (af44f2@af44e6))) (begin (af44f2@af44e6 af44f6@af44ee) (set! af44f6@af44ee af4507@t))))))) (dynamic-wind af44ff@swap (lambda () (af2cd0@chi-expr af44d5@x '() '())) af44ff@swap))))) (begin (af2a63@seal-rib! af44d3@rib) (values af44dd@x (af44d7@rtc)))))) (if (af2d4c@interaction-env? af44d0@env) (let ((af4509@rib (af2d4e@interaction-env-rib af44d0@env)) (af450a@r (af2d52@interaction-env-r af44d0@env)) (af450b@rtc (af2d14@make-collector))) (let ((af450f@x (make-simple-struct 'stx '5 (list af44cf@x af2a2b@top-mark* (list af4509@rib) '())))) (call-with-values (lambda () (let ((af4525@af4516 af2d9e@top-level-context) (af4526@af4518 af2d16@inv-collector) (af4527@af451a af2d18@vis-collector) (af4528@af451c af2d1a@imp-collector) (af4529@af451e af44d0@env) (af452a@af4520 af450b@rtc) (af452b@af4522 (af2d14@make-collector)) (af452c@af4524 (af2d14@make-collector))) (let ((af4535@swap (lambda () (begin (let ((af4537@t (af4525@af4516))) (begin (af4525@af4516 af4529@af451e) (set! af4529@af451e af4537@t))) (let ((af4539@t (af4526@af4518))) (begin (af4526@af4518 af452a@af4520) (set! af452a@af4520 af4539@t))) (let ((af453b@t (af4527@af451a))) (begin (af4527@af451a af452b@af4522) (set! af452b@af4522 af453b@t))) (let ((af453d@t (af4528@af451c))) (begin (af4528@af451c af452c@af4524) (set! af452c@af4524 af453d@t))))))) (dynamic-wind af4535@swap (lambda () (af2d1e@chi-interaction-expr af450f@x af4509@rib af450a@r)) af4535@swap)))) (lambda (af453f@af4512 af4540@af4514) (let ((af4543@r^ af4540@af4514) (af4544@e af453f@af4512)) (begin (af2d54@set-interaction-env-r! af44d0@env af4543@r^) (values af4544@e (af450b@rtc)))))))) (assertion-violation 'expand '"not an environment" af44d0@env))))) (set! af47d5@af2d6c@expand af2d6c@expand) (set! af2d6e@eval (lambda (af4547@x af4548@env) (begin (if (not (af2d62@environment? af4548@env)) (error 'eval '"not an environment" af4548@env) (void)) (call-with-values (lambda () (af2d6c@expand af4547@x af4548@env)) (lambda (af454f@af454c af4550@af454e) (let ((af4553@invoke-req* af4550@af454e) (af4554@x af454f@af454c)) (begin (for-each af28bd@af270b@invoke-library af4553@invoke-req*) (eval-core (af2647@af25ff@expanded->core af4554@x))))))))) (set! af47d6@af2d6e@eval af2d6e@eval) (set! af2d70@library-expander (lambda af45c5 (let ((af45c6 (length af45c5))) (if (= af45c6 '3) (apply (lambda (af4557@x af4558@filename af4559@verify-name) (let ((af455e@build-visit-code '#f) (af4560@visit! '#f)) (begin (set! af455e@build-visit-code (lambda (af45b3@macro*) (if (null? af45b3@macro*) (af2a0d@af2968@build-void) (af2a0c@af2966@build-sequence '#f (map (lambda (af45b5@x) (let ((af45b7@loc (car af45b5@x)) (af45b8@src (cddr af45b5@x))) (list 'set! af45b7@loc af45b8@src))) af45b3@macro*))))) (set! af4560@visit! (lambda (af45ab@macro*) (for-each (lambda (af45ad@x) (let ((af45af@loc (car af45ad@x)) (af45b0@proc (cadr af45ad@x))) (set-symbol-value! af45af@loc af45b0@proc))) af45ab@macro*))) (call-with-values (lambda () (af2d22@core-library-expander af4557@x af4559@verify-name)) (lambda (af4573@af4562 af4574@af4564 af4575@af4566 af4576@af4568 af4577@af456a af4578@af456c af4579@af456e af457a@af4570 af457b@af4572) (let ((af4585@export-env af457b@af4572) (af4586@export-subst af457a@af4570) (af4587@macro* af4579@af456e) (af4588@invoke-code af4578@af456c) (af4589@vis* af4577@af456a) (af458a@inv* af4576@af4568) (af458b@imp* af4575@af4566) (af458c@ver af4574@af4564) (af458d@name af4573@af4562)) (let ((af4597@id (gensym)) (af4598@name af458d@name) (af4599@ver af458c@ver) (af459a@imp* (map af28c1@af2713@library-spec af458b@imp*)) (af459b@vis* (map af28c1@af2713@library-spec af4589@vis*)) (af459c@inv* (map af28c1@af2713@library-spec af458a@inv*)) (af459d@visit-proc (lambda () (af4560@visit! af4587@macro*))) (af459e@invoke-proc (lambda () (eval-core (af2647@af25ff@expanded->core af4588@invoke-code)))) (af459f@visit-code (af455e@build-visit-code af4587@macro*)) (af45a0@invoke-code af4588@invoke-code)) (begin (af28bb@af2707@install-library af4597@id af4598@name af4599@ver af459a@imp* af459b@vis* af459c@inv* af4586@export-subst af4585@export-env af459d@visit-proc af459e@invoke-proc af459f@visit-code af45a0@invoke-code '#t af4558@filename) (values af4597@id af4598@name af4599@ver af459a@imp* af459b@vis* af459c@inv* af45a0@invoke-code af459f@visit-code af4586@export-subst af4585@export-env))))))))) af45c5) (if (= af45c6 '2) (apply (lambda (af45bb@x af45bc@filename) (af2d70@library-expander af45bb@x af45bc@filename (lambda (af45bf@x) (values)))) af45c5) (if (= af45c6 '1) (apply (lambda (af45c1@x) (af2d70@library-expander af45c1@x '#f (lambda (af45c3@x) (values)))) af45c5) (error 'apply '"invalid arg count"))))))) (set! af47d7@af2d70@library-expander af2d70@library-expander) (set! af2d72@boot-library-expand (lambda (af45c7@x) (call-with-values (lambda () (af2d70@library-expander af45c7@x)) (lambda (af45dd@af45ca af45de@af45cc af45df@af45ce af45e0@af45d0 af45e1@af45d2 af45e2@af45d4 af45e3@af45d6 af45e4@af45d8 af45e5@af45da af45e6@af45dc) (let ((af45f1@export-env af45e6@af45dc) (af45f2@export-subst af45e5@af45da) (af45f3@visit-code af45e4@af45d8) (af45f4@invoke-code af45e3@af45d6) (af45f5@inv* af45e2@af45d4) (af45f6@vis* af45e1@af45d2) (af45f7@imp* af45e0@af45d0) (af45f8@ver af45df@af45ce) (af45f9@name af45de@af45cc) (af45fa@id af45dd@af45ca)) (values af45f9@name af45f4@invoke-code af45f2@export-subst af45f1@export-env)))))) (set! af47d8@af2d72@boot-library-expand af2d72@boot-library-expand) (set! af2d74@rev-map-append (lambda (af4605@f af4606@ls af4607@ac) (if (null? af4606@ls) af4607@ac (af2d74@rev-map-append af4605@f (cdr af4606@ls) (cons (af4605@f (car af4606@ls)) af4607@ac))))) (set! af47d9@af2d74@rev-map-append af2d74@rev-map-append) (set! af2d76@build-exports (lambda (af460b@lex*+loc* af460c@init*) (af2a0c@af2966@build-sequence '#f (cons (af2a0d@af2968@build-void) (af2d74@rev-map-append (lambda (af460f@x) (list 'set! (cdr af460f@x) (car af460f@x))) af460b@lex*+loc* af460c@init*))))) (set! af47da@af2d76@build-exports af2d76@build-exports) (set! af2d78@make-export-subst (lambda (af4611@name* af4612@id*) (map (lambda (af4615@name af4616@id) (let ((af4619@label (af2abd@id->label af4616@id))) (begin (if (not af4619@label) (af2d8e@syntax-violation '#f '"cannot export unbound identifier" af4616@id) (void)) (cons af4615@name af4619@label)))) af4611@name* af4612@id*))) (set! af47db@af2d78@make-export-subst af2d78@make-export-subst) (set! af2d7a@make-export-env/macros (lambda (af461b@lex* af461c@loc* af461d@r) (let ((af4622@lookup '#f)) (begin (set! af4622@lookup (lambda (af463f@x) (let af4647@f ((af4641@x af463f@x) (af4642@lex* af461b@lex*) (af4643@loc* af461c@loc*)) (if (pair? af4642@lex*) (if (eq? af4641@x (car af4642@lex*)) (car af4643@loc*) (af4647@f af4641@x (cdr af4642@lex*) (cdr af4643@loc*))) (assertion-violation 'lookup-make-export '"BUG"))))) (let af462b@f ((af4623@r af461d@r) (af4624@env '()) (af4625@global* '()) (af4626@macro* '())) (if (null? af4623@r) (values af4624@env af4625@global* af4626@macro*) (let ((af462d@x (car af4623@r))) (let ((af462f@label (car af462d@x)) (af4630@b (cdr af462d@x))) (let ((af4633@t (af2ac3@binding-type af4630@b))) (if (memv af4633@t '(lexical)) (let ((af4635@v (af2ac5@binding-value af4630@b))) (let ((af4637@loc (af4622@lookup (af2c38@lexical-var af4635@v))) (af4638@type (if (af2c3a@lexical-mutable? af4635@v) 'mutable 'global))) (af462b@f (cdr af4623@r) (cons (cons* af462f@label af4638@type af4637@loc) af4624@env) (cons (cons (af2c38@lexical-var af4635@v) af4637@loc) af4625@global*) af4626@macro*))) (if (memv af4633@t '(local-macro)) (let ((af463b@loc (gensym))) (af462b@f (cdr af4623@r) (cons (cons* af462f@label 'global-macro af463b@loc) af4624@env) af4625@global* (cons (cons af463b@loc (af2ac5@binding-value af4630@b)) af4626@macro*))) (if (memv af4633@t '(local-macro!)) (let ((af463d@loc (gensym))) (af462b@f (cdr af4623@r) (cons (cons* af462f@label 'global-macro! af463d@loc) af4624@env) af4625@global* (cons (cons af463d@loc (af2ac5@binding-value af4630@b)) af4626@macro*))) (if (memv af4633@t '($rtd $module)) (af462b@f (cdr af4623@r) (cons af462d@x af4624@env) af4625@global* af4626@macro*) (assertion-violation 'expander '"BUG: do not know how to export" (af2ac3@binding-type af4630@b) (af2ac5@binding-value af4630@b))))))))))))))) (set! af47dc@af2d7a@make-export-env/macros af2d7a@make-export-env/macros) (set! af2d7c@generate-temporaries (lambda (af4649@ls) (let ((af464b@t af4649@ls)) (let ((af464d@ls/false (af2cae@syntax-dispatch af464b@t 'each-any))) (if af464d@ls/false (apply (lambda (af464f@ls) (map (lambda (af4651@x) (make-simple-struct 'stx '5 (list (let ((af4653@x (af2d94@syntax->datum af4651@x))) (if (or (symbol? af4653@x) (string? af4653@x)) (gensym af4653@x) (gensym 't))) af2a2b@top-mark* '() '()))) af464f@ls)) af464d@ls/false) (let ((af4655@t af464b@t)) (let ((af4657@ls/false (af2cae@syntax-dispatch af4655@t '_))) (if af4657@ls/false (apply (lambda () (assertion-violation 'generate-temporaries '"not a list")) af4657@ls/false) (af2d8e@syntax-violation '#f '"invalid syntax" af4655@t))))))))) (set! af47dd@af2d7c@generate-temporaries af2d7c@generate-temporaries) (set! af2d7e@free-identifier=? (lambda (af4659@x af465a@y) (if (af2aa7@id? af4659@x) (if (af2aa7@id? af465a@y) (af2aad@free-id=? af4659@x af465a@y) (assertion-violation 'free-identifier=? '"not an identifier" af465a@y)) (assertion-violation 'free-identifier=? '"not an identifier" af4659@x)))) (set! af47de@af2d7e@free-identifier=? af2d7e@free-identifier=?) (set! af2d80@bound-identifier=? (lambda (af465d@x af465e@y) (if (af2aa7@id? af465d@x) (if (af2aa7@id? af465e@y) (af2aab@bound-id=? af465d@x af465e@y) (assertion-violation 'bound-identifier=? '"not an identifier" af465e@y)) (assertion-violation 'bound-identifier=? '"not an identifier" af465d@x)))) (set! af47df@af2d80@bound-identifier=? af2d80@bound-identifier=?) (set! af2d82@make-source-condition (lambda (af4661@x) (let ((af466b@af4666 '#f) (af466d@af4668 '#f) (af466f@af4667 '#f) (af4672@af4665 '#f) (af4674@make-source-condition '#f) (af4676@af4663 '#f) (af4678@af4664 '#f) (af467a@source-condition? '#f) (af467c@source-filename '#f) (af467e@source-character '#f)) (begin (set! af466b@af4666 (make-record-type-descriptor '&source-information af4ac1@af4808@&condition-rtd 'af4669 '#f '#f '#((immutable file-name) (immutable character)))) (set! af466d@af4668 '#f) (set! af466f@af4667 (make-record-constructor-descriptor af466b@af4666 af4ac2@af480a@&condition-rcd af466d@af4668)) (set! af4672@af4665 (record-predicate af466b@af4666)) (set! af4674@make-source-condition (record-constructor af466f@af4667)) (set! af4676@af4663 (record-accessor af466b@af4666 '0)) (set! af4678@af4664 (record-accessor af466b@af4666 '1)) (set! af467a@source-condition? (condition-predicate af466b@af4666)) (set! af467c@source-filename (condition-accessor af466b@af4666 af4676@af4663)) (set! af467e@source-character (condition-accessor af466b@af4666 af4678@af4664)) (if (pair? af4661@x) (af4674@make-source-condition (car af4661@x) (cdr af4661@x)) (condition)))))) (set! af47e0@af2d82@make-source-condition af2d82@make-source-condition) (set! af2d84@extract-position-condition (lambda (af467f@x) (af2d82@make-source-condition (af2d86@expression-position af467f@x)))) (set! af47e1@af2d84@extract-position-condition af2d84@extract-position-condition) (set! af2d86@expression-position (lambda (af4681@x) (and (af2a73@stx? af4681@x) (let ((af4683@x (af2a75@stx-expr af4681@x))) (and (af25e6@af24ba@annotation? af4683@x) (af25e7@af24bc@annotation-source af4683@x)))))) (set! af47e2@af2d86@expression-position af2d86@expression-position) (set! af2d88@assertion-error (lambda (af4685@expr af4686@pos) (raise (condition (af4af1@af48cc@make-assertion-violation) (af4b03@af48fe@make-who-condition 'assert) (af4ac7@af485f@make-message-condition '"assertion failed") (af4af9@af48e3@make-irritants-condition (list af4685@expr)) (af2d82@make-source-condition af4686@pos))))) (set! af47e3@af2d88@assertion-error af2d88@assertion-error) (set! af2d8a@syntax-error (lambda (af4689@x . af468b@args) (begin (if (not (for-all string? af468b@args)) (assertion-violation 'syntax-error '"invalid argument" af468b@args) (void)) (raise (condition (af4ac7@af485f@make-message-condition (if (null? af468b@args) '"invalid syntax" (apply string-append af468b@args))) (af4b25@af495a@make-syntax-violation (af2d94@syntax->datum af4689@x) '#f) (af2d84@extract-position-condition af4689@x)))))) (set! af47e4@af2d8a@syntax-error af2d8a@syntax-error) (set! af2d8c@syntax-violation* (lambda (af468d@who af468e@msg af468f@form af4690@condition-object) (begin (if (not (string? af468e@msg)) (assertion-violation 'syntax-violation '"message is not a string" af468e@msg) (void)) (let ((af4695@who (if (or (string? af468d@who) (symbol? af468d@who)) af468d@who (if (not af468d@who) (let ((af4697@t af468f@form)) (let ((af4699@ls/false (af2cae@syntax-dispatch af4697@t 'any))) (if (and af4699@ls/false (apply (lambda (af469b@id) (af2aa7@id? af469b@id)) af4699@ls/false)) (apply (lambda (af469d@id) (af2d94@syntax->datum af469d@id)) af4699@ls/false) (let ((af469f@t af4697@t)) (let ((af46a1@ls/false (af2cae@syntax-dispatch af469f@t '(any . any)))) (if (and af46a1@ls/false (apply (lambda (af46a3@id af46a4@rest) (af2aa7@id? af46a3@id)) af46a1@ls/false)) (apply (lambda (af46a7@id af46a8@rest) (af2d94@syntax->datum af46a7@id)) af46a1@ls/false) (let ((af46ab@t af469f@t)) (let ((af46ad@ls/false (af2cae@syntax-dispatch af46ab@t '_))) (if af46ad@ls/false (apply (lambda () '#f) af46ad@ls/false) (af2d8e@syntax-violation '#f '"invalid syntax" af46ab@t)))))))))) (assertion-violation 'syntax-violation '"invalid who argument" af468d@who))))) (raise (condition (if af4695@who (af4b03@af48fe@make-who-condition af4695@who) (condition)) (af4ac7@af485f@make-message-condition af468e@msg) af4690@condition-object (af2d84@extract-position-condition af468f@form))))))) (set! af47e5@af2d8c@syntax-violation* af2d8c@syntax-violation*) (set! af2d8e@syntax-violation (lambda af46bd (let ((af46be (length af46bd))) (if (= af46be '3) (apply (lambda (af46af@who af46b0@msg af46b1@form) (af2d8e@syntax-violation af46af@who af46b0@msg af46b1@form '#f)) af46bd) (if (= af46be '4) (apply (lambda (af46b5@who af46b6@msg af46b7@form af46b8@subform) (af2d8c@syntax-violation* af46b5@who af46b6@msg af46b7@form (af4b25@af495a@make-syntax-violation (af2d94@syntax->datum af46b7@form) (af2d94@syntax->datum af46b8@subform)))) af46bd) (error 'apply '"invalid arg count")))))) (set! af47e6@af2d8e@syntax-violation af2d8e@syntax-violation) (set! af2d90@identifier? (lambda (af46bf@x) (af2aa7@id? af46bf@x))) (set! af47e7@af2d90@identifier? af2d90@identifier?) (set! af2d92@datum->syntax (lambda (af46c1@id af46c2@datum) (if (af2aa7@id? af46c1@id) (af2a87@datum->stx af46c1@id af46c2@datum) (assertion-violation 'datum->syntax '"not an identifier" af46c1@id)))) (set! af47e8@af2d92@datum->syntax af2d92@datum->syntax) (set! af2d94@syntax->datum (lambda (af46c5@x) (af2abb@stx->datum af46c5@x))) (set! af47e9@af2d94@syntax->datum af2d94@syntax->datum) (set! af2d96@ungensym-all (lambda (af46c7@code) (if (pair? af46c7@code) (cons (af2d96@ungensym-all (car af46c7@code)) (af2d96@ungensym-all (cdr af46c7@code))) (if (symbol? af46c7@code) (ungensym af46c7@code) af46c7@code)))) (set! af47ea@af2d96@ungensym-all af2d96@ungensym-all) (set! af2d98@compile-r6rs-top-level (lambda (af46c9@x*) (call-with-values (lambda () (af2d26@top-level-expander af46c9@x*)) (lambda (af46cf@af46cc af46d0@af46ce) (let ((af46d3@invoke-code af46d0@af46ce) (af46d4@lib* af46cf@af46cc)) (lambda () (begin (for-each af28bd@af270b@invoke-library af46d4@lib*) (let ((af46d7@expanded (af2647@af25ff@expanded->core af46d3@invoke-code))) (begin (if (symbol-value 'debug-expand) (format '#t '"psyntax expanded=~a\n" (af2d96@ungensym-all af46d7@expanded)) (void)) (eval-core af46d7@expanded)))))))))) (set! af47eb@af2d98@compile-r6rs-top-level af2d98@compile-r6rs-top-level) (set! af2d9a@pre-compile-r6rs-top-level (lambda (af46d9@x*) (call-with-values (lambda () (af2d26@top-level-expander af46d9@x*)) (lambda (af46df@af46dc af46e0@af46de) (let ((af46e3@invoke-code af46e0@af46de) (af46e4@lib* af46df@af46dc)) (begin (for-each af28bd@af270b@invoke-library af46e4@lib*) (af25ef@af24cc@compile-core (af2647@af25ff@expanded->core af46e3@invoke-code)))))))) (set! af47ec@af2d9a@pre-compile-r6rs-top-level af2d9a@pre-compile-r6rs-top-level) (set! af2d9c@interaction-environment (let ((af46e7@the-env '#f)) (lambda () (or af46e7@the-env (let ((af46e9@lib (af28b6@af26fd@find-library-by-name '(mosh interaction))) (af46ea@rib (af2a5b@make-empty-rib))) (begin (let ((af46ed@subst (af2898@af26c1@library-subst af46e9@lib))) (begin (af2a47@set-rib-sym*! af46ea@rib (map car af46ed@subst)) (af2a4b@set-rib-mark**! af46ea@rib (map (lambda (af46ef@x) af2a2b@top-mark*) af46ed@subst)) (af2a4f@set-rib-label*! af46ea@rib (map cdr af46ed@subst)))) (let ((af46f1@env (make-simple-struct 'interaction-env '4 (list af46ea@rib '() '())))) (begin (set! af46e7@the-env af46f1@env) af46f1@env)))))))) (set! af47ed@af2d9c@interaction-environment af2d9c@interaction-environment) (set! af2d9e@top-level-context (af25f1@af24d0@make-parameter '#f)) (set! af47ee@af2d9e@top-level-context af2d9e@top-level-context) (af28b3@af26f7@current-library-expander af2d70@library-expander))
(begin (set! af47fd@af47f8 (unspecified)) (set! af47ff@af47fa (unspecified)) (set! af4801@af47f9 (unspecified)) (set! af4804@&condition? (unspecified)) (set! af4806@make-&condition (unspecified)) (set! af4808@&condition-rtd (unspecified)) (set! af480a@&condition-rcd (unspecified)) (set! af4856@af4851 (unspecified)) (set! af4858@af4853 (unspecified)) (set! af485a@af4852 (unspecified)) (set! af485d@p? (unspecified)) (set! af485f@make-message-condition (unspecified)) (set! af4861@af4850 (unspecified)) (set! af4863@message-condition? (unspecified)) (set! af4865@condition-message (unspecified)) (set! af4867@&message-rtd (unspecified)) (set! af4869@&message-rcd (unspecified)) (set! af486f@af486a (unspecified)) (set! af4871@af486c (unspecified)) (set! af4873@af486b (unspecified)) (set! af4876@p? (unspecified)) (set! af4878@make-warning (unspecified)) (set! af487a@warning? (unspecified)) (set! af487c@&warning-rtd (unspecified)) (set! af487e@&warning-rcd (unspecified)) (set! af4884@af487f (unspecified)) (set! af4886@af4881 (unspecified)) (set! af4888@af4880 (unspecified)) (set! af488b@p? (unspecified)) (set! af488d@make-serious-condition (unspecified)) (set! af488f@serious-condition? (unspecified)) (set! af4891@&serious-rtd (unspecified)) (set! af4893@&serious-rcd (unspecified)) (set! af4899@af4894 (unspecified)) (set! af489b@af4896 (unspecified)) (set! af489d@af4895 (unspecified)) (set! af48a0@p? (unspecified)) (set! af48a2@make-error (unspecified)) (set! af48a4@error? (unspecified)) (set! af48a6@&error-rtd (unspecified)) (set! af48a8@&error-rcd (unspecified)) (set! af48ae@af48a9 (unspecified)) (set! af48b0@af48ab (unspecified)) (set! af48b2@af48aa (unspecified)) (set! af48b5@p? (unspecified)) (set! af48b7@make-violation (unspecified)) (set! af48b9@violation? (unspecified)) (set! af48bb@&violation-rtd (unspecified)) (set! af48bd@&violation-rcd (unspecified)) (set! af48c3@af48be (unspecified)) (set! af48c5@af48c0 (unspecified)) (set! af48c7@af48bf (unspecified)) (set! af48ca@p? (unspecified)) (set! af48cc@make-assertion-violation (unspecified)) (set! af48ce@assertion-violation? (unspecified)) (set! af48d0@&assertion-rtd (unspecified)) (set! af48d2@&assertion-rcd (unspecified)) (set! af48da@af48d5 (unspecified)) (set! af48dc@af48d7 (unspecified)) (set! af48de@af48d6 (unspecified)) (set! af48e1@p? (unspecified)) (set! af48e3@make-irritants-condition (unspecified)) (set! af48e5@af48d4 (unspecified)) (set! af48e7@irritants-condition? (unspecified)) (set! af48e9@condition-irritants (unspecified)) (set! af48eb@&irritants-rtd (unspecified)) (set! af48ed@&irritants-rcd (unspecified)) (set! af48f5@af48f0 (unspecified)) (set! af48f7@af48f2 (unspecified)) (set! af48f9@af48f1 (unspecified)) (set! af48fc@p? (unspecified)) (set! af48fe@make-who-condition (unspecified)) (set! af4900@af48ef (unspecified)) (set! af4902@who-condition? (unspecified)) (set! af4904@condition-who (unspecified)) (set! af4906@&who-rtd (unspecified)) (set! af4908@&who-rcd (unspecified)) (set! af490e@af4909 (unspecified)) (set! af4910@af490b (unspecified)) (set! af4912@af490a (unspecified)) (set! af4915@p? (unspecified)) (set! af4917@make-non-continuable-violation (unspecified)) (set! af4919@non-continuable-violation? (unspecified)) (set! af491b@&non-continuable-rtd (unspecified)) (set! af491d@&non-continuable-rcd (unspecified)) (set! af4923@af491e (unspecified)) (set! af4925@af4920 (unspecified)) (set! af4927@af491f (unspecified)) (set! af492a@p? (unspecified)) (set! af492c@make-implementation-restriction-violation (unspecified)) (set! af492e@implementation-restriction-violation? (unspecified)) (set! af4930@&implementation-restriction-rtd (unspecified)) (set! af4932@&implementation-restriction-rcd (unspecified)) (set! af4938@af4933 (unspecified)) (set! af493a@af4935 (unspecified)) (set! af493c@af4934 (unspecified)) (set! af493f@p? (unspecified)) (set! af4941@make-lexical-violation (unspecified)) (set! af4943@lexical-violation? (unspecified)) (set! af4945@&lexical-rtd (unspecified)) (set! af4947@&lexical-rcd (unspecified)) (set! af4951@af494c (unspecified)) (set! af4953@af494e (unspecified)) (set! af4955@af494d (unspecified)) (set! af4958@p? (unspecified)) (set! af495a@make-syntax-violation (unspecified)) (set! af495c@af4949 (unspecified)) (set! af495e@af494b (unspecified)) (set! af4960@syntax-violation? (unspecified)) (set! af4962@syntax-violation-form (unspecified)) (set! af4964@syntax-violation-subform (unspecified)) (set! af4966@&syntax-rtd (unspecified)) (set! af4968@&syntax-rcd (unspecified)) (set! af496e@af4969 (unspecified)) (set! af4970@af496b (unspecified)) (set! af4972@af496a (unspecified)) (set! af4975@p? (unspecified)) (set! af4977@make-undefined-violation (unspecified)) (set! af4979@undefined-violation? (unspecified)) (set! af497b@&undefined-rtd (unspecified)) (set! af497d@&undefined-rcd (unspecified)) (set! af4983@af497e (unspecified)) (set! af4985@af4980 (unspecified)) (set! af4987@af497f (unspecified)) (set! af498a@p? (unspecified)) (set! af498c@make-i/o-error (unspecified)) (set! af498e@i/o-error? (unspecified)) (set! af4990@&i/o-rtd (unspecified)) (set! af4992@&i/o-rcd (unspecified)) (set! af4998@af4993 (unspecified)) (set! af499a@af4995 (unspecified)) (set! af499c@af4994 (unspecified)) (set! af499f@p? (unspecified)) (set! af49a1@make-i/o-read-error (unspecified)) (set! af49a3@i/o-read-error? (unspecified)) (set! af49a5@&i/o-read-rtd (unspecified)) (set! af49a7@&i/o-read-rcd (unspecified)) (set! af49ad@af49a8 (unspecified)) (set! af49af@af49aa (unspecified)) (set! af49b1@af49a9 (unspecified)) (set! af49b4@p? (unspecified)) (set! af49b6@make-i/o-write-error (unspecified)) (set! af49b8@i/o-write-error? (unspecified)) (set! af49ba@&i/o-write-rtd (unspecified)) (set! af49bc@&i/o-write-rcd (unspecified)) (set! af49c4@af49bf (unspecified)) (set! af49c6@af49c1 (unspecified)) (set! af49c8@af49c0 (unspecified)) (set! af49cb@p? (unspecified)) (set! af49cd@make-i/o-invalid-position-error (unspecified)) (set! af49cf@af49be (unspecified)) (set! af49d1@i/o-invalid-position-error? (unspecified)) (set! af49d3@i/o-error-position (unspecified)) (set! af49d5@&i/o-invalid-position-rtd (unspecified)) (set! af49d7@&i/o-invalid-position-rcd (unspecified)) (set! af49df@af49da (unspecified)) (set! af49e1@af49dc (unspecified)) (set! af49e3@af49db (unspecified)) (set! af49e6@p? (unspecified)) (set! af49e8@make-i/o-filename-error (unspecified)) (set! af49ea@af49d9 (unspecified)) (set! af49ec@i/o-filename-error? (unspecified)) (set! af49ee@i/o-error-filename (unspecified)) (set! af49f0@&i/o-filename-rtd (unspecified)) (set! af49f2@&i/o-filename-rcd (unspecified)) (set! af49f8@af49f3 (unspecified)) (set! af49fa@af49f5 (unspecified)) (set! af49fc@af49f4 (unspecified)) (set! af49ff@p? (unspecified)) (set! af4a01@make-i/o-file-protection-error (unspecified)) (set! af4a03@i/o-file-protection-error? (unspecified)) (set! af4a05@&i/o-file-protection-rtd (unspecified)) (set! af4a07@&i/o-file-protection-rcd (unspecified)) (set! af4a0d@af4a08 (unspecified)) (set! af4a0f@af4a0a (unspecified)) (set! af4a11@af4a09 (unspecified)) (set! af4a14@p? (unspecified)) (set! af4a16@make-i/o-file-is-read-only-error (unspecified)) (set! af4a18@i/o-file-is-read-only-error? (unspecified)) (set! af4a1a@&i/o-file-is-read-only-rtd (unspecified)) (set! af4a1c@&i/o-file-is-read-only-rcd (unspecified)) (set! af4a22@af4a1d (unspecified)) (set! af4a24@af4a1f (unspecified)) (set! af4a26@af4a1e (unspecified)) (set! af4a29@p? (unspecified)) (set! af4a2b@make-i/o-file-already-exists-error (unspecified)) (set! af4a2d@i/o-file-already-exists-error? (unspecified)) (set! af4a2f@&i/o-file-already-exists-rtd (unspecified)) (set! af4a31@&i/o-file-already-exists-rcd (unspecified)) (set! af4a37@af4a32 (unspecified)) (set! af4a39@af4a34 (unspecified)) (set! af4a3b@af4a33 (unspecified)) (set! af4a3e@p? (unspecified)) (set! af4a40@make-i/o-file-does-not-exist-error (unspecified)) (set! af4a42@i/o-file-does-not-exist-error? (unspecified)) (set! af4a44@&i/o-file-does-not-exist-rtd (unspecified)) (set! af4a46@&i/o-file-does-not-exist-rcd (unspecified)) (set! af4a4e@af4a49 (unspecified)) (set! af4a50@af4a4b (unspecified)) (set! af4a52@af4a4a (unspecified)) (set! af4a55@p? (unspecified)) (set! af4a57@make-i/o-port-error (unspecified)) (set! af4a59@af4a48 (unspecified)) (set! af4a5b@i/o-port-error? (unspecified)) (set! af4a5d@i/o-error-port (unspecified)) (set! af4a5f@&i/o-port-rtd (unspecified)) (set! af4a61@&i/o-port-rcd (unspecified)) (set! af4a67@af4a62 (unspecified)) (set! af4a69@af4a64 (unspecified)) (set! af4a6b@af4a63 (unspecified)) (set! af4a6e@p? (unspecified)) (set! af4a70@make-i/o-decoding-error (unspecified)) (set! af4a72@i/o-decoding-error? (unspecified)) (set! af4a74@&i/o-decoding-rtd (unspecified)) (set! af4a76@&i/o-decoding-rcd (unspecified)) (set! af4a7e@af4a79 (unspecified)) (set! af4a80@af4a7b (unspecified)) (set! af4a82@af4a7a (unspecified)) (set! af4a85@p? (unspecified)) (set! af4a87@make-i/o-encoding-error (unspecified)) (set! af4a89@af4a78 (unspecified)) (set! af4a8b@i/o-encoding-error? (unspecified)) (set! af4a8d@i/o-encoding-error-char (unspecified)) (set! af4a8f@&i/o-encoding-rtd (unspecified)) (set! af4a91@&i/o-encoding-rcd (unspecified)) (set! af4a97@af4a92 (unspecified)) (set! af4a99@af4a94 (unspecified)) (set! af4a9b@af4a93 (unspecified)) (set! af4a9e@p? (unspecified)) (set! af4aa0@make-no-infinities-violation (unspecified)) (set! af4aa2@no-infinities-violation? (unspecified)) (set! af4aa4@&no-infinities-rtd (unspecified)) (set! af4aa6@&no-infinities-rcd (unspecified)) (set! af4aac@af4aa7 (unspecified)) (set! af4aae@af4aa9 (unspecified)) (set! af4ab0@af4aa8 (unspecified)) (set! af4ab3@p? (unspecified)) (set! af4ab5@make-no-nans-violation (unspecified)) (set! af4ab7@no-nans-violation? (unspecified)) (set! af4ab9@&no-nans-rtd (unspecified)) (set! af4abb@&no-nans-rcd (unspecified)) (set! af47fd@af47f8 (make-record-type-descriptor '&condition '#f 'af47fb '#f '#f '#())) (set! af4abc@af47fd@af47f8 af47fd@af47f8) (set! af47ff@af47fa '#f) (set! af4abd@af47ff@af47fa af47ff@af47fa) (set! af4801@af47f9 (make-record-constructor-descriptor af47fd@af47f8 '#f af47ff@af47fa)) (set! af4abe@af4801@af47f9 af4801@af47f9) (set! af4804@&condition? (record-predicate af47fd@af47f8)) (set! af4abf@af4804@&condition? af4804@&condition?) (set! af4806@make-&condition (record-constructor af4801@af47f9)) (set! af4ac0@af4806@make-&condition af4806@make-&condition) (set! af4808@&condition-rtd af47fd@af47f8) (set! af4ac1@af4808@&condition-rtd af4808@&condition-rtd) (set! af480a@&condition-rcd af4801@af47f9) (set! af4ac2@af480a@&condition-rcd af480a@&condition-rcd) (set! af4856@af4851 (make-record-type-descriptor '&message af47fd@af47f8 'af4854 '#f '#f '#((immutable message)))) (set! af4ac3@af4856@af4851 af4856@af4851) (set! af4858@af4853 '#f) (set! af4ac4@af4858@af4853 af4858@af4853) (set! af485a@af4852 (make-record-constructor-descriptor af4856@af4851 af4801@af47f9 af4858@af4853)) (set! af4ac5@af485a@af4852 af485a@af4852) (set! af485d@p? (record-predicate af4856@af4851)) (set! af4ac6@af485d@p? af485d@p?) (set! af485f@make-message-condition (record-constructor af485a@af4852)) (set! af4ac7@af485f@make-message-condition af485f@make-message-condition) (set! af4861@af4850 (record-accessor af4856@af4851 '0)) (set! af4ac8@af4861@af4850 af4861@af4850) (set! af4863@message-condition? (condition-predicate af4856@af4851)) (set! af4ac9@af4863@message-condition? af4863@message-condition?) (set! af4865@condition-message (condition-accessor af4856@af4851 af4861@af4850)) (set! af4aca@af4865@condition-message af4865@condition-message) (set! af4867@&message-rtd af4856@af4851) (set! af4acb@af4867@&message-rtd af4867@&message-rtd) (set! af4869@&message-rcd af485a@af4852) (set! af4acc@af4869@&message-rcd af4869@&message-rcd) (set! af486f@af486a (make-record-type-descriptor '&warning af47fd@af47f8 'af486d '#f '#f '#())) (set! af4acd@af486f@af486a af486f@af486a) (set! af4871@af486c '#f) (set! af4ace@af4871@af486c af4871@af486c) (set! af4873@af486b (make-record-constructor-descriptor af486f@af486a af4801@af47f9 af4871@af486c)) (set! af4acf@af4873@af486b af4873@af486b) (set! af4876@p? (record-predicate af486f@af486a)) (set! af4ad0@af4876@p? af4876@p?) (set! af4878@make-warning (record-constructor af4873@af486b)) (set! af4ad1@af4878@make-warning af4878@make-warning) (set! af487a@warning? (condition-predicate af486f@af486a)) (set! af4ad2@af487a@warning? af487a@warning?) (set! af487c@&warning-rtd af486f@af486a) (set! af4ad3@af487c@&warning-rtd af487c@&warning-rtd) (set! af487e@&warning-rcd af4873@af486b) (set! af4ad4@af487e@&warning-rcd af487e@&warning-rcd) (set! af4884@af487f (make-record-type-descriptor '&serious af47fd@af47f8 'af4882 '#f '#f '#())) (set! af4ad5@af4884@af487f af4884@af487f) (set! af4886@af4881 '#f) (set! af4ad6@af4886@af4881 af4886@af4881) (set! af4888@af4880 (make-record-constructor-descriptor af4884@af487f af4801@af47f9 af4886@af4881)) (set! af4ad7@af4888@af4880 af4888@af4880) (set! af488b@p? (record-predicate af4884@af487f)) (set! af4ad8@af488b@p? af488b@p?) (set! af488d@make-serious-condition (record-constructor af4888@af4880)) (set! af4ad9@af488d@make-serious-condition af488d@make-serious-condition) (set! af488f@serious-condition? (condition-predicate af4884@af487f)) (set! af4ada@af488f@serious-condition? af488f@serious-condition?) (set! af4891@&serious-rtd af4884@af487f) (set! af4adb@af4891@&serious-rtd af4891@&serious-rtd) (set! af4893@&serious-rcd af4888@af4880) (set! af4adc@af4893@&serious-rcd af4893@&serious-rcd) (set! af4899@af4894 (make-record-type-descriptor '&error af4884@af487f 'af4897 '#f '#f '#())) (set! af4add@af4899@af4894 af4899@af4894) (set! af489b@af4896 '#f) (set! af4ade@af489b@af4896 af489b@af4896) (set! af489d@af4895 (make-record-constructor-descriptor af4899@af4894 af4888@af4880 af489b@af4896)) (set! af4adf@af489d@af4895 af489d@af4895) (set! af48a0@p? (record-predicate af4899@af4894)) (set! af4ae0@af48a0@p? af48a0@p?) (set! af48a2@make-error (record-constructor af489d@af4895)) (set! af4ae1@af48a2@make-error af48a2@make-error) (set! af48a4@error? (condition-predicate af4899@af4894)) (set! af4ae2@af48a4@error? af48a4@error?) (set! af48a6@&error-rtd af4899@af4894) (set! af4ae3@af48a6@&error-rtd af48a6@&error-rtd) (set! af48a8@&error-rcd af489d@af4895) (set! af4ae4@af48a8@&error-rcd af48a8@&error-rcd) (set! af48ae@af48a9 (make-record-type-descriptor '&violation af4884@af487f 'af48ac '#f '#f '#())) (set! af4ae5@af48ae@af48a9 af48ae@af48a9) (set! af48b0@af48ab '#f) (set! af4ae6@af48b0@af48ab af48b0@af48ab) (set! af48b2@af48aa (make-record-constructor-descriptor af48ae@af48a9 af4888@af4880 af48b0@af48ab)) (set! af4ae7@af48b2@af48aa af48b2@af48aa) (set! af48b5@p? (record-predicate af48ae@af48a9)) (set! af4ae8@af48b5@p? af48b5@p?) (set! af48b7@make-violation (record-constructor af48b2@af48aa)) (set! af4ae9@af48b7@make-violation af48b7@make-violation) (set! af48b9@violation? (condition-predicate af48ae@af48a9)) (set! af4aea@af48b9@violation? af48b9@violation?) (set! af48bb@&violation-rtd af48ae@af48a9) (set! af4aeb@af48bb@&violation-rtd af48bb@&violation-rtd) (set! af48bd@&violation-rcd af48b2@af48aa) (set! af4aec@af48bd@&violation-rcd af48bd@&violation-rcd) (set! af48c3@af48be (make-record-type-descriptor '&assertion af48ae@af48a9 'af48c1 '#f '#f '#())) (set! af4aed@af48c3@af48be af48c3@af48be) (set! af48c5@af48c0 '#f) (set! af4aee@af48c5@af48c0 af48c5@af48c0) (set! af48c7@af48bf (make-record-constructor-descriptor af48c3@af48be af48b2@af48aa af48c5@af48c0)) (set! af4aef@af48c7@af48bf af48c7@af48bf) (set! af48ca@p? (record-predicate af48c3@af48be)) (set! af4af0@af48ca@p? af48ca@p?) (set! af48cc@make-assertion-violation (record-constructor af48c7@af48bf)) (set! af4af1@af48cc@make-assertion-violation af48cc@make-assertion-violation) (set! af48ce@assertion-violation? (condition-predicate af48c3@af48be)) (set! af4af2@af48ce@assertion-violation? af48ce@assertion-violation?) (set! af48d0@&assertion-rtd af48c3@af48be) (set! af4af3@af48d0@&assertion-rtd af48d0@&assertion-rtd) (set! af48d2@&assertion-rcd af48c7@af48bf) (set! af4af4@af48d2@&assertion-rcd af48d2@&assertion-rcd) (set! af48da@af48d5 (make-record-type-descriptor '&irritants af47fd@af47f8 'af48d8 '#f '#f '#((immutable irritants)))) (set! af4af5@af48da@af48d5 af48da@af48d5) (set! af48dc@af48d7 '#f) (set! af4af6@af48dc@af48d7 af48dc@af48d7) (set! af48de@af48d6 (make-record-constructor-descriptor af48da@af48d5 af4801@af47f9 af48dc@af48d7)) (set! af4af7@af48de@af48d6 af48de@af48d6) (set! af48e1@p? (record-predicate af48da@af48d5)) (set! af4af8@af48e1@p? af48e1@p?) (set! af48e3@make-irritants-condition (record-constructor af48de@af48d6)) (set! af4af9@af48e3@make-irritants-condition af48e3@make-irritants-condition) (set! af48e5@af48d4 (record-accessor af48da@af48d5 '0)) (set! af4afa@af48e5@af48d4 af48e5@af48d4) (set! af48e7@irritants-condition? (condition-predicate af48da@af48d5)) (set! af4afb@af48e7@irritants-condition? af48e7@irritants-condition?) (set! af48e9@condition-irritants (condition-accessor af48da@af48d5 af48e5@af48d4)) (set! af4afc@af48e9@condition-irritants af48e9@condition-irritants) (set! af48eb@&irritants-rtd af48da@af48d5) (set! af4afd@af48eb@&irritants-rtd af48eb@&irritants-rtd) (set! af48ed@&irritants-rcd af48de@af48d6) (set! af4afe@af48ed@&irritants-rcd af48ed@&irritants-rcd) (set! af48f5@af48f0 (make-record-type-descriptor '&who af47fd@af47f8 'af48f3 '#f '#f '#((immutable who)))) (set! af4aff@af48f5@af48f0 af48f5@af48f0) (set! af48f7@af48f2 '#f) (set! af4b00@af48f7@af48f2 af48f7@af48f2) (set! af48f9@af48f1 (make-record-constructor-descriptor af48f5@af48f0 af4801@af47f9 af48f7@af48f2)) (set! af4b01@af48f9@af48f1 af48f9@af48f1) (set! af48fc@p? (record-predicate af48f5@af48f0)) (set! af4b02@af48fc@p? af48fc@p?) (set! af48fe@make-who-condition (record-constructor af48f9@af48f1)) (set! af4b03@af48fe@make-who-condition af48fe@make-who-condition) (set! af4900@af48ef (record-accessor af48f5@af48f0 '0)) (set! af4b04@af4900@af48ef af4900@af48ef) (set! af4902@who-condition? (condition-predicate af48f5@af48f0)) (set! af4b05@af4902@who-condition? af4902@who-condition?) (set! af4904@condition-who (condition-accessor af48f5@af48f0 af4900@af48ef)) (set! af4b06@af4904@condition-who af4904@condition-who) (set! af4906@&who-rtd af48f5@af48f0) (set! af4b07@af4906@&who-rtd af4906@&who-rtd) (set! af4908@&who-rcd af48f9@af48f1) (set! af4b08@af4908@&who-rcd af4908@&who-rcd) (set! af490e@af4909 (make-record-type-descriptor '&non-continuable af48ae@af48a9 'af490c '#f '#f '#())) (set! af4b09@af490e@af4909 af490e@af4909) (set! af4910@af490b '#f) (set! af4b0a@af4910@af490b af4910@af490b) (set! af4912@af490a (make-record-constructor-descriptor af490e@af4909 af48b2@af48aa af4910@af490b)) (set! af4b0b@af4912@af490a af4912@af490a) (set! af4915@p? (record-predicate af490e@af4909)) (set! af4b0c@af4915@p? af4915@p?) (set! af4917@make-non-continuable-violation (record-constructor af4912@af490a)) (set! af4b0d@af4917@make-non-continuable-violation af4917@make-non-continuable-violation) (set! af4919@non-continuable-violation? (condition-predicate af490e@af4909)) (set! af4b0e@af4919@non-continuable-violation? af4919@non-continuable-violation?) (set! af491b@&non-continuable-rtd af490e@af4909) (set! af4b0f@af491b@&non-continuable-rtd af491b@&non-continuable-rtd) (set! af491d@&non-continuable-rcd af4912@af490a) (set! af4b10@af491d@&non-continuable-rcd af491d@&non-continuable-rcd) (set! af4923@af491e (make-record-type-descriptor '&implementation-restriction af48ae@af48a9 'af4921 '#f '#f '#())) (set! af4b11@af4923@af491e af4923@af491e) (set! af4925@af4920 '#f) (set! af4b12@af4925@af4920 af4925@af4920) (set! af4927@af491f (make-record-constructor-descriptor af4923@af491e af48b2@af48aa af4925@af4920)) (set! af4b13@af4927@af491f af4927@af491f) (set! af492a@p? (record-predicate af4923@af491e)) (set! af4b14@af492a@p? af492a@p?) (set! af492c@make-implementation-restriction-violation (record-constructor af4927@af491f)) (set! af4b15@af492c@make-implementation-restriction-violation af492c@make-implementation-restriction-violation) (set! af492e@implementation-restriction-violation? (condition-predicate af4923@af491e)) (set! af4b16@af492e@implementation-restriction-violation? af492e@implementation-restriction-violation?) (set! af4930@&implementation-restriction-rtd af4923@af491e) (set! af4b17@af4930@&implementation-restriction-rtd af4930@&implementation-restriction-rtd) (set! af4932@&implementation-restriction-rcd af4927@af491f) (set! af4b18@af4932@&implementation-restriction-rcd af4932@&implementation-restriction-rcd) (set! af4938@af4933 (make-record-type-descriptor '&lexical af48ae@af48a9 'af4936 '#f '#f '#())) (set! af4b19@af4938@af4933 af4938@af4933) (set! af493a@af4935 '#f) (set! af4b1a@af493a@af4935 af493a@af4935) (set! af493c@af4934 (make-record-constructor-descriptor af4938@af4933 af48b2@af48aa af493a@af4935)) (set! af4b1b@af493c@af4934 af493c@af4934) (set! af493f@p? (record-predicate af4938@af4933)) (set! af4b1c@af493f@p? af493f@p?) (set! af4941@make-lexical-violation (record-constructor af493c@af4934)) (set! af4b1d@af4941@make-lexical-violation af4941@make-lexical-violation) (set! af4943@lexical-violation? (condition-predicate af4938@af4933)) (set! af4b1e@af4943@lexical-violation? af4943@lexical-violation?) (set! af4945@&lexical-rtd af4938@af4933) (set! af4b1f@af4945@&lexical-rtd af4945@&lexical-rtd) (set! af4947@&lexical-rcd af493c@af4934) (set! af4b20@af4947@&lexical-rcd af4947@&lexical-rcd) (set! af4951@af494c (make-record-type-descriptor '&syntax af48ae@af48a9 'af494f '#f '#f '#((immutable form) (immutable subform)))) (set! af4b21@af4951@af494c af4951@af494c) (set! af4953@af494e '#f) (set! af4b22@af4953@af494e af4953@af494e) (set! af4955@af494d (make-record-constructor-descriptor af4951@af494c af48b2@af48aa af4953@af494e)) (set! af4b23@af4955@af494d af4955@af494d) (set! af4958@p? (record-predicate af4951@af494c)) (set! af4b24@af4958@p? af4958@p?) (set! af495a@make-syntax-violation (record-constructor af4955@af494d)) (set! af4b25@af495a@make-syntax-violation af495a@make-syntax-violation) (set! af495c@af4949 (record-accessor af4951@af494c '0)) (set! af4b26@af495c@af4949 af495c@af4949) (set! af495e@af494b (record-accessor af4951@af494c '1)) (set! af4b27@af495e@af494b af495e@af494b) (set! af4960@syntax-violation? (condition-predicate af4951@af494c)) (set! af4b28@af4960@syntax-violation? af4960@syntax-violation?) (set! af4962@syntax-violation-form (condition-accessor af4951@af494c af495c@af4949)) (set! af4b29@af4962@syntax-violation-form af4962@syntax-violation-form) (set! af4964@syntax-violation-subform (condition-accessor af4951@af494c af495e@af494b)) (set! af4b2a@af4964@syntax-violation-subform af4964@syntax-violation-subform) (set! af4966@&syntax-rtd af4951@af494c) (set! af4b2b@af4966@&syntax-rtd af4966@&syntax-rtd) (set! af4968@&syntax-rcd af4955@af494d) (set! af4b2c@af4968@&syntax-rcd af4968@&syntax-rcd) (set! af496e@af4969 (make-record-type-descriptor '&undefined af48ae@af48a9 'af496c '#f '#f '#())) (set! af4b2d@af496e@af4969 af496e@af4969) (set! af4970@af496b '#f) (set! af4b2e@af4970@af496b af4970@af496b) (set! af4972@af496a (make-record-constructor-descriptor af496e@af4969 af48b2@af48aa af4970@af496b)) (set! af4b2f@af4972@af496a af4972@af496a) (set! af4975@p? (record-predicate af496e@af4969)) (set! af4b30@af4975@p? af4975@p?) (set! af4977@make-undefined-violation (record-constructor af4972@af496a)) (set! af4b31@af4977@make-undefined-violation af4977@make-undefined-violation) (set! af4979@undefined-violation? (condition-predicate af496e@af4969)) (set! af4b32@af4979@undefined-violation? af4979@undefined-violation?) (set! af497b@&undefined-rtd af496e@af4969) (set! af4b33@af497b@&undefined-rtd af497b@&undefined-rtd) (set! af497d@&undefined-rcd af4972@af496a) (set! af4b34@af497d@&undefined-rcd af497d@&undefined-rcd) (set! af4983@af497e (make-record-type-descriptor '&i/o af4899@af4894 'af4981 '#f '#f '#())) (set! af4b35@af4983@af497e af4983@af497e) (set! af4985@af4980 '#f) (set! af4b36@af4985@af4980 af4985@af4980) (set! af4987@af497f (make-record-constructor-descriptor af4983@af497e af489d@af4895 af4985@af4980)) (set! af4b37@af4987@af497f af4987@af497f) (set! af498a@p? (record-predicate af4983@af497e)) (set! af4b38@af498a@p? af498a@p?) (set! af498c@make-i/o-error (record-constructor af4987@af497f)) (set! af4b39@af498c@make-i/o-error af498c@make-i/o-error) (set! af498e@i/o-error? (condition-predicate af4983@af497e)) (set! af4b3a@af498e@i/o-error? af498e@i/o-error?) (set! af4990@&i/o-rtd af4983@af497e) (set! af4b3b@af4990@&i/o-rtd af4990@&i/o-rtd) (set! af4992@&i/o-rcd af4987@af497f) (set! af4b3c@af4992@&i/o-rcd af4992@&i/o-rcd) (set! af4998@af4993 (make-record-type-descriptor '&i/o-read af4983@af497e 'af4996 '#f '#f '#())) (set! af4b3d@af4998@af4993 af4998@af4993) (set! af499a@af4995 '#f) (set! af4b3e@af499a@af4995 af499a@af4995) (set! af499c@af4994 (make-record-constructor-descriptor af4998@af4993 af4987@af497f af499a@af4995)) (set! af4b3f@af499c@af4994 af499c@af4994) (set! af499f@p? (record-predicate af4998@af4993)) (set! af4b40@af499f@p? af499f@p?) (set! af49a1@make-i/o-read-error (record-constructor af499c@af4994)) (set! af4b41@af49a1@make-i/o-read-error af49a1@make-i/o-read-error) (set! af49a3@i/o-read-error? (condition-predicate af4998@af4993)) (set! af4b42@af49a3@i/o-read-error? af49a3@i/o-read-error?) (set! af49a5@&i/o-read-rtd af4998@af4993) (set! af4b43@af49a5@&i/o-read-rtd af49a5@&i/o-read-rtd) (set! af49a7@&i/o-read-rcd af499c@af4994) (set! af4b44@af49a7@&i/o-read-rcd af49a7@&i/o-read-rcd) (set! af49ad@af49a8 (make-record-type-descriptor '&i/o-write af4983@af497e 'af49ab '#f '#f '#())) (set! af4b45@af49ad@af49a8 af49ad@af49a8) (set! af49af@af49aa '#f) (set! af4b46@af49af@af49aa af49af@af49aa) (set! af49b1@af49a9 (make-record-constructor-descriptor af49ad@af49a8 af4987@af497f af49af@af49aa)) (set! af4b47@af49b1@af49a9 af49b1@af49a9) (set! af49b4@p? (record-predicate af49ad@af49a8)) (set! af4b48@af49b4@p? af49b4@p?) (set! af49b6@make-i/o-write-error (record-constructor af49b1@af49a9)) (set! af4b49@af49b6@make-i/o-write-error af49b6@make-i/o-write-error) (set! af49b8@i/o-write-error? (condition-predicate af49ad@af49a8)) (set! af4b4a@af49b8@i/o-write-error? af49b8@i/o-write-error?) (set! af49ba@&i/o-write-rtd af49ad@af49a8) (set! af4b4b@af49ba@&i/o-write-rtd af49ba@&i/o-write-rtd) (set! af49bc@&i/o-write-rcd af49b1@af49a9) (set! af4b4c@af49bc@&i/o-write-rcd af49bc@&i/o-write-rcd) (set! af49c4@af49bf (make-record-type-descriptor '&i/o-invalid-position af4983@af497e 'af49c2 '#f '#f '#((immutable position)))) (set! af4b4d@af49c4@af49bf af49c4@af49bf) (set! af49c6@af49c1 '#f) (set! af4b4e@af49c6@af49c1 af49c6@af49c1) (set! af49c8@af49c0 (make-record-constructor-descriptor af49c4@af49bf af4987@af497f af49c6@af49c1)) (set! af4b4f@af49c8@af49c0 af49c8@af49c0) (set! af49cb@p? (record-predicate af49c4@af49bf)) (set! af4b50@af49cb@p? af49cb@p?) (set! af49cd@make-i/o-invalid-position-error (record-constructor af49c8@af49c0)) (set! af4b51@af49cd@make-i/o-invalid-position-error af49cd@make-i/o-invalid-position-error) (set! af49cf@af49be (record-accessor af49c4@af49bf '0)) (set! af4b52@af49cf@af49be af49cf@af49be) (set! af49d1@i/o-invalid-position-error? (condition-predicate af49c4@af49bf)) (set! af4b53@af49d1@i/o-invalid-position-error? af49d1@i/o-invalid-position-error?) (set! af49d3@i/o-error-position (condition-accessor af49c4@af49bf af49cf@af49be)) (set! af4b54@af49d3@i/o-error-position af49d3@i/o-error-position) (set! af49d5@&i/o-invalid-position-rtd af49c4@af49bf) (set! af4b55@af49d5@&i/o-invalid-position-rtd af49d5@&i/o-invalid-position-rtd) (set! af49d7@&i/o-invalid-position-rcd af49c8@af49c0) (set! af4b56@af49d7@&i/o-invalid-position-rcd af49d7@&i/o-invalid-position-rcd) (set! af49df@af49da (make-record-type-descriptor '&i/o-filename af4983@af497e 'af49dd '#f '#f '#((immutable filename)))) (set! af4b57@af49df@af49da af49df@af49da) (set! af49e1@af49dc '#f) (set! af4b58@af49e1@af49dc af49e1@af49dc) (set! af49e3@af49db (make-record-constructor-descriptor af49df@af49da af4987@af497f af49e1@af49dc)) (set! af4b59@af49e3@af49db af49e3@af49db) (set! af49e6@p? (record-predicate af49df@af49da)) (set! af4b5a@af49e6@p? af49e6@p?) (set! af49e8@make-i/o-filename-error (record-constructor af49e3@af49db)) (set! af4b5b@af49e8@make-i/o-filename-error af49e8@make-i/o-filename-error) (set! af49ea@af49d9 (record-accessor af49df@af49da '0)) (set! af4b5c@af49ea@af49d9 af49ea@af49d9) (set! af49ec@i/o-filename-error? (condition-predicate af49df@af49da)) (set! af4b5d@af49ec@i/o-filename-error? af49ec@i/o-filename-error?) (set! af49ee@i/o-error-filename (condition-accessor af49df@af49da af49ea@af49d9)) (set! af4b5e@af49ee@i/o-error-filename af49ee@i/o-error-filename) (set! af49f0@&i/o-filename-rtd af49df@af49da) (set! af4b5f@af49f0@&i/o-filename-rtd af49f0@&i/o-filename-rtd) (set! af49f2@&i/o-filename-rcd af49e3@af49db) (set! af4b60@af49f2@&i/o-filename-rcd af49f2@&i/o-filename-rcd) (set! af49f8@af49f3 (make-record-type-descriptor '&i/o-file-protection af49df@af49da 'af49f6 '#f '#f '#())) (set! af4b61@af49f8@af49f3 af49f8@af49f3) (set! af49fa@af49f5 '#f) (set! af4b62@af49fa@af49f5 af49fa@af49f5) (set! af49fc@af49f4 (make-record-constructor-descriptor af49f8@af49f3 af49e3@af49db af49fa@af49f5)) (set! af4b63@af49fc@af49f4 af49fc@af49f4) (set! af49ff@p? (record-predicate af49f8@af49f3)) (set! af4b64@af49ff@p? af49ff@p?) (set! af4a01@make-i/o-file-protection-error (record-constructor af49fc@af49f4)) (set! af4b65@af4a01@make-i/o-file-protection-error af4a01@make-i/o-file-protection-error) (set! af4a03@i/o-file-protection-error? (condition-predicate af49f8@af49f3)) (set! af4b66@af4a03@i/o-file-protection-error? af4a03@i/o-file-protection-error?) (set! af4a05@&i/o-file-protection-rtd af49f8@af49f3) (set! af4b67@af4a05@&i/o-file-protection-rtd af4a05@&i/o-file-protection-rtd) (set! af4a07@&i/o-file-protection-rcd af49fc@af49f4) (set! af4b68@af4a07@&i/o-file-protection-rcd af4a07@&i/o-file-protection-rcd) (set! af4a0d@af4a08 (make-record-type-descriptor '&i/o-file-is-read-only af49f8@af49f3 'af4a0b '#f '#f '#())) (set! af4b69@af4a0d@af4a08 af4a0d@af4a08) (set! af4a0f@af4a0a '#f) (set! af4b6a@af4a0f@af4a0a af4a0f@af4a0a) (set! af4a11@af4a09 (make-record-constructor-descriptor af4a0d@af4a08 af49fc@af49f4 af4a0f@af4a0a)) (set! af4b6b@af4a11@af4a09 af4a11@af4a09) (set! af4a14@p? (record-predicate af4a0d@af4a08)) (set! af4b6c@af4a14@p? af4a14@p?) (set! af4a16@make-i/o-file-is-read-only-error (record-constructor af4a11@af4a09)) (set! af4b6d@af4a16@make-i/o-file-is-read-only-error af4a16@make-i/o-file-is-read-only-error) (set! af4a18@i/o-file-is-read-only-error? (condition-predicate af4a0d@af4a08)) (set! af4b6e@af4a18@i/o-file-is-read-only-error? af4a18@i/o-file-is-read-only-error?) (set! af4a1a@&i/o-file-is-read-only-rtd af4a0d@af4a08) (set! af4b6f@af4a1a@&i/o-file-is-read-only-rtd af4a1a@&i/o-file-is-read-only-rtd) (set! af4a1c@&i/o-file-is-read-only-rcd af4a11@af4a09) (set! af4b70@af4a1c@&i/o-file-is-read-only-rcd af4a1c@&i/o-file-is-read-only-rcd) (set! af4a22@af4a1d (make-record-type-descriptor '&i/o-file-already-exists af49df@af49da 'af4a20 '#f '#f '#())) (set! af4b71@af4a22@af4a1d af4a22@af4a1d) (set! af4a24@af4a1f '#f) (set! af4b72@af4a24@af4a1f af4a24@af4a1f) (set! af4a26@af4a1e (make-record-constructor-descriptor af4a22@af4a1d af49e3@af49db af4a24@af4a1f)) (set! af4b73@af4a26@af4a1e af4a26@af4a1e) (set! af4a29@p? (record-predicate af4a22@af4a1d)) (set! af4b74@af4a29@p? af4a29@p?) (set! af4a2b@make-i/o-file-already-exists-error (record-constructor af4a26@af4a1e)) (set! af4b75@af4a2b@make-i/o-file-already-exists-error af4a2b@make-i/o-file-already-exists-error) (set! af4a2d@i/o-file-already-exists-error? (condition-predicate af4a22@af4a1d)) (set! af4b76@af4a2d@i/o-file-already-exists-error? af4a2d@i/o-file-already-exists-error?) (set! af4a2f@&i/o-file-already-exists-rtd af4a22@af4a1d) (set! af4b77@af4a2f@&i/o-file-already-exists-rtd af4a2f@&i/o-file-already-exists-rtd) (set! af4a31@&i/o-file-already-exists-rcd af4a26@af4a1e) (set! af4b78@af4a31@&i/o-file-already-exists-rcd af4a31@&i/o-file-already-exists-rcd) (set! af4a37@af4a32 (make-record-type-descriptor '&i/o-file-does-not-exist af49df@af49da 'af4a35 '#f '#f '#())) (set! af4b79@af4a37@af4a32 af4a37@af4a32) (set! af4a39@af4a34 '#f) (set! af4b7a@af4a39@af4a34 af4a39@af4a34) (set! af4a3b@af4a33 (make-record-constructor-descriptor af4a37@af4a32 af49e3@af49db af4a39@af4a34)) (set! af4b7b@af4a3b@af4a33 af4a3b@af4a33) (set! af4a3e@p? (record-predicate af4a37@af4a32)) (set! af4b7c@af4a3e@p? af4a3e@p?) (set! af4a40@make-i/o-file-does-not-exist-error (record-constructor af4a3b@af4a33)) (set! af4b7d@af4a40@make-i/o-file-does-not-exist-error af4a40@make-i/o-file-does-not-exist-error) (set! af4a42@i/o-file-does-not-exist-error? (condition-predicate af4a37@af4a32)) (set! af4b7e@af4a42@i/o-file-does-not-exist-error? af4a42@i/o-file-does-not-exist-error?) (set! af4a44@&i/o-file-does-not-exist-rtd af4a37@af4a32) (set! af4b7f@af4a44@&i/o-file-does-not-exist-rtd af4a44@&i/o-file-does-not-exist-rtd) (set! af4a46@&i/o-file-does-not-exist-rcd af4a3b@af4a33) (set! af4b80@af4a46@&i/o-file-does-not-exist-rcd af4a46@&i/o-file-does-not-exist-rcd) (set! af4a4e@af4a49 (make-record-type-descriptor '&i/o-port af4983@af497e 'af4a4c '#f '#f '#((immutable port)))) (set! af4b81@af4a4e@af4a49 af4a4e@af4a49) (set! af4a50@af4a4b '#f) (set! af4b82@af4a50@af4a4b af4a50@af4a4b) (set! af4a52@af4a4a (make-record-constructor-descriptor af4a4e@af4a49 af4987@af497f af4a50@af4a4b)) (set! af4b83@af4a52@af4a4a af4a52@af4a4a) (set! af4a55@p? (record-predicate af4a4e@af4a49)) (set! af4b84@af4a55@p? af4a55@p?) (set! af4a57@make-i/o-port-error (record-constructor af4a52@af4a4a)) (set! af4b85@af4a57@make-i/o-port-error af4a57@make-i/o-port-error) (set! af4a59@af4a48 (record-accessor af4a4e@af4a49 '0)) (set! af4b86@af4a59@af4a48 af4a59@af4a48) (set! af4a5b@i/o-port-error? (condition-predicate af4a4e@af4a49)) (set! af4b87@af4a5b@i/o-port-error? af4a5b@i/o-port-error?) (set! af4a5d@i/o-error-port (condition-accessor af4a4e@af4a49 af4a59@af4a48)) (set! af4b88@af4a5d@i/o-error-port af4a5d@i/o-error-port) (set! af4a5f@&i/o-port-rtd af4a4e@af4a49) (set! af4b89@af4a5f@&i/o-port-rtd af4a5f@&i/o-port-rtd) (set! af4a61@&i/o-port-rcd af4a52@af4a4a) (set! af4b8a@af4a61@&i/o-port-rcd af4a61@&i/o-port-rcd) (set! af4a67@af4a62 (make-record-type-descriptor '&i/o-decoding af4a4e@af4a49 'af4a65 '#f '#f '#())) (set! af4b8b@af4a67@af4a62 af4a67@af4a62) (set! af4a69@af4a64 '#f) (set! af4b8c@af4a69@af4a64 af4a69@af4a64) (set! af4a6b@af4a63 (make-record-constructor-descriptor af4a67@af4a62 af4a52@af4a4a af4a69@af4a64)) (set! af4b8d@af4a6b@af4a63 af4a6b@af4a63) (set! af4a6e@p? (record-predicate af4a67@af4a62)) (set! af4b8e@af4a6e@p? af4a6e@p?) (set! af4a70@make-i/o-decoding-error (record-constructor af4a6b@af4a63)) (set! af4b8f@af4a70@make-i/o-decoding-error af4a70@make-i/o-decoding-error) (set! af4a72@i/o-decoding-error? (condition-predicate af4a67@af4a62)) (set! af4b90@af4a72@i/o-decoding-error? af4a72@i/o-decoding-error?) (set! af4a74@&i/o-decoding-rtd af4a67@af4a62) (set! af4b91@af4a74@&i/o-decoding-rtd af4a74@&i/o-decoding-rtd) (set! af4a76@&i/o-decoding-rcd af4a6b@af4a63) (set! af4b92@af4a76@&i/o-decoding-rcd af4a76@&i/o-decoding-rcd) (set! af4a7e@af4a79 (make-record-type-descriptor '&i/o-encoding af4a4e@af4a49 'af4a7c '#f '#f '#((immutable char)))) (set! af4b93@af4a7e@af4a79 af4a7e@af4a79) (set! af4a80@af4a7b '#f) (set! af4b94@af4a80@af4a7b af4a80@af4a7b) (set! af4a82@af4a7a (make-record-constructor-descriptor af4a7e@af4a79 af4a52@af4a4a af4a80@af4a7b)) (set! af4b95@af4a82@af4a7a af4a82@af4a7a) (set! af4a85@p? (record-predicate af4a7e@af4a79)) (set! af4b96@af4a85@p? af4a85@p?) (set! af4a87@make-i/o-encoding-error (record-constructor af4a82@af4a7a)) (set! af4b97@af4a87@make-i/o-encoding-error af4a87@make-i/o-encoding-error) (set! af4a89@af4a78 (record-accessor af4a7e@af4a79 '0)) (set! af4b98@af4a89@af4a78 af4a89@af4a78) (set! af4a8b@i/o-encoding-error? (condition-predicate af4a7e@af4a79)) (set! af4b99@af4a8b@i/o-encoding-error? af4a8b@i/o-encoding-error?) (set! af4a8d@i/o-encoding-error-char (condition-accessor af4a7e@af4a79 af4a89@af4a78)) (set! af4b9a@af4a8d@i/o-encoding-error-char af4a8d@i/o-encoding-error-char) (set! af4a8f@&i/o-encoding-rtd af4a7e@af4a79) (set! af4b9b@af4a8f@&i/o-encoding-rtd af4a8f@&i/o-encoding-rtd) (set! af4a91@&i/o-encoding-rcd af4a82@af4a7a) (set! af4b9c@af4a91@&i/o-encoding-rcd af4a91@&i/o-encoding-rcd) (set! af4a97@af4a92 (make-record-type-descriptor '&no-infinities af4923@af491e 'af4a95 '#f '#f '#())) (set! af4b9d@af4a97@af4a92 af4a97@af4a92) (set! af4a99@af4a94 '#f) (set! af4b9e@af4a99@af4a94 af4a99@af4a94) (set! af4a9b@af4a93 (make-record-constructor-descriptor af4a97@af4a92 af4927@af491f af4a99@af4a94)) (set! af4b9f@af4a9b@af4a93 af4a9b@af4a93) (set! af4a9e@p? (record-predicate af4a97@af4a92)) (set! af4ba0@af4a9e@p? af4a9e@p?) (set! af4aa0@make-no-infinities-violation (record-constructor af4a9b@af4a93)) (set! af4ba1@af4aa0@make-no-infinities-violation af4aa0@make-no-infinities-violation) (set! af4aa2@no-infinities-violation? (condition-predicate af4a97@af4a92)) (set! af4ba2@af4aa2@no-infinities-violation? af4aa2@no-infinities-violation?) (set! af4aa4@&no-infinities-rtd af4a97@af4a92) (set! af4ba3@af4aa4@&no-infinities-rtd af4aa4@&no-infinities-rtd) (set! af4aa6@&no-infinities-rcd af4a9b@af4a93) (set! af4ba4@af4aa6@&no-infinities-rcd af4aa6@&no-infinities-rcd) (set! af4aac@af4aa7 (make-record-type-descriptor '&no-nans af4923@af491e 'af4aaa '#f '#f '#())) (set! af4ba5@af4aac@af4aa7 af4aac@af4aa7) (set! af4aae@af4aa9 '#f) (set! af4ba6@af4aae@af4aa9 af4aae@af4aa9) (set! af4ab0@af4aa8 (make-record-constructor-descriptor af4aac@af4aa7 af4927@af491f af4aae@af4aa9)) (set! af4ba7@af4ab0@af4aa8 af4ab0@af4aa8) (set! af4ab3@p? (record-predicate af4aac@af4aa7)) (set! af4ba8@af4ab3@p? af4ab3@p?) (set! af4ab5@make-no-nans-violation (record-constructor af4ab0@af4aa8)) (set! af4ba9@af4ab5@make-no-nans-violation af4ab5@make-no-nans-violation) (set! af4ab7@no-nans-violation? (condition-predicate af4aac@af4aa7)) (set! af4baa@af4ab7@no-nans-violation? af4ab7@no-nans-violation?) (set! af4ab9@&no-nans-rtd af4aac@af4aa7) (set! af4bab@af4ab9@&no-nans-rtd af4ab9@&no-nans-rtd) (set! af4abb@&no-nans-rcd af4ab0@af4aa8) (set! af4bac@af4abb@&no-nans-rcd af4abb@&no-nans-rcd) (void))
(begin (begin (af2644@af25f9@current-primitive-locations (lambda (af5078@x) (let ((af507a@t (assq af5078@x '((&no-nans-rcd . af4bac@af4abb@&no-nans-rcd) (&no-nans-rtd . af4bab@af4ab9@&no-nans-rtd) (&no-infinities-rcd . af4ba4@af4aa6@&no-infinities-rcd) (&no-infinities-rtd . af4ba3@af4aa4@&no-infinities-rtd) (&i/o-encoding-rcd . af4b9c@af4a91@&i/o-encoding-rcd) (&i/o-encoding-rtd . af4b9b@af4a8f@&i/o-encoding-rtd) (&i/o-decoding-rcd . af4b92@af4a76@&i/o-decoding-rcd) (&i/o-decoding-rtd . af4b91@af4a74@&i/o-decoding-rtd) (&i/o-port-rcd . af4b8a@af4a61@&i/o-port-rcd) (&i/o-port-rtd . af4b89@af4a5f@&i/o-port-rtd) (&i/o-file-does-not-exist-rcd . af4b80@af4a46@&i/o-file-does-not-exist-rcd) (&i/o-file-does-not-exist-rtd . af4b7f@af4a44@&i/o-file-does-not-exist-rtd) (&i/o-file-already-exists-rcd . af4b78@af4a31@&i/o-file-already-exists-rcd) (&i/o-file-already-exists-rtd . af4b77@af4a2f@&i/o-file-already-exists-rtd) (&i/o-file-is-read-only-rcd . af4b70@af4a1c@&i/o-file-is-read-only-rcd) (&i/o-file-is-read-only-rtd . af4b6f@af4a1a@&i/o-file-is-read-only-rtd) (&i/o-file-protection-rcd . af4b68@af4a07@&i/o-file-protection-rcd) (&i/o-file-protection-rtd . af4b67@af4a05@&i/o-file-protection-rtd) (&i/o-filename-rcd . af4b60@af49f2@&i/o-filename-rcd) (&i/o-filename-rtd . af4b5f@af49f0@&i/o-filename-rtd) (&i/o-invalid-position-rcd . af4b56@af49d7@&i/o-invalid-position-rcd) (&i/o-invalid-position-rtd . af4b55@af49d5@&i/o-invalid-position-rtd) (&i/o-write-rcd . af4b4c@af49bc@&i/o-write-rcd) (&i/o-write-rtd . af4b4b@af49ba@&i/o-write-rtd) (&i/o-read-rcd . af4b44@af49a7@&i/o-read-rcd) (&i/o-read-rtd . af4b43@af49a5@&i/o-read-rtd) (&i/o-rcd . af4b3c@af4992@&i/o-rcd) (&i/o-rtd . af4b3b@af4990@&i/o-rtd) (&undefined-rcd . af4b34@af497d@&undefined-rcd) (&undefined-rtd . af4b33@af497b@&undefined-rtd) (&syntax-rcd . af4b2c@af4968@&syntax-rcd) (&syntax-rtd . af4b2b@af4966@&syntax-rtd) (&lexical-rcd . af4b20@af4947@&lexical-rcd) (&lexical-rtd . af4b1f@af4945@&lexical-rtd) (&implementation-restriction-rcd . af4b18@af4932@&implementation-restriction-rcd) (&implementation-restriction-rtd . af4b17@af4930@&implementation-restriction-rtd) (&non-continuable-rcd . af4b10@af491d@&non-continuable-rcd) (&non-continuable-rtd . af4b0f@af491b@&non-continuable-rtd) (&who-rcd . af4b08@af4908@&who-rcd) (&who-rtd . af4b07@af4906@&who-rtd) (&irritants-rcd . af4afe@af48ed@&irritants-rcd) (&irritants-rtd . af4afd@af48eb@&irritants-rtd) (&assertion-rcd . af4af4@af48d2@&assertion-rcd) (&assertion-rtd . af4af3@af48d0@&assertion-rtd) (&violation-rcd . af4aec@af48bd@&violation-rcd) (&violation-rtd . af4aeb@af48bb@&violation-rtd) (&error-rcd . af4ae4@af48a8@&error-rcd) (&error-rtd . af4ae3@af48a6@&error-rtd) (&serious-rcd . af4adc@af4893@&serious-rcd) (&serious-rtd . af4adb@af4891@&serious-rtd) (&warning-rcd . af4ad4@af487e@&warning-rcd) (&warning-rtd . af4ad3@af487c@&warning-rtd) (&message-rcd . af4acc@af4869@&message-rcd) (&message-rtd . af4acb@af4867@&message-rtd) (&condition-rcd . af4ac2@af480a@&condition-rcd) (&condition-rtd . af4ac1@af4808@&condition-rtd) (syntax-error . af47e4@af2d8a@syntax-error) (syntax-dispatch . af4782@af2cae@syntax-dispatch) (load . af4d21@af4bcc@load) (interaction-environment . af47ed@af2d9c@interaction-environment) (library-path . af28ab@af26e7@library-path) (mosh-cache-dir . af25f2@af24d2@mosh-cache-dir) (make-parameter . af25f1@af24d0@make-parameter) (make-variable-transformer . af473f@af2ad9@make-variable-transformer) (identifier? . af47e7@af2d90@identifier?) (generate-temporaries . af47dd@af2d7c@generate-temporaries) (free-identifier=? . af47de@af2d7e@free-identifier=?) (syntax->datum . af47e9@af2d94@syntax->datum) (datum->syntax . af47e8@af2d92@datum->syntax) (bound-identifier=? . af47df@af2d80@bound-identifier=?) (make-i/o-write-error . af4b49@af49b6@make-i/o-write-error) (make-i/o-read-error . af4b41@af49a1@make-i/o-read-error) (make-i/o-port-error . af4b85@af4a57@make-i/o-port-error) (make-i/o-invalid-position-error . af4b51@af49cd@make-i/o-invalid-position-error) (make-i/o-filename-error . af4b5b@af49e8@make-i/o-filename-error) (make-i/o-file-protection-error . af4b65@af4a01@make-i/o-file-protection-error) (make-i/o-file-is-read-only-error . af4b6d@af4a16@make-i/o-file-is-read-only-error) (make-i/o-file-does-not-exist-error . af4b7d@af4a40@make-i/o-file-does-not-exist-error) (make-i/o-file-already-exists-error . af4b75@af4a2b@make-i/o-file-already-exists-error) (make-i/o-error . af4b39@af498c@make-i/o-error) (make-i/o-encoding-error . af4b97@af4a87@make-i/o-encoding-error) (make-i/o-decoding-error . af4b8f@af4a70@make-i/o-decoding-error) (i/o-write-error? . af4b4a@af49b8@i/o-write-error?) (i/o-read-error? . af4b42@af49a3@i/o-read-error?) (i/o-port-error? . af4b87@af4a5b@i/o-port-error?) (i/o-invalid-position-error? . af4b53@af49d1@i/o-invalid-position-error?) (i/o-filename-error? . af4b5d@af49ec@i/o-filename-error?) (i/o-file-protection-error? . af4b66@af4a03@i/o-file-protection-error?) (i/o-file-is-read-only-error? . af4b6e@af4a18@i/o-file-is-read-only-error?) (i/o-file-does-not-exist-error? . af4b7e@af4a42@i/o-file-does-not-exist-error?) (i/o-file-already-exists-error? . af4b76@af4a2d@i/o-file-already-exists-error?) (i/o-error? . af4b3a@af498e@i/o-error?) (i/o-error-position . af4b54@af49d3@i/o-error-position) (i/o-error-port . af4b88@af4a5d@i/o-error-port) (i/o-error-filename . af4b5e@af49ee@i/o-error-filename) (i/o-encoding-error? . af4b99@af4a8b@i/o-encoding-error?) (i/o-encoding-error-char . af4b9a@af4a8d@i/o-encoding-error-char) (i/o-decoding-error? . af4b90@af4a72@i/o-decoding-error?) (scheme-report-environment . af47d4@af2d6a@scheme-report-environment) (null-environment . af47d3@af2d68@null-environment) (command-line . af4d1e@af4bc6@command-line) (eval . af47d6@af2d6e@eval) (environment . af47d2@af2d66@environment) (who-condition? . af4b05@af4902@who-condition?) (warning? . af4ad2@af487a@warning?) (violation? . af4aea@af48b9@violation?) (undefined-violation? . af4b32@af4979@undefined-violation?) (syntax-violation? . af4b28@af4960@syntax-violation?) (syntax-violation-subform . af4b2a@af4964@syntax-violation-subform) (syntax-violation-form . af4b29@af4962@syntax-violation-form) (syntax-violation . af47e6@af2d8e@syntax-violation) (serious-condition? . af4ada@af488f@serious-condition?) (non-continuable-violation? . af4b0e@af4919@non-continuable-violation?) (message-condition? . af4ac9@af4863@message-condition?) (make-who-condition . af4b03@af48fe@make-who-condition) (make-warning . af4ad1@af4878@make-warning) (make-violation . af4ae9@af48b7@make-violation) (make-undefined-violation . af4b31@af4977@make-undefined-violation) (make-syntax-violation . af4b25@af495a@make-syntax-violation) (make-serious-condition . af4ad9@af488d@make-serious-condition) (make-non-continuable-violation . af4b0d@af4917@make-non-continuable-violation) (make-message-condition . af4ac7@af485f@make-message-condition) (make-lexical-violation . af4b1d@af4941@make-lexical-violation) (make-irritants-condition . af4af9@af48e3@make-irritants-condition) (make-implementation-restriction-violation . af4b15@af492c@make-implementation-restriction-violation) (make-error . af4ae1@af48a2@make-error) (make-assertion-violation . af4af1@af48cc@make-assertion-violation) (lexical-violation? . af4b1e@af4943@lexical-violation?) (irritants-condition? . af4afb@af48e7@irritants-condition?) (implementation-restriction-violation? . af4b16@af492e@implementation-restriction-violation?) (error? . af4ae2@af48a4@error?) (condition-who . af4b06@af4904@condition-who) (condition-message . af4aca@af4865@condition-message) (condition-irritants . af4afc@af48e9@condition-irritants) (assertion-violation? . af4af2@af48ce@assertion-violation?) (no-nans-violation? . af4baa@af4ab7@no-nans-violation?) (no-infinities-violation? . af4ba2@af4aa2@no-infinities-violation?) (make-no-nans-violation . af4ba9@af4ab5@make-no-nans-violation) (make-no-infinities-violation . af4ba1@af4aa0@make-no-infinities-violation) (assertion-error . af47e3@af2d88@assertion-error))))) (if af507a@t (cdr af507a@t) '#f)))) (af28bb@af2707@install-library 'af5055 '(mosh interaction) '() '() '() '() '((regexp? . af504d) (alist->eq-hash-table . af5049) (format . af5046) (string-split . af503b) (call-process . af5035) (set-current-directory! . af5031) (expand-path . af5030) (current-directory . af502f) (%spawn . af502e) (%waitpid . af502d) (simple-struct-name . af502c) (simple-struct-set! . af502b) (simple-struct-ref . af502a) (make-simple-struct . af5029) (simple-struct? . af5028) (pointer-ref-c-int64 . af5027) (pointer-ref-c-int32 . af5026) (pointer-ref-c-int16 . af5025) (pointer-ref-c-int8 . af5024) (pointer-ref-c-uint64 . af5023) (pointer-ref-c-uint32 . af5022) (pointer-ref-c-uint16 . af5021) (pointer-ref-c-uint8 . af5020) (pointer-set-c-uint64! . af501f) (pointer-set-c-uint32! . af501e) (pointer-set-c-uint16! . af501d) (pointer-set-c-uint8! . af501c) (pointer-set-c-int64! . af501b) (pointer-set-c-int32! . af501a) (pointer-set-c-int16! . af5019) (pointer-set-c-int8! . af5018) (pointer-set-c-pointer! . af5017) (pointer-set-c-double! . af5016) (pointer-set-c-float! . af5015) (pointer-set-c-long-long! . af5014) (pointer-set-c-long! . af5013) (pointer-set-c-int! . af5012) (pointer-set-c-short! . af5011) (pointer-set-c-char! . af5010) (pointer-ref-c-pointer . af500f) (pointer-ref-c-double . af500e) (pointer-ref-c-float . af500d) (pointer-ref-c-unsigned-long-long . af500c) (pointer-ref-c-signed-long-long . af500b) (pointer-ref-c-unsigned-long . af500a) (pointer-ref-c-signed-long . af5009) (pointer-ref-c-unsigned-int . af5008) (pointer-ref-c-signed-int . af5007) (pointer-ref-c-unsigned-short . af5006) (pointer-ref-c-signed-short . af5005) (pointer-ref-c-unsigned-char . af5004) (pointer-ref-c-signed-char . af5003) (pointer->integer . af5002) (integer->pointer . af5001) (pointer? . af5000) (shared-errno . af4fff) (%ffi-supported? . af4ffc) (%ffi-pointer->string . af4ffb) (%ffi-call->string-or-zero . af4ffa) (%ffi-call->double . af4ff9) (%ffi-call->void* . af4ff8) (%ffi-call->void . af4ff7) (%ffi-call->char . af4ff6) (%ffi-call->int . af4ff5) (%ffi-lookup . af4ff4) (%ffi-open . af4ff3) (%fork . af4ff2) (%pipe . af4ff1) (p . af4ff0) (whereis . af4fd4) (register . af4fd3) (vm-join! . af4fd2) (vm-set-value! . af4fd1) (vm? . af4fd0) (main-vm? . af4fcf) (vm-eval . af4fce) (vm-self . af4fcd) (vm-start! . af4fcc) (make-vm . af4fcb) (mutex-try-lock! . af4fca) (mutex-unlock! . af4fc9) (mutex-lock! . af4fc8) (mutex? . af4fc7) (make-mutex . af4fc6) (condition-variable-notify-all! . af4fc5) (condition-variable-notify! . af4fc4) (condition-variable-wait! . af4fc3) (make-condition-variable . af4fc2) (string-upcase . af4faa) (string-titlecase . af4fa9) (string-normalize-nfkd . af4fa8) (string-normalize-nfkc . af4fa7) (string-normalize-nfd . af4fa6) (string-normalize-nfc . af4fa5) (string-foldcase . af4fa4) (string-downcase . af4fa3) (string-ci>? . af4fa2) (string-ci>=? . af4fa1) (string-ci=? . af4fa0) (string-ci<? . af4f9f) (string-ci<=? . af4f9e) (char-whitespace? . af4f9d) (char-upper-case? . af4f9c) (char-title-case? . af4f9b) (char-numeric? . af4f9a) (char-lower-case? . af4f99) (char-general-category . af4f98) (char-upcase . af4f97) (char-titlecase . af4f96) (char-foldcase . af4f95) (char-downcase . af4f94) (char-ci>? . af4f93) (char-ci>=? . af4f92) (char-ci=? . af4f91) (char-ci<? . af4f90) (char-ci<=? . af4f8f) (char-alphabetic? . af4f8e) (make-variable-transformer . af2ad8) (identifier? . af2d8f) (generate-temporaries . af2d7b) (free-identifier=? . af2d7d) (syntax->datum . af2d93) (datum->syntax . af2d91) (bound-identifier=? . af2d7f) (record-type-descriptor? . af4f8d) (record-predicate . af4f8c) (record-mutator . af4f8b) (record-constructor . af4f8a) (record-accessor . af4f89) (make-record-type-descriptor . af4f88) (make-record-constructor-descriptor . af4f87) (record? . af4f86) (record-type-uid . af4f85) (record-type-sealed? . af4f84) (record-type-parent . af4f83) (record-type-opaque? . af4f82) (record-type-name . af4f81) (record-type-generative? . af4f80) (record-type-field-names . af4f7f) (record-rtd . af4f7e) (record-field-mutable? . af4f7d) (delete-file . af4f7c) (file-exists? . af4f7b) (vector-sort! . af4f7a) (vector-sort . af4f79) (list-sort . af4f78) (symbol-hash . af4f77) (string-ci-hash . af4f76) (string-hash . af4f75) (equal-hash . af4f74) (hashtable-equivalence-function . af4f73) (make-hashtable . af4f72) (hashtable-hash-function . af4f71) (make-eqv-hashtable . af4f70) (make-eq-hashtable . af4f6f) (hashtable? . af4f6e) (hashtable-update! . af4f6d) (hashtable-size . af4f6c) (hashtable-set! . af4f6b) (hashtable-ref . af4f6a) (hashtable-mutable? . af4f69) (hashtable-keys . af4f68) (hashtable-entries . af4f67) (hashtable-delete! . af4f66) (hashtable-copy . af4f65) (hashtable-contains? . af4f64) (hashtable-clear! . af4f63) (call-with-output-file . af4f62) (call-with-input-file . af4f61) (write-char . af4f60) (write . af4f5f) (with-output-to-file . af4f5e) (with-input-from-file . af4f5d) (read-char . af4f5c) (read . af4f5b) (peek-char . af4f5a) (open-output-file . af4f59) (open-input-file . af4f58) (newline . af4f57) (display . af4f56) (close-output-port . af4f55) (close-input-port . af4f54) (eof-object? . af4f53) (eof-object . af4f52) (current-error-port . af4f51) (current-output-port . af4f50) (current-input-port . af4f4f) (output-port? . af4f4e) (input-port? . af4f4d) (utf-8-codec . af4f4c) (utf-16-codec . af4f4b) (transcoder-error-handling-mode . af4f4a) (transcoder-eol-style . af4f49) (transcoder-codec . af4f48) (transcoded-port . af4f47) (textual-port? . af4f46) (string->bytevector . af4f45) (standard-output-port . af4f44) (standard-input-port . af4f43) (standard-error-port . af4f42) (set-port-position! . af4f41) (put-u8 . af4f40) (put-string . af4f3f) (put-datum . af4f3e) (put-char . af4f3d) (put-bytevector . af4f3c) (port? . af4f3b) (port-transcoder . af4f3a) (port-position . af4f39) (port-has-set-port-position!? . af4f38) (port-has-port-position? . af4f37) (port-eof? . af4f36) (output-port-buffer-mode . af4f35) (open-string-output-port . af4f34) (open-string-input-port . af4f33) (open-file-output-port . af4f32) (open-file-input/output-port . af4f31) (open-file-input-port . af4f30) (open-bytevector-output-port . af4f2f) (open-bytevector-input-port . af4f2e) (native-transcoder . af4f2d) (native-eol-style . af4f2c) (make-transcoder . af4f2b) (latin-1-codec . af4f2a) (make-i/o-write-error . af49b5) (make-i/o-read-error . af49a0) (make-i/o-port-error . af4a56) (make-i/o-invalid-position-error . af49cc) (make-i/o-filename-error . af49e7) (make-i/o-file-protection-error . af4a00) (make-i/o-file-is-read-only-error . af4a15) (make-i/o-file-does-not-exist-error . af4a3f) (make-i/o-file-already-exists-error . af4a2a) (make-i/o-error . af498b) (make-i/o-encoding-error . af4a86) (make-i/o-decoding-error . af4a6f) (make-custom-textual-output-port . af4f29) (make-custom-textual-input/output-port . af4f28) (make-custom-textual-input-port . af4f27) (make-custom-binary-output-port . af4f26) (make-custom-binary-input/output-port . af4f25) (make-custom-binary-input-port . af4f24) (make-bytevector . af4f23) (lookahead-u8 . af4f22) (lookahead-char . af4f21) (i/o-write-error? . af49b7) (i/o-read-error? . af49a2) (i/o-port-error? . af4a5a) (i/o-invalid-position-error? . af49d0) (i/o-filename-error? . af49eb) (i/o-file-protection-error? . af4a02) (i/o-file-is-read-only-error? . af4a17) (i/o-file-does-not-exist-error? . af4a41) (i/o-file-already-exists-error? . af4a2c) (i/o-error? . af498d) (i/o-error-position . af49d2) (i/o-error-port . af4a5c) (i/o-error-filename . af49ed) (i/o-encoding-error? . af4a8a) (i/o-encoding-error-char . af4a8c) (i/o-decoding-error? . af4a71) (get-u8 . af4f20) (get-string-n! . af4f1f) (get-string-n . af4f1e) (get-string-all . af4f1d) (get-line . af4f1c) (get-datum . af4f1b) (get-char . af4f1a) (get-bytevector-some . af4f19) (get-bytevector-n! . af4f18) (get-bytevector-n . af4f17) (get-bytevector-all . af4f16) (flush-output-port . af4f15) (close-port . af4f14) (exit . af4f0c) (command-line . af4bc5) (string-fill! . af4f0b) (string-set! . af4f0a) (set-cdr! . af4f09) (set-car! . af4f08) (remove . af4f07) (remv . af4f06) (remp . af4f05) (remq . af4f04) (partition . af4f03) (memv . af4f02) (memq . af4f01) (memp . af4f00) (member . af4eff) (exists . af4efe) (for-all . af4efd) (fold-right . af4efc) (fold-left . af4efb) (find . af4efa) (filter . af4ef9) (cons* . af4ef8) (assv . af4ef7) (assq . af4ef6) (assp . af4ef5) (assoc . af4ef4) (call-with-string-output-port . af4ef3) (call-with-port . af4ef2) (call-with-bytevector-output-port . af4ef1) (bytevector->string . af4ef0) (buffer-mode? . af4eef) (binary-port? . af4eee) (with-exception-handler . af4eed) (raise-continuable . af4eec) (raise . af4eeb) (eval . af2d6d) (environment . af2d65) (make-enumeration . af4eea) (enum-set=? . af4ee9) (enum-set-universe . af4ee8) (enum-set-union . af4ee7) (enum-set-subset? . af4ee6) (enum-set-projection . af4ee5) (enum-set-member? . af4ee4) (enum-set-intersection . af4ee3) (enum-set-indexer . af4ee2) (enum-set-difference . af4ee1) (enum-set-constructor . af4ee0) (enum-set-complement . af4edf) (enum-set->list . af4ede) (who-condition? . af4901) (warning? . af4879) (violation? . af48b8) (undefined-violation? . af4978) (syntax-violation? . af495f) (syntax-violation-subform . af4963) (syntax-violation-form . af4961) (syntax-violation . af2d8d) (simple-conditions . af4edd) (serious-condition? . af488e) (non-continuable-violation? . af4918) (message-condition? . af4862) (make-who-condition . af48fd) (make-warning . af4877) (make-violation . af48b6) (make-undefined-violation . af4976) (make-syntax-violation . af4959) (make-serious-condition . af488c) (make-non-continuable-violation . af4916) (make-message-condition . af485e) (make-lexical-violation . af4940) (make-irritants-condition . af48e2) (make-implementation-restriction-violation . af492b) (make-error . af48a1) (make-assertion-violation . af48cb) (lexical-violation? . af4942) (irritants-condition? . af48e6) (implementation-restriction-violation? . af492d) (error? . af48a3) (condition-who . af4903) (condition-predicate . af4edc) (condition-message . af4864) (condition-irritants . af48e8) (condition-accessor . af4edb) (condition . af4eda) (assertion-violation? . af48cd) (condition? . af4ed9) (utf32->string . af4ed8) (utf16->string . af4ed7) (utf8->string . af4ed6) (uint-list->bytevector . af4ed5) (u8-list->bytevector . af4ed4) (string->utf8 . af4ed3) (string->utf32 . af4ed2) (string->utf16 . af4ed1) (sint-list->bytevector . af4ed0) (native-endianness . af4ecf) (bytevector? . af4ece) (bytevector=? . af4ecd) (bytevector-uint-set! . af4ecc) (bytevector-uint-ref . af4ecb) (bytevector-u8-set! . af4eca) (bytevector-u8-ref . af4ec9) (bytevector-u64-set! . af4ec8) (bytevector-u64-ref . af4ec7) (bytevector-u64-native-set! . af4ec6) (bytevector-u64-native-ref . af4ec5) (bytevector-u32-set! . af4ec4) (bytevector-u32-ref . af4ec3) (bytevector-u32-native-set! . af4ec2) (bytevector-u32-native-ref . af4ec1) (bytevector-u16-set! . af4ec0) (bytevector-u16-ref . af4ebf) (bytevector-u16-native-set! . af4ebe) (bytevector-u16-native-ref . af4ebd) (bytevector-sint-set! . af4ebc) (bytevector-sint-ref . af4ebb) (bytevector-s8-set! . af4eba) (bytevector-s8-ref . af4eb9) (bytevector-s64-set! . af4eb8) (bytevector-s64-ref . af4eb7) (bytevector-s64-native-set! . af4eb6) (bytevector-s64-native-ref . af4eb5) (bytevector-s32-set! . af4eb4) (bytevector-s32-ref . af4eb3) (bytevector-s32-native-set! . af4eb2) (bytevector-s32-native-ref . af4eb1) (bytevector-s16-set! . af4eb0) (bytevector-s16-ref . af4eaf) (bytevector-s16-native-set! . af4eae) (bytevector-s16-native-ref . af4ead) (bytevector-length . af4eac) (bytevector-ieee-single-ref . af4eab) (bytevector-ieee-single-set! . af4eaa) (bytevector-ieee-single-native-set! . af4ea9) (bytevector-ieee-single-native-ref . af4ea8) (bytevector-ieee-double-set! . af4ea7) (bytevector-ieee-double-ref . af4ea6) (bytevector-ieee-double-native-set! . af4ea5) (bytevector-ieee-double-native-ref . af4ea4) (bytevector-fill! . af4ea3) (bytevector-copy! . af4ea2) (bytevector-copy . af4ea1) (bytevector->uint-list . af4ea0) (bytevector->u8-list . af4e9f) (bytevector->sint-list . af4e9e) (no-nans-violation? . af4ab6) (no-infinities-violation? . af4aa1) (make-no-nans-violation . af4ab4) (make-no-infinities-violation . af4a9f) (real->flonum . af4e9d) (flzero? . af4e9c) (fltruncate . af4e9b) (fltan . af4e9a) (flsqrt . af4e99) (flsin . af4e98) (flround . af4e97) (flpositive? . af4e96) (flonum? . af4e95) (flodd? . af4e94) (flnumerator . af4e93) (flnegative? . af4e92) (flnan? . af4e91) (flmod0 . af4e90) (flmod . af4e8f) (flmin . af4e8e) (flmax . af4e8d) (fllog . af4e8c) (flinteger? . af4e8b) (flinfinite? . af4e8a) (flfloor . af4e89) (flfinite? . af4e88) (flexpt . af4e87) (flexp . af4e86) (fleven? . af4e85) (fldiv0-and-mod0 . af4e84) (fldiv0 . af4e83) (fldiv-and-mod . af4e82) (fldiv . af4e81) (fldenominator . af4e80) (flcos . af4e7f) (flceiling . af4e7e) (flatan . af4e7d) (flasin . af4e7c) (flacos . af4e7b) (flabs . af4e7a) (fl>? . af4e79) (fl>=? . af4e78) (fl=? . af4e77) (fl<? . af4e76) (fl<=? . af4e75) (fl/ . af4e74) (fl- . af4e73) (fl+ . af4e72) (fl* . af4e71) (fixnum->flonum . af4e70) (fxzero? . af4e6f) (fxxor . af4e6e) (fxrotate-bit-field . af4e6d) (fxreverse-bit-field . af4e6c) (fxpositive? . af4e6b) (fxodd? . af4e6a) (fxnot . af4e69) (fxnegative? . af4e68) (fxmod0 . af4e67) (fxmod . af4e66) (fxmin . af4e65) (fxmax . af4e64) (fxlength . af4e63) (fxior . af4e62) (fxif . af4e61) (fxfirst-bit-set . af4e60) (fxeven? . af4e5f) (fxdiv0-and-mod0 . af4e5e) (fxdiv0 . af4e5d) (fxdiv-and-mod . af4e5c) (fxdiv . af4e5b) (fxcopy-bit-field . af4e5a) (fxcopy-bit . af4e59) (fxbit-set? . af4e58) (fxbit-field . af4e57) (fxbit-count . af4e56) (fxarithmetic-shift-right . af4e55) (fxarithmetic-shift-left . af4e54) (fxarithmetic-shift . af4e53) (fxand . af4e52) (fx>? . af4e51) (fx>=? . af4e50) (fx=? . af4e4f) (fx<? . af4e4e) (fx<=? . af4e4d) (fx-/carry . af4e4c) (fx- . af4e4b) (fx+/carry . af4e4a) (fx+ . af4e49) (fx*/carry . af4e48) (fx* . af4e47) (greatest-fixnum . af4e46) (least-fixnum . af4e45) (fixnum-width . af4e44) (fixnum? . af4e43) (bitwise-rotate-bit-field . af4e42) (bitwise-reverse-bit-field . af4e41) (bitwise-length . af4e40) (bitwise-if . af4e3f) (bitwise-first-bit-set . af4e3e) (bitwise-copy-bit-field . af4e3d) (bitwise-copy-bit . af4e3c) (bitwise-bit-set? . af4e3b) (bitwise-bit-field . af4e3a) (bitwise-bit-count . af4e39) (bitwise-xor . af4e38) (bitwise-ior . af4e37) (bitwise-and . af4e36) (bitwise-not . af4e35) (bitwise-arithmetic-shift-right . af4e34) (bitwise-arithmetic-shift-left . af4e33) (bitwise-arithmetic-shift . af4e32) (zero? . af4e31) (vector? . af4e30) (vector-set! . af4e2f) (vector-ref . af4e2e) (vector-map . af4e2d) (vector-length . af4e2c) (vector-for-each . af4e2b) (vector-fill! . af4e2a) (vector->list . af4e29) (vector . af4e28) (values . af4e27) (truncate . af4e26) (tan . af4e25) (symbol? . af4e24) (symbol=? . af4e23) (symbol->string . af4e22) (substring . af4e21) (string? . af4e20) (string>? . af4e1f) (string>=? . af4e1e) (string=? . af4e1d) (string<? . af4e1c) (string<=? . af4e1b) (string-ref . af4e1a) (string-length . af4e19) (string-for-each . af4e18) (string-copy . af4e17) (string-append . af4e16) (string->symbol . af4e15) (string->number . af4e14) (string->list . af4e13) (string . af4e12) (sqrt . af4e11) (sin . af4e10) (round . af4e0f) (reverse . af4e0e) (real? . af4e0d) (real-valued? . af4e0c) (real-part . af4e0b) (rationalize . af4e0a) (rational? . af4e09) (rational-valued? . af4e08) (procedure? . af4e07) (positive? . af4e06) (pair? . af4e05) (odd? . af4e04) (numerator . af4e03) (number? . af4e02) (number->string . af4e01) (null? . af4e00) (not . af4dff) (negative? . af4dfe) (nan? . af4dfd) (min . af4dfc) (max . af4dfb) (map . af4dfa) (make-vector . af4df9) (make-string . af4df8) (make-rectangular . af4df7) (make-polar . af4df6) (magnitude . af4df5) (log . af4df4) (list? . af4df3) (list-tail . af4df2) (list-ref . af4df1) (list->vector . af4df0) (list->string . af4def) (list . af4dee) (length . af4ded) (lcm . af4dec) (integer? . af4deb) (integer-valued? . af4dea) (integer->char . af4de9) (infinite? . af4de8) (inexact? . af4de7) (inexact . af4de6) (imag-part . af4de5) (gcd . af4de4) (for-each . af4de3) (floor . af4de2) (finite? . af4de1) (expt . af4de0) (exp . af4ddf) (exact? . af4dde) (exact-integer-sqrt . af4ddd) (exact . af4ddc) (even? . af4ddb) (error . af4dda) (eqv? . af4dd9) (equal? . af4dd8) (eq? . af4dd7) (dynamic-wind . af4dd6) (div0-and-mod0 . af4dd5) (mod0 . af4dd4) (div0 . af4dd3) (div-and-mod . af4dd2) (mod . af4dd1) (div . af4dd0) (denominator . af4dcf) (cos . af4dce) (cons . af4dcd) (complex? . af4dcc) (char? . af4dcb) (char>? . af4dca) (char>=? . af4dc9) (char=? . af4dc8) (char<? . af4dc7) (char<=? . af4dc6) (char->integer . af4dc5) (ceiling . af4dc4) (call-with-values . af4dc3) (call/cc . af4dc2) (call-with-current-continuation . af4dc1) (cddddr . af4dc0) (cdddar . af4dbf) (cddadr . af4dbe) (cddaar . af4dbd) (cdaddr . af4dbc) (cdadar . af4dbb) (cdaadr . af4dba) (cdaaar . af4db9) (cadddr . af4db8) (caddar . af4db7) (cadadr . af4db6) (cadaar . af4db5) (caaddr . af4db4) (caadar . af4db3) (caaadr . af4db2) (caaaar . af4db1) (cdddr . af4db0) (cddar . af4daf) (cdadr . af4dae) (cdaar . af4dad) (caddr . af4dac) (cadar . af4dab) (caadr . af4daa) (caaar . af4da9) (cddr . af4da8) (cdar . af4da7) (cadr . af4da6) (caar . af4da5) (cdr . af4da4) (car . af4da3) (boolean? . af4da2) (boolean=? . af4da1) (atan . af4da0) (assertion-violation . af4d9f) (asin . af4d9e) (apply . af4d9d) (append . af4d9c) (angle . af4d9b) (acos . af4d9a) (abs . af4d99) (/ . af4d98) (* . af4d97) (- . af4d96) (+ . af4d95) (>= . af4d94) (> . af4d93) (= . af4d92) (<= . af4d91) (< . af4d90) (library . af4d8f) (&no-nans . af4d8e) (&no-infinities . af4d8d) (&i/o-encoding . af4d8c) (&i/o-decoding . af4d8b) (&i/o-port . af4d8a) (&i/o-file-does-not-exist . af4d89) (&i/o-file-already-exists . af4d88) (&i/o-file-is-read-only . af4d87) (&i/o-file-protection . af4d86) (&i/o-filename . af4d85) (&i/o-invalid-position . af4d84) (&i/o-write . af4d83) (&i/o-read . af4d82) (&i/o . af4d81) (&undefined . af4d80) (&syntax . af4d7f) (&lexical . af4d7e) (&implementation-restriction . af4d7d) (&non-continuable . af4d7c) (&who . af4d7b) (&irritants . af4d7a) (&assertion . af4d79) (&violation . af4d78) (&error . af4d77) (&serious . af4d76) (&warning . af4d75) (&message . af4d74) (&condition . af4d73) (define-condition-type . af4d72) (define-enumeration . af4d71) (define-record-type . af4d70) (parent-rtd . af4d6f) (nongenerative . af4d6e) (opaque . af4d6d) (sealed . af4d6c) (protocol . af4d6b) (parent . af4d6a) (immutable . af4d69) (mutable . af4d68) (fields . af4d67) (error-handling-mode . af4d66) (file-options . af4d65) (buffer-mode . af4d64) (eol-style . af4d63) (guard . af4d62) (unsyntax-splicing . af4d5f) (unsyntax . af4d5e) (unquote-splicing . af4d5d) (unquote . af4d5c) (_ . af4d5b) (else . af4d5a) (=> . af4d59) (... . af4d58) (assert . af4d57) (endianness . af4d56) (time . af4d54) (do . af4d53) (cond . af4d52) (let* . af4d51) (let*-values . af4d50) (let-values . af4d4f) (identifier-syntax . af4d4e) (with-syntax . af4d4d) (quasisyntax . af4d4c) (quasiquote . af4d4b) (syntax-rules . af4d4a) (include . af4d49) (record-constructor-descriptor . af4d47) (record-type-descriptor . af4d46) (case . af4d45) (unless . af4d43) (when . af4d42) (or . af4d41) (and . af4d40) (if . af4d3f) (let . af4d3e) (letrec* . af4d3d) (letrec . af4d3c) (case-lambda . af4d3a) (lambda . af4d39) (syntax . af4d38) (syntax-case . af4d37) (quote . af4d36) (letrec-syntax . af4d34) (let-syntax . af4d33) (set! . af4d32) (import . af4d31) (begin . af4d30) (define-syntax . af4d2e) (define . af4d2d)) '() values values '#f '#f '#t '#f) (af28bb@af2707@install-library 'af5056 '(psyntax null-environment-5) '() '() '() '() '((make-promise . af4f0d) (unquote-splicing . af4d5d) (unquote . af4d5c) (_ . af4d5b) (else . af4d5a) (=> . af4d59) (... . af4d58) (delay . af4d55) (do . af4d53) (cond . af4d52) (let* . af4d51) (quasiquote . af4d4b) (syntax-rules . af4d4a) (case . af4d45) (or . af4d41) (and . af4d40) (if . af4d3f) (let . af4d3e) (letrec . af4d3c) (lambda . af4d39) (quote . af4d36) (letrec-syntax . af4d34) (let-syntax . af4d33) (set! . af4d32) (begin . af4d30) (define-syntax . af4d2e) (define . af4d2d)) '() values values '#f '#f '#t '#f) (af28bb@af2707@install-library 'af5057 '(psyntax scheme-report-environment-5) '() '() '() '() '((string-ci>? . af4fa2) (string-ci>=? . af4fa1) (string-ci=? . af4fa0) (string-ci<? . af4f9f) (string-ci<=? . af4f9e) (char-whitespace? . af4f9d) (char-upper-case? . af4f9c) (char-numeric? . af4f9a) (char-lower-case? . af4f99) (char-upcase . af4f97) (char-downcase . af4f94) (char-ci>? . af4f93) (char-ci>=? . af4f92) (char-ci=? . af4f91) (char-ci<? . af4f90) (char-ci<=? . af4f8f) (char-alphabetic? . af4f8e) (call-with-output-file . af4f62) (call-with-input-file . af4f61) (write-char . af4f60) (write . af4f5f) (with-output-to-file . af4f5e) (with-input-from-file . af4f5d) (read-char . af4f5c) (read . af4f5b) (peek-char . af4f5a) (open-output-file . af4f59) (open-input-file . af4f58) (newline . af4f57) (display . af4f56) (close-output-port . af4f55) (close-input-port . af4f54) (eof-object . af4f52) (current-output-port . af4f50) (current-input-port . af4f4f) (output-port? . af4f4e) (input-port? . af4f4d) (scheme-report-environment . af2d69) (quotient . af4f13) (null-environment . af2d67) (remainder . af4f12) (modulo . af4f11) (inexact->exact . af4f10) (force . af4f0f) (exact->inexact . af4f0e) (make-promise . af4f0d) (string-fill! . af4f0b) (string-set! . af4f0a) (set-cdr! . af4f09) (set-car! . af4f08) (memv . af4f02) (memq . af4f01) (member . af4eff) (assv . af4ef7) (assq . af4ef6) (assoc . af4ef4) (eval . af2d6d) (zero? . af4e31) (vector? . af4e30) (vector-set! . af4e2f) (vector-ref . af4e2e) (vector-length . af4e2c) (vector-fill! . af4e2a) (vector->list . af4e29) (vector . af4e28) (values . af4e27) (truncate . af4e26) (tan . af4e25) (symbol? . af4e24) (symbol->string . af4e22) (substring . af4e21) (string? . af4e20) (string>? . af4e1f) (string>=? . af4e1e) (string=? . af4e1d) (string<? . af4e1c) (string<=? . af4e1b) (string-ref . af4e1a) (string-length . af4e19) (string-copy . af4e17) (string-append . af4e16) (string->symbol . af4e15) (string->number . af4e14) (string->list . af4e13) (string . af4e12) (sqrt . af4e11) (sin . af4e10) (round . af4e0f) (reverse . af4e0e) (real? . af4e0d) (real-part . af4e0b) (rationalize . af4e0a) (rational? . af4e09) (procedure? . af4e07) (positive? . af4e06) (pair? . af4e05) (odd? . af4e04) (numerator . af4e03) (number? . af4e02) (number->string . af4e01) (not . af4dff) (negative? . af4dfe) (min . af4dfc) (max . af4dfb) (map . af4dfa) (make-vector . af4df9) (make-string . af4df8) (make-rectangular . af4df7) (make-polar . af4df6) (magnitude . af4df5) (log . af4df4) (list? . af4df3) (list-tail . af4df2) (list-ref . af4df1) (list->vector . af4df0) (list->string . af4def) (list . af4dee) (length . af4ded) (lcm . af4dec) (integer? . af4deb) (integer->char . af4de9) (inexact? . af4de7) (imag-part . af4de5) (gcd . af4de4) (for-each . af4de3) (floor . af4de2) (expt . af4de0) (exp . af4ddf) (exact? . af4dde) (even? . af4ddb) (eqv? . af4dd9) (equal? . af4dd8) (eq? . af4dd7) (dynamic-wind . af4dd6) (denominator . af4dcf) (cos . af4dce) (cons . af4dcd) (complex? . af4dcc) (char? . af4dcb) (char>? . af4dca) (char>=? . af4dc9) (char=? . af4dc8) (char<? . af4dc7) (char<=? . af4dc6) (char->integer . af4dc5) (ceiling . af4dc4) (call-with-values . af4dc3) (call-with-current-continuation . af4dc1) (cddddr . af4dc0) (cdddar . af4dbf) (cddadr . af4dbe) (cddaar . af4dbd) (cdaddr . af4dbc) (cdadar . af4dbb) (cdaadr . af4dba) (cdaaar . af4db9) (cadddr . af4db8) (caddar . af4db7) (cadadr . af4db6) (cadaar . af4db5) (caaddr . af4db4) (caadar . af4db3) (caaadr . af4db2) (caaaar . af4db1) (cdddr . af4db0) (cddar . af4daf) (cdadr . af4dae) (cdaar . af4dad) (caddr . af4dac) (cadar . af4dab) (caadr . af4daa) (caaar . af4da9) (cddr . af4da8) (cdar . af4da7) (cadr . af4da6) (caar . af4da5) (cdr . af4da4) (car . af4da3) (boolean? . af4da2) (atan . af4da0) (asin . af4d9e) (apply . af4d9d) (append . af4d9c) (angle . af4d9b) (acos . af4d9a) (abs . af4d99) (/ . af4d98) (* . af4d97) (- . af4d96) (+ . af4d95) (>= . af4d94) (> . af4d93) (= . af4d92) (<= . af4d91) (< . af4d90) (unquote-splicing . af4d5d) (unquote . af4d5c) (else . af4d5a) (=> . af4d59) (... . af4d58) (delay . af4d55) (do . af4d53) (cond . af4d52) (let* . af4d51) (quasiquote . af4d4b) (syntax-rules . af4d4a) (case . af4d45) (or . af4d41) (and . af4d40) (if . af4d3f) (let . af4d3e) (letrec . af4d3c) (lambda . af4d39) (quote . af4d36) (letrec-syntax . af4d34) (let-syntax . af4d33) (set! . af4d32) (begin . af4d30) (define-syntax . af4d2e) (define . af4d2d)) '() values values '#f '#f '#t '#f) (af28bb@af2707@install-library 'af5058 '(psyntax modules) '() '() '() '() '((module . af4d2f)) '() values values '#f '#f '#t '#f) (af28bb@af2707@install-library 'af5059 '(chez parameters) '() '() '() '() '() '() values values '#f '#f '#t '#f) (af28bb@af2707@install-library 'af505a '(rnrs) '(6) '() '() '() '((regexp? . af504d) (string-upcase . af4faa) (string-titlecase . af4fa9) (string-normalize-nfkd . af4fa8) (string-normalize-nfkc . af4fa7) (string-normalize-nfd . af4fa6) (string-normalize-nfc . af4fa5) (string-foldcase . af4fa4) (string-downcase . af4fa3) (string-ci>? . af4fa2) (string-ci>=? . af4fa1) (string-ci=? . af4fa0) (string-ci<? . af4f9f) (string-ci<=? . af4f9e) (char-whitespace? . af4f9d) (char-upper-case? . af4f9c) (char-title-case? . af4f9b) (char-numeric? . af4f9a) (char-lower-case? . af4f99) (char-general-category . af4f98) (char-upcase . af4f97) (char-titlecase . af4f96) (char-foldcase . af4f95) (char-downcase . af4f94) (char-ci>? . af4f93) (char-ci>=? . af4f92) (char-ci=? . af4f91) (char-ci<? . af4f90) (char-ci<=? . af4f8f) (char-alphabetic? . af4f8e) (make-variable-transformer . af2ad8) (identifier? . af2d8f) (generate-temporaries . af2d7b) (free-identifier=? . af2d7d) (syntax->datum . af2d93) (datum->syntax . af2d91) (bound-identifier=? . af2d7f) (record-type-descriptor? . af4f8d) (record-predicate . af4f8c) (record-mutator . af4f8b) (record-constructor . af4f8a) (record-accessor . af4f89) (make-record-type-descriptor . af4f88) (make-record-constructor-descriptor . af4f87) (record? . af4f86) (record-type-uid . af4f85) (record-type-sealed? . af4f84) (record-type-parent . af4f83) (record-type-opaque? . af4f82) (record-type-name . af4f81) (record-type-generative? . af4f80) (record-type-field-names . af4f7f) (record-rtd . af4f7e) (record-field-mutable? . af4f7d) (delete-file . af4f7c) (file-exists? . af4f7b) (vector-sort! . af4f7a) (vector-sort . af4f79) (list-sort . af4f78) (symbol-hash . af4f77) (string-ci-hash . af4f76) (string-hash . af4f75) (equal-hash . af4f74) (hashtable-equivalence-function . af4f73) (make-hashtable . af4f72) (hashtable-hash-function . af4f71) (make-eqv-hashtable . af4f70) (make-eq-hashtable . af4f6f) (hashtable? . af4f6e) (hashtable-update! . af4f6d) (hashtable-size . af4f6c) (hashtable-set! . af4f6b) (hashtable-ref . af4f6a) (hashtable-mutable? . af4f69) (hashtable-keys . af4f68) (hashtable-entries . af4f67) (hashtable-delete! . af4f66) (hashtable-copy . af4f65) (hashtable-contains? . af4f64) (hashtable-clear! . af4f63) (call-with-output-file . af4f62) (call-with-input-file . af4f61) (write-char . af4f60) (write . af4f5f) (with-output-to-file . af4f5e) (with-input-from-file . af4f5d) (read-char . af4f5c) (read . af4f5b) (peek-char . af4f5a) (open-output-file . af4f59) (open-input-file . af4f58) (newline . af4f57) (display . af4f56) (close-output-port . af4f55) (close-input-port . af4f54) (eof-object? . af4f53) (eof-object . af4f52) (current-error-port . af4f51) (current-output-port . af4f50) (current-input-port . af4f4f) (output-port? . af4f4e) (input-port? . af4f4d) (utf-8-codec . af4f4c) (utf-16-codec . af4f4b) (transcoder-error-handling-mode . af4f4a) (transcoder-eol-style . af4f49) (transcoder-codec . af4f48) (transcoded-port . af4f47) (textual-port? . af4f46) (string->bytevector . af4f45) (standard-output-port . af4f44) (standard-input-port . af4f43) (standard-error-port . af4f42) (set-port-position! . af4f41) (put-u8 . af4f40) (put-string . af4f3f) (put-datum . af4f3e) (put-char . af4f3d) (put-bytevector . af4f3c) (port? . af4f3b) (port-transcoder . af4f3a) (port-position . af4f39) (port-has-set-port-position!? . af4f38) (port-has-port-position? . af4f37) (port-eof? . af4f36) (output-port-buffer-mode . af4f35) (open-string-output-port . af4f34) (open-string-input-port . af4f33) (open-file-output-port . af4f32) (open-file-input/output-port . af4f31) (open-file-input-port . af4f30) (open-bytevector-output-port . af4f2f) (open-bytevector-input-port . af4f2e) (native-transcoder . af4f2d) (native-eol-style . af4f2c) (make-transcoder . af4f2b) (latin-1-codec . af4f2a) (make-i/o-write-error . af49b5) (make-i/o-read-error . af49a0) (make-i/o-port-error . af4a56) (make-i/o-invalid-position-error . af49cc) (make-i/o-filename-error . af49e7) (make-i/o-file-protection-error . af4a00) (make-i/o-file-is-read-only-error . af4a15) (make-i/o-file-does-not-exist-error . af4a3f) (make-i/o-file-already-exists-error . af4a2a) (make-i/o-error . af498b) (make-i/o-encoding-error . af4a86) (make-i/o-decoding-error . af4a6f) (make-custom-textual-output-port . af4f29) (make-custom-textual-input/output-port . af4f28) (make-custom-textual-input-port . af4f27) (make-custom-binary-output-port . af4f26) (make-custom-binary-input/output-port . af4f25) (make-custom-binary-input-port . af4f24) (make-bytevector . af4f23) (lookahead-u8 . af4f22) (lookahead-char . af4f21) (i/o-write-error? . af49b7) (i/o-read-error? . af49a2) (i/o-port-error? . af4a5a) (i/o-invalid-position-error? . af49d0) (i/o-filename-error? . af49eb) (i/o-file-protection-error? . af4a02) (i/o-file-is-read-only-error? . af4a17) (i/o-file-does-not-exist-error? . af4a41) (i/o-file-already-exists-error? . af4a2c) (i/o-error? . af498d) (i/o-error-position . af49d2) (i/o-error-port . af4a5c) (i/o-error-filename . af49ed) (i/o-encoding-error? . af4a8a) (i/o-encoding-error-char . af4a8c) (i/o-decoding-error? . af4a71) (get-u8 . af4f20) (get-string-n! . af4f1f) (get-string-n . af4f1e) (get-string-all . af4f1d) (get-line . af4f1c) (get-datum . af4f1b) (get-char . af4f1a) (get-bytevector-some . af4f19) (get-bytevector-n! . af4f18) (get-bytevector-n . af4f17) (get-bytevector-all . af4f16) (flush-output-port . af4f15) (close-port . af4f14) (exit . af4f0c) (command-line . af4bc5) (remove . af4f07) (remv . af4f06) (remp . af4f05) (remq . af4f04) (partition . af4f03) (memv . af4f02) (memq . af4f01) (memp . af4f00) (member . af4eff) (exists . af4efe) (for-all . af4efd) (fold-right . af4efc) (fold-left . af4efb) (find . af4efa) (filter . af4ef9) (cons* . af4ef8) (assv . af4ef7) (assq . af4ef6) (assp . af4ef5) (assoc . af4ef4) (call-with-string-output-port . af4ef3) (call-with-port . af4ef2) (call-with-bytevector-output-port . af4ef1) (bytevector->string . af4ef0) (buffer-mode? . af4eef) (binary-port? . af4eee) (with-exception-handler . af4eed) (raise-continuable . af4eec) (raise . af4eeb) (make-enumeration . af4eea) (enum-set=? . af4ee9) (enum-set-universe . af4ee8) (enum-set-union . af4ee7) (enum-set-subset? . af4ee6) (enum-set-projection . af4ee5) (enum-set-member? . af4ee4) (enum-set-intersection . af4ee3) (enum-set-indexer . af4ee2) (enum-set-difference . af4ee1) (enum-set-constructor . af4ee0) (enum-set-complement . af4edf) (enum-set->list . af4ede) (who-condition? . af4901) (warning? . af4879) (violation? . af48b8) (undefined-violation? . af4978) (syntax-violation? . af495f) (syntax-violation-subform . af4963) (syntax-violation-form . af4961) (syntax-violation . af2d8d) (simple-conditions . af4edd) (serious-condition? . af488e) (non-continuable-violation? . af4918) (message-condition? . af4862) (make-who-condition . af48fd) (make-warning . af4877) (make-violation . af48b6) (make-undefined-violation . af4976) (make-syntax-violation . af4959) (make-serious-condition . af488c) (make-non-continuable-violation . af4916) (make-message-condition . af485e) (make-lexical-violation . af4940) (make-irritants-condition . af48e2) (make-implementation-restriction-violation . af492b) (make-error . af48a1) (make-assertion-violation . af48cb) (lexical-violation? . af4942) (irritants-condition? . af48e6) (implementation-restriction-violation? . af492d) (error? . af48a3) (condition-who . af4903) (condition-predicate . af4edc) (condition-message . af4864) (condition-irritants . af48e8) (condition-accessor . af4edb) (condition . af4eda) (assertion-violation? . af48cd) (condition? . af4ed9) (utf32->string . af4ed8) (utf16->string . af4ed7) (utf8->string . af4ed6) (uint-list->bytevector . af4ed5) (u8-list->bytevector . af4ed4) (string->utf8 . af4ed3) (string->utf32 . af4ed2) (string->utf16 . af4ed1) (sint-list->bytevector . af4ed0) (native-endianness . af4ecf) (bytevector? . af4ece) (bytevector=? . af4ecd) (bytevector-uint-set! . af4ecc) (bytevector-uint-ref . af4ecb) (bytevector-u8-set! . af4eca) (bytevector-u8-ref . af4ec9) (bytevector-u64-set! . af4ec8) (bytevector-u64-ref . af4ec7) (bytevector-u64-native-set! . af4ec6) (bytevector-u64-native-ref . af4ec5) (bytevector-u32-set! . af4ec4) (bytevector-u32-ref . af4ec3) (bytevector-u32-native-set! . af4ec2) (bytevector-u32-native-ref . af4ec1) (bytevector-u16-set! . af4ec0) (bytevector-u16-ref . af4ebf) (bytevector-u16-native-set! . af4ebe) (bytevector-u16-native-ref . af4ebd) (bytevector-sint-set! . af4ebc) (bytevector-sint-ref . af4ebb) (bytevector-s8-set! . af4eba) (bytevector-s8-ref . af4eb9) (bytevector-s64-set! . af4eb8) (bytevector-s64-ref . af4eb7) (bytevector-s64-native-set! . af4eb6) (bytevector-s64-native-ref . af4eb5) (bytevector-s32-set! . af4eb4) (bytevector-s32-ref . af4eb3) (bytevector-s32-native-set! . af4eb2) (bytevector-s32-native-ref . af4eb1) (bytevector-s16-set! . af4eb0) (bytevector-s16-ref . af4eaf) (bytevector-s16-native-set! . af4eae) (bytevector-s16-native-ref . af4ead) (bytevector-length . af4eac) (bytevector-ieee-single-ref . af4eab) (bytevector-ieee-single-set! . af4eaa) (bytevector-ieee-single-native-set! . af4ea9) (bytevector-ieee-single-native-ref . af4ea8) (bytevector-ieee-double-set! . af4ea7) (bytevector-ieee-double-ref . af4ea6) (bytevector-ieee-double-native-set! . af4ea5) (bytevector-ieee-double-native-ref . af4ea4) (bytevector-fill! . af4ea3) (bytevector-copy! . af4ea2) (bytevector-copy . af4ea1) (bytevector->uint-list . af4ea0) (bytevector->u8-list . af4e9f) (bytevector->sint-list . af4e9e) (no-nans-violation? . af4ab6) (no-infinities-violation? . af4aa1) (make-no-nans-violation . af4ab4) (make-no-infinities-violation . af4a9f) (real->flonum . af4e9d) (flzero? . af4e9c) (fltruncate . af4e9b) (fltan . af4e9a) (flsqrt . af4e99) (flsin . af4e98) (flround . af4e97) (flpositive? . af4e96) (flonum? . af4e95) (flodd? . af4e94) (flnumerator . af4e93) (flnegative? . af4e92) (flnan? . af4e91) (flmod0 . af4e90) (flmod . af4e8f) (flmin . af4e8e) (flmax . af4e8d) (fllog . af4e8c) (flinteger? . af4e8b) (flinfinite? . af4e8a) (flfloor . af4e89) (flfinite? . af4e88) (flexpt . af4e87) (flexp . af4e86) (fleven? . af4e85) (fldiv0-and-mod0 . af4e84) (fldiv0 . af4e83) (fldiv-and-mod . af4e82) (fldiv . af4e81) (fldenominator . af4e80) (flcos . af4e7f) (flceiling . af4e7e) (flatan . af4e7d) (flasin . af4e7c) (flacos . af4e7b) (flabs . af4e7a) (fl>? . af4e79) (fl>=? . af4e78) (fl=? . af4e77) (fl<? . af4e76) (fl<=? . af4e75) (fl/ . af4e74) (fl- . af4e73) (fl+ . af4e72) (fl* . af4e71) (fixnum->flonum . af4e70) (fxzero? . af4e6f) (fxxor . af4e6e) (fxrotate-bit-field . af4e6d) (fxreverse-bit-field . af4e6c) (fxpositive? . af4e6b) (fxodd? . af4e6a) (fxnot . af4e69) (fxnegative? . af4e68) (fxmod0 . af4e67) (fxmod . af4e66) (fxmin . af4e65) (fxmax . af4e64) (fxlength . af4e63) (fxior . af4e62) (fxif . af4e61) (fxfirst-bit-set . af4e60) (fxeven? . af4e5f) (fxdiv0-and-mod0 . af4e5e) (fxdiv0 . af4e5d) (fxdiv-and-mod . af4e5c) (fxdiv . af4e5b) (fxcopy-bit-field . af4e5a) (fxcopy-bit . af4e59) (fxbit-set? . af4e58) (fxbit-field . af4e57) (fxbit-count . af4e56) (fxarithmetic-shift-right . af4e55) (fxarithmetic-shift-left . af4e54) (fxarithmetic-shift . af4e53) (fxand . af4e52) (fx>? . af4e51) (fx>=? . af4e50) (fx=? . af4e4f) (fx<? . af4e4e) (fx<=? . af4e4d) (fx-/carry . af4e4c) (fx- . af4e4b) (fx+/carry . af4e4a) (fx+ . af4e49) (fx*/carry . af4e48) (fx* . af4e47) (greatest-fixnum . af4e46) (least-fixnum . af4e45) (fixnum-width . af4e44) (fixnum? . af4e43) (bitwise-rotate-bit-field . af4e42) (bitwise-reverse-bit-field . af4e41) (bitwise-length . af4e40) (bitwise-if . af4e3f) (bitwise-first-bit-set . af4e3e) (bitwise-copy-bit-field . af4e3d) (bitwise-copy-bit . af4e3c) (bitwise-bit-set? . af4e3b) (bitwise-bit-field . af4e3a) (bitwise-bit-count . af4e39) (bitwise-xor . af4e38) (bitwise-ior . af4e37) (bitwise-and . af4e36) (bitwise-not . af4e35) (bitwise-arithmetic-shift-right . af4e34) (bitwise-arithmetic-shift-left . af4e33) (bitwise-arithmetic-shift . af4e32) (zero? . af4e31) (vector? . af4e30) (vector-set! . af4e2f) (vector-ref . af4e2e) (vector-map . af4e2d) (vector-length . af4e2c) (vector-for-each . af4e2b) (vector-fill! . af4e2a) (vector->list . af4e29) (vector . af4e28) (values . af4e27) (truncate . af4e26) (tan . af4e25) (symbol? . af4e24) (symbol=? . af4e23) (symbol->string . af4e22) (substring . af4e21) (string? . af4e20) (string>? . af4e1f) (string>=? . af4e1e) (string=? . af4e1d) (string<? . af4e1c) (string<=? . af4e1b) (string-ref . af4e1a) (string-length . af4e19) (string-for-each . af4e18) (string-copy . af4e17) (string-append . af4e16) (string->symbol . af4e15) (string->number . af4e14) (string->list . af4e13) (string . af4e12) (sqrt . af4e11) (sin . af4e10) (round . af4e0f) (reverse . af4e0e) (real? . af4e0d) (real-valued? . af4e0c) (real-part . af4e0b) (rationalize . af4e0a) (rational? . af4e09) (rational-valued? . af4e08) (procedure? . af4e07) (positive? . af4e06) (pair? . af4e05) (odd? . af4e04) (numerator . af4e03) (number? . af4e02) (number->string . af4e01) (null? . af4e00) (not . af4dff) (negative? . af4dfe) (nan? . af4dfd) (min . af4dfc) (max . af4dfb) (map . af4dfa) (make-vector . af4df9) (make-string . af4df8) (make-rectangular . af4df7) (make-polar . af4df6) (magnitude . af4df5) (log . af4df4) (list? . af4df3) (list-tail . af4df2) (list-ref . af4df1) (list->vector . af4df0) (list->string . af4def) (list . af4dee) (length . af4ded) (lcm . af4dec) (integer? . af4deb) (integer-valued? . af4dea) (integer->char . af4de9) (infinite? . af4de8) (inexact? . af4de7) (inexact . af4de6) (imag-part . af4de5) (gcd . af4de4) (for-each . af4de3) (floor . af4de2) (finite? . af4de1) (expt . af4de0) (exp . af4ddf) (exact? . af4dde) (exact-integer-sqrt . af4ddd) (exact . af4ddc) (even? . af4ddb) (error . af4dda) (eqv? . af4dd9) (equal? . af4dd8) (eq? . af4dd7) (dynamic-wind . af4dd6) (div0-and-mod0 . af4dd5) (mod0 . af4dd4) (div0 . af4dd3) (div-and-mod . af4dd2) (mod . af4dd1) (div . af4dd0) (denominator . af4dcf) (cos . af4dce) (cons . af4dcd) (complex? . af4dcc) (char? . af4dcb) (char>? . af4dca) (char>=? . af4dc9) (char=? . af4dc8) (char<? . af4dc7) (char<=? . af4dc6) (char->integer . af4dc5) (ceiling . af4dc4) (call-with-values . af4dc3) (call/cc . af4dc2) (call-with-current-continuation . af4dc1) (cddddr . af4dc0) (cdddar . af4dbf) (cddadr . af4dbe) (cddaar . af4dbd) (cdaddr . af4dbc) (cdadar . af4dbb) (cdaadr . af4dba) (cdaaar . af4db9) (cadddr . af4db8) (caddar . af4db7) (cadadr . af4db6) (cadaar . af4db5) (caaddr . af4db4) (caadar . af4db3) (caaadr . af4db2) (caaaar . af4db1) (cdddr . af4db0) (cddar . af4daf) (cdadr . af4dae) (cdaar . af4dad) (caddr . af4dac) (cadar . af4dab) (caadr . af4daa) (caaar . af4da9) (cddr . af4da8) (cdar . af4da7) (cadr . af4da6) (caar . af4da5) (cdr . af4da4) (car . af4da3) (boolean? . af4da2) (boolean=? . af4da1) (atan . af4da0) (assertion-violation . af4d9f) (asin . af4d9e) (apply . af4d9d) (append . af4d9c) (angle . af4d9b) (acos . af4d9a) (abs . af4d99) (/ . af4d98) (* . af4d97) (- . af4d96) (+ . af4d95) (>= . af4d94) (> . af4d93) (= . af4d92) (<= . af4d91) (< . af4d90) (&no-nans . af4d8e) (&no-infinities . af4d8d) (&i/o-encoding . af4d8c) (&i/o-decoding . af4d8b) (&i/o-port . af4d8a) (&i/o-file-does-not-exist . af4d89) (&i/o-file-already-exists . af4d88) (&i/o-file-is-read-only . af4d87) (&i/o-file-protection . af4d86) (&i/o-filename . af4d85) (&i/o-invalid-position . af4d84) (&i/o-write . af4d83) (&i/o-read . af4d82) (&i/o . af4d81) (&undefined . af4d80) (&syntax . af4d7f) (&lexical . af4d7e) (&implementation-restriction . af4d7d) (&non-continuable . af4d7c) (&who . af4d7b) (&irritants . af4d7a) (&assertion . af4d79) (&violation . af4d78) (&error . af4d77) (&serious . af4d76) (&warning . af4d75) (&message . af4d74) (&condition . af4d73) (define-condition-type . af4d72) (define-enumeration . af4d71) (define-record-type . af4d70) (parent-rtd . af4d6f) (nongenerative . af4d6e) (opaque . af4d6d) (sealed . af4d6c) (protocol . af4d6b) (parent . af4d6a) (immutable . af4d69) (mutable . af4d68) (fields . af4d67) (error-handling-mode . af4d66) (file-options . af4d65) (buffer-mode . af4d64) (eol-style . af4d63) (guard . af4d62) (unsyntax-splicing . af4d5f) (unsyntax . af4d5e) (unquote-splicing . af4d5d) (unquote . af4d5c) (_ . af4d5b) (else . af4d5a) (=> . af4d59) (... . af4d58) (assert . af4d57) (endianness . af4d56) (do . af4d53) (cond . af4d52) (let* . af4d51) (let*-values . af4d50) (let-values . af4d4f) (identifier-syntax . af4d4e) (with-syntax . af4d4d) (quasisyntax . af4d4c) (quasiquote . af4d4b) (syntax-rules . af4d4a) (record-constructor-descriptor . af4d47) (record-type-descriptor . af4d46) (case . af4d45) (unless . af4d43) (when . af4d42) (or . af4d41) (and . af4d40) (if . af4d3f) (let . af4d3e) (letrec* . af4d3d) (letrec . af4d3c) (case-lambda . af4d3a) (lambda . af4d39) (syntax . af4d38) (syntax-case . af4d37) (quote . af4d36) (letrec-syntax . af4d34) (let-syntax . af4d33) (set! . af4d32) (begin . af4d30) (define-syntax . af4d2e) (define . af4d2d)) '() values values '#f '#f '#t '#f) (af28bb@af2707@install-library 'af505b '(rnrs r5rs) '(6) '() '() '() '((scheme-report-environment . af2d69) (quotient . af4f13) (null-environment . af2d67) (remainder . af4f12) (modulo . af4f11) (inexact->exact . af4f10) (force . af4f0f) (exact->inexact . af4f0e) (make-promise . af4f0d) (delay . af4d55)) '() values values '#f '#f '#t '#f) (af28bb@af2707@install-library 'af505c '(rnrs control) '(6) '() '() '() '((do . af4d53) (unless . af4d43) (when . af4d42) (case-lambda . af4d3a)) '() values values '#f '#f '#t '#f) (af28bb@af2707@install-library 'af505d '(rnrs eval) '(6) '() '() '() '((eval . af2d6d) (environment . af2d65)) '() values values '#f '#f '#t '#f) (af28bb@af2707@install-library 'af505e '(rnrs mutable-pairs) '(6) '() '() '() '((set-cdr! . af4f09) (set-car! . af4f08)) '() values values '#f '#f '#t '#f) (af28bb@af2707@install-library 'af505f '(rnrs mutable-strings) '(6) '() '() '() '((string-fill! . af4f0b) (string-set! . af4f0a)) '() values values '#f '#f '#t '#f) (af28bb@af2707@install-library 'af5060 '(rnrs programs) '(6) '() '() '() '((exit . af4f0c) (command-line . af4bc5)) '() values values '#f '#f '#t '#f) (af28bb@af2707@install-library 'af5061 '(rnrs syntax-case) '(6) '() '() '() '((make-variable-transformer . af2ad8) (identifier? . af2d8f) (generate-temporaries . af2d7b) (free-identifier=? . af2d7d) (syntax->datum . af2d93) (datum->syntax . af2d91) (bound-identifier=? . af2d7f) (syntax-violation . af2d8d) (unsyntax-splicing . af4d5f) (unsyntax . af4d5e) (_ . af4d5b) (... . af4d58) (with-syntax . af4d4d) (quasisyntax . af4d4c) (syntax . af4d38) (syntax-case . af4d37)) '() values values '#f '#f '#t '#f) (af28bb@af2707@install-library 'af5062 '(rnrs files) '(6) '() '() '() '((delete-file . af4f7c) (file-exists? . af4f7b) (make-i/o-write-error . af49b5) (make-i/o-read-error . af49a0) (make-i/o-port-error . af4a56) (make-i/o-invalid-position-error . af49cc) (make-i/o-filename-error . af49e7) (make-i/o-file-protection-error . af4a00) (make-i/o-file-is-read-only-error . af4a15) (make-i/o-file-does-not-exist-error . af4a3f) (make-i/o-file-already-exists-error . af4a2a) (make-i/o-error . af498b) (i/o-write-error? . af49b7) (i/o-read-error? . af49a2) (i/o-port-error? . af4a5a) (i/o-invalid-position-error? . af49d0) (i/o-filename-error? . af49eb) (i/o-file-protection-error? . af4a02) (i/o-file-is-read-only-error? . af4a17) (i/o-file-does-not-exist-error? . af4a41) (i/o-file-already-exists-error? . af4a2c) (i/o-error? . af498d) (i/o-error-position . af49d2) (i/o-error-port . af4a5c) (i/o-error-filename . af49ed) (&i/o-port . af4d8a) (&i/o-file-does-not-exist . af4d89) (&i/o-file-already-exists . af4d88) (&i/o-file-is-read-only . af4d87) (&i/o-file-protection . af4d86) (&i/o-filename . af4d85) (&i/o-invalid-position . af4d84) (&i/o-write . af4d83) (&i/o-read . af4d82) (&i/o . af4d81)) '() values values '#f '#f '#t '#f) (af28bb@af2707@install-library 'af5063 '(rnrs sorting) '(6) '() '() '() '((vector-sort! . af4f7a) (vector-sort . af4f79) (list-sort . af4f78)) '() values values '#f '#f '#t '#f) (af28bb@af2707@install-library 'af5064 '(rnrs base) '(6) '() '() '() '((zero? . af4e31) (vector? . af4e30) (vector-set! . af4e2f) (vector-ref . af4e2e) (vector-map . af4e2d) (vector-length . af4e2c) (vector-for-each . af4e2b) (vector-fill! . af4e2a) (vector->list . af4e29) (vector . af4e28) (values . af4e27) (truncate . af4e26) (tan . af4e25) (symbol? . af4e24) (symbol=? . af4e23) (symbol->string . af4e22) (substring . af4e21) (string? . af4e20) (string>? . af4e1f) (string>=? . af4e1e) (string=? . af4e1d) (string<? . af4e1c) (string<=? . af4e1b) (string-ref . af4e1a) (string-length . af4e19) (string-for-each . af4e18) (string-copy . af4e17) (string-append . af4e16) (string->symbol . af4e15) (string->number . af4e14) (string->list . af4e13) (string . af4e12) (sqrt . af4e11) (sin . af4e10) (round . af4e0f) (reverse . af4e0e) (real? . af4e0d) (real-valued? . af4e0c) (real-part . af4e0b) (rationalize . af4e0a) (rational? . af4e09) (rational-valued? . af4e08) (procedure? . af4e07) (positive? . af4e06) (pair? . af4e05) (odd? . af4e04) (numerator . af4e03) (number? . af4e02) (number->string . af4e01) (null? . af4e00) (not . af4dff) (negative? . af4dfe) (nan? . af4dfd) (min . af4dfc) (max . af4dfb) (map . af4dfa) (make-vector . af4df9) (make-string . af4df8) (make-rectangular . af4df7) (make-polar . af4df6) (magnitude . af4df5) (log . af4df4) (list? . af4df3) (list-tail . af4df2) (list-ref . af4df1) (list->vector . af4df0) (list->string . af4def) (list . af4dee) (length . af4ded) (lcm . af4dec) (integer? . af4deb) (integer-valued? . af4dea) (integer->char . af4de9) (infinite? . af4de8) (inexact? . af4de7) (inexact . af4de6) (imag-part . af4de5) (gcd . af4de4) (for-each . af4de3) (floor . af4de2) (finite? . af4de1) (expt . af4de0) (exp . af4ddf) (exact? . af4dde) (exact-integer-sqrt . af4ddd) (exact . af4ddc) (even? . af4ddb) (error . af4dda) (eqv? . af4dd9) (equal? . af4dd8) (eq? . af4dd7) (dynamic-wind . af4dd6) (div0-and-mod0 . af4dd5) (mod0 . af4dd4) (div0 . af4dd3) (div-and-mod . af4dd2) (mod . af4dd1) (div . af4dd0) (denominator . af4dcf) (cos . af4dce) (cons . af4dcd) (complex? . af4dcc) (char? . af4dcb) (char>? . af4dca) (char>=? . af4dc9) (char=? . af4dc8) (char<? . af4dc7) (char<=? . af4dc6) (char->integer . af4dc5) (ceiling . af4dc4) (call-with-values . af4dc3) (call/cc . af4dc2) (call-with-current-continuation . af4dc1) (cddddr . af4dc0) (cdddar . af4dbf) (cddadr . af4dbe) (cddaar . af4dbd) (cdaddr . af4dbc) (cdadar . af4dbb) (cdaadr . af4dba) (cdaaar . af4db9) (cadddr . af4db8) (caddar . af4db7) (cadadr . af4db6) (cadaar . af4db5) (caaddr . af4db4) (caadar . af4db3) (caaadr . af4db2) (caaaar . af4db1) (cdddr . af4db0) (cddar . af4daf) (cdadr . af4dae) (cdaar . af4dad) (caddr . af4dac) (cadar . af4dab) (caadr . af4daa) (caaar . af4da9) (cddr . af4da8) (cdar . af4da7) (cadr . af4da6) (caar . af4da5) (cdr . af4da4) (car . af4da3) (boolean? . af4da2) (boolean=? . af4da1) (atan . af4da0) (assertion-violation . af4d9f) (asin . af4d9e) (apply . af4d9d) (append . af4d9c) (angle . af4d9b) (acos . af4d9a) (abs . af4d99) (/ . af4d98) (* . af4d97) (- . af4d96) (+ . af4d95) (>= . af4d94) (> . af4d93) (= . af4d92) (<= . af4d91) (< . af4d90) (unquote-splicing . af4d5d) (unquote . af4d5c) (_ . af4d5b) (else . af4d5a) (=> . af4d59) (... . af4d58) (assert . af4d57) (cond . af4d52) (let* . af4d51) (let*-values . af4d50) (let-values . af4d4f) (identifier-syntax . af4d4e) (quasiquote . af4d4b) (syntax-rules . af4d4a) (case . af4d45) (or . af4d41) (and . af4d40) (if . af4d3f) (let . af4d3e) (letrec* . af4d3d) (letrec . af4d3c) (lambda . af4d39) (quote . af4d36) (letrec-syntax . af4d34) (let-syntax . af4d33) (set! . af4d32) (begin . af4d30) (define-syntax . af4d2e) (define . af4d2d)) '() values values '#f '#f '#t '#f) (af28bb@af2707@install-library 'af5065 '(rnrs lists) '(6) '() '() '() '((remove . af4f07) (remv . af4f06) (remp . af4f05) (remq . af4f04) (partition . af4f03) (memv . af4f02) (memq . af4f01) (memp . af4f00) (member . af4eff) (exists . af4efe) (for-all . af4efd) (fold-right . af4efc) (fold-left . af4efb) (find . af4efa) (filter . af4ef9) (cons* . af4ef8) (assv . af4ef7) (assq . af4ef6) (assp . af4ef5) (assoc . af4ef4)) '() values values '#f '#f '#t '#f) (af28bb@af2707@install-library 'af5066 '(rnrs io simple) '(6) '() '() '() '((call-with-output-file . af4f62) (call-with-input-file . af4f61) (write-char . af4f60) (write . af4f5f) (with-output-to-file . af4f5e) (with-input-from-file . af4f5d) (read-char . af4f5c) (read . af4f5b) (peek-char . af4f5a) (open-output-file . af4f59) (open-input-file . af4f58) (newline . af4f57) (display . af4f56) (close-output-port . af4f55) (close-input-port . af4f54) (eof-object? . af4f53) (eof-object . af4f52) (current-error-port . af4f51) (current-output-port . af4f50) (current-input-port . af4f4f) (output-port? . af4f4e) (input-port? . af4f4d) (make-i/o-write-error . af49b5) (make-i/o-read-error . af49a0) (make-i/o-port-error . af4a56) (make-i/o-invalid-position-error . af49cc) (make-i/o-filename-error . af49e7) (make-i/o-file-protection-error . af4a00) (make-i/o-file-is-read-only-error . af4a15) (make-i/o-file-does-not-exist-error . af4a3f) (make-i/o-file-already-exists-error . af4a2a) (make-i/o-error . af498b) (i/o-write-error? . af49b7) (i/o-read-error? . af49a2) (i/o-port-error? . af4a5a) (i/o-invalid-position-error? . af49d0) (i/o-filename-error? . af49eb) (i/o-file-protection-error? . af4a02) (i/o-file-is-read-only-error? . af4a17) (i/o-file-does-not-exist-error? . af4a41) (i/o-file-already-exists-error? . af4a2c) (i/o-error? . af498d) (i/o-error-position . af49d2) (i/o-error-port . af4a5c) (i/o-error-filename . af49ed) (&i/o-port . af4d8a) (&i/o-file-does-not-exist . af4d89) (&i/o-file-already-exists . af4d88) (&i/o-file-is-read-only . af4d87) (&i/o-file-protection . af4d86) (&i/o-filename . af4d85) (&i/o-invalid-position . af4d84) (&i/o-write . af4d83) (&i/o-read . af4d82) (&i/o . af4d81)) '() values values '#f '#f '#t '#f) (af28bb@af2707@install-library 'af5067 '(rnrs bytevectors) '(6) '() '() '() '((make-bytevector . af4f23) (utf32->string . af4ed8) (utf16->string . af4ed7) (utf8->string . af4ed6) (uint-list->bytevector . af4ed5) (u8-list->bytevector . af4ed4) (string->utf8 . af4ed3) (string->utf32 . af4ed2) (string->utf16 . af4ed1) (sint-list->bytevector . af4ed0) (native-endianness . af4ecf) (bytevector? . af4ece) (bytevector=? . af4ecd) (bytevector-uint-set! . af4ecc) (bytevector-uint-ref . af4ecb) (bytevector-u8-set! . af4eca) (bytevector-u8-ref . af4ec9) (bytevector-u64-set! . af4ec8) (bytevector-u64-ref . af4ec7) (bytevector-u64-native-set! . af4ec6) (bytevector-u64-native-ref . af4ec5) (bytevector-u32-set! . af4ec4) (bytevector-u32-ref . af4ec3) (bytevector-u32-native-set! . af4ec2) (bytevector-u32-native-ref . af4ec1) (bytevector-u16-set! . af4ec0) (bytevector-u16-ref . af4ebf) (bytevector-u16-native-set! . af4ebe) (bytevector-u16-native-ref . af4ebd) (bytevector-sint-set! . af4ebc) (bytevector-sint-ref . af4ebb) (bytevector-s8-set! . af4eba) (bytevector-s8-ref . af4eb9) (bytevector-s64-set! . af4eb8) (bytevector-s64-ref . af4eb7) (bytevector-s64-native-set! . af4eb6) (bytevector-s64-native-ref . af4eb5) (bytevector-s32-set! . af4eb4) (bytevector-s32-ref . af4eb3) (bytevector-s32-native-set! . af4eb2) (bytevector-s32-native-ref . af4eb1) (bytevector-s16-set! . af4eb0) (bytevector-s16-ref . af4eaf) (bytevector-s16-native-set! . af4eae) (bytevector-s16-native-ref . af4ead) (bytevector-length . af4eac) (bytevector-ieee-single-ref . af4eab) (bytevector-ieee-single-set! . af4eaa) (bytevector-ieee-single-native-set! . af4ea9) (bytevector-ieee-single-native-ref . af4ea8) (bytevector-ieee-double-set! . af4ea7) (bytevector-ieee-double-ref . af4ea6) (bytevector-ieee-double-native-set! . af4ea5) (bytevector-ieee-double-native-ref . af4ea4) (bytevector-fill! . af4ea3) (bytevector-copy! . af4ea2) (bytevector-copy . af4ea1) (bytevector->uint-list . af4ea0) (bytevector->u8-list . af4e9f) (bytevector->sint-list . af4e9e) (endianness . af4d56)) '() values values '#f '#f '#t '#f) (af28bb@af2707@install-library 'af5068 '(rnrs unicode) '(6) '() '() '() '((string-upcase . af4faa) (string-titlecase . af4fa9) (string-normalize-nfkd . af4fa8) (string-normalize-nfkc . af4fa7) (string-normalize-nfd . af4fa6) (string-normalize-nfc . af4fa5) (string-foldcase . af4fa4) (string-downcase . af4fa3) (string-ci>? . af4fa2) (string-ci>=? . af4fa1) (string-ci=? . af4fa0) (string-ci<? . af4f9f) (string-ci<=? . af4f9e) (char-whitespace? . af4f9d) (char-upper-case? . af4f9c) (char-title-case? . af4f9b) (char-numeric? . af4f9a) (char-lower-case? . af4f99) (char-general-category . af4f98) (char-upcase . af4f97) (char-titlecase . af4f96) (char-foldcase . af4f95) (char-downcase . af4f94) (char-ci>? . af4f93) (char-ci>=? . af4f92) (char-ci=? . af4f91) (char-ci<? . af4f90) (char-ci<=? . af4f8f) (char-alphabetic? . af4f8e)) '() values values '#f '#f '#t '#f) (af28bb@af2707@install-library 'af5069 '(rnrs exceptions) '(6) '() '() '() '((with-exception-handler . af4eed) (raise-continuable . af4eec) (raise . af4eeb) (guard . af4d62) (else . af4d5a) (=> . af4d59)) '() values values '#f '#f '#t '#f) (af28bb@af2707@install-library 'af506a '(rnrs arithmetic bitwise) '(6) '() '() '() '((bitwise-rotate-bit-field . af4e42) (bitwise-reverse-bit-field . af4e41) (bitwise-length . af4e40) (bitwise-if . af4e3f) (bitwise-first-bit-set . af4e3e) (bitwise-copy-bit-field . af4e3d) (bitwise-copy-bit . af4e3c) (bitwise-bit-set? . af4e3b) (bitwise-bit-field . af4e3a) (bitwise-bit-count . af4e39) (bitwise-xor . af4e38) (bitwise-ior . af4e37) (bitwise-and . af4e36) (bitwise-not . af4e35) (bitwise-arithmetic-shift-right . af4e34) (bitwise-arithmetic-shift-left . af4e33) (bitwise-arithmetic-shift . af4e32)) '() values values '#f '#f '#t '#f) (af28bb@af2707@install-library 'af506b '(rnrs arithmetic fixnums) '(6) '() '() '() '((fxzero? . af4e6f) (fxxor . af4e6e) (fxrotate-bit-field . af4e6d) (fxreverse-bit-field . af4e6c) (fxpositive? . af4e6b) (fxodd? . af4e6a) (fxnot . af4e69) (fxnegative? . af4e68) (fxmod0 . af4e67) (fxmod . af4e66) (fxmin . af4e65) (fxmax . af4e64) (fxlength . af4e63) (fxior . af4e62) (fxif . af4e61) (fxfirst-bit-set . af4e60) (fxeven? . af4e5f) (fxdiv0-and-mod0 . af4e5e) (fxdiv0 . af4e5d) (fxdiv-and-mod . af4e5c) (fxdiv . af4e5b) (fxcopy-bit-field . af4e5a) (fxcopy-bit . af4e59) (fxbit-set? . af4e58) (fxbit-field . af4e57) (fxbit-count . af4e56) (fxarithmetic-shift-right . af4e55) (fxarithmetic-shift-left . af4e54) (fxarithmetic-shift . af4e53) (fxand . af4e52) (fx>? . af4e51) (fx>=? . af4e50) (fx=? . af4e4f) (fx<? . af4e4e) (fx<=? . af4e4d) (fx-/carry . af4e4c) (fx- . af4e4b) (fx+/carry . af4e4a) (fx+ . af4e49) (fx*/carry . af4e48) (fx* . af4e47) (greatest-fixnum . af4e46) (least-fixnum . af4e45) (fixnum-width . af4e44) (fixnum? . af4e43)) '() values values '#f '#f '#t '#f) (af28bb@af2707@install-library 'af506c '(rnrs arithmetic flonums) '(6) '() '() '() '((no-nans-violation? . af4ab6) (no-infinities-violation? . af4aa1) (make-no-nans-violation . af4ab4) (make-no-infinities-violation . af4a9f) (real->flonum . af4e9d) (flzero? . af4e9c) (fltruncate . af4e9b) (fltan . af4e9a) (flsqrt . af4e99) (flsin . af4e98) (flround . af4e97) (flpositive? . af4e96) (flonum? . af4e95) (flodd? . af4e94) (flnumerator . af4e93) (flnegative? . af4e92) (flnan? . af4e91) (flmod0 . af4e90) (flmod . af4e8f) (flmin . af4e8e) (flmax . af4e8d) (fllog . af4e8c) (flinteger? . af4e8b) (flinfinite? . af4e8a) (flfloor . af4e89) (flfinite? . af4e88) (flexpt . af4e87) (flexp . af4e86) (fleven? . af4e85) (fldiv0-and-mod0 . af4e84) (fldiv0 . af4e83) (fldiv-and-mod . af4e82) (fldiv . af4e81) (fldenominator . af4e80) (flcos . af4e7f) (flceiling . af4e7e) (flatan . af4e7d) (flasin . af4e7c) (flacos . af4e7b) (flabs . af4e7a) (fl>? . af4e79) (fl>=? . af4e78) (fl=? . af4e77) (fl<? . af4e76) (fl<=? . af4e75) (fl/ . af4e74) (fl- . af4e73) (fl+ . af4e72) (fl* . af4e71) (fixnum->flonum . af4e70) (&no-nans . af4d8e) (&no-infinities . af4d8d)) '() values values '#f '#f '#t '#f) (af28bb@af2707@install-library 'af506d '(rnrs hashtables) '(6) '() '() '() '((symbol-hash . af4f77) (string-ci-hash . af4f76) (string-hash . af4f75) (equal-hash . af4f74) (hashtable-equivalence-function . af4f73) (make-hashtable . af4f72) (hashtable-hash-function . af4f71) (make-eqv-hashtable . af4f70) (make-eq-hashtable . af4f6f) (hashtable? . af4f6e) (hashtable-update! . af4f6d) (hashtable-size . af4f6c) (hashtable-set! . af4f6b) (hashtable-ref . af4f6a) (hashtable-mutable? . af4f69) (hashtable-keys . af4f68) (hashtable-entries . af4f67) (hashtable-delete! . af4f66) (hashtable-copy . af4f65) (hashtable-contains? . af4f64) (hashtable-clear! . af4f63)) '() values values '#f '#f '#t '#f) (af28bb@af2707@install-library 'af506e '(rnrs io ports) '(6) '() '() '() '((eof-object? . af4f53) (eof-object . af4f52) (current-error-port . af4f51) (current-output-port . af4f50) (current-input-port . af4f4f) (output-port? . af4f4e) (input-port? . af4f4d) (utf-8-codec . af4f4c) (utf-16-codec . af4f4b) (transcoder-error-handling-mode . af4f4a) (transcoder-eol-style . af4f49) (transcoder-codec . af4f48) (transcoded-port . af4f47) (textual-port? . af4f46) (string->bytevector . af4f45) (standard-output-port . af4f44) (standard-input-port . af4f43) (standard-error-port . af4f42) (set-port-position! . af4f41) (put-u8 . af4f40) (put-string . af4f3f) (put-datum . af4f3e) (put-char . af4f3d) (put-bytevector . af4f3c) (port? . af4f3b) (port-transcoder . af4f3a) (port-position . af4f39) (port-has-set-port-position!? . af4f38) (port-has-port-position? . af4f37) (port-eof? . af4f36) (output-port-buffer-mode . af4f35) (open-string-output-port . af4f34) (open-string-input-port . af4f33) (open-file-output-port . af4f32) (open-file-input/output-port . af4f31) (open-file-input-port . af4f30) (open-bytevector-output-port . af4f2f) (open-bytevector-input-port . af4f2e) (native-transcoder . af4f2d) (native-eol-style . af4f2c) (make-transcoder . af4f2b) (latin-1-codec . af4f2a) (make-i/o-write-error . af49b5) (make-i/o-read-error . af49a0) (make-i/o-port-error . af4a56) (make-i/o-invalid-position-error . af49cc) (make-i/o-filename-error . af49e7) (make-i/o-file-protection-error . af4a00) (make-i/o-file-is-read-only-error . af4a15) (make-i/o-file-does-not-exist-error . af4a3f) (make-i/o-file-already-exists-error . af4a2a) (make-i/o-error . af498b) (make-i/o-encoding-error . af4a86) (make-i/o-decoding-error . af4a6f) (make-custom-textual-output-port . af4f29) (make-custom-textual-input/output-port . af4f28) (make-custom-textual-input-port . af4f27) (make-custom-binary-output-port . af4f26) (make-custom-binary-input/output-port . af4f25) (make-custom-binary-input-port . af4f24) (lookahead-u8 . af4f22) (lookahead-char . af4f21) (i/o-write-error? . af49b7) (i/o-read-error? . af49a2) (i/o-port-error? . af4a5a) (i/o-invalid-position-error? . af49d0) (i/o-filename-error? . af49eb) (i/o-file-protection-error? . af4a02) (i/o-file-is-read-only-error? . af4a17) (i/o-file-does-not-exist-error? . af4a41) (i/o-file-already-exists-error? . af4a2c) (i/o-error? . af498d) (i/o-error-position . af49d2) (i/o-error-port . af4a5c) (i/o-error-filename . af49ed) (i/o-encoding-error? . af4a8a) (i/o-encoding-error-char . af4a8c) (i/o-decoding-error? . af4a71) (get-u8 . af4f20) (get-string-n! . af4f1f) (get-string-n . af4f1e) (get-string-all . af4f1d) (get-line . af4f1c) (get-datum . af4f1b) (get-char . af4f1a) (get-bytevector-some . af4f19) (get-bytevector-n! . af4f18) (get-bytevector-n . af4f17) (get-bytevector-all . af4f16) (flush-output-port . af4f15) (close-port . af4f14) (call-with-string-output-port . af4ef3) (call-with-port . af4ef2) (call-with-bytevector-output-port . af4ef1) (bytevector->string . af4ef0) (buffer-mode? . af4eef) (binary-port? . af4eee) (&i/o-encoding . af4d8c) (&i/o-decoding . af4d8b) (&i/o-port . af4d8a) (&i/o-file-does-not-exist . af4d89) (&i/o-file-already-exists . af4d88) (&i/o-file-is-read-only . af4d87) (&i/o-file-protection . af4d86) (&i/o-filename . af4d85) (&i/o-invalid-position . af4d84) (&i/o-write . af4d83) (&i/o-read . af4d82) (&i/o . af4d81) (error-handling-mode . af4d66) (file-options . af4d65) (buffer-mode . af4d64) (eol-style . af4d63)) '() values values '#f '#f '#t '#f) (af28bb@af2707@install-library 'af506f '(rnrs enums) '(6) '() '() '() '((make-enumeration . af4eea) (enum-set=? . af4ee9) (enum-set-universe . af4ee8) (enum-set-union . af4ee7) (enum-set-subset? . af4ee6) (enum-set-projection . af4ee5) (enum-set-member? . af4ee4) (enum-set-intersection . af4ee3) (enum-set-indexer . af4ee2) (enum-set-difference . af4ee1) (enum-set-constructor . af4ee0) (enum-set-complement . af4edf) (enum-set->list . af4ede) (define-enumeration . af4d71)) '() values values '#f '#f '#t '#f) (af28bb@af2707@install-library 'af5070 '(rnrs conditions) '(6) '() '() '() '((who-condition? . af4901) (warning? . af4879) (violation? . af48b8) (undefined-violation? . af4978) (syntax-violation? . af495f) (syntax-violation-subform . af4963) (syntax-violation-form . af4961) (syntax-violation . af2d8d) (simple-conditions . af4edd) (serious-condition? . af488e) (non-continuable-violation? . af4918) (message-condition? . af4862) (make-who-condition . af48fd) (make-warning . af4877) (make-violation . af48b6) (make-undefined-violation . af4976) (make-syntax-violation . af4959) (make-serious-condition . af488c) (make-non-continuable-violation . af4916) (make-message-condition . af485e) (make-lexical-violation . af4940) (make-irritants-condition . af48e2) (make-implementation-restriction-violation . af492b) (make-error . af48a1) (make-assertion-violation . af48cb) (lexical-violation? . af4942) (irritants-condition? . af48e6) (implementation-restriction-violation? . af492d) (error? . af48a3) (condition-who . af4903) (condition-predicate . af4edc) (condition-message . af4864) (condition-irritants . af48e8) (condition-accessor . af4edb) (condition . af4eda) (assertion-violation? . af48cd) (condition? . af4ed9) (&undefined . af4d80) (&syntax . af4d7f) (&lexical . af4d7e) (&implementation-restriction . af4d7d) (&non-continuable . af4d7c) (&who . af4d7b) (&irritants . af4d7a) (&assertion . af4d79) (&violation . af4d78) (&error . af4d77) (&serious . af4d76) (&warning . af4d75) (&message . af4d74) (&condition . af4d73) (define-condition-type . af4d72)) '() values values '#f '#f '#t '#f) (af28bb@af2707@install-library 'af5071 '(rnrs records inspection) '(6) '() '() '() '((record? . af4f86) (record-type-uid . af4f85) (record-type-sealed? . af4f84) (record-type-parent . af4f83) (record-type-opaque? . af4f82) (record-type-name . af4f81) (record-type-generative? . af4f80) (record-type-field-names . af4f7f) (record-rtd . af4f7e) (record-field-mutable? . af4f7d)) '() values values '#f '#f '#t '#f) (af28bb@af2707@install-library 'af5072 '(rnrs records procedural) '(6) '() '() '() '((record-type-descriptor? . af4f8d) (record-predicate . af4f8c) (record-mutator . af4f8b) (record-constructor . af4f8a) (record-accessor . af4f89) (make-record-type-descriptor . af4f88) (make-record-constructor-descriptor . af4f87)) '() values values '#f '#f '#t '#f) (af28bb@af2707@install-library 'af5073 '(rnrs records syntactic) '(6) '() '() '() '((define-record-type . af4d70) (parent-rtd . af4d6f) (nongenerative . af4d6e) (opaque . af4d6d) (sealed . af4d6c) (protocol . af4d6b) (parent . af4d6a) (immutable . af4d69) (mutable . af4d68) (fields . af4d67) (record-constructor-descriptor . af4d47) (record-type-descriptor . af4d46)) '() values values '#f '#f '#t '#f) (af28bb@af2707@install-library 'af5074 '(psyntax system $all) '() '() '() '() '((&no-nans-rcd . af4aba) (&no-nans-rtd . af4ab8) (&no-infinities-rcd . af4aa5) (&no-infinities-rtd . af4aa3) (&i/o-encoding-rcd . af4a90) (&i/o-encoding-rtd . af4a8e) (&i/o-decoding-rcd . af4a75) (&i/o-decoding-rtd . af4a73) (&i/o-port-rcd . af4a60) (&i/o-port-rtd . af4a5e) (&i/o-file-does-not-exist-rcd . af4a45) (&i/o-file-does-not-exist-rtd . af4a43) (&i/o-file-already-exists-rcd . af4a30) (&i/o-file-already-exists-rtd . af4a2e) (&i/o-file-is-read-only-rcd . af4a1b) (&i/o-file-is-read-only-rtd . af4a19) (&i/o-file-protection-rcd . af4a06) (&i/o-file-protection-rtd . af4a04) (&i/o-filename-rcd . af49f1) (&i/o-filename-rtd . af49ef) (&i/o-invalid-position-rcd . af49d6) (&i/o-invalid-position-rtd . af49d4) (&i/o-write-rcd . af49bb) (&i/o-write-rtd . af49b9) (&i/o-read-rcd . af49a6) (&i/o-read-rtd . af49a4) (&i/o-rcd . af4991) (&i/o-rtd . af498f) (&undefined-rcd . af497c) (&undefined-rtd . af497a) (&syntax-rcd . af4967) (&syntax-rtd . af4965) (&lexical-rcd . af4946) (&lexical-rtd . af4944) (&implementation-restriction-rcd . af4931) (&implementation-restriction-rtd . af492f) (&non-continuable-rcd . af491c) (&non-continuable-rtd . af491a) (&who-rcd . af4907) (&who-rtd . af4905) (&irritants-rcd . af48ec) (&irritants-rtd . af48ea) (&assertion-rcd . af48d1) (&assertion-rtd . af48cf) (&violation-rcd . af48bc) (&violation-rtd . af48ba) (&error-rcd . af48a7) (&error-rtd . af48a5) (&serious-rcd . af4892) (&serious-rtd . af4890) (&warning-rcd . af487d) (&warning-rtd . af487b) (&message-rcd . af4868) (&message-rtd . af4866) (&condition-rcd . af4809) (&condition-rtd . af4807) (syntax-error . af2d89) (syntax-dispatch . af2cad) (pretty-print . af5054) (eval-core . af5053) (set-symbol-value! . af5052) (symbol-value . af5051) (gensym . af5050) (void . af504f) (load . af4bcb) (interaction-environment . af2d9b) (char-ready? . af504e) (regexp? . af504d) (read-line . af504c) (gensym-prefix-set! . af504b) (ungensym . af504a) (alist->eq-hash-table . af5049) (assoc-ref . af5048) (print . af5047) (format . af5046) (host-os . af5045) (library-path . af26e6) (standard-library-path . af5044) (file-newer? . af5043) (stat-mtime . af5042) (write-to-file . af5041) (file->list . af5040) (file->string . af503f) (digit->integer . af503e) (call-with-string-input-port . af503d) (call-with-string-io . af503c) (string-split . af503b) (bytevector-for-each . af503a) (string->regexp . af5039) (rxmatch . af5038) (regexp-replace-all . af5037) (hashtable-for-each . af5036) (mosh-cache-dir . af24d1) (call-process . af5035) (local-tz-offset . af5034) (microseconds . af5033) (directory-list . af5032) (set-current-directory! . af5031) (expand-path . af5030) (current-directory . af502f) (%spawn . af502e) (%waitpid . af502d) (simple-struct-name . af502c) (simple-struct-set! . af502b) (simple-struct-ref . af502a) (make-simple-struct . af5029) (simple-struct? . af5028) (pointer-ref-c-int64 . af5027) (pointer-ref-c-int32 . af5026) (pointer-ref-c-int16 . af5025) (pointer-ref-c-int8 . af5024) (pointer-ref-c-uint64 . af5023) (pointer-ref-c-uint32 . af5022) (pointer-ref-c-uint16 . af5021) (pointer-ref-c-uint8 . af5020) (pointer-set-c-uint64! . af501f) (pointer-set-c-uint32! . af501e) (pointer-set-c-uint16! . af501d) (pointer-set-c-uint8! . af501c) (pointer-set-c-int64! . af501b) (pointer-set-c-int32! . af501a) (pointer-set-c-int16! . af5019) (pointer-set-c-int8! . af5018) (pointer-set-c-pointer! . af5017) (pointer-set-c-double! . af5016) (pointer-set-c-float! . af5015) (pointer-set-c-long-long! . af5014) (pointer-set-c-long! . af5013) (pointer-set-c-int! . af5012) (pointer-set-c-short! . af5011) (pointer-set-c-char! . af5010) (pointer-ref-c-pointer . af500f) (pointer-ref-c-double . af500e) (pointer-ref-c-float . af500d) (pointer-ref-c-unsigned-long-long . af500c) (pointer-ref-c-signed-long-long . af500b) (pointer-ref-c-unsigned-long . af500a) (pointer-ref-c-signed-long . af5009) (pointer-ref-c-unsigned-int . af5008) (pointer-ref-c-signed-int . af5007) (pointer-ref-c-unsigned-short . af5006) (pointer-ref-c-signed-short . af5005) (pointer-ref-c-unsigned-char . af5004) (pointer-ref-c-signed-char . af5003) (pointer->integer . af5002) (integer->pointer . af5001) (pointer? . af5000) (shared-errno . af4fff) (%ffi-free . af4ffe) (%ffi-malloc . af4ffd) (%ffi-supported? . af4ffc) (%ffi-pointer->string . af4ffb) (%ffi-call->string-or-zero . af4ffa) (%ffi-call->double . af4ff9) (%ffi-call->void* . af4ff8) (%ffi-call->void . af4ff7) (%ffi-call->char . af4ff6) (%ffi-call->int . af4ff5) (%ffi-lookup . af4ff4) (%ffi-open . af4ff3) (%fork . af4ff2) (%pipe . af4ff1) (p . af4ff0) (open-output-string . af4fef) (get-output-string . af4fee) (file-stat-ctime . af4fed) (file-stat-atime . af4fec) (file-stat-mtime . af4feb) (file-size-in-bytes . af4fea) (file-writable? . af4fe9) (file-executable? . af4fe8) (file-readable? . af4fe7) (file-regular? . af4fe6) (file-symbolic-link? . af4fe5) (file-directory? . af4fe4) (create-symbolic-link . af4fe3) (rename-file . af4fe2) (delete-directory . af4fe1) (create-directory . af4fe0) (create-mosh-cache-dir . af4fdf) (get-environment-variables . af4fde) (current-exception-handler . af4fdd) (get-environment-variable . af4fdc) (join-wraps . af4fdb) (id->real-label . af4fda) (same-marks? . af4fd9) (same-marks*? . af4fd8) (get-timeofday . af4fd7) (get-command-line . af4fd6) (sys-display . af4fd5) (whereis . af4fd4) (register . af4fd3) (vm-join! . af4fd2) (vm-set-value! . af4fd1) (vm? . af4fd0) (main-vm? . af4fcf) (vm-eval . af4fce) (vm-self . af4fcd) (vm-start! . af4fcc) (make-vm . af4fcb) (mutex-try-lock! . af4fca) (mutex-unlock! . af4fc9) (mutex-lock! . af4fc8) (mutex? . af4fc7) (make-mutex . af4fc6) (condition-variable-notify-all! . af4fc5) (condition-variable-notify! . af4fc4) (condition-variable-wait! . af4fc3) (make-condition-variable . af4fc2) (mosh-executable-path . af4fc1) (make-file-options . af4fc0) (source-info . af4fbf) (make-compiler-instruction . af4fbe) (make-instruction . af4fbd) (set-source-info! . af4fbc) (bignum? . af4fbb) (fast-equal? . af4fba) (fasl-read . af4fb9) (fasl-write . af4fb8) (time-usage . af4fb7) (os-constant . af4fb6) (disasm . af4fb5) (make-parameter . af24cf) (socket-port . af4fb4) (socket-shutdown . af4fb3) (socket-close . af4fb2) (socket-send . af4fb1) (socket-recv! . af4fb0) (socket-recv . af4faf) (make-server-socket . af4fae) (make-client-socket . af4fad) (socket-accept . af4fac) (socket? . af4fab) (string-upcase . af4faa) (string-titlecase . af4fa9) (string-normalize-nfkd . af4fa8) (string-normalize-nfkc . af4fa7) (string-normalize-nfd . af4fa6) (string-normalize-nfc . af4fa5) (string-foldcase . af4fa4) (string-downcase . af4fa3) (string-ci>? . af4fa2) (string-ci>=? . af4fa1) (string-ci=? . af4fa0) (string-ci<? . af4f9f) (string-ci<=? . af4f9e) (char-whitespace? . af4f9d) (char-upper-case? . af4f9c) (char-title-case? . af4f9b) (char-numeric? . af4f9a) (char-lower-case? . af4f99) (char-general-category . af4f98) (char-upcase . af4f97) (char-titlecase . af4f96) (char-foldcase . af4f95) (char-downcase . af4f94) (char-ci>? . af4f93) (char-ci>=? . af4f92) (char-ci=? . af4f91) (char-ci<? . af4f90) (char-ci<=? . af4f8f) (char-alphabetic? . af4f8e) (make-variable-transformer . af2ad8) (identifier? . af2d8f) (generate-temporaries . af2d7b) (free-identifier=? . af2d7d) (syntax->datum . af2d93) (datum->syntax . af2d91) (bound-identifier=? . af2d7f) (record-type-descriptor? . af4f8d) (record-predicate . af4f8c) (record-mutator . af4f8b) (record-constructor . af4f8a) (record-accessor . af4f89) (make-record-type-descriptor . af4f88) (make-record-constructor-descriptor . af4f87) (record? . af4f86) (record-type-uid . af4f85) (record-type-sealed? . af4f84) (record-type-parent . af4f83) (record-type-opaque? . af4f82) (record-type-name . af4f81) (record-type-generative? . af4f80) (record-type-field-names . af4f7f) (record-rtd . af4f7e) (record-field-mutable? . af4f7d) (delete-file . af4f7c) (file-exists? . af4f7b) (vector-sort! . af4f7a) (vector-sort . af4f79) (list-sort . af4f78) (symbol-hash . af4f77) (string-ci-hash . af4f76) (string-hash . af4f75) (equal-hash . af4f74) (hashtable-equivalence-function . af4f73) (make-hashtable . af4f72) (hashtable-hash-function . af4f71) (make-eqv-hashtable . af4f70) (make-eq-hashtable . af4f6f) (hashtable? . af4f6e) (hashtable-update! . af4f6d) (hashtable-size . af4f6c) (hashtable-set! . af4f6b) (hashtable-ref . af4f6a) (hashtable-mutable? . af4f69) (hashtable-keys . af4f68) (hashtable-entries . af4f67) (hashtable-delete! . af4f66) (hashtable-copy . af4f65) (hashtable-contains? . af4f64) (hashtable-clear! . af4f63) (call-with-output-file . af4f62) (call-with-input-file . af4f61) (write-char . af4f60) (write . af4f5f) (with-output-to-file . af4f5e) (with-input-from-file . af4f5d) (read-char . af4f5c) (read . af4f5b) (peek-char . af4f5a) (open-output-file . af4f59) (open-input-file . af4f58) (newline . af4f57) (display . af4f56) (close-output-port . af4f55) (close-input-port . af4f54) (eof-object? . af4f53) (eof-object . af4f52) (current-error-port . af4f51) (current-output-port . af4f50) (current-input-port . af4f4f) (output-port? . af4f4e) (input-port? . af4f4d) (utf-8-codec . af4f4c) (utf-16-codec . af4f4b) (transcoder-error-handling-mode . af4f4a) (transcoder-eol-style . af4f49) (transcoder-codec . af4f48) (transcoded-port . af4f47) (textual-port? . af4f46) (string->bytevector . af4f45) (standard-output-port . af4f44) (standard-input-port . af4f43) (standard-error-port . af4f42) (set-port-position! . af4f41) (put-u8 . af4f40) (put-string . af4f3f) (put-datum . af4f3e) (put-char . af4f3d) (put-bytevector . af4f3c) (port? . af4f3b) (port-transcoder . af4f3a) (port-position . af4f39) (port-has-set-port-position!? . af4f38) (port-has-port-position? . af4f37) (port-eof? . af4f36) (output-port-buffer-mode . af4f35) (open-string-output-port . af4f34) (open-string-input-port . af4f33) (open-file-output-port . af4f32) (open-file-input/output-port . af4f31) (open-file-input-port . af4f30) (open-bytevector-output-port . af4f2f) (open-bytevector-input-port . af4f2e) (native-transcoder . af4f2d) (native-eol-style . af4f2c) (make-transcoder . af4f2b) (latin-1-codec . af4f2a) (make-i/o-write-error . af49b5) (make-i/o-read-error . af49a0) (make-i/o-port-error . af4a56) (make-i/o-invalid-position-error . af49cc) (make-i/o-filename-error . af49e7) (make-i/o-file-protection-error . af4a00) (make-i/o-file-is-read-only-error . af4a15) (make-i/o-file-does-not-exist-error . af4a3f) (make-i/o-file-already-exists-error . af4a2a) (make-i/o-error . af498b) (make-i/o-encoding-error . af4a86) (make-i/o-decoding-error . af4a6f) (make-custom-textual-output-port . af4f29) (make-custom-textual-input/output-port . af4f28) (make-custom-textual-input-port . af4f27) (make-custom-binary-output-port . af4f26) (make-custom-binary-input/output-port . af4f25) (make-custom-binary-input-port . af4f24) (make-bytevector . af4f23) (lookahead-u8 . af4f22) (lookahead-char . af4f21) (i/o-write-error? . af49b7) (i/o-read-error? . af49a2) (i/o-port-error? . af4a5a) (i/o-invalid-position-error? . af49d0) (i/o-filename-error? . af49eb) (i/o-file-protection-error? . af4a02) (i/o-file-is-read-only-error? . af4a17) (i/o-file-does-not-exist-error? . af4a41) (i/o-file-already-exists-error? . af4a2c) (i/o-error? . af498d) (i/o-error-position . af49d2) (i/o-error-port . af4a5c) (i/o-error-filename . af49ed) (i/o-encoding-error? . af4a8a) (i/o-encoding-error-char . af4a8c) (i/o-decoding-error? . af4a71) (get-u8 . af4f20) (get-string-n! . af4f1f) (get-string-n . af4f1e) (get-string-all . af4f1d) (get-line . af4f1c) (get-datum . af4f1b) (get-char . af4f1a) (get-bytevector-some . af4f19) (get-bytevector-n! . af4f18) (get-bytevector-n . af4f17) (get-bytevector-all . af4f16) (flush-output-port . af4f15) (close-port . af4f14) (scheme-report-environment . af2d69) (quotient . af4f13) (null-environment . af2d67) (remainder . af4f12) (modulo . af4f11) (inexact->exact . af4f10) (force . af4f0f) (exact->inexact . af4f0e) (make-promise . af4f0d) (exit . af4f0c) (command-line . af4bc5) (string-fill! . af4f0b) (string-set! . af4f0a) (set-cdr! . af4f09) (set-car! . af4f08) (remove . af4f07) (remv . af4f06) (remp . af4f05) (remq . af4f04) (partition . af4f03) (memv . af4f02) (memq . af4f01) (memp . af4f00) (member . af4eff) (exists . af4efe) (for-all . af4efd) (fold-right . af4efc) (fold-left . af4efb) (find . af4efa) (filter . af4ef9) (cons* . af4ef8) (assv . af4ef7) (assq . af4ef6) (assp . af4ef5) (assoc . af4ef4) (call-with-string-output-port . af4ef3) (call-with-port . af4ef2) (call-with-bytevector-output-port . af4ef1) (bytevector->string . af4ef0) (buffer-mode? . af4eef) (binary-port? . af4eee) (with-exception-handler . af4eed) (raise-continuable . af4eec) (raise . af4eeb) (eval . af2d6d) (environment . af2d65) (make-enumeration . af4eea) (enum-set=? . af4ee9) (enum-set-universe . af4ee8) (enum-set-union . af4ee7) (enum-set-subset? . af4ee6) (enum-set-projection . af4ee5) (enum-set-member? . af4ee4) (enum-set-intersection . af4ee3) (enum-set-indexer . af4ee2) (enum-set-difference . af4ee1) (enum-set-constructor . af4ee0) (enum-set-complement . af4edf) (enum-set->list . af4ede) (who-condition? . af4901) (warning? . af4879) (violation? . af48b8) (undefined-violation? . af4978) (syntax-violation? . af495f) (syntax-violation-subform . af4963) (syntax-violation-form . af4961) (syntax-violation . af2d8d) (simple-conditions . af4edd) (serious-condition? . af488e) (non-continuable-violation? . af4918) (message-condition? . af4862) (make-who-condition . af48fd) (make-warning . af4877) (make-violation . af48b6) (make-undefined-violation . af4976) (make-syntax-violation . af4959) (make-serious-condition . af488c) (make-non-continuable-violation . af4916) (make-message-condition . af485e) (make-lexical-violation . af4940) (make-irritants-condition . af48e2) (make-implementation-restriction-violation . af492b) (make-error . af48a1) (make-assertion-violation . af48cb) (lexical-violation? . af4942) (irritants-condition? . af48e6) (implementation-restriction-violation? . af492d) (error? . af48a3) (condition-who . af4903) (condition-predicate . af4edc) (condition-message . af4864) (condition-irritants . af48e8) (condition-accessor . af4edb) (condition . af4eda) (assertion-violation? . af48cd) (condition? . af4ed9) (utf32->string . af4ed8) (utf16->string . af4ed7) (utf8->string . af4ed6) (uint-list->bytevector . af4ed5) (u8-list->bytevector . af4ed4) (string->utf8 . af4ed3) (string->utf32 . af4ed2) (string->utf16 . af4ed1) (sint-list->bytevector . af4ed0) (native-endianness . af4ecf) (bytevector? . af4ece) (bytevector=? . af4ecd) (bytevector-uint-set! . af4ecc) (bytevector-uint-ref . af4ecb) (bytevector-u8-set! . af4eca) (bytevector-u8-ref . af4ec9) (bytevector-u64-set! . af4ec8) (bytevector-u64-ref . af4ec7) (bytevector-u64-native-set! . af4ec6) (bytevector-u64-native-ref . af4ec5) (bytevector-u32-set! . af4ec4) (bytevector-u32-ref . af4ec3) (bytevector-u32-native-set! . af4ec2) (bytevector-u32-native-ref . af4ec1) (bytevector-u16-set! . af4ec0) (bytevector-u16-ref . af4ebf) (bytevector-u16-native-set! . af4ebe) (bytevector-u16-native-ref . af4ebd) (bytevector-sint-set! . af4ebc) (bytevector-sint-ref . af4ebb) (bytevector-s8-set! . af4eba) (bytevector-s8-ref . af4eb9) (bytevector-s64-set! . af4eb8) (bytevector-s64-ref . af4eb7) (bytevector-s64-native-set! . af4eb6) (bytevector-s64-native-ref . af4eb5) (bytevector-s32-set! . af4eb4) (bytevector-s32-ref . af4eb3) (bytevector-s32-native-set! . af4eb2) (bytevector-s32-native-ref . af4eb1) (bytevector-s16-set! . af4eb0) (bytevector-s16-ref . af4eaf) (bytevector-s16-native-set! . af4eae) (bytevector-s16-native-ref . af4ead) (bytevector-length . af4eac) (bytevector-ieee-single-ref . af4eab) (bytevector-ieee-single-set! . af4eaa) (bytevector-ieee-single-native-set! . af4ea9) (bytevector-ieee-single-native-ref . af4ea8) (bytevector-ieee-double-set! . af4ea7) (bytevector-ieee-double-ref . af4ea6) (bytevector-ieee-double-native-set! . af4ea5) (bytevector-ieee-double-native-ref . af4ea4) (bytevector-fill! . af4ea3) (bytevector-copy! . af4ea2) (bytevector-copy . af4ea1) (bytevector->uint-list . af4ea0) (bytevector->u8-list . af4e9f) (bytevector->sint-list . af4e9e) (no-nans-violation? . af4ab6) (no-infinities-violation? . af4aa1) (make-no-nans-violation . af4ab4) (make-no-infinities-violation . af4a9f) (real->flonum . af4e9d) (flzero? . af4e9c) (fltruncate . af4e9b) (fltan . af4e9a) (flsqrt . af4e99) (flsin . af4e98) (flround . af4e97) (flpositive? . af4e96) (flonum? . af4e95) (flodd? . af4e94) (flnumerator . af4e93) (flnegative? . af4e92) (flnan? . af4e91) (flmod0 . af4e90) (flmod . af4e8f) (flmin . af4e8e) (flmax . af4e8d) (fllog . af4e8c) (flinteger? . af4e8b) (flinfinite? . af4e8a) (flfloor . af4e89) (flfinite? . af4e88) (flexpt . af4e87) (flexp . af4e86) (fleven? . af4e85) (fldiv0-and-mod0 . af4e84) (fldiv0 . af4e83) (fldiv-and-mod . af4e82) (fldiv . af4e81) (fldenominator . af4e80) (flcos . af4e7f) (flceiling . af4e7e) (flatan . af4e7d) (flasin . af4e7c) (flacos . af4e7b) (flabs . af4e7a) (fl>? . af4e79) (fl>=? . af4e78) (fl=? . af4e77) (fl<? . af4e76) (fl<=? . af4e75) (fl/ . af4e74) (fl- . af4e73) (fl+ . af4e72) (fl* . af4e71) (fixnum->flonum . af4e70) (fxzero? . af4e6f) (fxxor . af4e6e) (fxrotate-bit-field . af4e6d) (fxreverse-bit-field . af4e6c) (fxpositive? . af4e6b) (fxodd? . af4e6a) (fxnot . af4e69) (fxnegative? . af4e68) (fxmod0 . af4e67) (fxmod . af4e66) (fxmin . af4e65) (fxmax . af4e64) (fxlength . af4e63) (fxior . af4e62) (fxif . af4e61) (fxfirst-bit-set . af4e60) (fxeven? . af4e5f) (fxdiv0-and-mod0 . af4e5e) (fxdiv0 . af4e5d) (fxdiv-and-mod . af4e5c) (fxdiv . af4e5b) (fxcopy-bit-field . af4e5a) (fxcopy-bit . af4e59) (fxbit-set? . af4e58) (fxbit-field . af4e57) (fxbit-count . af4e56) (fxarithmetic-shift-right . af4e55) (fxarithmetic-shift-left . af4e54) (fxarithmetic-shift . af4e53) (fxand . af4e52) (fx>? . af4e51) (fx>=? . af4e50) (fx=? . af4e4f) (fx<? . af4e4e) (fx<=? . af4e4d) (fx-/carry . af4e4c) (fx- . af4e4b) (fx+/carry . af4e4a) (fx+ . af4e49) (fx*/carry . af4e48) (fx* . af4e47) (greatest-fixnum . af4e46) (least-fixnum . af4e45) (fixnum-width . af4e44) (fixnum? . af4e43) (bitwise-rotate-bit-field . af4e42) (bitwise-reverse-bit-field . af4e41) (bitwise-length . af4e40) (bitwise-if . af4e3f) (bitwise-first-bit-set . af4e3e) (bitwise-copy-bit-field . af4e3d) (bitwise-copy-bit . af4e3c) (bitwise-bit-set? . af4e3b) (bitwise-bit-field . af4e3a) (bitwise-bit-count . af4e39) (bitwise-xor . af4e38) (bitwise-ior . af4e37) (bitwise-and . af4e36) (bitwise-not . af4e35) (bitwise-arithmetic-shift-right . af4e34) (bitwise-arithmetic-shift-left . af4e33) (bitwise-arithmetic-shift . af4e32) (zero? . af4e31) (vector? . af4e30) (vector-set! . af4e2f) (vector-ref . af4e2e) (vector-map . af4e2d) (vector-length . af4e2c) (vector-for-each . af4e2b) (vector-fill! . af4e2a) (vector->list . af4e29) (vector . af4e28) (values . af4e27) (truncate . af4e26) (tan . af4e25) (symbol? . af4e24) (symbol=? . af4e23) (symbol->string . af4e22) (substring . af4e21) (string? . af4e20) (string>? . af4e1f) (string>=? . af4e1e) (string=? . af4e1d) (string<? . af4e1c) (string<=? . af4e1b) (string-ref . af4e1a) (string-length . af4e19) (string-for-each . af4e18) (string-copy . af4e17) (string-append . af4e16) (string->symbol . af4e15) (string->number . af4e14) (string->list . af4e13) (string . af4e12) (sqrt . af4e11) (sin . af4e10) (round . af4e0f) (reverse . af4e0e) (real? . af4e0d) (real-valued? . af4e0c) (real-part . af4e0b) (rationalize . af4e0a) (rational? . af4e09) (rational-valued? . af4e08) (procedure? . af4e07) (positive? . af4e06) (pair? . af4e05) (odd? . af4e04) (numerator . af4e03) (number? . af4e02) (number->string . af4e01) (null? . af4e00) (not . af4dff) (negative? . af4dfe) (nan? . af4dfd) (min . af4dfc) (max . af4dfb) (map . af4dfa) (make-vector . af4df9) (make-string . af4df8) (make-rectangular . af4df7) (make-polar . af4df6) (magnitude . af4df5) (log . af4df4) (list? . af4df3) (list-tail . af4df2) (list-ref . af4df1) (list->vector . af4df0) (list->string . af4def) (list . af4dee) (length . af4ded) (lcm . af4dec) (integer? . af4deb) (integer-valued? . af4dea) (integer->char . af4de9) (infinite? . af4de8) (inexact? . af4de7) (inexact . af4de6) (imag-part . af4de5) (gcd . af4de4) (for-each . af4de3) (floor . af4de2) (finite? . af4de1) (expt . af4de0) (exp . af4ddf) (exact? . af4dde) (exact-integer-sqrt . af4ddd) (exact . af4ddc) (even? . af4ddb) (error . af4dda) (eqv? . af4dd9) (equal? . af4dd8) (eq? . af4dd7) (dynamic-wind . af4dd6) (div0-and-mod0 . af4dd5) (mod0 . af4dd4) (div0 . af4dd3) (div-and-mod . af4dd2) (mod . af4dd1) (div . af4dd0) (denominator . af4dcf) (cos . af4dce) (cons . af4dcd) (complex? . af4dcc) (char? . af4dcb) (char>? . af4dca) (char>=? . af4dc9) (char=? . af4dc8) (char<? . af4dc7) (char<=? . af4dc6) (char->integer . af4dc5) (ceiling . af4dc4) (call-with-values . af4dc3) (call/cc . af4dc2) (call-with-current-continuation . af4dc1) (cddddr . af4dc0) (cdddar . af4dbf) (cddadr . af4dbe) (cddaar . af4dbd) (cdaddr . af4dbc) (cdadar . af4dbb) (cdaadr . af4dba) (cdaaar . af4db9) (cadddr . af4db8) (caddar . af4db7) (cadadr . af4db6) (cadaar . af4db5) (caaddr . af4db4) (caadar . af4db3) (caaadr . af4db2) (caaaar . af4db1) (cdddr . af4db0) (cddar . af4daf) (cdadr . af4dae) (cdaar . af4dad) (caddr . af4dac) (cadar . af4dab) (caadr . af4daa) (caaar . af4da9) (cddr . af4da8) (cdar . af4da7) (cadr . af4da6) (caar . af4da5) (cdr . af4da4) (car . af4da3) (boolean? . af4da2) (boolean=? . af4da1) (atan . af4da0) (assertion-violation . af4d9f) (assertion-error . af2d87) (asin . af4d9e) (apply . af4d9d) (append . af4d9c) (angle . af4d9b) (acos . af4d9a) (abs . af4d99) (/ . af4d98) (* . af4d97) (- . af4d96) (+ . af4d95) (>= . af4d94) (> . af4d93) (= . af4d92) (<= . af4d91) (< . af4d90) (library . af4d8f) (&no-nans . af4d8e) (&no-infinities . af4d8d) (&i/o-encoding . af4d8c) (&i/o-decoding . af4d8b) (&i/o-port . af4d8a) (&i/o-file-does-not-exist . af4d89) (&i/o-file-already-exists . af4d88) (&i/o-file-is-read-only . af4d87) (&i/o-file-protection . af4d86) (&i/o-filename . af4d85) (&i/o-invalid-position . af4d84) (&i/o-write . af4d83) (&i/o-read . af4d82) (&i/o . af4d81) (&undefined . af4d80) (&syntax . af4d7f) (&lexical . af4d7e) (&implementation-restriction . af4d7d) (&non-continuable . af4d7c) (&who . af4d7b) (&irritants . af4d7a) (&assertion . af4d79) (&violation . af4d78) (&error . af4d77) (&serious . af4d76) (&warning . af4d75) (&message . af4d74) (&condition . af4d73) (define-condition-type . af4d72) (define-enumeration . af4d71) (define-record-type . af4d70) (parent-rtd . af4d6f) (nongenerative . af4d6e) (opaque . af4d6d) (sealed . af4d6c) (protocol . af4d6b) (parent . af4d6a) (immutable . af4d69) (mutable . af4d68) (fields . af4d67) (error-handling-mode . af4d66) (file-options . af4d65) (buffer-mode . af4d64) (eol-style . af4d63) (guard . af4d62) (trace-define . af4d61) (trace-lambda . af4d60) (unsyntax-splicing . af4d5f) (unsyntax . af4d5e) (unquote-splicing . af4d5d) (unquote . af4d5c) (_ . af4d5b) (else . af4d5a) (=> . af4d59) (... . af4d58) (assert . af4d57) (endianness . af4d56) (delay . af4d55) (time . af4d54) (do . af4d53) (cond . af4d52) (let* . af4d51) (let*-values . af4d50) (let-values . af4d4f) (identifier-syntax . af4d4e) (with-syntax . af4d4d) (quasisyntax . af4d4c) (quasiquote . af4d4b) (syntax-rules . af4d4a) (include . af4d49) (define-struct . af4d48) (record-constructor-descriptor . af4d47) (record-type-descriptor . af4d46) (case . af4d45) (parameterize . af4d44) (unless . af4d43) (when . af4d42) (or . af4d41) (and . af4d40) (if . af4d3f) (let . af4d3e) (letrec* . af4d3d) (letrec . af4d3c) (type-descriptor . af4d3b) (case-lambda . af4d3a) (lambda . af4d39) (syntax . af4d38) (syntax-case . af4d37) (quote . af4d36) (foreign-call . af4d35) (letrec-syntax . af4d34) (let-syntax . af4d33) (set! . af4d32) (import . af4d31) (begin . af4d30) (module . af4d2f) (define-syntax . af4d2e) (define . af4d2d)) '((af4aba core-prim . &no-nans-rcd) (af4ab8 core-prim . &no-nans-rtd) (af4aa5 core-prim . &no-infinities-rcd) (af4aa3 core-prim . &no-infinities-rtd) (af4a90 core-prim . &i/o-encoding-rcd) (af4a8e core-prim . &i/o-encoding-rtd) (af4a75 core-prim . &i/o-decoding-rcd) (af4a73 core-prim . &i/o-decoding-rtd) (af4a60 core-prim . &i/o-port-rcd) (af4a5e core-prim . &i/o-port-rtd) (af4a45 core-prim . &i/o-file-does-not-exist-rcd) (af4a43 core-prim . &i/o-file-does-not-exist-rtd) (af4a30 core-prim . &i/o-file-already-exists-rcd) (af4a2e core-prim . &i/o-file-already-exists-rtd) (af4a1b core-prim . &i/o-file-is-read-only-rcd) (af4a19 core-prim . &i/o-file-is-read-only-rtd) (af4a06 core-prim . &i/o-file-protection-rcd) (af4a04 core-prim . &i/o-file-protection-rtd) (af49f1 core-prim . &i/o-filename-rcd) (af49ef core-prim . &i/o-filename-rtd) (af49d6 core-prim . &i/o-invalid-position-rcd) (af49d4 core-prim . &i/o-invalid-position-rtd) (af49bb core-prim . &i/o-write-rcd) (af49b9 core-prim . &i/o-write-rtd) (af49a6 core-prim . &i/o-read-rcd) (af49a4 core-prim . &i/o-read-rtd) (af4991 core-prim . &i/o-rcd) (af498f core-prim . &i/o-rtd) (af497c core-prim . &undefined-rcd) (af497a core-prim . &undefined-rtd) (af4967 core-prim . &syntax-rcd) (af4965 core-prim . &syntax-rtd) (af4946 core-prim . &lexical-rcd) (af4944 core-prim . &lexical-rtd) (af4931 core-prim . &implementation-restriction-rcd) (af492f core-prim . &implementation-restriction-rtd) (af491c core-prim . &non-continuable-rcd) (af491a core-prim . &non-continuable-rtd) (af4907 core-prim . &who-rcd) (af4905 core-prim . &who-rtd) (af48ec core-prim . &irritants-rcd) (af48ea core-prim . &irritants-rtd) (af48d1 core-prim . &assertion-rcd) (af48cf core-prim . &assertion-rtd) (af48bc core-prim . &violation-rcd) (af48ba core-prim . &violation-rtd) (af48a7 core-prim . &error-rcd) (af48a5 core-prim . &error-rtd) (af4892 core-prim . &serious-rcd) (af4890 core-prim . &serious-rtd) (af487d core-prim . &warning-rcd) (af487b core-prim . &warning-rtd) (af4868 core-prim . &message-rcd) (af4866 core-prim . &message-rtd) (af4809 core-prim . &condition-rcd) (af4807 core-prim . &condition-rtd) (af2d89 core-prim . syntax-error) (af2cad core-prim . syntax-dispatch) (af5054 core-prim . pretty-print) (af5053 core-prim . eval-core) (af5052 core-prim . set-symbol-value!) (af5051 core-prim . symbol-value) (af5050 core-prim . gensym) (af504f core-prim . void) (af4bcb core-prim . load) (af2d9b core-prim . interaction-environment) (af504e core-prim . char-ready?) (af504d core-prim . regexp?) (af504c core-prim . read-line) (af504b core-prim . gensym-prefix-set!) (af504a core-prim . ungensym) (af5049 core-prim . alist->eq-hash-table) (af5048 core-prim . assoc-ref) (af5047 core-prim . print) (af5046 core-prim . format) (af5045 core-prim . host-os) (af26e6 core-prim . library-path) (af5044 core-prim . standard-library-path) (af5043 core-prim . file-newer?) (af5042 core-prim . stat-mtime) (af5041 core-prim . write-to-file) (af5040 core-prim . file->list) (af503f core-prim . file->string) (af503e core-prim . digit->integer) (af503d core-prim . call-with-string-input-port) (af503c core-prim . call-with-string-io) (af503b core-prim . string-split) (af503a core-prim . bytevector-for-each) (af5039 core-prim . string->regexp) (af5038 core-prim . rxmatch) (af5037 core-prim . regexp-replace-all) (af5036 core-prim . hashtable-for-each) (af24d1 core-prim . mosh-cache-dir) (af5035 core-prim . call-process) (af5034 core-prim . local-tz-offset) (af5033 core-prim . microseconds) (af5032 core-prim . directory-list) (af5031 core-prim . set-current-directory!) (af5030 core-prim . expand-path) (af502f core-prim . current-directory) (af502e core-prim . %spawn) (af502d core-prim . %waitpid) (af502c core-prim . simple-struct-name) (af502b core-prim . simple-struct-set!) (af502a core-prim . simple-struct-ref) (af5029 core-prim . make-simple-struct) (af5028 core-prim . simple-struct?) (af5027 core-prim . pointer-ref-c-int64) (af5026 core-prim . pointer-ref-c-int32) (af5025 core-prim . pointer-ref-c-int16) (af5024 core-prim . pointer-ref-c-int8) (af5023 core-prim . pointer-ref-c-uint64) (af5022 core-prim . pointer-ref-c-uint32) (af5021 core-prim . pointer-ref-c-uint16) (af5020 core-prim . pointer-ref-c-uint8) (af501f core-prim . pointer-set-c-uint64!) (af501e core-prim . pointer-set-c-uint32!) (af501d core-prim . pointer-set-c-uint16!) (af501c core-prim . pointer-set-c-uint8!) (af501b core-prim . pointer-set-c-int64!) (af501a core-prim . pointer-set-c-int32!) (af5019 core-prim . pointer-set-c-int16!) (af5018 core-prim . pointer-set-c-int8!) (af5017 core-prim . pointer-set-c-pointer!) (af5016 core-prim . pointer-set-c-double!) (af5015 core-prim . pointer-set-c-float!) (af5014 core-prim . pointer-set-c-long-long!) (af5013 core-prim . pointer-set-c-long!) (af5012 core-prim . pointer-set-c-int!) (af5011 core-prim . pointer-set-c-short!) (af5010 core-prim . pointer-set-c-char!) (af500f core-prim . pointer-ref-c-pointer) (af500e core-prim . pointer-ref-c-double) (af500d core-prim . pointer-ref-c-float) (af500c core-prim . pointer-ref-c-unsigned-long-long) (af500b core-prim . pointer-ref-c-signed-long-long) (af500a core-prim . pointer-ref-c-unsigned-long) (af5009 core-prim . pointer-ref-c-signed-long) (af5008 core-prim . pointer-ref-c-unsigned-int) (af5007 core-prim . pointer-ref-c-signed-int) (af5006 core-prim . pointer-ref-c-unsigned-short) (af5005 core-prim . pointer-ref-c-signed-short) (af5004 core-prim . pointer-ref-c-unsigned-char) (af5003 core-prim . pointer-ref-c-signed-char) (af5002 core-prim . pointer->integer) (af5001 core-prim . integer->pointer) (af5000 core-prim . pointer?) (af4fff core-prim . shared-errno) (af4ffe core-prim . %ffi-free) (af4ffd core-prim . %ffi-malloc) (af4ffc core-prim . %ffi-supported?) (af4ffb core-prim . %ffi-pointer->string) (af4ffa core-prim . %ffi-call->string-or-zero) (af4ff9 core-prim . %ffi-call->double) (af4ff8 core-prim . %ffi-call->void*) (af4ff7 core-prim . %ffi-call->void) (af4ff6 core-prim . %ffi-call->char) (af4ff5 core-prim . %ffi-call->int) (af4ff4 core-prim . %ffi-lookup) (af4ff3 core-prim . %ffi-open) (af4ff2 core-prim . %fork) (af4ff1 core-prim . %pipe) (af4ff0 core-prim . p) (af4fef core-prim . open-output-string) (af4fee core-prim . get-output-string) (af4fed core-prim . file-stat-ctime) (af4fec core-prim . file-stat-atime) (af4feb core-prim . file-stat-mtime) (af4fea core-prim . file-size-in-bytes) (af4fe9 core-prim . file-writable?) (af4fe8 core-prim . file-executable?) (af4fe7 core-prim . file-readable?) (af4fe6 core-prim . file-regular?) (af4fe5 core-prim . file-symbolic-link?) (af4fe4 core-prim . file-directory?) (af4fe3 core-prim . create-symbolic-link) (af4fe2 core-prim . rename-file) (af4fe1 core-prim . delete-directory) (af4fe0 core-prim . create-directory) (af4fdf core-prim . create-mosh-cache-dir) (af4fde core-prim . get-environment-variables) (af4fdd core-prim . current-exception-handler) (af4fdc core-prim . get-environment-variable) (af4fdb core-prim . join-wraps) (af4fda core-prim . id->real-label) (af4fd9 core-prim . same-marks?) (af4fd8 core-prim . same-marks*?) (af4fd7 core-prim . get-timeofday) (af4fd6 core-prim . get-command-line) (af4fd5 core-prim . sys-display) (af4fd4 core-prim . whereis) (af4fd3 core-prim . register) (af4fd2 core-prim . vm-join!) (af4fd1 core-prim . vm-set-value!) (af4fd0 core-prim . vm?) (af4fcf core-prim . main-vm?) (af4fce core-prim . vm-eval) (af4fcd core-prim . vm-self) (af4fcc core-prim . vm-start!) (af4fcb core-prim . make-vm) (af4fca core-prim . mutex-try-lock!) (af4fc9 core-prim . mutex-unlock!) (af4fc8 core-prim . mutex-lock!) (af4fc7 core-prim . mutex?) (af4fc6 core-prim . make-mutex) (af4fc5 core-prim . condition-variable-notify-all!) (af4fc4 core-prim . condition-variable-notify!) (af4fc3 core-prim . condition-variable-wait!) (af4fc2 core-prim . make-condition-variable) (af4fc1 core-prim . mosh-executable-path) (af4fc0 core-prim . make-file-options) (af4fbf core-prim . source-info) (af4fbe core-prim . make-compiler-instruction) (af4fbd core-prim . make-instruction) (af4fbc core-prim . set-source-info!) (af4fbb core-prim . bignum?) (af4fba core-prim . fast-equal?) (af4fb9 core-prim . fasl-read) (af4fb8 core-prim . fasl-write) (af4fb7 core-prim . time-usage) (af4fb6 core-prim . os-constant) (af4fb5 core-prim . disasm) (af24cf core-prim . make-parameter) (af4fb4 core-prim . socket-port) (af4fb3 core-prim . socket-shutdown) (af4fb2 core-prim . socket-close) (af4fb1 core-prim . socket-send) (af4fb0 core-prim . socket-recv!) (af4faf core-prim . socket-recv) (af4fae core-prim . make-server-socket) (af4fad core-prim . make-client-socket) (af4fac core-prim . socket-accept) (af4fab core-prim . socket?) (af4faa core-prim . string-upcase) (af4fa9 core-prim . string-titlecase) (af4fa8 core-prim . string-normalize-nfkd) (af4fa7 core-prim . string-normalize-nfkc) (af4fa6 core-prim . string-normalize-nfd) (af4fa5 core-prim . string-normalize-nfc) (af4fa4 core-prim . string-foldcase) (af4fa3 core-prim . string-downcase) (af4fa2 core-prim . string-ci>?) (af4fa1 core-prim . string-ci>=?) (af4fa0 core-prim . string-ci=?) (af4f9f core-prim . string-ci<?) (af4f9e core-prim . string-ci<=?) (af4f9d core-prim . char-whitespace?) (af4f9c core-prim . char-upper-case?) (af4f9b core-prim . char-title-case?) (af4f9a core-prim . char-numeric?) (af4f99 core-prim . char-lower-case?) (af4f98 core-prim . char-general-category) (af4f97 core-prim . char-upcase) (af4f96 core-prim . char-titlecase) (af4f95 core-prim . char-foldcase) (af4f94 core-prim . char-downcase) (af4f93 core-prim . char-ci>?) (af4f92 core-prim . char-ci>=?) (af4f91 core-prim . char-ci=?) (af4f90 core-prim . char-ci<?) (af4f8f core-prim . char-ci<=?) (af4f8e core-prim . char-alphabetic?) (af2ad8 core-prim . make-variable-transformer) (af2d8f core-prim . identifier?) (af2d7b core-prim . generate-temporaries) (af2d7d core-prim . free-identifier=?) (af2d93 core-prim . syntax->datum) (af2d91 core-prim . datum->syntax) (af2d7f core-prim . bound-identifier=?) (af4f8d core-prim . record-type-descriptor?) (af4f8c core-prim . record-predicate) (af4f8b core-prim . record-mutator) (af4f8a core-prim . record-constructor) (af4f89 core-prim . record-accessor) (af4f88 core-prim . make-record-type-descriptor) (af4f87 core-prim . make-record-constructor-descriptor) (af4f86 core-prim . record?) (af4f85 core-prim . record-type-uid) (af4f84 core-prim . record-type-sealed?) (af4f83 core-prim . record-type-parent) (af4f82 core-prim . record-type-opaque?) (af4f81 core-prim . record-type-name) (af4f80 core-prim . record-type-generative?) (af4f7f core-prim . record-type-field-names) (af4f7e core-prim . record-rtd) (af4f7d core-prim . record-field-mutable?) (af4f7c core-prim . delete-file) (af4f7b core-prim . file-exists?) (af4f7a core-prim . vector-sort!) (af4f79 core-prim . vector-sort) (af4f78 core-prim . list-sort) (af4f77 core-prim . symbol-hash) (af4f76 core-prim . string-ci-hash) (af4f75 core-prim . string-hash) (af4f74 core-prim . equal-hash) (af4f73 core-prim . hashtable-equivalence-function) (af4f72 core-prim . make-hashtable) (af4f71 core-prim . hashtable-hash-function) (af4f70 core-prim . make-eqv-hashtable) (af4f6f core-prim . make-eq-hashtable) (af4f6e core-prim . hashtable?) (af4f6d core-prim . hashtable-update!) (af4f6c core-prim . hashtable-size) (af4f6b core-prim . hashtable-set!) (af4f6a core-prim . hashtable-ref) (af4f69 core-prim . hashtable-mutable?) (af4f68 core-prim . hashtable-keys) (af4f67 core-prim . hashtable-entries) (af4f66 core-prim . hashtable-delete!) (af4f65 core-prim . hashtable-copy) (af4f64 core-prim . hashtable-contains?) (af4f63 core-prim . hashtable-clear!) (af4f62 core-prim . call-with-output-file) (af4f61 core-prim . call-with-input-file) (af4f60 core-prim . write-char) (af4f5f core-prim . write) (af4f5e core-prim . with-output-to-file) (af4f5d core-prim . with-input-from-file) (af4f5c core-prim . read-char) (af4f5b core-prim . read) (af4f5a core-prim . peek-char) (af4f59 core-prim . open-output-file) (af4f58 core-prim . open-input-file) (af4f57 core-prim . newline) (af4f56 core-prim . display) (af4f55 core-prim . close-output-port) (af4f54 core-prim . close-input-port) (af4f53 core-prim . eof-object?) (af4f52 core-prim . eof-object) (af4f51 core-prim . current-error-port) (af4f50 core-prim . current-output-port) (af4f4f core-prim . current-input-port) (af4f4e core-prim . output-port?) (af4f4d core-prim . input-port?) (af4f4c core-prim . utf-8-codec) (af4f4b core-prim . utf-16-codec) (af4f4a core-prim . transcoder-error-handling-mode) (af4f49 core-prim . transcoder-eol-style) (af4f48 core-prim . transcoder-codec) (af4f47 core-prim . transcoded-port) (af4f46 core-prim . textual-port?) (af4f45 core-prim . string->bytevector) (af4f44 core-prim . standard-output-port) (af4f43 core-prim . standard-input-port) (af4f42 core-prim . standard-error-port) (af4f41 core-prim . set-port-position!) (af4f40 core-prim . put-u8) (af4f3f core-prim . put-string) (af4f3e core-prim . put-datum) (af4f3d core-prim . put-char) (af4f3c core-prim . put-bytevector) (af4f3b core-prim . port?) (af4f3a core-prim . port-transcoder) (af4f39 core-prim . port-position) (af4f38 core-prim . port-has-set-port-position!?) (af4f37 core-prim . port-has-port-position?) (af4f36 core-prim . port-eof?) (af4f35 core-prim . output-port-buffer-mode) (af4f34 core-prim . open-string-output-port) (af4f33 core-prim . open-string-input-port) (af4f32 core-prim . open-file-output-port) (af4f31 core-prim . open-file-input/output-port) (af4f30 core-prim . open-file-input-port) (af4f2f core-prim . open-bytevector-output-port) (af4f2e core-prim . open-bytevector-input-port) (af4f2d core-prim . native-transcoder) (af4f2c core-prim . native-eol-style) (af4f2b core-prim . make-transcoder) (af4f2a core-prim . latin-1-codec) (af49b5 core-prim . make-i/o-write-error) (af49a0 core-prim . make-i/o-read-error) (af4a56 core-prim . make-i/o-port-error) (af49cc core-prim . make-i/o-invalid-position-error) (af49e7 core-prim . make-i/o-filename-error) (af4a00 core-prim . make-i/o-file-protection-error) (af4a15 core-prim . make-i/o-file-is-read-only-error) (af4a3f core-prim . make-i/o-file-does-not-exist-error) (af4a2a core-prim . make-i/o-file-already-exists-error) (af498b core-prim . make-i/o-error) (af4a86 core-prim . make-i/o-encoding-error) (af4a6f core-prim . make-i/o-decoding-error) (af4f29 core-prim . make-custom-textual-output-port) (af4f28 core-prim . make-custom-textual-input/output-port) (af4f27 core-prim . make-custom-textual-input-port) (af4f26 core-prim . make-custom-binary-output-port) (af4f25 core-prim . make-custom-binary-input/output-port) (af4f24 core-prim . make-custom-binary-input-port) (af4f23 core-prim . make-bytevector) (af4f22 core-prim . lookahead-u8) (af4f21 core-prim . lookahead-char) (af49b7 core-prim . i/o-write-error?) (af49a2 core-prim . i/o-read-error?) (af4a5a core-prim . i/o-port-error?) (af49d0 core-prim . i/o-invalid-position-error?) (af49eb core-prim . i/o-filename-error?) (af4a02 core-prim . i/o-file-protection-error?) (af4a17 core-prim . i/o-file-is-read-only-error?) (af4a41 core-prim . i/o-file-does-not-exist-error?) (af4a2c core-prim . i/o-file-already-exists-error?) (af498d core-prim . i/o-error?) (af49d2 core-prim . i/o-error-position) (af4a5c core-prim . i/o-error-port) (af49ed core-prim . i/o-error-filename) (af4a8a core-prim . i/o-encoding-error?) (af4a8c core-prim . i/o-encoding-error-char) (af4a71 core-prim . i/o-decoding-error?) (af4f20 core-prim . get-u8) (af4f1f core-prim . get-string-n!) (af4f1e core-prim . get-string-n) (af4f1d core-prim . get-string-all) (af4f1c core-prim . get-line) (af4f1b core-prim . get-datum) (af4f1a core-prim . get-char) (af4f19 core-prim . get-bytevector-some) (af4f18 core-prim . get-bytevector-n!) (af4f17 core-prim . get-bytevector-n) (af4f16 core-prim . get-bytevector-all) (af4f15 core-prim . flush-output-port) (af4f14 core-prim . close-port) (af2d69 core-prim . scheme-report-environment) (af4f13 core-prim . quotient) (af2d67 core-prim . null-environment) (af4f12 core-prim . remainder) (af4f11 core-prim . modulo) (af4f10 core-prim . inexact->exact) (af4f0f core-prim . force) (af4f0e core-prim . exact->inexact) (af4f0d core-prim . make-promise) (af4f0c core-prim . exit) (af4bc5 core-prim . command-line) (af4f0b core-prim . string-fill!) (af4f0a core-prim . string-set!) (af4f09 core-prim . set-cdr!) (af4f08 core-prim . set-car!) (af4f07 core-prim . remove) (af4f06 core-prim . remv) (af4f05 core-prim . remp) (af4f04 core-prim . remq) (af4f03 core-prim . partition) (af4f02 core-prim . memv) (af4f01 core-prim . memq) (af4f00 core-prim . memp) (af4eff core-prim . member) (af4efe core-prim . exists) (af4efd core-prim . for-all) (af4efc core-prim . fold-right) (af4efb core-prim . fold-left) (af4efa core-prim . find) (af4ef9 core-prim . filter) (af4ef8 core-prim . cons*) (af4ef7 core-prim . assv) (af4ef6 core-prim . assq) (af4ef5 core-prim . assp) (af4ef4 core-prim . assoc) (af4ef3 core-prim . call-with-string-output-port) (af4ef2 core-prim . call-with-port) (af4ef1 core-prim . call-with-bytevector-output-port) (af4ef0 core-prim . bytevector->string) (af4eef core-prim . buffer-mode?) (af4eee core-prim . binary-port?) (af4eed core-prim . with-exception-handler) (af4eec core-prim . raise-continuable) (af4eeb core-prim . raise) (af2d6d core-prim . eval) (af2d65 core-prim . environment) (af4eea core-prim . make-enumeration) (af4ee9 core-prim . enum-set=?) (af4ee8 core-prim . enum-set-universe) (af4ee7 core-prim . enum-set-union) (af4ee6 core-prim . enum-set-subset?) (af4ee5 core-prim . enum-set-projection) (af4ee4 core-prim . enum-set-member?) (af4ee3 core-prim . enum-set-intersection) (af4ee2 core-prim . enum-set-indexer) (af4ee1 core-prim . enum-set-difference) (af4ee0 core-prim . enum-set-constructor) (af4edf core-prim . enum-set-complement) (af4ede core-prim . enum-set->list) (af4901 core-prim . who-condition?) (af4879 core-prim . warning?) (af48b8 core-prim . violation?) (af4978 core-prim . undefined-violation?) (af495f core-prim . syntax-violation?) (af4963 core-prim . syntax-violation-subform) (af4961 core-prim . syntax-violation-form) (af2d8d core-prim . syntax-violation) (af4edd core-prim . simple-conditions) (af488e core-prim . serious-condition?) (af4918 core-prim . non-continuable-violation?) (af4862 core-prim . message-condition?) (af48fd core-prim . make-who-condition) (af4877 core-prim . make-warning) (af48b6 core-prim . make-violation) (af4976 core-prim . make-undefined-violation) (af4959 core-prim . make-syntax-violation) (af488c core-prim . make-serious-condition) (af4916 core-prim . make-non-continuable-violation) (af485e core-prim . make-message-condition) (af4940 core-prim . make-lexical-violation) (af48e2 core-prim . make-irritants-condition) (af492b core-prim . make-implementation-restriction-violation) (af48a1 core-prim . make-error) (af48cb core-prim . make-assertion-violation) (af4942 core-prim . lexical-violation?) (af48e6 core-prim . irritants-condition?) (af492d core-prim . implementation-restriction-violation?) (af48a3 core-prim . error?) (af4903 core-prim . condition-who) (af4edc core-prim . condition-predicate) (af4864 core-prim . condition-message) (af48e8 core-prim . condition-irritants) (af4edb core-prim . condition-accessor) (af4eda core-prim . condition) (af48cd core-prim . assertion-violation?) (af4ed9 core-prim . condition?) (af4ed8 core-prim . utf32->string) (af4ed7 core-prim . utf16->string) (af4ed6 core-prim . utf8->string) (af4ed5 core-prim . uint-list->bytevector) (af4ed4 core-prim . u8-list->bytevector) (af4ed3 core-prim . string->utf8) (af4ed2 core-prim . string->utf32) (af4ed1 core-prim . string->utf16) (af4ed0 core-prim . sint-list->bytevector) (af4ecf core-prim . native-endianness) (af4ece core-prim . bytevector?) (af4ecd core-prim . bytevector=?) (af4ecc core-prim . bytevector-uint-set!) (af4ecb core-prim . bytevector-uint-ref) (af4eca core-prim . bytevector-u8-set!) (af4ec9 core-prim . bytevector-u8-ref) (af4ec8 core-prim . bytevector-u64-set!) (af4ec7 core-prim . bytevector-u64-ref) (af4ec6 core-prim . bytevector-u64-native-set!) (af4ec5 core-prim . bytevector-u64-native-ref) (af4ec4 core-prim . bytevector-u32-set!) (af4ec3 core-prim . bytevector-u32-ref) (af4ec2 core-prim . bytevector-u32-native-set!) (af4ec1 core-prim . bytevector-u32-native-ref) (af4ec0 core-prim . bytevector-u16-set!) (af4ebf core-prim . bytevector-u16-ref) (af4ebe core-prim . bytevector-u16-native-set!) (af4ebd core-prim . bytevector-u16-native-ref) (af4ebc core-prim . bytevector-sint-set!) (af4ebb core-prim . bytevector-sint-ref) (af4eba core-prim . bytevector-s8-set!) (af4eb9 core-prim . bytevector-s8-ref) (af4eb8 core-prim . bytevector-s64-set!) (af4eb7 core-prim . bytevector-s64-ref) (af4eb6 core-prim . bytevector-s64-native-set!) (af4eb5 core-prim . bytevector-s64-native-ref) (af4eb4 core-prim . bytevector-s32-set!) (af4eb3 core-prim . bytevector-s32-ref) (af4eb2 core-prim . bytevector-s32-native-set!) (af4eb1 core-prim . bytevector-s32-native-ref) (af4eb0 core-prim . bytevector-s16-set!) (af4eaf core-prim . bytevector-s16-ref) (af4eae core-prim . bytevector-s16-native-set!) (af4ead core-prim . bytevector-s16-native-ref) (af4eac core-prim . bytevector-length) (af4eab core-prim . bytevector-ieee-single-ref) (af4eaa core-prim . bytevector-ieee-single-set!) (af4ea9 core-prim . bytevector-ieee-single-native-set!) (af4ea8 core-prim . bytevector-ieee-single-native-ref) (af4ea7 core-prim . bytevector-ieee-double-set!) (af4ea6 core-prim . bytevector-ieee-double-ref) (af4ea5 core-prim . bytevector-ieee-double-native-set!) (af4ea4 core-prim . bytevector-ieee-double-native-ref) (af4ea3 core-prim . bytevector-fill!) (af4ea2 core-prim . bytevector-copy!) (af4ea1 core-prim . bytevector-copy) (af4ea0 core-prim . bytevector->uint-list) (af4e9f core-prim . bytevector->u8-list) (af4e9e core-prim . bytevector->sint-list) (af4ab6 core-prim . no-nans-violation?) (af4aa1 core-prim . no-infinities-violation?) (af4ab4 core-prim . make-no-nans-violation) (af4a9f core-prim . make-no-infinities-violation) (af4e9d core-prim . real->flonum) (af4e9c core-prim . flzero?) (af4e9b core-prim . fltruncate) (af4e9a core-prim . fltan) (af4e99 core-prim . flsqrt) (af4e98 core-prim . flsin) (af4e97 core-prim . flround) (af4e96 core-prim . flpositive?) (af4e95 core-prim . flonum?) (af4e94 core-prim . flodd?) (af4e93 core-prim . flnumerator) (af4e92 core-prim . flnegative?) (af4e91 core-prim . flnan?) (af4e90 core-prim . flmod0) (af4e8f core-prim . flmod) (af4e8e core-prim . flmin) (af4e8d core-prim . flmax) (af4e8c core-prim . fllog) (af4e8b core-prim . flinteger?) (af4e8a core-prim . flinfinite?) (af4e89 core-prim . flfloor) (af4e88 core-prim . flfinite?) (af4e87 core-prim . flexpt) (af4e86 core-prim . flexp) (af4e85 core-prim . fleven?) (af4e84 core-prim . fldiv0-and-mod0) (af4e83 core-prim . fldiv0) (af4e82 core-prim . fldiv-and-mod) (af4e81 core-prim . fldiv) (af4e80 core-prim . fldenominator) (af4e7f core-prim . flcos) (af4e7e core-prim . flceiling) (af4e7d core-prim . flatan) (af4e7c core-prim . flasin) (af4e7b core-prim . flacos) (af4e7a core-prim . flabs) (af4e79 core-prim . fl>?) (af4e78 core-prim . fl>=?) (af4e77 core-prim . fl=?) (af4e76 core-prim . fl<?) (af4e75 core-prim . fl<=?) (af4e74 core-prim . fl/) (af4e73 core-prim . fl-) (af4e72 core-prim . fl+) (af4e71 core-prim . fl*) (af4e70 core-prim . fixnum->flonum) (af4e6f core-prim . fxzero?) (af4e6e core-prim . fxxor) (af4e6d core-prim . fxrotate-bit-field) (af4e6c core-prim . fxreverse-bit-field) (af4e6b core-prim . fxpositive?) (af4e6a core-prim . fxodd?) (af4e69 core-prim . fxnot) (af4e68 core-prim . fxnegative?) (af4e67 core-prim . fxmod0) (af4e66 core-prim . fxmod) (af4e65 core-prim . fxmin) (af4e64 core-prim . fxmax) (af4e63 core-prim . fxlength) (af4e62 core-prim . fxior) (af4e61 core-prim . fxif) (af4e60 core-prim . fxfirst-bit-set) (af4e5f core-prim . fxeven?) (af4e5e core-prim . fxdiv0-and-mod0) (af4e5d core-prim . fxdiv0) (af4e5c core-prim . fxdiv-and-mod) (af4e5b core-prim . fxdiv) (af4e5a core-prim . fxcopy-bit-field) (af4e59 core-prim . fxcopy-bit) (af4e58 core-prim . fxbit-set?) (af4e57 core-prim . fxbit-field) (af4e56 core-prim . fxbit-count) (af4e55 core-prim . fxarithmetic-shift-right) (af4e54 core-prim . fxarithmetic-shift-left) (af4e53 core-prim . fxarithmetic-shift) (af4e52 core-prim . fxand) (af4e51 core-prim . fx>?) (af4e50 core-prim . fx>=?) (af4e4f core-prim . fx=?) (af4e4e core-prim . fx<?) (af4e4d core-prim . fx<=?) (af4e4c core-prim . fx-/carry) (af4e4b core-prim . fx-) (af4e4a core-prim . fx+/carry) (af4e49 core-prim . fx+) (af4e48 core-prim . fx*/carry) (af4e47 core-prim . fx*) (af4e46 core-prim . greatest-fixnum) (af4e45 core-prim . least-fixnum) (af4e44 core-prim . fixnum-width) (af4e43 core-prim . fixnum?) (af4e42 core-prim . bitwise-rotate-bit-field) (af4e41 core-prim . bitwise-reverse-bit-field) (af4e40 core-prim . bitwise-length) (af4e3f core-prim . bitwise-if) (af4e3e core-prim . bitwise-first-bit-set) (af4e3d core-prim . bitwise-copy-bit-field) (af4e3c core-prim . bitwise-copy-bit) (af4e3b core-prim . bitwise-bit-set?) (af4e3a core-prim . bitwise-bit-field) (af4e39 core-prim . bitwise-bit-count) (af4e38 core-prim . bitwise-xor) (af4e37 core-prim . bitwise-ior) (af4e36 core-prim . bitwise-and) (af4e35 core-prim . bitwise-not) (af4e34 core-prim . bitwise-arithmetic-shift-right) (af4e33 core-prim . bitwise-arithmetic-shift-left) (af4e32 core-prim . bitwise-arithmetic-shift) (af4e31 core-prim . zero?) (af4e30 core-prim . vector?) (af4e2f core-prim . vector-set!) (af4e2e core-prim . vector-ref) (af4e2d core-prim . vector-map) (af4e2c core-prim . vector-length) (af4e2b core-prim . vector-for-each) (af4e2a core-prim . vector-fill!) (af4e29 core-prim . vector->list) (af4e28 core-prim . vector) (af4e27 core-prim . values) (af4e26 core-prim . truncate) (af4e25 core-prim . tan) (af4e24 core-prim . symbol?) (af4e23 core-prim . symbol=?) (af4e22 core-prim . symbol->string) (af4e21 core-prim . substring) (af4e20 core-prim . string?) (af4e1f core-prim . string>?) (af4e1e core-prim . string>=?) (af4e1d core-prim . string=?) (af4e1c core-prim . string<?) (af4e1b core-prim . string<=?) (af4e1a core-prim . string-ref) (af4e19 core-prim . string-length) (af4e18 core-prim . string-for-each) (af4e17 core-prim . string-copy) (af4e16 core-prim . string-append) (af4e15 core-prim . string->symbol) (af4e14 core-prim . string->number) (af4e13 core-prim . string->list) (af4e12 core-prim . string) (af4e11 core-prim . sqrt) (af4e10 core-prim . sin) (af4e0f core-prim . round) (af4e0e core-prim . reverse) (af4e0d core-prim . real?) (af4e0c core-prim . real-valued?) (af4e0b core-prim . real-part) (af4e0a core-prim . rationalize) (af4e09 core-prim . rational?) (af4e08 core-prim . rational-valued?) (af4e07 core-prim . procedure?) (af4e06 core-prim . positive?) (af4e05 core-prim . pair?) (af4e04 core-prim . odd?) (af4e03 core-prim . numerator) (af4e02 core-prim . number?) (af4e01 core-prim . number->string) (af4e00 core-prim . null?) (af4dff core-prim . not) (af4dfe core-prim . negative?) (af4dfd core-prim . nan?) (af4dfc core-prim . min) (af4dfb core-prim . max) (af4dfa core-prim . map) (af4df9 core-prim . make-vector) (af4df8 core-prim . make-string) (af4df7 core-prim . make-rectangular) (af4df6 core-prim . make-polar) (af4df5 core-prim . magnitude) (af4df4 core-prim . log) (af4df3 core-prim . list?) (af4df2 core-prim . list-tail) (af4df1 core-prim . list-ref) (af4df0 core-prim . list->vector) (af4def core-prim . list->string) (af4dee core-prim . list) (af4ded core-prim . length) (af4dec core-prim . lcm) (af4deb core-prim . integer?) (af4dea core-prim . integer-valued?) (af4de9 core-prim . integer->char) (af4de8 core-prim . infinite?) (af4de7 core-prim . inexact?) (af4de6 core-prim . inexact) (af4de5 core-prim . imag-part) (af4de4 core-prim . gcd) (af4de3 core-prim . for-each) (af4de2 core-prim . floor) (af4de1 core-prim . finite?) (af4de0 core-prim . expt) (af4ddf core-prim . exp) (af4dde core-prim . exact?) (af4ddd core-prim . exact-integer-sqrt) (af4ddc core-prim . exact) (af4ddb core-prim . even?) (af4dda core-prim . error) (af4dd9 core-prim . eqv?) (af4dd8 core-prim . equal?) (af4dd7 core-prim . eq?) (af4dd6 core-prim . dynamic-wind) (af4dd5 core-prim . div0-and-mod0) (af4dd4 core-prim . mod0) (af4dd3 core-prim . div0) (af4dd2 core-prim . div-and-mod) (af4dd1 core-prim . mod) (af4dd0 core-prim . div) (af4dcf core-prim . denominator) (af4dce core-prim . cos) (af4dcd core-prim . cons) (af4dcc core-prim . complex?) (af4dcb core-prim . char?) (af4dca core-prim . char>?) (af4dc9 core-prim . char>=?) (af4dc8 core-prim . char=?) (af4dc7 core-prim . char<?) (af4dc6 core-prim . char<=?) (af4dc5 core-prim . char->integer) (af4dc4 core-prim . ceiling) (af4dc3 core-prim . call-with-values) (af4dc2 core-prim . call/cc) (af4dc1 core-prim . call-with-current-continuation) (af4dc0 core-prim . cddddr) (af4dbf core-prim . cdddar) (af4dbe core-prim . cddadr) (af4dbd core-prim . cddaar) (af4dbc core-prim . cdaddr) (af4dbb core-prim . cdadar) (af4dba core-prim . cdaadr) (af4db9 core-prim . cdaaar) (af4db8 core-prim . cadddr) (af4db7 core-prim . caddar) (af4db6 core-prim . cadadr) (af4db5 core-prim . cadaar) (af4db4 core-prim . caaddr) (af4db3 core-prim . caadar) (af4db2 core-prim . caaadr) (af4db1 core-prim . caaaar) (af4db0 core-prim . cdddr) (af4daf core-prim . cddar) (af4dae core-prim . cdadr) (af4dad core-prim . cdaar) (af4dac core-prim . caddr) (af4dab core-prim . cadar) (af4daa core-prim . caadr) (af4da9 core-prim . caaar) (af4da8 core-prim . cddr) (af4da7 core-prim . cdar) (af4da6 core-prim . cadr) (af4da5 core-prim . caar) (af4da4 core-prim . cdr) (af4da3 core-prim . car) (af4da2 core-prim . boolean?) (af4da1 core-prim . boolean=?) (af4da0 core-prim . atan) (af4d9f core-prim . assertion-violation) (af2d87 core-prim . assertion-error) (af4d9e core-prim . asin) (af4d9d core-prim . apply) (af4d9c core-prim . append) (af4d9b core-prim . angle) (af4d9a core-prim . acos) (af4d99 core-prim . abs) (af4d98 core-prim . /) (af4d97 core-prim . *) (af4d96 core-prim . -) (af4d95 core-prim . +) (af4d94 core-prim . >=) (af4d93 core-prim . >) (af4d92 core-prim . =) (af4d91 core-prim . <=) (af4d90 core-prim . <) (af4d8f core-prim . library) (af4d8e $core-rtd &no-nans-rtd &no-nans-rcd) (af4d8d $core-rtd &no-infinities-rtd &no-infinities-rcd) (af4d8c $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd) (af4d8b $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd) (af4d8a $core-rtd &i/o-port-rtd &i/o-port-rcd) (af4d89 $core-rtd &i/o-file-does-not-exist-rtd &i/o-file-does-not-exist-rcd) (af4d88 $core-rtd &i/o-file-already-exists-rtd &i/o-file-already-exists-rcd) (af4d87 $core-rtd &i/o-file-is-read-only-rtd &i/o-fie-is-read-only-rcd) (af4d86 $core-rtd &i/o-file-protection-rtd &i/o-file-protection-rcd) (af4d85 $core-rtd &i/o-filename-rtd &i/o-filename-rcd) (af4d84 $core-rtd &i/o-invalid-position-rtd &i/o-invalid-position-rcd) (af4d83 $core-rtd &i/o-write-rtd &i/o-write-rcd) (af4d82 $core-rtd &i/o-read-rtd &i/o-read-rcd) (af4d81 $core-rtd &i/o-rtd &i/o-rcd) (af4d80 $core-rtd &undefined-rtd &undefined-rcd) (af4d7f $core-rtd &syntax-rtd &syntax-rcd) (af4d7e $core-rtd &lexical-rtd &lexical-rcd) (af4d7d $core-rtd &implementation-restriction-rtd &implementation-restriction-rcd) (af4d7c $core-rtd &non-continuable-rtd &non-continuable-rcd) (af4d7b $core-rtd &who-rtd &who-rcd) (af4d7a $core-rtd &irritants-rtd &irritants-rcd) (af4d79 $core-rtd &assertion-rtd &assertion-rcd) (af4d78 $core-rtd &violation-rtd &violation-rcd) (af4d77 $core-rtd &error-rtd &error-rcd) (af4d76 $core-rtd &serious-rtd &serious-rcd) (af4d75 $core-rtd &warning-rtd &warning-rcd) (af4d74 $core-rtd &message-rtd &message-rcd) (af4d73 $core-rtd &condition-rtd &condition-rcd) (af4d72 macro . define-condition-type) (af4d71 macro . define-enumeration) (af4d70 macro . define-record-type) (af4d6f macro . parent-rtd) (af4d6e macro . nongenerative) (af4d6d macro . opaque) (af4d6c macro . sealed) (af4d6b macro . protocol) (af4d6a macro . parent) (af4d69 macro . immutable) (af4d68 macro . mutable) (af4d67 macro . fields) (af4d66 macro . error-handling-mode) (af4d65 macro . file-options) (af4d64 macro . buffer-mode) (af4d63 macro . eol-style) (af4d62 macro . guard) (af4d61 macro . trace-define) (af4d60 macro . trace-lambda) (af4d5f macro . unsyntax-splicing) (af4d5e macro . unsyntax) (af4d5d macro . unquote-splicing) (af4d5c macro . unquote) (af4d5b macro . _) (af4d5a macro . else) (af4d59 macro . =>) (af4d58 macro . ...) (af4d57 macro . assert) (af4d56 macro . endianness) (af4d55 macro . delay) (af4d54 macro . time) (af4d53 macro . do) (af4d52 macro . cond) (af4d51 macro . let*) (af4d50 macro . let*-values) (af4d4f macro . let-values) (af4d4e macro . identifier-syntax) (af4d4d macro . with-syntax) (af4d4c macro . quasisyntax) (af4d4b macro . quasiquote) (af4d4a macro . syntax-rules) (af4d49 macro . include) (af4d48 macro . define-struct) (af4d47 core-macro . record-constructor-descriptor) (af4d46 core-macro . record-type-descriptor) (af4d45 macro . case) (af4d44 macro . parameterize) (af4d43 macro . unless) (af4d42 macro . when) (af4d41 core-macro . or) (af4d40 core-macro . and) (af4d3f core-macro . if) (af4d3e core-macro . let) (af4d3d core-macro . letrec*) (af4d3c core-macro . letrec) (af4d3b core-macro . type-descriptor) (af4d3a core-macro . case-lambda) (af4d39 core-macro . lambda) (af4d38 core-macro . syntax) (af4d37 core-macro . syntax-case) (af4d36 core-macro . quote) (af4d35 core-macro . foreign-call) (af4d34 letrec-syntax) (af4d33 let-syntax) (af4d32 set!) (af4d31 import) (af4d30 begin) (af4d2f module) (af4d2e define-syntax) (af4d2d define)) values values '#f '#f '#f '#f) (af28bb@af2707@install-library 'af5075 '(psyntax system $bootstrap) '() '() '() '() '((pretty-print . af5054) (eval-core . af5053) (set-symbol-value! . af5052) (symbol-value . af5051) (gensym . af5050) (void . af504f)) '() values values '#f '#f '#f '#f) (af28bb@af2707@install-library 'af5076 '(mosh) '() '() '() '() '((set-symbol-value! . af5052) (symbol-value . af5051) (regexp? . af504d) (read-line . af504c) (ungensym . af504a) (alist->eq-hash-table . af5049) (assoc-ref . af5048) (print . af5047) (format . af5046) (host-os . af5045) (library-path . af26e6) (standard-library-path . af5044) (file-newer? . af5043) (stat-mtime . af5042) (digit->integer . af503e) (call-with-string-input-port . af503d) (call-with-string-io . af503c) (string-split . af503b) (bytevector-for-each . af503a) (string->regexp . af5039) (rxmatch . af5038) (regexp-replace-all . af5037) (hashtable-for-each . af5036) (set-current-directory! . af5031) (expand-path . af5030) (current-directory . af502f) (p . af4ff0) (get-timeofday . af4fd7) (get-command-line . af4fd6) (sys-display . af4fd5) (whereis . af4fd4) (register . af4fd3) (vm-join! . af4fd2) (vm-set-value! . af4fd1) (vm? . af4fd0) (main-vm? . af4fcf) (vm-eval . af4fce) (vm-self . af4fcd) (vm-start! . af4fcc) (make-vm . af4fcb) (mutex-try-lock! . af4fca) (mutex-unlock! . af4fc9) (mutex-lock! . af4fc8) (mutex? . af4fc7) (make-mutex . af4fc6) (condition-variable-notify-all! . af4fc5) (condition-variable-notify! . af4fc4) (condition-variable-wait! . af4fc3) (make-condition-variable . af4fc2) (mosh-executable-path . af4fc1) (make-file-options . af4fc0) (source-info . af4fbf) (make-compiler-instruction . af4fbe) (make-instruction . af4fbd) (set-source-info! . af4fbc) (bignum? . af4fbb) (fast-equal? . af4fba) (fasl-read . af4fb9) (fasl-write . af4fb8) (time-usage . af4fb7) (os-constant . af4fb6) (time . af4d54) (include . af4d49)) '() values values '#f '#f '#f '#f) (af28bb@af2707@install-library 'af5077 '(system) '() '() '() '() '((gensym-prefix-set! . af504b) (write-to-file . af5041) (file->list . af5040) (file->string . af503f) (mosh-cache-dir . af24d1) (call-process . af5035) (local-tz-offset . af5034) (microseconds . af5033) (directory-list . af5032) (expand-path . af5030) (%spawn . af502e) (%waitpid . af502d) (simple-struct-name . af502c) (simple-struct-set! . af502b) (simple-struct-ref . af502a) (make-simple-struct . af5029) (simple-struct? . af5028) (pointer-ref-c-int64 . af5027) (pointer-ref-c-int32 . af5026) (pointer-ref-c-int16 . af5025) (pointer-ref-c-int8 . af5024) (pointer-ref-c-uint64 . af5023) (pointer-ref-c-uint32 . af5022) (pointer-ref-c-uint16 . af5021) (pointer-ref-c-uint8 . af5020) (pointer-set-c-uint64! . af501f) (pointer-set-c-uint32! . af501e) (pointer-set-c-uint16! . af501d) (pointer-set-c-uint8! . af501c) (pointer-set-c-int64! . af501b) (pointer-set-c-int32! . af501a) (pointer-set-c-int16! . af5019) (pointer-set-c-int8! . af5018) (pointer-set-c-pointer! . af5017) (pointer-set-c-double! . af5016) (pointer-set-c-float! . af5015) (pointer-set-c-long-long! . af5014) (pointer-set-c-long! . af5013) (pointer-set-c-int! . af5012) (pointer-set-c-short! . af5011) (pointer-set-c-char! . af5010) (pointer-ref-c-pointer . af500f) (pointer-ref-c-double . af500e) (pointer-ref-c-float . af500d) (pointer-ref-c-unsigned-long-long . af500c) (pointer-ref-c-signed-long-long . af500b) (pointer-ref-c-unsigned-long . af500a) (pointer-ref-c-signed-long . af5009) (pointer-ref-c-unsigned-int . af5008) (pointer-ref-c-signed-int . af5007) (pointer-ref-c-unsigned-short . af5006) (pointer-ref-c-signed-short . af5005) (pointer-ref-c-unsigned-char . af5004) (pointer-ref-c-signed-char . af5003) (pointer->integer . af5002) (integer->pointer . af5001) (pointer? . af5000) (shared-errno . af4fff) (%ffi-free . af4ffe) (%ffi-malloc . af4ffd) (%ffi-supported? . af4ffc) (%ffi-pointer->string . af4ffb) (%ffi-call->string-or-zero . af4ffa) (%ffi-call->double . af4ff9) (%ffi-call->void* . af4ff8) (%ffi-call->void . af4ff7) (%ffi-call->char . af4ff6) (%ffi-call->int . af4ff5) (%ffi-lookup . af4ff4) (%ffi-open . af4ff3) (%fork . af4ff2) (%pipe . af4ff1) (open-output-string . af4fef) (get-output-string . af4fee) (file-stat-ctime . af4fed) (file-stat-atime . af4fec) (file-stat-mtime . af4feb) (file-size-in-bytes . af4fea) (file-writable? . af4fe9) (file-executable? . af4fe8) (file-readable? . af4fe7) (file-regular? . af4fe6) (file-symbolic-link? . af4fe5) (file-directory? . af4fe4) (create-symbolic-link . af4fe3) (rename-file . af4fe2) (delete-directory . af4fe1) (create-directory . af4fe0) (create-mosh-cache-dir . af4fdf) (get-environment-variables . af4fde) (current-exception-handler . af4fdd) (get-environment-variable . af4fdc) (join-wraps . af4fdb) (id->real-label . af4fda) (same-marks? . af4fd9) (same-marks*? . af4fd8) (disasm . af4fb5) (make-parameter . af24cf) (socket-port . af4fb4) (socket-shutdown . af4fb3) (socket-close . af4fb2) (socket-send . af4fb1) (socket-recv! . af4fb0) (socket-recv . af4faf) (make-server-socket . af4fae) (make-client-socket . af4fad) (socket-accept . af4fac) (socket? . af4fab) (parameterize . af4d44)) '() values values '#f '#f '#f '#f)))
(begin (set! af4bb0@ref (unspecified)) (set! af4bb2@x* (unspecified)) (set! af4bb4@add-library-path! (unspecified)) (set! af4bb6@parse-and-add-library-path (unspecified)) (set! af4bb8@for-each-with-index (unspecified)) (set! af4bba@rpad (unspecified)) (set! af4bbc@condition-printer (unspecified)) (set! af4bbe@record->field-alist (unspecified)) (set! af4bc0@map-with-index (unspecified)) (set! af4bc2@repl (unspecified)) (set! af4bc4@trace-printer (unspecified)) (set! af4bc6@command-line (unspecified)) (set! af4bc8@local-library-path (unspecified)) (set! af4bca@load/args (unspecified)) (set! af4bcc@load (unspecified)) (set! af4bce@ironscheme-build (unspecified)) (set! af4bd0@eval-top-level (unspecified)) (set! af4bd2@compile-system-libraries (unspecified)) (set! af4bd4@compile (unspecified)) (set! af4bd6@compile->closure (unspecified)) (set! af4bd8@pre-compile-r6rs-file (unspecified)) (set! af4bda@load-r6rs-top-level (unspecified)) (set! af4bdc@load-r6rs-top-level-sexp (unspecified)) (set! af4bde@prefix-inc (unspecified)) (set! af4be0@prefix-inc! (unspecified)) (set! af4bb0@ref (lambda (af4c1b@rtd af4c1c@i af4c1d@x) (let ((af4c21@val ((record-accessor af4c1b@rtd af4c1c@i) af4c1d@x))) (if (symbol? af4c21@val) (ungensym af4c21@val) af4c21@val)))) (set! af4d13@af4bb0@ref af4bb0@ref) (set! af4bb2@x* '()) (set! af4d14@af4bb2@x* af4bb2@x*) (set! af4bb4@add-library-path! (lambda (af4c23@path) (af28ab@af26e7@library-path (append (af28ab@af26e7@library-path) (list af4c23@path))))) (set! af4d15@af4bb4@add-library-path! af4bb4@add-library-path!) (set! af4bb6@parse-and-add-library-path (lambda (af4c25@paths af4c26@message) (let ((af4c2a@separator '#f)) (begin (set! af4c2a@separator (if (string=? (host-os) '"win32") '#\; '#\:)) (let ((af4c2b@t af4c25@paths)) (if af4c2b@t ((lambda (af4c2d@paths) (for-each (lambda (af4c2f@path) (if (file-exists? af4c2f@path) (af4bb4@add-library-path! (expand-path af4c2f@path)) (format (current-error-port) af4c26@message af4c2f@path))) (string-split af4c2d@paths af4c2a@separator))) af4c2b@t) (void))))))) (set! af4d16@af4bb6@parse-and-add-library-path af4bb6@parse-and-add-library-path) (set! af4bb8@for-each-with-index (lambda (af4c31@proc af4c32@lst) (letrec ((af4c35@loop (lambda (af4c37@i af4c38@lst) (if (null? af4c38@lst) (if '#f '#f (void)) (begin (af4c31@proc af4c37@i (car af4c38@lst)) (af4c35@loop (+ af4c37@i '1) (cdr af4c38@lst))))))) (af4c35@loop '1 af4c32@lst)))) (set! af4d17@af4bb8@for-each-with-index af4bb8@for-each-with-index) (set! af4bba@rpad (lambda (af4c3b@str af4c3c@pad af4c3d@n) (let ((af4c41@rest (- af4c3d@n (string-length (format '"~a" af4c3b@str))))) (let af4c47@loop ((af4c43@rest af4c41@rest) (af4c44@ret (format '"~a" af4c3b@str))) (if (<= af4c43@rest '0) af4c44@ret (af4c47@loop (- af4c43@rest '1) (string-append af4c44@ret af4c3c@pad))))))) (set! af4d18@af4bba@rpad af4bba@rpad) (set! af4bbc@condition-printer (lambda (af4c49@e af4c4a@port) (let ((af4c4e@max-condition-len '#f)) (begin (set! af4c4e@max-condition-len (apply max (map (lambda (af4c5f@c) (string-length (symbol->string (record-type-name (record-rtd af4c5f@c))))) (simple-conditions af4c49@e)))) (begin (display '" Condition components:\n" af4c4a@port) (af4bb8@for-each-with-index (lambda (af4c4f@i af4c50@x) (let ((af4c53@rtd (record-rtd af4c50@x)) (af4c54@fields-alist (af4bbe@record->field-alist af4c50@x))) (begin (format af4c4a@port '" ~d. ~a" af4c4f@i (af4bba@rpad (symbol->string (record-type-name af4c53@rtd)) '" " af4c4e@max-condition-len)) (if (null? af4c54@fields-alist) (newline af4c4a@port) (void)) (let af4c5b@loop ((af4c57@first '#t) (af4c58@fields-alist af4c54@fields-alist)) (if (null? af4c58@fields-alist) '() (let ((af4c5d@field (car af4c58@fields-alist))) (begin (if (not af4c57@first) (display (af4bba@rpad '"" '" " (+ '4 af4c4e@max-condition-len)) af4c4a@port) (void)) (display '"       " af4c4a@port) (display (car af4c5d@field) af4c4a@port) (display '": " af4c4a@port) (write (cdr af4c5d@field) af4c4a@port) (newline af4c4a@port) (af4c5b@loop '#f (cdr af4c58@fields-alist))))))))) (simple-conditions af4c49@e))))))) (set! af4d19@af4bbc@condition-printer af4bbc@condition-printer) (set! af4bbe@record->field-alist (lambda (af4c61@r) (let ((af4c64@ref '#f)) (begin (set! af4c64@ref (lambda (af4c6f@rtd af4c70@i af4c71@x) (let ((af4c75@val ((record-accessor af4c6f@rtd af4c70@i) af4c71@x))) (if (symbol? af4c75@val) (ungensym af4c75@val) af4c75@val)))) (let af4c69@loop ((af4c65@ret '()) (af4c66@rtd (record-rtd af4c61@r))) (if af4c66@rtd (af4c69@loop (append af4c65@ret (af4bc0@map-with-index (lambda (af4c6b@i af4c6c@field) (cons af4c6c@field (af4c64@ref af4c66@rtd af4c6b@i af4c61@r))) (vector->list (record-type-field-names af4c66@rtd)))) (record-type-parent af4c66@rtd)) af4c65@ret)))))) (set! af4d1a@af4bbe@record->field-alist af4bbe@record->field-alist) (set! af4bc0@map-with-index (lambda (af4c77@proc af4c78@lst) (let af4c81@loop ((af4c7b@i '0) (af4c7c@lst af4c78@lst) (af4c7d@ret '())) (if (null? af4c7c@lst) (reverse af4c7d@ret) (af4c81@loop (+ af4c7b@i '1) (cdr af4c7c@lst) (cons (af4c77@proc af4c7b@i (car af4c7c@lst)) af4c7d@ret)))))) (set! af4d1b@af4bc0@map-with-index af4bc0@map-with-index) (set! af4bc2@repl (lambda af4c83@x (let ((af4c86@rec '#f)) (begin (set! af4c86@rec (lambda () (begin (display '"mosh> ") ((call/cc (lambda (af4c89@af4c87) (lambda () (with-exception-handler (lambda (af4c8b@e) ((call/cc (lambda (af4c8d@af4c88) (af4c89@af4c87 (lambda () (if '#t (begin (display '"\nUnhandled exception:\n\n" (current-error-port)) (if (condition? af4c8b@e) (af4bbc@condition-printer af4c8b@e (current-error-port)) (format (current-error-port) '"  Non-condition object:\n     ~a\n" af4c8b@e))) (af4c8d@af4c88 (lambda () (raise-continuable af4c8b@e)))))))))) (lambda () (let af4c93@loop ((af4c8f@line (get-line (current-input-port))) (af4c90@accum '"")) (let ((af4c96@parentheses-ok? '#f) (af4c98@eval-string-print '#f)) (begin (set! af4c96@parentheses-ok? (lambda (af4c9d@text) (let af4ca5@loop ((af4c9f@chars (string->list af4c9d@text)) (af4ca0@p0 '0) (af4ca1@p1 '0)) (if (null? af4c9f@chars) (= '0 af4ca0@p0 af4ca1@p1) (let ((af4ca7@t (car af4c9f@chars))) (if (memv af4ca7@t '(#\()) (af4ca5@loop (cdr af4c9f@chars) (+ af4ca0@p0 '1) af4ca1@p1) (if (memv af4ca7@t '(#\))) (af4ca5@loop (cdr af4c9f@chars) (- af4ca0@p0 '1) af4ca1@p1) (if (memv af4ca7@t '(#\[)) (af4ca5@loop (cdr af4c9f@chars) af4ca0@p0 (+ af4ca1@p1 '1)) (if (memv af4ca7@t '(#\])) (af4ca5@loop (cdr af4c9f@chars) af4ca0@p0 (- af4ca1@p1 '1)) (af4ca5@loop (cdr af4c9f@chars) af4ca0@p0 af4ca1@p1)))))))))) (set! af4c98@eval-string-print (lambda (af4c9b@text) (if (not (or (string=? '"\n" af4c9b@text) (= '0 (string-length af4c9b@text)))) (write (af4bd0@eval-top-level (call-with-port (open-string-input-port af4c9b@text) read))) (void)))) (if (eof-object? af4c8f@line) (begin (af4c98@eval-string-print af4c90@accum) (exit)) (let ((af4c99@current (string-append af4c90@accum af4c8f@line))) (if (af4c96@parentheses-ok? af4c99@current) (af4c98@eval-string-print af4c99@current) (af4c93@loop (get-line (current-input-port)) af4c99@current))))))))))))) (newline) (af4c86@rec)))) (af4c86@rec))))) (set! af4d1c@af4bc2@repl af4bc2@repl) (set! af4bc4@trace-printer (af25f1@af24d0@make-parameter write)) (set! af4d1d@af4bc4@trace-printer af4bc4@trace-printer) (set! af4bc6@command-line (af25f1@af24d0@make-parameter (get-command-line))) (set! af4d1e@af4bc6@command-line af4bc6@command-line) (set! af4bc8@local-library-path (lambda (af4ca9@filename) (af28ab@af26e7@library-path))) (set! af4d1f@af4bc8@local-library-path af4bc8@local-library-path) (set! af4bca@load/args (lambda (af4cab@filename . af4cad@args) (begin (apply af4bda@load-r6rs-top-level af4cab@filename 'load af4cad@args) (void)))) (set! af4d20@af4bca@load/args af4bca@load/args) (set! af4bcc@load (lambda (af4caf@filename) (begin (apply af4bda@load-r6rs-top-level af4caf@filename 'load (af4bc6@command-line)) (void)))) (set! af4d21@af4bcc@load af4bcc@load) (set! af4bce@ironscheme-build (lambda () (af4bcc@load '"ironscheme-buildscript.ss"))) (set! af4d22@af4bce@ironscheme-build af4bce@ironscheme-build) (set! af4bd0@eval-top-level (lambda (af4cb1@x) (af47d6@af2d6e@eval af4cb1@x (af47ed@af2d9c@interaction-environment)))) (set! af4d23@af4bd0@eval-top-level af4bd0@eval-top-level) (set! af4bd2@compile-system-libraries (lambda () (af4bd0@eval-top-level '(begin (include "system-libraries.ss") (compile "system-libraries.ss"))))) (set! af4d24@af4bd2@compile-system-libraries af4bd2@compile-system-libraries) (set! af4bd4@compile (lambda (af4cb3@filename) (af4bda@load-r6rs-top-level af4cb3@filename 'compile))) (set! af4d25@af4bd4@compile af4bd4@compile) (set! af4bd6@compile->closure (lambda (af4cb5@filename) (af4bda@load-r6rs-top-level af4cb5@filename 'closure))) (set! af4d26@af4bd6@compile->closure af4bd6@compile->closure) (set! af4bd8@pre-compile-r6rs-file (lambda (af4cb7@filename) (af4bda@load-r6rs-top-level af4cb7@filename 'compile))) (set! af4d27@af4bd8@pre-compile-r6rs-file af4bd8@pre-compile-r6rs-file) (set! af4bda@load-r6rs-top-level (lambda (af4cb9@filename af4cba@how . af4cbd@args) (begin (af28ab@af26e7@library-path (af4bc8@local-library-path af4cb9@filename)) (let ((af4cbf@x* (with-input-from-file af4cb9@filename (lambda () (let af4cc1@f () (let ((af4cc3@x (af25e4@af24b6@read-annotated))) (if (eof-object? af4cc3@x) '() (cons af4cc3@x (af4cc1@f))))))))) (let ((af4cc5@t af4cba@how)) (if (memv af4cc5@t '(closure)) (af47ec@af2d9a@pre-compile-r6rs-top-level af4cbf@x*) (if (memv af4cc5@t '(load)) (begin (af4bc6@command-line (cons af4cb9@filename (car af4cbd@args))) (af25f2@af24d2@mosh-cache-dir (create-mosh-cache-dir)) (if (af25f2@af24d2@mosh-cache-dir) (gensym-prefix-set! (af4be0@prefix-inc! (string-append (af25f2@af24d2@mosh-cache-dir) '"/prefix.txt"))) (void)) (if (symbol-value '%clean-acc) (for-each (lambda (af4cc7@file) ((call/cc (lambda (af4ccb@af4cc9) (lambda () (with-exception-handler (lambda (af4ccd@c) ((call/cc (lambda (af4ccf@af4cca) (af4ccb@af4cc9 (lambda () (if '#t '#t (af4ccf@af4cca (lambda () (raise-continuable af4ccd@c)))))))))) (lambda () (delete-file (string-append (af25f2@af24d2@mosh-cache-dir) '"/" af4cc7@file))))))))) (directory-list (af25f2@af24d2@mosh-cache-dir))) (void)) (let ((af4cd1@compiled (af47eb@af2d98@compile-r6rs-top-level af4cbf@x*))) (begin (if (and (af25f2@af24d2@mosh-cache-dir) (not (symbol-value '%disable-acc))) (af28af@af26ef@serialize-all af25ec@af24c6@serialize-library af2648@af2601@compile-core-expr) (void)) (af4cd1@compiled)))) (if (memv af4cc5@t '(compile)) (begin (af47eb@af2d98@compile-r6rs-top-level af4cbf@x*) (af28af@af26ef@serialize-all af25ec@af24c6@serialize-library af2648@af2601@compile-core-expr)) (if '#f '#f (void)))))))))) (set! af4d28@af4bda@load-r6rs-top-level af4bda@load-r6rs-top-level) (set! af4bdc@load-r6rs-top-level-sexp (lambda (af4cd3@import-spec af4cd4@thunk) (let ((af4cdf@af4cd8 af28ab@af26e7@library-path) (af4ce0@af4cda af25f2@af24d2@mosh-cache-dir) (af4ce1@af4cdc (af4bc8@local-library-path '"")) (af4ce2@af4cde (create-mosh-cache-dir))) (let ((af4ce7@swap (lambda () (begin (let ((af4ce9@t (af4cdf@af4cd8))) (begin (af4cdf@af4cd8 af4ce1@af4cdc) (set! af4ce1@af4cdc af4ce9@t))) (let ((af4ceb@t (af4ce0@af4cda))) (begin (af4ce0@af4cda af4ce2@af4cde) (set! af4ce2@af4cde af4ceb@t))))))) (dynamic-wind af4ce7@swap (lambda () (begin (if (af25f2@af24d2@mosh-cache-dir) (gensym-prefix-set! (af4be0@prefix-inc! (string-append (af25f2@af24d2@mosh-cache-dir) '"/prefix.txt"))) (void)) (let ((af4cf1@af4cee af4bc6@command-line) (af4cf2@af4cf0 '())) (let ((af4cf5@swap (lambda () (let ((af4cf7@t (af4cf1@af4cee))) (begin (af4cf1@af4cee af4cf2@af4cf0) (set! af4cf2@af4cf0 af4cf7@t)))))) (dynamic-wind af4cf5@swap (lambda () ((af47eb@af2d98@compile-r6rs-top-level (list (cons 'import af4cd3@import-spec) (list af4cd4@thunk))))) af4cf5@swap))))) af4ce7@swap))))) (set! af4d29@af4bdc@load-r6rs-top-level-sexp af4bdc@load-r6rs-top-level-sexp) (set! af4bde@prefix-inc (lambda (af4cf9@prefix-string) (let ((af4cfb@prefix (symbol->string af4cf9@prefix-string))) (let ((af4cfd@len (string-length af4cfb@prefix))) (let af4d05@loop ((af4cff@i (- af4cfd@len '1)) (af4d00@carry? '#t) (af4d01@accum '())) (if (< af4cff@i '0) (string->symbol (list->string (if af4d00@carry? (cons '#\a af4d01@accum) af4d01@accum))) (if af4d00@carry? (let ((af4d07@next-integer (+ '1 (char->integer (string-ref af4cfb@prefix af4cff@i))))) (if (= af4d07@next-integer '123) (af4d05@loop (- af4cff@i '1) '#f (cons '#\A af4d01@accum)) (if (= af4d07@next-integer '91) (af4d05@loop (- af4cff@i '1) '#t (cons '#\a af4d01@accum)) (af4d05@loop (- af4cff@i '1) '#f (cons (integer->char af4d07@next-integer) af4d01@accum))))) (af4d05@loop (- af4cff@i '1) '#f (cons (string-ref af4cfb@prefix af4cff@i) af4d01@accum))))))))) (set! af4d2a@af4bde@prefix-inc af4bde@prefix-inc) (set! af4be0@prefix-inc! (lambda (af4d09@file) (begin (if (not (file-exists? af4d09@file)) (call-with-output-file af4d09@file (lambda (af4d0b@port) (write 'd af4d0b@port))) (void)) (let ((af4d0d@prefix (call-with-input-file af4d09@file read))) (let ((af4d0f@next-prefix (af4bde@prefix-inc af4d0d@prefix))) (begin (call-with-port (open-file-output-port af4d09@file (make-file-options '(no-fail)) 'block (native-transcoder)) (lambda (af4d11@port) (write af4d0f@next-prefix af4d11@port))) af4d0d@prefix)))))) (set! af4d2b@af4be0@prefix-inc! af4be0@prefix-inc!) (begin (af28b0@af26f1@current-precompiled-library-loader af25ed@af24c8@load-serialized-library) (set-symbol-value! 'load af4bcc@load) (set-symbol-value! 'pre-compile-r6rs-file af4bd8@pre-compile-r6rs-file) (set-symbol-value! 'eval-r6rs af4bd0@eval-top-level) (set-symbol-value! 'int-env-syms af47cd@af2d5c@interaction-environment-symbols) (set-symbol-value! 'expanded2core af2647@af25ff@expanded->core) (set-symbol-value! 'trace-printer af4bc4@trace-printer) (set-symbol-value! 'compile-r6rs-top-level 'compile-r6rs-top-level) (set-symbol-value! 'create-non-continuable-violation (lambda (af4be1@c) (condition (af4b0d@af4917@make-non-continuable-violation) (af4b03@af48fe@make-who-condition 'raise) (af4ac7@af485f@make-message-condition '"returned from non-continuable exception") (af4af9@af48e3@make-irritants-condition (list af4be1@c))))) (af4bb6@parse-and-add-library-path (get-environment-variable '"MOSH_LOADPATH") '"** WARN in environment variable 'MOSH_LOADPATH': directory ~s not exist\n") (af4bb6@parse-and-add-library-path (symbol-value '%loadpath) '"** WARN in command-line option '--loadpath': directory ~s not exist\n") (if (mosh-executable-path) (if (file-exists? (string-append (mosh-executable-path) '"/lib")) (af4bb4@add-library-path! (string-append (mosh-executable-path) '"/lib")) (void)) (if (file-exists? (string-append (current-directory) '"/lib")) (af4bb4@add-library-path! (string-append (current-directory) '"/lib")) (void))) (if (file-exists? (string-append (standard-library-path) '"/lib")) (af4bb4@add-library-path! (string-append (standard-library-path) '"/lib")) (void)) (let ((af4be3@prefix (lambda (af4be5@ext af4be6@ls) (append (map (lambda (af4be9@x) (string-append af4be5@ext af4be9@x)) af4be6@ls) af4be6@ls)))) (af28ac@af26e9@library-extensions (af4be3@prefix '".mosh" (af28ac@af26e9@library-extensions)))) (current-exception-handler (lambda (af4beb@c) (if (condition? af4beb@c) (af4bbc@condition-printer af4beb@c (current-error-port)) (format (current-error-port) '"\n Non-condition object:\n     ~a\n" af4beb@c)))) (if ((call/cc (lambda (af4bef@af4bed) (lambda () (with-exception-handler (lambda (af4bf1@c) ((call/cc (lambda (af4bf3@af4bee) (af4bef@af4bed (lambda () (if '#t '#f (af4bf3@af4bee (lambda () (raise-continuable af4bf1@c)))))))))) (lambda () (symbol-value '%vm-import-spec))))))) (af4bdc@load-r6rs-top-level-sexp (symbol-value '%vm-import-spec) (symbol-value '%vm-thunk)) (if (null? (af4bc6@command-line)) (let ((af4bfd@af4bf6 af4bc6@command-line) (af4bfe@af4bf8 af25f2@af24d2@mosh-cache-dir) (af4bff@af4bfa '()) (af4c00@af4bfc (create-mosh-cache-dir))) (let ((af4c05@swap (lambda () (begin (let ((af4c07@t (af4bfd@af4bf6))) (begin (af4bfd@af4bf6 af4bff@af4bfa) (set! af4bff@af4bfa af4c07@t))) (let ((af4c09@t (af4bfe@af4bf8))) (begin (af4bfe@af4bf8 af4c00@af4bfc) (set! af4c00@af4bfc af4c09@t))))))) (dynamic-wind af4c05@swap (lambda () (begin (if (af25f2@af24d2@mosh-cache-dir) (gensym-prefix-set! (af4be0@prefix-inc! (string-append (af25f2@af24d2@mosh-cache-dir) '"/prefix.txt"))) (void)) (af4bc2@repl))) af4c05@swap))) (begin (af28ab@af26e7@library-path (af4bc8@local-library-path (car (af4bc6@command-line)))) (set! af4bb2@x* (with-input-from-file (car (af4bc6@command-line)) (lambda () (let af4c0b@f () (let ((af4c0d@x (af25e4@af24b6@read-annotated))) (if (eof-object? af4c0d@x) '() (cons af4c0d@x (af4c0b@f)))))))) (af4bc6@command-line (cons (car (af4bc6@command-line)) (cdr (af4bc6@command-line)))) (af25f2@af24d2@mosh-cache-dir (create-mosh-cache-dir)) (if (af25f2@af24d2@mosh-cache-dir) (gensym-prefix-set! (af4be0@prefix-inc! (string-append (af25f2@af24d2@mosh-cache-dir) '"/prefix.txt"))) (void)) (if (symbol-value '%clean-acc) (for-each (lambda (af4c0f@file) ((call/cc (lambda (af4c13@af4c11) (lambda () (with-exception-handler (lambda (af4c15@c) ((call/cc (lambda (af4c17@af4c12) (af4c13@af4c11 (lambda () (if '#t '#t (af4c17@af4c12 (lambda () (raise-continuable af4c15@c)))))))))) (lambda () (delete-file (string-append (af25f2@af24d2@mosh-cache-dir) '"/" af4c0f@file))))))))) (directory-list (af25f2@af24d2@mosh-cache-dir))) (void)) (let ((af4c19@compiled (af47eb@af2d98@compile-r6rs-top-level af4bb2@x*))) (begin (if (and (af25f2@af24d2@mosh-cache-dir) (not (symbol-value '%disable-acc))) (af28af@af26ef@serialize-all af25ec@af24c6@serialize-library af2648@af2601@compile-core-expr) (void)) (af4c19@compiled))))))))
