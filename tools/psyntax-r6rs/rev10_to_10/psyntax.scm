;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; automatically generated from psyntax sources
;;; for copyright details, see psyntax/main.ss

(begin (set! cy28ca@library-file-path->cache-path (unspecified)) (set! cy28cc@read-annotated (unspecified)) (set! cy28ce@annotation-stripped (unspecified)) (set! cy28d0@annotation? (unspecified)) (set! cy28d2@annotation-source (unspecified)) (set! cy28d4@annotation-expression (unspecified)) (set! cy28d6@scm->fasl (unspecified)) (set! cy28d8@fasl-save (unspecified)) (set! cy28da@fasl-load (unspecified)) (set! cy28dc@serialize-library (unspecified)) (set! cy28de@load-serialized-library (unspecified)) (set! cy28e0@make-record-printer (unspecified)) (set! cy28e2@compile-core (unspecified)) (set! cy28e4@read-library-source-file (unspecified)) (set! cy28e6@make-parameter (unspecified)) (set! cy28e8@mosh-cache-dir (unspecified)) (set! cy297e@file-options-spec (unspecified)) (set! cy28ca@library-file-path->cache-path (lambda (cy297f@x) (call-with-values (lambda () (open-string-output-port)) (lambda (cy2985@cy2982 cy2986@cy2984) (let ((cy2989@extract cy2986@cy2984) (cy298a@p cy2985@cy2982)) (let ((cy298e@display-hex '#f)) (begin (set! cy298e@display-hex (lambda (cy2997@n) (if (<= '0 cy2997@n '9) (display cy2997@n cy298a@p) (display (integer->char (+ (char->integer '#\a) (- cy2997@n '10))) cy298a@p)))) (begin (let cy2991@f ((cy298f@ls (string-split cy297f@x '#\/))) (if (not (null? cy298f@ls)) (begin (display '"_" cy298a@p) (for-each (lambda (cy2993@c) (if (or (char<=? '#\a cy2993@c '#\z) (char<=? '#\A cy2993@c '#\Z) (char<=? '#\0 cy2993@c '#\9) (memv cy2993@c '(#\- #\. #\_ #\~))) (display cy2993@c cy298a@p) (begin (display '"%" cy298a@p) (let ((cy2995@n (char->integer cy2993@c))) (begin (cy298e@display-hex (quotient cy2995@n '16)) (cy298e@display-hex (remainder cy2995@n '16))))))) (string->list (car cy298f@ls))) (cy2991@f (cdr cy298f@ls))) (void))) (cy2989@extract))))))))) (set! cy29f9@cy28ca@library-file-path->cache-path cy28ca@library-file-path->cache-path) (set! cy28cc@read-annotated read) (set! cy29fa@cy28cc@read-annotated cy28cc@read-annotated) (set! cy28ce@annotation-stripped (lambda (cy2999@x) (cy28d4@annotation-expression cy2999@x))) (set! cy29fb@cy28ce@annotation-stripped cy28ce@annotation-stripped) (set! cy28d0@annotation? (lambda (cy299b@x) (source-info cy299b@x))) (set! cy29fc@cy28d0@annotation? cy28d0@annotation?) (set! cy28d2@annotation-source (lambda (cy299d@x) (source-info cy299d@x))) (set! cy29fd@cy28d2@annotation-source cy28d2@annotation-source) (set! cy28d4@annotation-expression (lambda (cy299f@x) (if (pair? cy299f@x) (cons (car cy299f@x) (cdr cy299f@x)) (display '"line:46\n")))) (set! cy29fe@cy28d4@annotation-expression cy28d4@annotation-expression) (set! cy28d6@scm->fasl (lambda (cy29a1@filename) (string-append (cy28e8@mosh-cache-dir) '"/" (cy28ca@library-file-path->cache-path cy29a1@filename) '".mosh-fasl"))) (set! cy29ff@cy28d6@scm->fasl cy28d6@scm->fasl) (set! cy28d8@fasl-save (lambda (cy29a3@filename cy29a4@obj) (call-with-port (open-file-output-port cy29a3@filename) (lambda (cy29a7@port) ((symbol-value 'fasl-write!) cy29a4@obj cy29a7@port))))) (set! cy2a00@cy28d8@fasl-save cy28d8@fasl-save) (set! cy28da@fasl-load (lambda (cy29a9@filename) (call-with-port (open-file-input-port cy29a9@filename) (symbol-value 'fasl-read!)))) (set! cy2a01@cy28da@fasl-load cy28da@fasl-load) (set! cy28dc@serialize-library (lambda (cy29ab@filename cy29ac@obj) (begin (let ((cy29af@expanded2core (symbol-value 'expanded2core))) (let ((cy29b1@compile (symbol-value 'compile-w/o-halt))) (let ((cy29b3@code cy29ac@obj)) (let ((cy29b5@pivot (cddddr (cddddr cy29b3@code)))) (let ((cy29b7@visit (cy29b1@compile (cy29af@expanded2core (car cy29b5@pivot))))) (begin (set-car! cy29b5@pivot cy29b7@visit) (let ((cy29b9@pivot (cdr cy29b5@pivot))) (let ((cy29bb@invoke (cy29b1@compile (cy29af@expanded2core (car cy29b9@pivot))))) (set-car! cy29b9@pivot cy29bb@invoke))))))))) (let ((cy29bd@fasl-file (cy28d6@scm->fasl cy29ab@filename))) (begin (if (file-exists? cy29bd@fasl-file) (delete-file cy29bd@fasl-file) (void)) ((call/cc (lambda (cy29c1@cy29bf) (lambda () (with-exception-handler (lambda (cy29c3@c) ((call/cc (lambda (cy29c5@cy29c0) (cy29c1@cy29bf (lambda () (if '#t (begin (format (current-error-port) '"Warning:serialize-library failed " cy29ab@filename) (if (file-exists? cy29bd@fasl-file) (delete-file cy29bd@fasl-file) (void)) '#f) (cy29c5@cy29c0 (lambda () (raise-continuable cy29c3@c)))))))))) (lambda () (cy28d8@fasl-save cy29bd@fasl-file cy29ac@obj)))))))))))) (set! cy2a02@cy28dc@serialize-library cy28dc@serialize-library) (set! cy28de@load-serialized-library (lambda (cy29c7@filename cy29c8@obj) (and (cy28e8@mosh-cache-dir) (let ((cy29cb@fasl-file (cy28d6@scm->fasl cy29c7@filename))) (if (and (file-exists? cy29cb@fasl-file) ((symbol-value 'file-newer?) cy29cb@fasl-file cy29c7@filename)) (let ((cy29cd@expanded2core (symbol-value 'expanded2core))) (let ((cy29cf@eval-compiled-core (symbol-value 'eval-compiled!))) (let ((cy29d1@code (cy28da@fasl-load cy29cb@fasl-file))) (let ((cy29d3@pivot (cddddr (cddddr cy29d1@code)))) (let ((cy29d5@visit (car cy29d3@pivot))) (let ((cy29d7@visit-proc (lambda () (cy29cf@eval-compiled-core cy29d5@visit)))) (begin (set-car! cy29d3@pivot cy29d7@visit-proc) (let ((cy29d9@pivot (cdr cy29d3@pivot))) (let ((cy29db@invoke (car cy29d9@pivot))) (begin (set-car! cy29d9@pivot (lambda () (cy29cf@eval-compiled-core cy29db@invoke))) (apply cy29c8@obj cy29d1@code))))))))))) '#f))))) (set! cy2a03@cy28de@load-serialized-library cy28de@load-serialized-library) (set! cy28e0@make-record-printer (lambda (cy29dd@name cy29de@printer) (lambda cy29e1@x (begin (display '"record printer") (for-each display cy29e1@x))))) (set! cy2a04@cy28e0@make-record-printer cy28e0@make-record-printer) (set! cy28e2@compile-core (lambda cy29e3@x (apply error 'comile-core '"not implementated" cy29e3@x))) (set! cy2a05@cy28e2@compile-core cy28e2@compile-core) (set! cy28e4@read-library-source-file (lambda (cy29e5@file-name) (with-input-from-file cy29e5@file-name cy28cc@read-annotated))) (set! cy2a06@cy28e4@read-library-source-file cy28e4@read-library-source-file) (set! cy28e6@make-parameter (lambda cy29f5 (let ((cy29f6 (length cy29f5))) (if (= cy29f6 '1) (apply (lambda (cy29e7@x) (cy28e6@make-parameter cy29e7@x (lambda (cy29e9@x) cy29e9@x))) cy29f5) (if (= cy29f6 '2) (apply (lambda (cy29eb@x cy29ec@fender) (let ((cy29ef@x (cy29ec@fender cy29eb@x))) (lambda cy29f3 (let ((cy29f4 (length cy29f3))) (if (= cy29f4 '0) (apply (lambda () cy29ef@x) cy29f3) (if (= cy29f4 '1) (apply (lambda (cy29f1@v) (set! cy29ef@x (cy29ec@fender cy29f1@v))) cy29f3) (error 'apply '"invalid arg count"))))))) cy29f5) (error 'apply '"invalid arg count")))))) (set! cy2a07@cy28e6@make-parameter cy28e6@make-parameter) (set! cy28e8@mosh-cache-dir (cy28e6@make-parameter '#f)) (set! cy2a08@cy28e8@mosh-cache-dir cy28e8@mosh-cache-dir) (set! cy297e@file-options-spec (lambda (cy29f7@x) cy29f7@x)) (set! cy2a09@cy297e@file-options-spec cy297e@file-options-spec) (void))
(begin (set! cy2a0f@current-primitive-locations (unspecified)) (set! cy2a11@mutable? (unspecified)) (set! cy2a13@rewriter (unspecified)) (set! cy2a15@expanded->core (unspecified)) (set! cy2a17@compile-core-expr (unspecified)) (set! cy2a19@pretty-print (unspecified)) (set! cy2a1b@compile-core-expr-to-port (unspecified)) (set! cy2a0f@current-primitive-locations (cy2a07@cy28e6@make-parameter (lambda (cy2a1c@x) '#f) (lambda (cy2a1e@p) cy2a1e@p))) (set! cy2a5a@cy2a0f@current-primitive-locations cy2a0f@current-primitive-locations) (set! cy2a11@mutable? (lambda (cy2a20@x) (or (pair? cy2a20@x) (vector? cy2a20@x) (hashtable? cy2a20@x)))) (set! cy2a5b@cy2a11@mutable? cy2a11@mutable?) (set! cy2a13@rewriter (lambda (cy2a22@quote-hack?) (let ((cy2a25@f '#f)) (begin (set! cy2a25@f (lambda (cy2a26@x) (if (pair? cy2a26@x) (let ((cy2a28@t (car cy2a26@x))) (if (memv cy2a28@t '(quote)) (if (and cy2a22@quote-hack? (cy2a11@mutable? (cadr cy2a26@x))) (let ((cy2a2a@g (gensym))) (begin (set-symbol-value! cy2a2a@g (cadr cy2a26@x)) cy2a2a@g)) cy2a26@x) (if (memv cy2a28@t '(case-lambda)) (cons 'case-lambda (map (lambda (cy2a2c@x) (cons (car cy2a2c@x) (map cy2a25@f (cdr cy2a2c@x)))) (cdr cy2a26@x))) (if (memv cy2a28@t '(lambda)) (cons* 'lambda (cadr cy2a26@x) (map cy2a25@f (cddr cy2a26@x))) (if (memv cy2a28@t '(letrec)) (let ((cy2a2e@bindings (cadr cy2a26@x)) (cy2a2f@body* (cddr cy2a26@x))) (let ((cy2a32@lhs* (map car cy2a2e@bindings)) (cy2a33@rhs* (map cadr cy2a2e@bindings))) (cons* 'letrec (map list cy2a32@lhs* (map cy2a25@f cy2a33@rhs*)) (map cy2a25@f cy2a2f@body*)))) (if (memv cy2a28@t '(letrec*)) (let ((cy2a36@bindings (cadr cy2a26@x)) (cy2a37@body* (cddr cy2a26@x))) (let ((cy2a3a@lhs* (map car cy2a36@bindings)) (cy2a3b@rhs* (map cadr cy2a36@bindings))) (cons* 'letrec* (map list cy2a3a@lhs* (map cy2a25@f cy2a3b@rhs*)) (map cy2a25@f cy2a37@body*)))) (if (memv cy2a28@t '(library-letrec*)) (let ((cy2a3e@name (cadr cy2a26@x)) (cy2a3f@x (cdr cy2a26@x))) (let ((cy2a42@bindings (cadr cy2a3f@x)) (cy2a43@body* (cddr cy2a3f@x))) (let ((cy2a46@lhs* (map car cy2a42@bindings)) (cy2a47@lhs** (map cadr cy2a42@bindings)) (cy2a48@rhs* (map caddr cy2a42@bindings))) (cons* 'library-letrec* cy2a3e@name (map list cy2a46@lhs* cy2a47@lhs** (map cy2a25@f cy2a48@rhs*)) (map cy2a25@f cy2a43@body*))))) (if (memv cy2a28@t '(begin)) (cons 'begin (map cy2a25@f (cdr cy2a26@x))) (if (memv cy2a28@t '(set!)) (list 'set! (cadr cy2a26@x) (cy2a25@f (caddr cy2a26@x))) (if (memv cy2a28@t '(primitive)) (let ((cy2a4c@op (cadr cy2a26@x))) (let ((cy2a4e@t ((cy2a0f@current-primitive-locations) cy2a4c@op))) (if cy2a4e@t ((lambda (cy2a50@loc) cy2a50@loc) cy2a4e@t) cy2a4c@op))) (if (memv cy2a28@t '(define)) cy2a26@x (if (list? cy2a26@x) (map cy2a25@f cy2a26@x) (error 'rewrite '"invalid form ~s ~s" cy2a26@x (list? cy2a26@x)))))))))))))) cy2a26@x))) cy2a25@f)))) (set! cy2a5c@cy2a13@rewriter cy2a13@rewriter) (set! cy2a15@expanded->core (lambda (cy2a52@x) ((cy2a13@rewriter '#f) cy2a52@x))) (set! cy2a5d@cy2a15@expanded->core cy2a15@expanded->core) (set! cy2a17@compile-core-expr (lambda (cy2a54@x) ((cy2a13@rewriter '#f) cy2a54@x))) (set! cy2a5e@cy2a17@compile-core-expr cy2a17@compile-core-expr) (set! cy2a19@pretty-print write) (set! cy2a5f@cy2a19@pretty-print cy2a19@pretty-print) (set! cy2a1b@compile-core-expr-to-port (lambda (cy2a56@x cy2a57@p) (cy2a19@pretty-print ((cy2a13@rewriter '#f) cy2a56@x) cy2a57@p))) (set! cy2a60@cy2a1b@compile-core-expr-to-port cy2a1b@compile-core-expr-to-port) (void))
(begin (void))
(begin (set! cy2aaf@make-collection (unspecified)) (set! cy2ab1@current-library-collection (unspecified)) (set! cy2ab3@rp (unspecified)) (set! cy2abd@library? (unspecified)) (set! cy2abf@library-id (unspecified)) (set! cy2ac1@set-library-id! (unspecified)) (set! cy2ac3@library-name (unspecified)) (set! cy2ac5@set-library-name! (unspecified)) (set! cy2ac7@library-version (unspecified)) (set! cy2ac9@set-library-version! (unspecified)) (set! cy2acb@library-imp* (unspecified)) (set! cy2acd@set-library-imp*! (unspecified)) (set! cy2acf@library-vis* (unspecified)) (set! cy2ad1@set-library-vis*! (unspecified)) (set! cy2ad3@library-inv* (unspecified)) (set! cy2ad5@set-library-inv*! (unspecified)) (set! cy2ad7@library-subst (unspecified)) (set! cy2ad9@set-library-subst! (unspecified)) (set! cy2adb@library-env (unspecified)) (set! cy2add@set-library-env! (unspecified)) (set! cy2adf@library-visit-state (unspecified)) (set! cy2ae1@set-library-visit-state! (unspecified)) (set! cy2ae3@library-invoke-state (unspecified)) (set! cy2ae5@set-library-invoke-state! (unspecified)) (set! cy2ae7@library-visit-code (unspecified)) (set! cy2ae9@set-library-visit-code! (unspecified)) (set! cy2aeb@library-invoke-code (unspecified)) (set! cy2aed@set-library-invoke-code! (unspecified)) (set! cy2aef@library-visible? (unspecified)) (set! cy2af1@set-library-visible?! (unspecified)) (set! cy2af3@library-source-file-name (unspecified)) (set! cy2af5@set-library-source-file-name! (unspecified)) (set! cy2af7@dummy (unspecified)) (set! cy2af9@find-dependencies (unspecified)) (set! cy2afb@find-library-by (unspecified)) (set! cy2afd@library-path (unspecified)) (set! cy2aff@library-extensions (unspecified)) (set! cy2b01@library-name->file-name (unspecified)) (set! cy2b03@file-locator (unspecified)) (set! cy2b05@serialize-all (unspecified)) (set! cy2b07@current-precompiled-library-loader (unspecified)) (set! cy2b09@try-load-from-file (unspecified)) (set! cy2b0b@library-loader (unspecified)) (set! cy2b0d@current-library-expander (unspecified)) (set! cy2b0f@external-pending-libraries (unspecified)) (set! cy2b11@find-external-library (unspecified)) (set! cy2b13@find-library-by-name (unspecified)) (set! cy2b15@library-exists? (unspecified)) (set! cy2b17@find-library-by-spec/die (unspecified)) (set! cy2b19@label->binding-table (unspecified)) (set! cy2b1b@install-library-record (unspecified)) (set! cy2b1d@install-library (unspecified)) (set! cy2b1f@imported-label->binding (unspecified)) (set! cy2b21@invoke-library (unspecified)) (set! cy2b23@visit-library (unspecified)) (set! cy2b25@invoke-library-by-spec (unspecified)) (set! cy2b27@installed-libraries (unspecified)) (set! cy2b29@library-spec (unspecified)) (set! cy2aaf@make-collection (lambda () (let ((cy2b2a@set '())) (let ((cy2b2d@set-cons '#f)) (begin (set! cy2b2d@set-cons (lambda (cy2b32@x cy2b33@ls) (if (memq cy2b32@x cy2b33@ls) cy2b33@ls (cons cy2b32@x cy2b33@ls)))) (lambda cy2b30 (let ((cy2b31 (length cy2b30))) (if (= cy2b31 '0) (apply (lambda () cy2b2a@set) cy2b30) (if (= cy2b31 '1) (apply (lambda (cy2b2e@x) (set! cy2b2a@set (cy2b2d@set-cons cy2b2e@x cy2b2a@set))) cy2b30) (error 'apply '"invalid arg count")))))))))) (set! cy2c9e@cy2aaf@make-collection cy2aaf@make-collection) (set! cy2ab1@current-library-collection (cy2a07@cy28e6@make-parameter (cy2aaf@make-collection) (lambda (cy2b36@x) (begin (if (not (procedure? cy2b36@x)) (assertion-violation 'current-library-collection '"not a procedure" cy2b36@x) (void)) cy2b36@x)))) (set! cy2c9f@cy2ab1@current-library-collection cy2ab1@current-library-collection) (set! cy2ab3@rp (cy2a04@cy28e0@make-record-printer 'library (lambda (cy2b38@x cy2b39@p cy2b3a@wr) (begin (if (not (cy2abd@library? cy2b38@x)) (assertion-violation 'record-type-printer '"not a library") (void)) (display (format '"#<library ~s>" (if (null? (cy2ac7@library-version cy2b38@x)) (cy2ac3@library-name cy2b38@x) (append (cy2ac3@library-name cy2b38@x) (list (cy2ac7@library-version cy2b38@x))))) cy2b39@p))))) (set! cy2ca0@cy2ab3@rp cy2ab3@rp) (set! cy2abd@library? (lambda (cy2b3e@x) (and (simple-struct? cy2b3e@x) (eq? (simple-struct-name cy2b3e@x) 'library)))) (set! cy2ca1@cy2abd@library? cy2abd@library?) (set! cy2abf@library-id (lambda (cy2b40@x) (simple-struct-ref cy2b40@x '0))) (set! cy2ca2@cy2abf@library-id cy2abf@library-id) (set! cy2ac1@set-library-id! (lambda (cy2b42@x cy2b43@val) (simple-struct-set! cy2b42@x '0 cy2b43@val))) (set! cy2ca3@cy2ac1@set-library-id! cy2ac1@set-library-id!) (set! cy2ac3@library-name (lambda (cy2b46@x) (simple-struct-ref cy2b46@x '1))) (set! cy2ca4@cy2ac3@library-name cy2ac3@library-name) (set! cy2ac5@set-library-name! (lambda (cy2b48@x cy2b49@val) (simple-struct-set! cy2b48@x '1 cy2b49@val))) (set! cy2ca5@cy2ac5@set-library-name! cy2ac5@set-library-name!) (set! cy2ac7@library-version (lambda (cy2b4c@x) (simple-struct-ref cy2b4c@x '2))) (set! cy2ca6@cy2ac7@library-version cy2ac7@library-version) (set! cy2ac9@set-library-version! (lambda (cy2b4e@x cy2b4f@val) (simple-struct-set! cy2b4e@x '2 cy2b4f@val))) (set! cy2ca7@cy2ac9@set-library-version! cy2ac9@set-library-version!) (set! cy2acb@library-imp* (lambda (cy2b52@x) (simple-struct-ref cy2b52@x '3))) (set! cy2ca8@cy2acb@library-imp* cy2acb@library-imp*) (set! cy2acd@set-library-imp*! (lambda (cy2b54@x cy2b55@val) (simple-struct-set! cy2b54@x '3 cy2b55@val))) (set! cy2ca9@cy2acd@set-library-imp*! cy2acd@set-library-imp*!) (set! cy2acf@library-vis* (lambda (cy2b58@x) (simple-struct-ref cy2b58@x '4))) (set! cy2caa@cy2acf@library-vis* cy2acf@library-vis*) (set! cy2ad1@set-library-vis*! (lambda (cy2b5a@x cy2b5b@val) (simple-struct-set! cy2b5a@x '4 cy2b5b@val))) (set! cy2cab@cy2ad1@set-library-vis*! cy2ad1@set-library-vis*!) (set! cy2ad3@library-inv* (lambda (cy2b5e@x) (simple-struct-ref cy2b5e@x '5))) (set! cy2cac@cy2ad3@library-inv* cy2ad3@library-inv*) (set! cy2ad5@set-library-inv*! (lambda (cy2b60@x cy2b61@val) (simple-struct-set! cy2b60@x '5 cy2b61@val))) (set! cy2cad@cy2ad5@set-library-inv*! cy2ad5@set-library-inv*!) (set! cy2ad7@library-subst (lambda (cy2b64@x) (simple-struct-ref cy2b64@x '6))) (set! cy2cae@cy2ad7@library-subst cy2ad7@library-subst) (set! cy2ad9@set-library-subst! (lambda (cy2b66@x cy2b67@val) (simple-struct-set! cy2b66@x '6 cy2b67@val))) (set! cy2caf@cy2ad9@set-library-subst! cy2ad9@set-library-subst!) (set! cy2adb@library-env (lambda (cy2b6a@x) (simple-struct-ref cy2b6a@x '7))) (set! cy2cb0@cy2adb@library-env cy2adb@library-env) (set! cy2add@set-library-env! (lambda (cy2b6c@x cy2b6d@val) (simple-struct-set! cy2b6c@x '7 cy2b6d@val))) (set! cy2cb1@cy2add@set-library-env! cy2add@set-library-env!) (set! cy2adf@library-visit-state (lambda (cy2b70@x) (simple-struct-ref cy2b70@x '8))) (set! cy2cb2@cy2adf@library-visit-state cy2adf@library-visit-state) (set! cy2ae1@set-library-visit-state! (lambda (cy2b72@x cy2b73@val) (simple-struct-set! cy2b72@x '8 cy2b73@val))) (set! cy2cb3@cy2ae1@set-library-visit-state! cy2ae1@set-library-visit-state!) (set! cy2ae3@library-invoke-state (lambda (cy2b76@x) (simple-struct-ref cy2b76@x '9))) (set! cy2cb4@cy2ae3@library-invoke-state cy2ae3@library-invoke-state) (set! cy2ae5@set-library-invoke-state! (lambda (cy2b78@x cy2b79@val) (simple-struct-set! cy2b78@x '9 cy2b79@val))) (set! cy2cb5@cy2ae5@set-library-invoke-state! cy2ae5@set-library-invoke-state!) (set! cy2ae7@library-visit-code (lambda (cy2b7c@x) (simple-struct-ref cy2b7c@x '10))) (set! cy2cb6@cy2ae7@library-visit-code cy2ae7@library-visit-code) (set! cy2ae9@set-library-visit-code! (lambda (cy2b7e@x cy2b7f@val) (simple-struct-set! cy2b7e@x '10 cy2b7f@val))) (set! cy2cb7@cy2ae9@set-library-visit-code! cy2ae9@set-library-visit-code!) (set! cy2aeb@library-invoke-code (lambda (cy2b82@x) (simple-struct-ref cy2b82@x '11))) (set! cy2cb8@cy2aeb@library-invoke-code cy2aeb@library-invoke-code) (set! cy2aed@set-library-invoke-code! (lambda (cy2b84@x cy2b85@val) (simple-struct-set! cy2b84@x '11 cy2b85@val))) (set! cy2cb9@cy2aed@set-library-invoke-code! cy2aed@set-library-invoke-code!) (set! cy2aef@library-visible? (lambda (cy2b88@x) (simple-struct-ref cy2b88@x '12))) (set! cy2cba@cy2aef@library-visible? cy2aef@library-visible?) (set! cy2af1@set-library-visible?! (lambda (cy2b8a@x cy2b8b@val) (simple-struct-set! cy2b8a@x '12 cy2b8b@val))) (set! cy2cbb@cy2af1@set-library-visible?! cy2af1@set-library-visible?!) (set! cy2af3@library-source-file-name (lambda (cy2b8e@x) (simple-struct-ref cy2b8e@x '13))) (set! cy2cbc@cy2af3@library-source-file-name cy2af3@library-source-file-name) (set! cy2af5@set-library-source-file-name! (lambda (cy2b90@x cy2b91@val) (simple-struct-set! cy2b90@x '13 cy2b91@val))) (set! cy2cbd@cy2af5@set-library-source-file-name! cy2af5@set-library-source-file-name!) (set! cy2af7@dummy '3) (set! cy2cbe@cy2af7@dummy cy2af7@dummy) (set! cy2af9@find-dependencies (lambda (cy2b94@ls) (if (null? cy2b94@ls) '() (assertion-violation 'find-dependencies '"cannot handle deps yet")))) (set! cy2cbf@cy2af9@find-dependencies cy2af9@find-dependencies) (set! cy2afb@find-library-by (lambda (cy2b96@pred) (let cy2b9a@f ((cy2b98@ls ((cy2ab1@current-library-collection)))) (if (null? cy2b98@ls) '#f (if (cy2b96@pred (car cy2b98@ls)) (car cy2b98@ls) (cy2b9a@f (cdr cy2b98@ls))))))) (set! cy2cc0@cy2afb@find-library-by cy2afb@find-library-by) (set! cy2afd@library-path (cy2a07@cy28e6@make-parameter '(".") (lambda (cy2b9c@x) (if (and (list? cy2b9c@x) (for-all string? cy2b9c@x)) (map (lambda (cy2b9e@x) cy2b9e@x) cy2b9c@x) (assertion-violation 'library-path '"not a list of strings" cy2b9c@x))))) (set! cy2cc1@cy2afd@library-path cy2afd@library-path) (set! cy2aff@library-extensions (cy2a07@cy28e6@make-parameter '(".sls" ".ss" ".scm") (lambda (cy2ba0@x) (if (and (list? cy2ba0@x) (for-all string? cy2ba0@x)) (map (lambda (cy2ba2@x) cy2ba2@x) cy2ba0@x) (assertion-violation 'library-extensions '"not a list of strings" cy2ba0@x))))) (set! cy2cc2@cy2aff@library-extensions cy2aff@library-extensions) (set! cy2b01@library-name->file-name (lambda (cy2ba4@x) (call-with-values (lambda () (open-string-output-port)) (lambda (cy2baa@cy2ba7 cy2bab@cy2ba9) (let ((cy2bae@extract cy2bab@cy2ba9) (cy2baf@p cy2baa@cy2ba7)) (let ((cy2bb3@display-hex '#f)) (begin (set! cy2bb3@display-hex (lambda (cy2bbc@n) (if (<= '0 cy2bbc@n '9) (display cy2bbc@n cy2baf@p) (display (integer->char (+ (char->integer '#\a) (- cy2bbc@n '10))) cy2baf@p)))) (begin (let cy2bb6@f ((cy2bb4@ls cy2ba4@x)) (if (not (null? cy2bb4@ls)) (begin (display '"/" cy2baf@p) (for-each (lambda (cy2bb8@c) (if (or (char<=? '#\a cy2bb8@c '#\z) (char<=? '#\A cy2bb8@c '#\Z) (char<=? '#\0 cy2bb8@c '#\9) (memv cy2bb8@c '(#\- #\. #\_ #\~))) (display cy2bb8@c cy2baf@p) (begin (display '"%" cy2baf@p) (let ((cy2bba@n (char->integer cy2bb8@c))) (begin (cy2bb3@display-hex (quotient cy2bba@n '16)) (cy2bb3@display-hex (remainder cy2bba@n '16))))))) (string->list (symbol->string (car cy2bb4@ls)))) (cy2bb6@f (cdr cy2bb4@ls))) (void))) (cy2bae@extract))))))))) (set! cy2cc3@cy2b01@library-name->file-name cy2b01@library-name->file-name) (set! cy2b03@file-locator (cy2a07@cy28e6@make-parameter (lambda (cy2bbe@x) (let ((cy2bc0@str (cy2b01@library-name->file-name cy2bbe@x))) (let cy2bc8@f ((cy2bc2@ls (cy2afd@library-path)) (cy2bc3@exts (cy2aff@library-extensions)) (cy2bc4@failed-list '())) (if (null? cy2bc2@ls) (let ((cy2bd2@cy2bcd '#f) (cy2bd4@cy2bcf '#f) (cy2bd6@cy2bce '#f) (cy2bd9@cy2bcc '#f) (cy2bdb@make-library-resolution-condition '#f) (cy2bdd@cy2bca '#f) (cy2bdf@cy2bcb '#f) (cy2be1@library-resolution-condition? '#f) (cy2be3@condition-library '#f) (cy2be5@condition-files '#f)) (begin (set! cy2bd2@cy2bcd (make-record-type-descriptor '&library-resolution cy4ed9@cy4c20@&condition-rtd 'cy2bd0 '#f '#f '#((immutable library) (immutable files)))) (set! cy2bd4@cy2bcf '#f) (set! cy2bd6@cy2bce (make-record-constructor-descriptor cy2bd2@cy2bcd cy4eda@cy4c22@&condition-rcd cy2bd4@cy2bcf)) (set! cy2bd9@cy2bcc (record-predicate cy2bd2@cy2bcd)) (set! cy2bdb@make-library-resolution-condition (record-constructor cy2bd6@cy2bce)) (set! cy2bdd@cy2bca (record-accessor cy2bd2@cy2bcd '0)) (set! cy2bdf@cy2bcb (record-accessor cy2bd2@cy2bcd '1)) (set! cy2be1@library-resolution-condition? (condition-predicate cy2bd2@cy2bcd)) (set! cy2be3@condition-library (condition-accessor cy2bd2@cy2bcd cy2bdd@cy2bca)) (set! cy2be5@condition-files (condition-accessor cy2bd2@cy2bcd cy2bdf@cy2bcb)) (raise (condition (cy4ef9@cy4cba@make-error) (cy4f1b@cy4d16@make-who-condition 'expander) (cy4edf@cy4c77@make-message-condition '"cannot locate library in library-path") (cy2bdb@make-library-resolution-condition cy2bbe@x (reverse cy2bc4@failed-list)))))) (if (null? cy2bc3@exts) (cy2bc8@f (cdr cy2bc2@ls) (cy2aff@library-extensions) cy2bc4@failed-list) (let ((cy2be6@name (string-append (car cy2bc2@ls) cy2bc0@str (car cy2bc3@exts)))) (if (file-exists? cy2be6@name) cy2be6@name (cy2bc8@f cy2bc2@ls (cdr cy2bc3@exts) (cons cy2be6@name cy2bc4@failed-list))))))))) (lambda (cy2be8@f) (if (procedure? cy2be8@f) cy2be8@f (assertion-violation 'file-locator '"not a procedure" cy2be8@f))))) (set! cy2cc4@cy2b03@file-locator cy2b03@file-locator) (set! cy2b05@serialize-all (lambda (cy2bea@serialize cy2beb@compile) (let ((cy2bef@library-desc '#f)) (begin (set! cy2bef@library-desc (lambda (cy2bf2@x) (list (cy2abf@library-id cy2bf2@x) (cy2ac3@library-name cy2bf2@x)))) (for-each (lambda (cy2bf0@x) (if (cy2af3@library-source-file-name cy2bf0@x) (cy2bea@serialize (cy2af3@library-source-file-name cy2bf0@x) (list (cy2abf@library-id cy2bf0@x) (cy2ac3@library-name cy2bf0@x) (cy2ac7@library-version cy2bf0@x) (map cy2bef@library-desc (cy2acb@library-imp* cy2bf0@x)) (map cy2bef@library-desc (cy2acf@library-vis* cy2bf0@x)) (map cy2bef@library-desc (cy2ad3@library-inv* cy2bf0@x)) (cy2ad7@library-subst cy2bf0@x) (cy2adb@library-env cy2bf0@x) (cy2beb@compile (cy2ae7@library-visit-code cy2bf0@x)) (cy2beb@compile (cy2aeb@library-invoke-code cy2bf0@x)) (cy2aef@library-visible? cy2bf0@x))) (void))) ((cy2ab1@current-library-collection))))))) (set! cy2cc5@cy2b05@serialize-all cy2b05@serialize-all) (set! cy2b07@current-precompiled-library-loader (cy2a07@cy28e6@make-parameter (lambda (cy2bf4@filename cy2bf5@sk) '#f))) (set! cy2cc6@cy2b07@current-precompiled-library-loader cy2b07@current-precompiled-library-loader) (set! cy2b09@try-load-from-file (lambda (cy2bf8@filename) ((cy2b07@current-precompiled-library-loader) cy2bf8@filename (lambda cy2c1e (let ((cy2c1f (length cy2c1e))) (if (= cy2c1f '11) (apply (lambda (cy2bfa@id cy2bfb@name cy2bfc@ver cy2bfd@imp* cy2bfe@vis* cy2bff@inv* cy2c00@exp-subst cy2c01@exp-env cy2c02@visit-proc cy2c03@invoke-proc cy2c04@visible?) (let cy2c12@f ((cy2c10@deps (append cy2bfd@imp* cy2bfe@vis* cy2bff@inv*))) (if (null? cy2c10@deps) (begin (cy2b1d@install-library cy2bfa@id cy2bfb@name cy2bfc@ver cy2bfd@imp* cy2bfe@vis* cy2bff@inv* cy2c00@exp-subst cy2c01@exp-env cy2c02@visit-proc cy2c03@invoke-proc '#f '#f cy2c04@visible? '#f) '#t) (let ((cy2c14@d (car cy2c10@deps))) (let ((cy2c16@label (car cy2c14@d)) (cy2c17@dname (cadr cy2c14@d))) (let ((cy2c1a@l (cy2b13@find-library-by-name cy2c17@dname))) (if (and (cy2abd@library? cy2c1a@l) (eq? cy2c16@label (cy2abf@library-id cy2c1a@l))) (cy2c12@f (cdr cy2c10@deps)) (begin (format (current-error-port) '"WARNING: library ~s has an inconsistent dependency on library ~s; file ~s will be recompiled from source. l=~a label=~a (library-id l)=~a\n" cy2bfb@name cy2c17@dname cy2bf8@filename cy2c1a@l cy2c16@label (cy2abf@library-id cy2c1a@l)) '#f)))))))) cy2c1e) (if (>= cy2c1f '0) (apply (lambda cy2c1c@others '#f) cy2c1e) (error 'apply '"invalid arg count")))))))) (set! cy2cc7@cy2b09@try-load-from-file cy2b09@try-load-from-file) (set! cy2b0b@library-loader (cy2a07@cy28e6@make-parameter (lambda (cy2c20@x) (let ((cy2c22@file-name ((cy2b03@file-locator) cy2c20@x))) (if (not cy2c22@file-name) (assertion-violation '#f '"cannot file library" cy2c20@x) (or (cy2b09@try-load-from-file cy2c22@file-name) ((cy2b0d@current-library-expander) (cy2a06@cy28e4@read-library-source-file cy2c22@file-name) cy2c22@file-name (lambda (cy2c24@name) (if (not (fast-equal? cy2c24@name cy2c20@x)) (assertion-violation 'import (call-with-values (lambda () (open-string-output-port)) (lambda (cy2c2a@cy2c27 cy2c2b@cy2c29) (let ((cy2c2e@e cy2c2b@cy2c29) (cy2c2f@p cy2c2a@cy2c27)) (begin (display '"expected to find library " cy2c2f@p) (write cy2c20@x cy2c2f@p) (display '" in file " cy2c2f@p) (display cy2c22@file-name cy2c2f@p) (display '", found " cy2c2f@p) (write cy2c24@name cy2c2f@p) (display '" instead" cy2c2f@p) (cy2c2e@e)))))) (void)))))))) (lambda (cy2c32@f) (if (procedure? cy2c32@f) cy2c32@f (assertion-violation 'library-locator '"not a procedure" cy2c32@f))))) (set! cy2cc8@cy2b0b@library-loader cy2b0b@library-loader) (set! cy2b0d@current-library-expander (cy2a07@cy28e6@make-parameter (lambda (cy2c34@x) (assertion-violation 'library-expander '"not initialized")) (lambda (cy2c36@f) (if (procedure? cy2c36@f) cy2c36@f (assertion-violation 'library-expander '"not a procedure" cy2c36@f))))) (set! cy2cc9@cy2b0d@current-library-expander cy2b0d@current-library-expander) (set! cy2b0f@external-pending-libraries (cy2a07@cy28e6@make-parameter '())) (set! cy2cca@cy2b0f@external-pending-libraries cy2b0f@external-pending-libraries) (set! cy2b11@find-external-library (lambda (cy2c38@name) (begin (if (member cy2c38@name (cy2b0f@external-pending-libraries)) (assertion-violation '#f '"circular attempt to import library was detected" cy2c38@name) (void)) (let ((cy2c3e@cy2c3b cy2b0f@external-pending-libraries) (cy2c3f@cy2c3d (cons cy2c38@name (cy2b0f@external-pending-libraries)))) (let ((cy2c42@swap (lambda () (let ((cy2c44@t (cy2c3e@cy2c3b))) (begin (cy2c3e@cy2c3b cy2c3f@cy2c3d) (set! cy2c3f@cy2c3d cy2c44@t)))))) (dynamic-wind cy2c42@swap (lambda () (begin ((cy2b0b@library-loader) cy2c38@name) (or (cy2afb@find-library-by (lambda (cy2c46@x) (fast-equal? (cy2ac3@library-name cy2c46@x) cy2c38@name))) (assertion-violation '#f '"handling external library did not yield the correct library" cy2c38@name)))) cy2c42@swap)))))) (set! cy2ccb@cy2b11@find-external-library cy2b11@find-external-library) (set! cy2b13@find-library-by-name (lambda (cy2c48@name) (or (cy2afb@find-library-by (lambda (cy2c4a@x) (fast-equal? (cy2ac3@library-name cy2c4a@x) cy2c48@name))) (cy2b11@find-external-library cy2c48@name)))) (set! cy2ccc@cy2b13@find-library-by-name cy2b13@find-library-by-name) (set! cy2b15@library-exists? (lambda (cy2c4c@name) (and (cy2afb@find-library-by (lambda (cy2c4e@x) (fast-equal? (cy2ac3@library-name cy2c4e@x) cy2c4c@name))) '#t))) (set! cy2ccd@cy2b15@library-exists? cy2b15@library-exists?) (set! cy2b17@find-library-by-spec/die (lambda (cy2c50@spec) (let ((cy2c52@id (car cy2c50@spec))) (or (cy2afb@find-library-by (lambda (cy2c54@x) (eq? cy2c52@id (cy2abf@library-id cy2c54@x)))) (assertion-violation '#f '"cannot find library with required spec" cy2c50@spec))))) (set! cy2cce@cy2b17@find-library-by-spec/die cy2b17@find-library-by-spec/die) (set! cy2b19@label->binding-table (make-eq-hashtable)) (set! cy2ccf@cy2b19@label->binding-table cy2b19@label->binding-table) (set! cy2b1b@install-library-record (lambda (cy2c56@lib) (begin (let ((cy2c58@exp-env (cy2adb@library-env cy2c56@lib))) (for-each (lambda (cy2c5a@x) (let ((cy2c5c@label (car cy2c5a@x)) (cy2c5d@binding (cdr cy2c5a@x))) (let ((cy2c60@binding (let ((cy2c62@t (car cy2c5d@binding))) (if (memv cy2c62@t '(global)) (cons 'global (cons cy2c56@lib (cdr cy2c5d@binding))) (if (memv cy2c62@t '(global-macro)) (cons 'global-macro (cons cy2c56@lib (cdr cy2c5d@binding))) (if (memv cy2c62@t '(global-macro!)) (cons 'global-macro! (cons cy2c56@lib (cdr cy2c5d@binding))) cy2c5d@binding)))))) (begin (if (hashtable-ref cy2b19@label->binding-table cy2c5c@label '#f) (begin (format (current-error-port) '"FATAL overwrite !! key=~a value=~a to ~a\n" cy2c5c@label (hashtable-ref cy2b19@label->binding-table cy2c5c@label '#f) cy2c60@binding) (exit)) (void)) (hashtable-set! cy2b19@label->binding-table cy2c5c@label cy2c60@binding))))) cy2c58@exp-env)) ((cy2ab1@current-library-collection) cy2c56@lib)))) (set! cy2cd0@cy2b1b@install-library-record cy2b1b@install-library-record) (set! cy2b1d@install-library (lambda (cy2c64@id cy2c65@name cy2c66@ver cy2c67@imp* cy2c68@vis* cy2c69@inv* cy2c6a@exp-subst cy2c6b@exp-env cy2c6c@visit-proc cy2c6d@invoke-proc cy2c6e@visit-code cy2c6f@invoke-code cy2c70@visible? cy2c71@source-file-name) (let ((cy2c80@imp-lib* (map cy2b17@find-library-by-spec/die cy2c67@imp*)) (cy2c81@vis-lib* (map cy2b17@find-library-by-spec/die cy2c68@vis*)) (cy2c82@inv-lib* (map cy2b17@find-library-by-spec/die cy2c69@inv*))) (begin (if (not (and (symbol? cy2c64@id) (list? cy2c65@name) (list? cy2c66@ver))) (assertion-violation 'install-library '"invalid spec with id/name/ver" cy2c64@id cy2c65@name cy2c66@ver) (void)) (if (cy2b15@library-exists? cy2c65@name) (assertion-violation 'install-library '"library is already installed" cy2c65@name) (void)) (let ((cy2c86@lib (make-simple-struct 'library '15 (list cy2c64@id cy2c65@name cy2c66@ver cy2c80@imp-lib* cy2c81@vis-lib* cy2c82@inv-lib* cy2c6a@exp-subst cy2c6b@exp-env cy2c6c@visit-proc cy2c6d@invoke-proc cy2c6e@visit-code cy2c6f@invoke-code cy2c70@visible? cy2c71@source-file-name)))) (cy2b1b@install-library-record cy2c86@lib)))))) (set! cy2cd1@cy2b1d@install-library cy2b1d@install-library) (set! cy2b1f@imported-label->binding (lambda (cy2c88@lab) (hashtable-ref cy2b19@label->binding-table cy2c88@lab '#f))) (set! cy2cd2@cy2b1f@imported-label->binding cy2b1f@imported-label->binding) (set! cy2b21@invoke-library (lambda (cy2c8a@lib) (let ((cy2c8c@invoke (cy2ae3@library-invoke-state cy2c8a@lib))) (if (procedure? cy2c8c@invoke) (begin (cy2ae5@set-library-invoke-state! cy2c8a@lib (lambda () (assertion-violation 'invoke '"circularity detected" cy2c8a@lib))) (for-each cy2b21@invoke-library (cy2ad3@library-inv* cy2c8a@lib)) (cy2ae5@set-library-invoke-state! cy2c8a@lib (lambda () (assertion-violation 'invoke '"first invoke did not return" cy2c8a@lib))) (cy2c8c@invoke) (cy2ae5@set-library-invoke-state! cy2c8a@lib '#t)) (void))))) (set! cy2cd3@cy2b21@invoke-library cy2b21@invoke-library) (set! cy2b23@visit-library (lambda (cy2c8e@lib) (let ((cy2c90@visit (cy2adf@library-visit-state cy2c8e@lib))) (if (procedure? cy2c90@visit) (begin (cy2ae1@set-library-visit-state! cy2c8e@lib (lambda () (assertion-violation 'visit '"circularity detected" cy2c8e@lib))) (for-each cy2b21@invoke-library (cy2acf@library-vis* cy2c8e@lib)) (cy2ae1@set-library-visit-state! cy2c8e@lib (lambda () (assertion-violation 'invoke '"first visit did not return" cy2c8e@lib))) (cy2c90@visit) (cy2ae1@set-library-visit-state! cy2c8e@lib '#t)) (void))))) (set! cy2cd4@cy2b23@visit-library cy2b23@visit-library) (set! cy2b25@invoke-library-by-spec (lambda (cy2c92@spec) (cy2b21@invoke-library (cy2b17@find-library-by-spec/die cy2c92@spec)))) (set! cy2cd5@cy2b25@invoke-library-by-spec cy2b25@invoke-library-by-spec) (set! cy2b27@installed-libraries (lambda cy2c9a (let ((cy2c9b (length cy2c9a))) (if (= cy2c9b '1) (apply (lambda (cy2c94@all?) (let cy2c98@f ((cy2c96@ls ((cy2ab1@current-library-collection)))) (if (null? cy2c96@ls) '() (if (or cy2c94@all? (cy2aef@library-visible? (car cy2c96@ls))) (cons (car cy2c96@ls) (cy2c98@f (cdr cy2c96@ls))) (cy2c98@f (cdr cy2c96@ls)))))) cy2c9a) (if (= cy2c9b '0) (apply (lambda () (cy2b27@installed-libraries '#f)) cy2c9a) (error 'apply '"invalid arg count")))))) (set! cy2cd6@cy2b27@installed-libraries cy2b27@installed-libraries) (set! cy2b29@library-spec (lambda (cy2c9c@x) (begin (if (not (cy2abd@library? cy2c9c@x)) (assertion-violation 'library-spec '"not a library" cy2c9c@x) (void)) (list (cy2abf@library-id cy2c9c@x) (cy2ac3@library-name cy2c9c@x) (cy2ac7@library-version cy2c9c@x))))) (set! cy2cd7@cy2b29@library-spec cy2b29@library-spec) (void))
(begin (set! cy2cdb@build-global-define (unspecified)) (set! cy2d4c@build-lambda (unspecified)) (set! cy2d4e@build-case-lambda (unspecified)) (set! cy2d7c@build-sequence (unspecified)) (set! cy2d7e@build-void (unspecified)) (set! cy2d80@build-letrec (unspecified)) (set! cy2d82@build-let (unspecified)) (set! cy2d84@build-named-let (unspecified)) (set! cy2d86@build-letrec* (unspecified)) (set! cy2d88@build-library-letrec* (unspecified)) (set! cy2d8a@build-receive (unspecified)) (set! cy2cdb@build-global-define (lambda (cy2d8b@x) (cy2d7e@build-void))) (set! cy2e1f@cy2cdb@build-global-define cy2cdb@build-global-define) (set! cy2d4c@build-lambda (lambda (cy2d8d@ae cy2d8e@vars cy2d8f@exp) (list 'lambda cy2d8e@vars cy2d8f@exp))) (set! cy2e20@cy2d4c@build-lambda cy2d4c@build-lambda) (set! cy2d4e@build-case-lambda (lambda (cy2d93@ae cy2d94@vars* cy2d95@exp*) (let ((cy2d9a@build-error '#f) (cy2d9c@build-pred '#f) (cy2d9e@build-apply '#f) (cy2da0@expand-case-lambda '#f)) (begin (set! cy2d9a@build-error (lambda (cy2dd1@ae) (list '(primitive error) ''apply (list 'quote '"invalid arg count")))) (set! cy2d9c@build-pred (lambda (cy2db9@ae cy2dba@n cy2dbb@vars) (call-with-values (lambda () (let cy2dc7@f ((cy2dc3@vars cy2dbb@vars) (cy2dc4@count '0)) (if (pair? cy2dc3@vars) (cy2dc7@f (cdr cy2dc3@vars) (+ cy2dc4@count '1)) (if (null? cy2dc3@vars) (values cy2dc4@count '=) (values cy2dc4@count '>=))))) (lambda (cy2dc9@cy2dc0 cy2dca@cy2dc2) (let ((cy2dcd@pred cy2dca@cy2dc2) (cy2dce@count cy2dc9@cy2dc0)) (list (list 'primitive cy2dcd@pred) cy2dba@n (list 'quote cy2dce@count))))))) (set! cy2d9e@build-apply (lambda (cy2db1@ae cy2db2@g cy2db3@vars cy2db4@exp) (list '(primitive apply) (cy2d4c@build-lambda cy2db1@ae cy2db3@vars cy2db4@exp) cy2db2@g))) (set! cy2da0@expand-case-lambda (lambda (cy2da1@ae cy2da2@vars cy2da3@exp*) (let ((cy2da7@g (gensym)) (cy2da8@n (gensym))) (list 'lambda cy2da7@g (cy2d82@build-let cy2da1@ae (list cy2da8@n) (list (list '(primitive length) cy2da7@g)) (let cy2daf@f ((cy2dab@vars* cy2d94@vars*) (cy2dac@exp* cy2da3@exp*)) (if (null? cy2dab@vars*) (cy2d9a@build-error cy2da1@ae) (list 'if (cy2d9c@build-pred cy2da1@ae cy2da8@n (car cy2dab@vars*)) (cy2d9e@build-apply cy2da1@ae cy2da7@g (car cy2dab@vars*) (car cy2dac@exp*)) (cy2daf@f (cdr cy2dab@vars*) (cdr cy2dac@exp*)))))))))) (if (= (length cy2d95@exp*) '1) (cy2d4c@build-lambda cy2d93@ae (car cy2d94@vars*) (car cy2d95@exp*)) (cy2da0@expand-case-lambda cy2d93@ae cy2d94@vars* cy2d95@exp*)))))) (set! cy2e21@cy2d4e@build-case-lambda cy2d4e@build-case-lambda) (set! cy2d7c@build-sequence (lambda (cy2dd3@ae cy2dd4@exps) (let cy2dd9@loop ((cy2dd7@exps cy2dd4@exps)) (if (null? (cdr cy2dd7@exps)) (car cy2dd7@exps) (if (equal? (car cy2dd7@exps) (cy2d7e@build-void)) (cy2dd9@loop (cdr cy2dd7@exps)) (cons 'begin cy2dd7@exps)))))) (set! cy2e22@cy2d7c@build-sequence cy2d7c@build-sequence) (set! cy2d7e@build-void (lambda () '((primitive void)))) (set! cy2e23@cy2d7e@build-void cy2d7e@build-void) (set! cy2d80@build-letrec (lambda (cy2ddb@ae cy2ddc@vars cy2ddd@val-exps cy2dde@body-exp) (if (null? cy2ddc@vars) cy2dde@body-exp (list 'letrec (map list cy2ddc@vars cy2ddd@val-exps) cy2dde@body-exp)))) (set! cy2e24@cy2d80@build-letrec cy2d80@build-letrec) (set! cy2d82@build-let (lambda (cy2de3@ae cy2de4@vars cy2de5@val-exps cy2de6@body-exp) (if (null? cy2de4@vars) cy2de6@body-exp (list 'let (map list cy2de4@vars cy2de5@val-exps) cy2de6@body-exp)))) (set! cy2e25@cy2d82@build-let cy2d82@build-let) (set! cy2d84@build-named-let (lambda (cy2deb@ae cy2dec@name cy2ded@vars cy2dee@val-exps cy2def@body-exp) (list 'let cy2dec@name (map list cy2ded@vars cy2dee@val-exps) cy2def@body-exp))) (set! cy2e26@cy2d84@build-named-let cy2d84@build-named-let) (set! cy2d86@build-letrec* (lambda (cy2df5@ae cy2df6@vars cy2df7@val-exps cy2df8@body-exp) (if (null? cy2df6@vars) cy2df8@body-exp (cy2d82@build-let cy2df5@ae cy2df6@vars (map (lambda (cy2dfd@x) (list 'quote '#f)) cy2df6@vars) (cy2d7c@build-sequence cy2df5@ae (append (map (lambda (cy2dff@lhs cy2e00@rhs) (list 'set! cy2dff@lhs cy2e00@rhs)) cy2df6@vars cy2df7@val-exps) (list cy2df8@body-exp))))))) (set! cy2e27@cy2d86@build-letrec* cy2d86@build-letrec*) (set! cy2d88@build-library-letrec* (lambda (cy2e03@ae cy2e04@name cy2e05@vars cy2e06@locs cy2e07@val-exps cy2e08@body-exp) (cons 'begin (append (map (lambda (cy2e0f@var) (cons 'set! (cons cy2e0f@var '((unspecified))))) cy2e05@vars) (append (apply append (map (lambda (cy2e11@var cy2e12@loc cy2e13@val-exp) (list (list 'set! cy2e11@var cy2e13@val-exp) (list 'set! cy2e12@loc cy2e11@var))) cy2e05@vars cy2e06@locs cy2e07@val-exps)) (list cy2e08@body-exp)))))) (set! cy2e28@cy2d88@build-library-letrec* cy2d88@build-library-letrec*) (set! cy2d8a@build-receive (lambda (cy2e17@ae cy2e18@vars cy2e19@producer cy2e1a@body*) (begin (display '"************** in ") (cons 'receive (cons cy2e18@vars (cons cy2e19@producer cy2e1a@body*)))))) (set! cy2e29@cy2d8a@build-receive cy2d8a@build-receive) (void))
(begin (set! cy2e38@file-options-macro (unspecified)) (set! cy2e3a@set-cons (unspecified)) (set! cy2e3c@set-union (unspecified)) (set! cy2e41@top-mark* (unspecified)) (set! cy2e43@top-marked? (unspecified)) (set! cy2e45@gen-lexical (unspecified)) (set! cy2e47@gen-global (unspecified)) (set! cy2e49@gen-label (unspecified)) (set! cy2e4b@gen-top-level-label (unspecified)) (set! cy2e4d@gen-define-label+loc (unspecified)) (set! cy2e4f@gen-define-label (unspecified)) (set! cy2e59@rib? (unspecified)) (set! cy2e5b@rib-sym* (unspecified)) (set! cy2e5d@set-rib-sym*! (unspecified)) (set! cy2e5f@rib-mark** (unspecified)) (set! cy2e61@set-rib-mark**! (unspecified)) (set! cy2e63@rib-label* (unspecified)) (set! cy2e65@set-rib-label*! (unspecified)) (set! cy2e67@rib-sealed/freq (unspecified)) (set! cy2e69@set-rib-sealed/freq! (unspecified)) (set! cy2e6b@rib-cache (unspecified)) (set! cy2e6d@set-rib-cache! (unspecified)) (set! cy2e6f@dummy (unspecified)) (set! cy2e71@make-empty-rib (unspecified)) (set! cy2e73@extend-rib! (unspecified)) (set! cy2e75@extend-rib/nc! (unspecified)) (set! cy2e77@make-rib-map (unspecified)) (set! cy2e79@seal-rib! (unspecified)) (set! cy2e7b@unseal-rib! (unspecified)) (set! cy2e7d@make-full-rib (unspecified)) (set! cy2e7f@rp (unspecified)) (set! cy2e89@stx? (unspecified)) (set! cy2e8b@stx-expr (unspecified)) (set! cy2e8d@set-stx-expr! (unspecified)) (set! cy2e8f@stx-mark* (unspecified)) (set! cy2e91@set-stx-mark*! (unspecified)) (set! cy2e93@stx-subst* (unspecified)) (set! cy2e95@set-stx-subst*! (unspecified)) (set! cy2e97@stx-ae* (unspecified)) (set! cy2e99@set-stx-ae*! (unspecified)) (set! cy2e9b@dummy (unspecified)) (set! cy2e9d@datum->stx (unspecified)) (set! cy2e9f@gen-mark (unspecified)) (set! cy2ea1@anti-mark (unspecified)) (set! cy2ea3@anti-mark? (unspecified)) (set! cy2ea5@mkstx (unspecified)) (set! cy2ea7@add-mark (unspecified)) (set! cy2ea9@add-subst (unspecified)) (set! cy2eab@syntax-kind? (unspecified)) (set! cy2ead@syntax-vector->list (unspecified)) (set! cy2eaf@syntax-pair? (unspecified)) (set! cy2eb1@syntax-vector? (unspecified)) (set! cy2eb3@syntax-null? (unspecified)) (set! cy2eb5@syntax-list? (unspecified)) (set! cy2eb7@syntax-car (unspecified)) (set! cy2eb9@syntax-cdr (unspecified)) (set! cy2ebb@syntax->list (unspecified)) (set! cy2ebd@id? (unspecified)) (set! cy2ebf@id->sym (unspecified)) (set! cy2ec1@bound-id=? (unspecified)) (set! cy2ec3@free-id=? (unspecified)) (set! cy2ec5@valid-bound-ids? (unspecified)) (set! cy2ec7@distinct-bound-ids? (unspecified)) (set! cy2ec9@bound-id-member? (unspecified)) (set! cy2ecb@self-evaluating? (unspecified)) (set! cy2ecd@strip-annotations (unspecified)) (set! cy2ecf@strip (unspecified)) (set! cy2ed1@stx->datum (unspecified)) (set! cy2ed3@id->label (unspecified)) (set! cy2ed5@label->binding (unspecified)) (set! cy2ed7@make-binding (unspecified)) (set! cy2ed9@binding-type (unspecified)) (set! cy2edb@binding-value (unspecified)) (set! cy2edd@raise-unbound-error (unspecified)) (set! cy2edf@syntax-type (unspecified)) (set! cy2eed@sanitize-binding (unspecified)) (set! cy2eef@make-variable-transformer (unspecified)) (set! cy2ef1@variable-transformer? (unspecified)) (set! cy2ef3@variable-transformer-procedure (unspecified)) (set! cy2ef5@make-eval-transformer (unspecified)) (set! cy3046@parse-define (unspecified)) (set! cy3048@parse-define-syntax (unspecified)) (set! cy304a@scheme-stx-hashtable (unspecified)) (set! cy304c@scheme-stx (unspecified)) (set! cy304e@lexical-var (unspecified)) (set! cy3050@lexical-mutable? (unspecified)) (set! cy3052@set-lexical-mutable! (unspecified)) (set! cy3054@add-lexical (unspecified)) (set! cy3056@add-lexicals (unspecified)) (set! cy3058@letrec-helper (unspecified)) (set! cy305a@let-transformer (unspecified)) (set! cy305c@letrec-transformer (unspecified)) (set! cy305e@letrec*-transformer (unspecified)) (set! cy3060@fluid-let-syntax-transformer (unspecified)) (set! cy3062@type-descriptor-transformer (unspecified)) (set! cy3064@record-type-descriptor-transformer (unspecified)) (set! cy3066@record-constructor-descriptor-transformer (unspecified)) (set! cy3068@when-macro (unspecified)) (set! cy306a@unless-macro (unspecified)) (set! cy306c@if-transformer (unspecified)) (set! cy306e@and-transformer (unspecified)) (set! cy3070@or-transformer (unspecified)) (set! cy3072@case-macro (unspecified)) (set! cy3074@quote-transformer (unspecified)) (set! cy3076@case-lambda-transformer (unspecified)) (set! cy3078@lambda-transformer (unspecified)) (set! cy307a@bless (unspecified)) (set! cy307c@with-syntax-macro (unspecified)) (set! cy307e@invalid-fmls-error (unspecified)) (set! cy3080@let-macro (unspecified)) (set! cy3082@let-values-macro (unspecified)) (set! cy3084@let*-values-macro (unspecified)) (set! cy3086@trace-lambda-macro (unspecified)) (set! cy3088@trace-define-macro (unspecified)) (set! cy308a@trace-define-syntax-macro (unspecified)) (set! cy308c@trace-let/rec-syntax (unspecified)) (set! cy308e@trace-let-syntax-macro (unspecified)) (set! cy3090@trace-letrec-syntax-macro (unspecified)) (set! cy3092@guard-macro (unspecified)) (set! cy3094@define-enumeration-macro (unspecified)) (set! cy3096@time-macro (unspecified)) (set! cy3098@delay-macro (unspecified)) (set! cy309a@assert-macro (unspecified)) (set! cy309c@endianness-macro (unspecified)) (set! cy309e@identifier-syntax-macro (unspecified)) (set! cy30a0@do-macro (unspecified)) (set! cy30a2@let*-macro (unspecified)) (set! cy30a4@or-macro (unspecified)) (set! cy30a6@and-macro (unspecified)) (set! cy30a8@cond-macro (unspecified)) (set! cy30aa@do-include (unspecified)) (set! cy30ac@include-macro (unspecified)) (set! cy30ae@include-into-macro (unspecified)) (set! cy30b0@syntax-rules-macro (unspecified)) (set! cy30b2@quasiquote-macro (unspecified)) (set! cy30b4@quasisyntax-macro (unspecified)) (set! cy30b6@define-struct-macro (unspecified)) (set! cy30b8@define-record-type-macro (unspecified)) (set! cy30ba@define-condition-type-macro (unspecified)) (set! cy30bc@incorrect-usage-macro (unspecified)) (set! cy30be@parameterize-macro (unspecified)) (set! cy30c0@foreign-call-transformer (unspecified)) (set! cy30c2@convert-pattern (unspecified)) (set! cy30c4@syntax-dispatch (unspecified)) (set! cy30c6@ellipsis? (unspecified)) (set! cy30c8@underscore? (unspecified)) (set! cy30ca@verify-literals (unspecified)) (set! cy30cc@syntax-case-transformer (unspecified)) (set! cy30ce@ellipsis-map (unspecified)) (set! cy30d0@syntax-transformer (unspecified)) (set! cy30d2@core-macro-transformer (unspecified)) (set! cy30d4@symbol-macro (unspecified)) (set! cy30d6@macro-transformer (unspecified)) (set! cy30d8@local-macro-transformer (unspecified)) (set! cy30da@do-macro-call (unspecified)) (set! cy30dc@chi-macro (unspecified)) (set! cy30de@chi-local-macro (unspecified)) (set! cy30e0@chi-global-macro (unspecified)) (set! cy30e2@chi-expr* (unspecified)) (set! cy30e4@chi-application (unspecified)) (set! cy30e6@chi-expr (unspecified)) (set! cy30e8@chi-set! (unspecified)) (set! cy30ea@verify-formals (unspecified)) (set! cy30ec@chi-lambda-clause (unspecified)) (set! cy30ee@chi-lambda-clause* (unspecified)) (set! cy30f0@chi-defun (unspecified)) (set! cy30f2@chi-rhs (unspecified)) (set! cy30f4@expand-interaction-rhs*/init* (unspecified)) (set! cy30f6@chi-rhs* (unspecified)) (set! cy30f8@find-bound=? (unspecified)) (set! cy30fa@find-dups (unspecified)) (set! cy30fc@chi-internal (unspecified)) (set! cy30fe@parse-module (unspecified)) (set! cy3108@module-interface? (unspecified)) (set! cy310a@module-interface-first-mark (unspecified)) (set! cy310c@set-module-interface-first-mark! (unspecified)) (set! cy310e@module-interface-exp-id-vec (unspecified)) (set! cy3110@set-module-interface-exp-id-vec! (unspecified)) (set! cy3112@module-interface-exp-lab-vec (unspecified)) (set! cy3114@set-module-interface-exp-lab-vec! (unspecified)) (set! cy3116@dummy (unspecified)) (set! cy3118@module-interface-exp-id* (unspecified)) (set! cy311a@chi-internal-module (unspecified)) (set! cy311c@chi-body* (unspecified)) (set! cy311e@expand-transformer (unspecified)) (set! cy3120@parse-exports (unspecified)) (set! cy3122@parse-library-name (unspecified)) (set! cy3124@parse-library (unspecified)) (set! cy3126@parse-import-spec* (unspecified)) (set! cy3128@make-top-rib (unspecified)) (set! cy312a@make-collector (unspecified)) (set! cy312c@inv-collector (unspecified)) (set! cy312e@vis-collector (unspecified)) (set! cy3130@imp-collector (unspecified)) (set! cy3132@chi-library-internal (unspecified)) (set! cy3134@chi-interaction-expr (unspecified)) (set! cy3136@library-body-expander (unspecified)) (set! cy3138@core-library-expander (unspecified)) (set! cy313a@parse-top-level-program (unspecified)) (set! cy313c@top-level-expander (unspecified)) (set! cy313e@rp (unspecified)) (set! cy3148@env? (unspecified)) (set! cy314a@env-names (unspecified)) (set! cy314c@set-env-names! (unspecified)) (set! cy314e@env-labels (unspecified)) (set! cy3150@set-env-labels! (unspecified)) (set! cy3152@env-itc (unspecified)) (set! cy3154@set-env-itc! (unspecified)) (set! cy3156@dummy (unspecified)) (set! cy3158@rp (unspecified)) (set! cy3162@interaction-env? (unspecified)) (set! cy3164@interaction-env-rib (unspecified)) (set! cy3166@set-interaction-env-rib! (unspecified)) (set! cy3168@interaction-env-r (unspecified)) (set! cy316a@set-interaction-env-r! (unspecified)) (set! cy316c@interaction-env-locs (unspecified)) (set! cy316e@set-interaction-env-locs! (unspecified)) (set! cy3170@dummy (unspecified)) (set! cy3172@interaction-environment-symbols (unspecified)) (set! cy3174@environment-bindings (unspecified)) (set! cy3176@parse-binding (unspecified)) (set! cy3178@environment? (unspecified)) (set! cy317a@environment-symbols (unspecified)) (set! cy317c@environment (unspecified)) (set! cy317e@null-environment (unspecified)) (set! cy3180@scheme-report-environment (unspecified)) (set! cy3182@expand (unspecified)) (set! cy3184@eval (unspecified)) (set! cy3186@library-expander (unspecified)) (set! cy3188@boot-library-expand (unspecified)) (set! cy318a@rev-map-append (unspecified)) (set! cy318c@build-exports (unspecified)) (set! cy318e@make-export-subst (unspecified)) (set! cy3190@make-export-env/macros (unspecified)) (set! cy3192@generate-temporaries (unspecified)) (set! cy3194@free-identifier=? (unspecified)) (set! cy3196@bound-identifier=? (unspecified)) (set! cy3198@make-source-condition (unspecified)) (set! cy319a@extract-position-condition (unspecified)) (set! cy319c@expression-position (unspecified)) (set! cy319e@assertion-error (unspecified)) (set! cy31a0@syntax-error (unspecified)) (set! cy31a2@syntax-violation* (unspecified)) (set! cy31a4@syntax-violation (unspecified)) (set! cy31a6@identifier? (unspecified)) (set! cy31a8@datum->syntax (unspecified)) (set! cy31aa@syntax->datum (unspecified)) (set! cy31ac@ungensym-all (unspecified)) (set! cy31ae@compile-r6rs-top-level (unspecified)) (set! cy31b0@pre-compile-r6rs-top-level (unspecified)) (set! cy31b2@interaction-environment (unspecified)) (set! cy31b4@top-level-context (unspecified)) (set! cy2e38@file-options-macro (lambda (cy31b5@x) (let ((cy31b8@valid-option? '#f)) (begin (set! cy31b8@valid-option? (lambda (cy31c1@x) (and (cy2ebd@id? cy31c1@x) (memq (cy2ebf@id->sym cy31c1@x) '(no-fail no-create no-truncate))))) (let ((cy31b9@t cy31b5@x)) (let ((cy31bb@ls/false (cy30c4@syntax-dispatch cy31b9@t '(_ . each-any)))) (if (and cy31bb@ls/false (apply (lambda (cy31bd@opt*) (for-all cy31b8@valid-option? cy31bd@opt*)) cy31bb@ls/false)) (apply (lambda (cy31bf@opt*) (cy307a@bless (list 'make-file-options (list 'quote cy31bf@opt*)))) cy31bb@ls/false) (cy31a4@syntax-violation '#f '"invalid syntax" cy31b9@t)))))))) (set! cy4b0b@cy2e38@file-options-macro cy2e38@file-options-macro) (set! cy2e3a@set-cons (lambda (cy31c3@x cy31c4@ls) (if (memq cy31c3@x cy31c4@ls) cy31c4@ls (cons cy31c3@x cy31c4@ls)))) (set! cy4b0c@cy2e3a@set-cons cy2e3a@set-cons) (set! cy2e3c@set-union (lambda (cy31c7@ls1 cy31c8@ls2) (if (null? cy31c7@ls1) cy31c8@ls2 (if (memq (car cy31c7@ls1) cy31c8@ls2) (cy2e3c@set-union (cdr cy31c7@ls1) cy31c8@ls2) (cons (car cy31c7@ls1) (cy2e3c@set-union (cdr cy31c7@ls1) cy31c8@ls2)))))) (set! cy4b0d@cy2e3c@set-union cy2e3c@set-union) (set! cy2e41@top-mark* '(top)) (set! cy4b0e@cy2e41@top-mark* cy2e41@top-mark*) (set! cy2e43@top-marked? (lambda (cy31cb@m*) (memq 'top cy31cb@m*))) (set! cy4b0f@cy2e43@top-marked? cy2e43@top-marked?) (set! cy2e45@gen-lexical (lambda (cy31cd@sym) (if (symbol? cy31cd@sym) (gensym cy31cd@sym) (if (cy2e89@stx? cy31cd@sym) (cy2e45@gen-lexical (cy2ebf@id->sym cy31cd@sym)) (assertion-violation 'gen-lexical '"BUG: invalid arg" cy31cd@sym))))) (set! cy4b10@cy2e45@gen-lexical cy2e45@gen-lexical) (set! cy2e47@gen-global (lambda (cy31cf@x) (cy2e45@gen-lexical cy31cf@x))) (set! cy4b11@cy2e47@gen-global cy2e47@gen-global) (set! cy2e49@gen-label (lambda (cy31d1@_) (gensym))) (set! cy4b12@cy2e49@gen-label cy2e49@gen-label) (set! cy2e4b@gen-top-level-label (lambda (cy31d3@id cy31d4@rib) (let ((cy31d8@find '#f)) (begin (set! cy31d8@find (lambda (cy31e3@sym cy31e4@mark* cy31e5@sym* cy31e6@mark** cy31e7@label*) (and (pair? cy31e5@sym*) (if (and (eq? cy31e3@sym (car cy31e5@sym*)) (same-marks? cy31e4@mark* (car cy31e6@mark**))) (car cy31e7@label*) (cy31d8@find cy31e3@sym cy31e4@mark* (cdr cy31e5@sym*) (cdr cy31e6@mark**) (cdr cy31e7@label*)))))) (let ((cy31d9@sym (cy2ebf@id->sym cy31d3@id)) (cy31da@mark* (cy2e8f@stx-mark* cy31d3@id))) (let ((cy31dd@sym* (cy2e5b@rib-sym* cy31d4@rib))) (let ((cy31df@t (and (memq cy31d9@sym (cy2e5b@rib-sym* cy31d4@rib)) (cy31d8@find cy31d9@sym cy31da@mark* cy31dd@sym* (cy2e5f@rib-mark** cy31d4@rib) (cy2e63@rib-label* cy31d4@rib))))) (if cy31df@t ((lambda (cy31e1@label) (if (cy2cd2@cy2b1f@imported-label->binding cy31e1@label) (gensym) cy31e1@label)) cy31df@t) (gensym))))))))) (set! cy4b13@cy2e4b@gen-top-level-label cy2e4b@gen-top-level-label) (set! cy2e4d@gen-define-label+loc (lambda (cy31ed@id cy31ee@rib) (let ((cy31f1@t (cy31b4@top-level-context))) (if cy31f1@t ((lambda (cy31f3@env) (let ((cy31f5@label (cy2e4b@gen-top-level-label cy31ed@id cy31ee@rib)) (cy31f6@locs (cy316c@interaction-env-locs cy31f3@env))) (values cy31f5@label (let ((cy31f9@t (assq cy31f5@label cy31f6@locs))) (if cy31f9@t (cdr cy31f9@t) (let ((cy31fb@loc (cy2e45@gen-lexical cy31ed@id))) (begin (cy316e@set-interaction-env-locs! cy31f3@env (cons (cons cy31f5@label cy31fb@loc) cy31f6@locs)) cy31fb@loc))))))) cy31f1@t) (values (gensym) (cy2e45@gen-lexical cy31ed@id)))))) (set! cy4b14@cy2e4d@gen-define-label+loc cy2e4d@gen-define-label+loc) (set! cy2e4f@gen-define-label (lambda (cy31fd@id cy31fe@rib) (if (cy31b4@top-level-context) (cy2e4b@gen-top-level-label cy31fd@id cy31fe@rib) (gensym)))) (set! cy4b15@cy2e4f@gen-define-label cy2e4f@gen-define-label) (set! cy2e59@rib? (lambda (cy3201@x) (and (simple-struct? cy3201@x) (eq? (simple-struct-name cy3201@x) 'rib)))) (set! cy4b16@cy2e59@rib? cy2e59@rib?) (set! cy2e5b@rib-sym* (lambda (cy3203@x) (simple-struct-ref cy3203@x '0))) (set! cy4b17@cy2e5b@rib-sym* cy2e5b@rib-sym*) (set! cy2e5d@set-rib-sym*! (lambda (cy3205@x cy3206@val) (simple-struct-set! cy3205@x '0 cy3206@val))) (set! cy4b18@cy2e5d@set-rib-sym*! cy2e5d@set-rib-sym*!) (set! cy2e5f@rib-mark** (lambda (cy3209@x) (simple-struct-ref cy3209@x '1))) (set! cy4b19@cy2e5f@rib-mark** cy2e5f@rib-mark**) (set! cy2e61@set-rib-mark**! (lambda (cy320b@x cy320c@val) (simple-struct-set! cy320b@x '1 cy320c@val))) (set! cy4b1a@cy2e61@set-rib-mark**! cy2e61@set-rib-mark**!) (set! cy2e63@rib-label* (lambda (cy320f@x) (simple-struct-ref cy320f@x '2))) (set! cy4b1b@cy2e63@rib-label* cy2e63@rib-label*) (set! cy2e65@set-rib-label*! (lambda (cy3211@x cy3212@val) (simple-struct-set! cy3211@x '2 cy3212@val))) (set! cy4b1c@cy2e65@set-rib-label*! cy2e65@set-rib-label*!) (set! cy2e67@rib-sealed/freq (lambda (cy3215@x) (simple-struct-ref cy3215@x '3))) (set! cy4b1d@cy2e67@rib-sealed/freq cy2e67@rib-sealed/freq) (set! cy2e69@set-rib-sealed/freq! (lambda (cy3217@x cy3218@val) (simple-struct-set! cy3217@x '3 cy3218@val))) (set! cy4b1e@cy2e69@set-rib-sealed/freq! cy2e69@set-rib-sealed/freq!) (set! cy2e6b@rib-cache (lambda (cy321b@x) (simple-struct-ref cy321b@x '4))) (set! cy4b1f@cy2e6b@rib-cache cy2e6b@rib-cache) (set! cy2e6d@set-rib-cache! (lambda (cy321d@x cy321e@val) (simple-struct-set! cy321d@x '4 cy321e@val))) (set! cy4b20@cy2e6d@set-rib-cache! cy2e6d@set-rib-cache!) (set! cy2e6f@dummy '3) (set! cy4b21@cy2e6f@dummy cy2e6f@dummy) (set! cy2e71@make-empty-rib (lambda () (make-simple-struct 'rib '6 (list '() '() '() '#f '#f)))) (set! cy4b22@cy2e71@make-empty-rib cy2e71@make-empty-rib) (set! cy2e73@extend-rib! (lambda (cy3221@rib cy3222@id cy3223@label) (let ((cy3228@find '#f)) (begin (set! cy3228@find (lambda (cy3235@sym cy3236@mark* cy3237@sym* cy3238@mark** cy3239@label*) (and (pair? cy3237@sym*) (if (and (eq? cy3235@sym (car cy3237@sym*)) (same-marks? cy3236@mark* (car cy3238@mark**))) cy3239@label* (cy3228@find cy3235@sym cy3236@mark* (cdr cy3237@sym*) (cdr cy3238@mark**) (cdr cy3239@label*)))))) (begin (if (cy2e67@rib-sealed/freq cy3221@rib) (assertion-violation 'extend-rib! '"BUG: rib is sealed" cy3221@rib) (void)) (let ((cy3229@sym (cy2ebf@id->sym cy3222@id)) (cy322a@mark* (cy2e8f@stx-mark* cy3222@id))) (let ((cy322d@sym* (cy2e5b@rib-sym* cy3221@rib))) (let ((cy322f@t (and (memq cy3229@sym (cy2e5b@rib-sym* cy3221@rib)) (cy3228@find cy3229@sym cy322a@mark* cy322d@sym* (cy2e5f@rib-mark** cy3221@rib) (cy2e63@rib-label* cy3221@rib))))) (if cy322f@t ((lambda (cy3231@p) (if (not (eq? cy3223@label (car cy3231@p))) (if (cy31b4@top-level-context) (set-car! cy3231@p cy3223@label) (cy31a4@syntax-violation '#f '"multiple definitions of identifier" cy3222@id)) (void))) cy322f@t) (begin (if (cy2e6b@rib-cache cy3221@rib) (hashtable-update! (cy2e6b@rib-cache cy3221@rib) cy3229@sym (lambda (cy3233@e) (cons (cons cy322a@mark* cy3223@label) cy3233@e)) '()) (void)) (cy2e5d@set-rib-sym*! cy3221@rib (cons cy3229@sym cy322d@sym*)) (cy2e61@set-rib-mark**! cy3221@rib (cons cy322a@mark* (cy2e5f@rib-mark** cy3221@rib))) (cy2e65@set-rib-label*! cy3221@rib (cons cy3223@label (cy2e63@rib-label* cy3221@rib))))))))))))) (set! cy4b23@cy2e73@extend-rib! cy2e73@extend-rib!) (set! cy2e75@extend-rib/nc! (lambda (cy323f@rib cy3240@id cy3241@label) (let ((cy3245@sym (cy2ebf@id->sym cy3240@id)) (cy3246@mark* (cy2e8f@stx-mark* cy3240@id))) (let ((cy3249@sym* (cy2e5b@rib-sym* cy323f@rib))) (begin (if (cy2e6b@rib-cache cy323f@rib) (hashtable-update! (cy2e6b@rib-cache cy323f@rib) cy3245@sym (lambda (cy324b@e) (cons (cons cy3246@mark* cy3241@label) cy324b@e)) '()) (void)) (cy2e5d@set-rib-sym*! cy323f@rib (cons cy3245@sym cy3249@sym*)) (cy2e61@set-rib-mark**! cy323f@rib (cons cy3246@mark* (cy2e5f@rib-mark** cy323f@rib))) (cy2e65@set-rib-label*! cy323f@rib (cons cy3241@label (cy2e63@rib-label* cy323f@rib)))))))) (set! cy4b24@cy2e75@extend-rib/nc! cy2e75@extend-rib/nc!) (set! cy2e77@make-rib-map (lambda (cy324d@sym*) (let ((cy324f@ht (make-eq-hashtable))) (let cy3255@f ((cy3251@i '0) (cy3252@sym* cy324d@sym*)) (if (null? cy3252@sym*) cy324f@ht (begin (hashtable-update! cy324f@ht (car cy3252@sym*) (lambda (cy3257@x) (cons cy3251@i cy3257@x)) '()) (cy3255@f (+ cy3251@i '1) (cdr cy3252@sym*)))))))) (set! cy4b25@cy2e77@make-rib-map cy2e77@make-rib-map) (set! cy2e79@seal-rib! (lambda (cy3259@rib) (let ((cy325b@sym* (cy2e5b@rib-sym* cy3259@rib))) (if (not (null? cy325b@sym*)) (begin (cy2e5d@set-rib-sym*! cy3259@rib (list->vector cy325b@sym*)) (cy2e61@set-rib-mark**! cy3259@rib (list->vector (cy2e5f@rib-mark** cy3259@rib))) (cy2e65@set-rib-label*! cy3259@rib (list->vector (cy2e63@rib-label* cy3259@rib))) (cy2e69@set-rib-sealed/freq! cy3259@rib (cy2e77@make-rib-map cy325b@sym*))) (void))))) (set! cy4b26@cy2e79@seal-rib! cy2e79@seal-rib!) (set! cy2e7b@unseal-rib! (lambda (cy325d@rib) (if (cy2e67@rib-sealed/freq cy325d@rib) (begin (cy2e69@set-rib-sealed/freq! cy325d@rib '#f) (cy2e5d@set-rib-sym*! cy325d@rib (vector->list (cy2e5b@rib-sym* cy325d@rib))) (cy2e61@set-rib-mark**! cy325d@rib (vector->list (cy2e5f@rib-mark** cy325d@rib))) (cy2e65@set-rib-label*! cy325d@rib (vector->list (cy2e63@rib-label* cy325d@rib)))) (void)))) (set! cy4b27@cy2e7b@unseal-rib! cy2e7b@unseal-rib!) (set! cy2e7d@make-full-rib (lambda (cy325f@id* cy3260@label*) (let ((cy3263@r (make-simple-struct 'rib '6 (list (map cy2ebf@id->sym cy325f@id*) (map cy2e8f@stx-mark* cy325f@id*) cy3260@label* '#f '#f)))) (begin (cy2e79@seal-rib! cy3263@r) cy3263@r)))) (set! cy4b28@cy2e7d@make-full-rib cy2e7d@make-full-rib) (set! cy2e7f@rp (cy2a04@cy28e0@make-record-printer 'stx (lambda (cy3265@x cy3266@p cy3267@wr) (begin (display '"#<syntax " cy3266@p) (write (cy2ed1@stx->datum cy3265@x) cy3266@p) (let ((cy326b@expr (cy2e8b@stx-expr cy3265@x))) (if (cy29fc@cy28d0@annotation? cy326b@expr) (let ((cy326d@src (cy29fd@cy28d2@annotation-source cy326b@expr))) (if (pair? cy326d@src) (begin (display '" [" cy3266@p) (display (cdr cy326d@src) cy3266@p) (display '" of " cy3266@p) (display (car cy326d@src) cy3266@p) (display '"]" cy3266@p)) (void))) (void))) (display '">" cy3266@p))))) (set! cy4b29@cy2e7f@rp cy2e7f@rp) (set! cy2e89@stx? (lambda (cy326f@x) (and (simple-struct? cy326f@x) (eq? (simple-struct-name cy326f@x) 'stx)))) (set! cy4b2a@cy2e89@stx? cy2e89@stx?) (set! cy2e8b@stx-expr (lambda (cy3271@x) (simple-struct-ref cy3271@x '0))) (set! cy4b2b@cy2e8b@stx-expr cy2e8b@stx-expr) (set! cy2e8d@set-stx-expr! (lambda (cy3273@x cy3274@val) (simple-struct-set! cy3273@x '0 cy3274@val))) (set! cy4b2c@cy2e8d@set-stx-expr! cy2e8d@set-stx-expr!) (set! cy2e8f@stx-mark* (lambda (cy3277@x) (simple-struct-ref cy3277@x '1))) (set! cy4b2d@cy2e8f@stx-mark* cy2e8f@stx-mark*) (set! cy2e91@set-stx-mark*! (lambda (cy3279@x cy327a@val) (simple-struct-set! cy3279@x '1 cy327a@val))) (set! cy4b2e@cy2e91@set-stx-mark*! cy2e91@set-stx-mark*!) (set! cy2e93@stx-subst* (lambda (cy327d@x) (simple-struct-ref cy327d@x '2))) (set! cy4b2f@cy2e93@stx-subst* cy2e93@stx-subst*) (set! cy2e95@set-stx-subst*! (lambda (cy327f@x cy3280@val) (simple-struct-set! cy327f@x '2 cy3280@val))) (set! cy4b30@cy2e95@set-stx-subst*! cy2e95@set-stx-subst*!) (set! cy2e97@stx-ae* (lambda (cy3283@x) (simple-struct-ref cy3283@x '3))) (set! cy4b31@cy2e97@stx-ae* cy2e97@stx-ae*) (set! cy2e99@set-stx-ae*! (lambda (cy3285@x cy3286@val) (simple-struct-set! cy3285@x '3 cy3286@val))) (set! cy4b32@cy2e99@set-stx-ae*! cy2e99@set-stx-ae*!) (set! cy2e9b@dummy '3) (set! cy4b33@cy2e9b@dummy cy2e9b@dummy) (set! cy2e9d@datum->stx (lambda (cy3289@id cy328a@datum) (make-simple-struct 'stx '5 (list cy328a@datum (cy2e8f@stx-mark* cy3289@id) (cy2e93@stx-subst* cy3289@id) (cy2e97@stx-ae* cy3289@id))))) (set! cy4b34@cy2e9d@datum->stx cy2e9d@datum->stx) (set! cy2e9f@gen-mark (lambda () (string '#\m))) (set! cy4b35@cy2e9f@gen-mark cy2e9f@gen-mark) (set! cy2ea1@anti-mark '#f) (set! cy4b36@cy2ea1@anti-mark cy2ea1@anti-mark) (set! cy2ea3@anti-mark? not) (set! cy4b37@cy2ea3@anti-mark? cy2ea3@anti-mark?) (set! cy2ea5@mkstx (lambda (cy328d@e cy328e@m* cy328f@s* cy3290@ae*) (if (and (cy2e89@stx? cy328d@e) (not (cy2e43@top-marked? cy328e@m*))) (call-with-values (lambda () (join-wraps cy328e@m* cy328f@s* cy3290@ae* cy328d@e)) (lambda (cy329b@cy3296 cy329c@cy3298 cy329d@cy329a) (let ((cy32a1@ae* cy329d@cy329a) (cy32a2@s* cy329c@cy3298) (cy32a3@m* cy329b@cy3296)) (make-simple-struct 'stx '5 (list (cy2e8b@stx-expr cy328d@e) cy32a3@m* cy32a2@s* cy32a1@ae*))))) (make-simple-struct 'stx '5 (list cy328d@e cy328e@m* cy328f@s* cy3290@ae*))))) (set! cy4b38@cy2ea5@mkstx cy2ea5@mkstx) (set! cy2ea7@add-mark (lambda (cy32a7@m cy32a8@e cy32a9@ae) (cy2ea5@mkstx cy32a8@e (list cy32a7@m) '(shift) (list cy32a9@ae)))) (set! cy4b39@cy2ea7@add-mark cy2ea7@add-mark) (set! cy2ea9@add-subst (lambda (cy32ad@subst cy32ae@e) (cy2ea5@mkstx cy32ae@e '() (list cy32ad@subst) '()))) (set! cy4b3a@cy2ea9@add-subst cy2ea9@add-subst) (set! cy2eab@syntax-kind? (lambda (cy32b1@x cy32b2@p?) (if (cy2e89@stx? cy32b1@x) (cy2eab@syntax-kind? (cy2e8b@stx-expr cy32b1@x) cy32b2@p?) (if (cy29fc@cy28d0@annotation? cy32b1@x) (cy2eab@syntax-kind? (cy29fe@cy28d4@annotation-expression cy32b1@x) cy32b2@p?) (cy32b2@p? cy32b1@x))))) (set! cy4b3b@cy2eab@syntax-kind? cy2eab@syntax-kind?) (set! cy2ead@syntax-vector->list (lambda (cy32b5@x) (if (cy2e89@stx? cy32b5@x) (let ((cy32b7@ls (cy2ead@syntax-vector->list (cy2e8b@stx-expr cy32b5@x))) (cy32b8@m* (cy2e8f@stx-mark* cy32b5@x)) (cy32b9@s* (cy2e93@stx-subst* cy32b5@x)) (cy32ba@ae* (cy2e97@stx-ae* cy32b5@x))) (map (lambda (cy32bf@x) (cy2ea5@mkstx cy32bf@x cy32b8@m* cy32b9@s* cy32ba@ae*)) cy32b7@ls)) (if (cy29fc@cy28d0@annotation? cy32b5@x) (cy2ead@syntax-vector->list (cy29fe@cy28d4@annotation-expression cy32b5@x)) (if (vector? cy32b5@x) (vector->list cy32b5@x) (assertion-violation 'syntax-vector->list '"BUG: not a syntax vector" cy32b5@x)))))) (set! cy4b3c@cy2ead@syntax-vector->list cy2ead@syntax-vector->list) (set! cy2eaf@syntax-pair? (lambda (cy32c1@x) (cy2eab@syntax-kind? cy32c1@x pair?))) (set! cy4b3d@cy2eaf@syntax-pair? cy2eaf@syntax-pair?) (set! cy2eb1@syntax-vector? (lambda (cy32c3@x) (cy2eab@syntax-kind? cy32c3@x vector?))) (set! cy4b3e@cy2eb1@syntax-vector? cy2eb1@syntax-vector?) (set! cy2eb3@syntax-null? (lambda (cy32c5@x) (cy2eab@syntax-kind? cy32c5@x null?))) (set! cy4b3f@cy2eb3@syntax-null? cy2eb3@syntax-null?) (set! cy2eb5@syntax-list? (lambda (cy32c7@x) (or (cy2eb3@syntax-null? cy32c7@x) (and (cy2eaf@syntax-pair? cy32c7@x) (cy2eb5@syntax-list? (cy2eb9@syntax-cdr cy32c7@x)))))) (set! cy4b40@cy2eb5@syntax-list? cy2eb5@syntax-list?) (set! cy2eb7@syntax-car (lambda (cy32c9@x) (if (cy2e89@stx? cy32c9@x) (cy2ea5@mkstx (cy2eb7@syntax-car (cy2e8b@stx-expr cy32c9@x)) (cy2e8f@stx-mark* cy32c9@x) (cy2e93@stx-subst* cy32c9@x) (cy2e97@stx-ae* cy32c9@x)) (if (cy29fc@cy28d0@annotation? cy32c9@x) (cy2eb7@syntax-car (cy29fe@cy28d4@annotation-expression cy32c9@x)) (if (pair? cy32c9@x) (car cy32c9@x) (assertion-violation 'syntax-car '"BUG: not a pair" cy32c9@x)))))) (set! cy4b41@cy2eb7@syntax-car cy2eb7@syntax-car) (set! cy2eb9@syntax-cdr (lambda (cy32cb@x) (if (cy2e89@stx? cy32cb@x) (cy2ea5@mkstx (cy2eb9@syntax-cdr (cy2e8b@stx-expr cy32cb@x)) (cy2e8f@stx-mark* cy32cb@x) (cy2e93@stx-subst* cy32cb@x) (cy2e97@stx-ae* cy32cb@x)) (if (cy29fc@cy28d0@annotation? cy32cb@x) (cy2eb9@syntax-cdr (cy29fe@cy28d4@annotation-expression cy32cb@x)) (if (pair? cy32cb@x) (cdr cy32cb@x) (assertion-violation 'syntax-cdr '"BUG: not a pair" cy32cb@x)))))) (set! cy4b42@cy2eb9@syntax-cdr cy2eb9@syntax-cdr) (set! cy2ebb@syntax->list (lambda (cy32cd@x) (if (cy2eaf@syntax-pair? cy32cd@x) (cons (cy2eb7@syntax-car cy32cd@x) (cy2ebb@syntax->list (cy2eb9@syntax-cdr cy32cd@x))) (if (cy2eb3@syntax-null? cy32cd@x) '() (assertion-violation 'syntax->list '"BUG: invalid argument" cy32cd@x))))) (set! cy4b43@cy2ebb@syntax->list cy2ebb@syntax->list) (set! cy2ebd@id? (lambda (cy32cf@x) (and (cy2e89@stx? cy32cf@x) (symbol? (cy2e8b@stx-expr cy32cf@x))))) (set! cy4b44@cy2ebd@id? cy2ebd@id?) (set! cy2ebf@id->sym (lambda (cy32d1@x) (cy2e8b@stx-expr cy32d1@x))) (set! cy4b45@cy2ebf@id->sym cy2ebf@id->sym) (set! cy2ec1@bound-id=? (lambda (cy32d3@x cy32d4@y) (and (eq? (cy2ebf@id->sym cy32d3@x) (cy2ebf@id->sym cy32d4@y)) (same-marks? (cy2e8f@stx-mark* cy32d3@x) (cy2e8f@stx-mark* cy32d4@y))))) (set! cy4b46@cy2ec1@bound-id=? cy2ec1@bound-id=?) (set! cy2ec3@free-id=? (lambda (cy32d7@i cy32d8@j) (let ((cy32db@t0 (id->real-label cy32d7@i)) (cy32dc@t1 (id->real-label cy32d8@j))) (if (or cy32db@t0 cy32dc@t1) (eq? cy32db@t0 cy32dc@t1) (eq? (cy2ebf@id->sym cy32d7@i) (cy2ebf@id->sym cy32d8@j)))))) (set! cy4b47@cy2ec3@free-id=? cy2ec3@free-id=?) (set! cy2ec5@valid-bound-ids? (lambda (cy32df@id*) (and (for-all cy2ebd@id? cy32df@id*) (cy2ec7@distinct-bound-ids? cy32df@id*)))) (set! cy4b48@cy2ec5@valid-bound-ids? cy2ec5@valid-bound-ids?) (set! cy2ec7@distinct-bound-ids? (lambda (cy32e1@id*) (or (null? cy32e1@id*) (and (not (cy2ec9@bound-id-member? (car cy32e1@id*) (cdr cy32e1@id*))) (cy2ec7@distinct-bound-ids? (cdr cy32e1@id*)))))) (set! cy4b49@cy2ec7@distinct-bound-ids? cy2ec7@distinct-bound-ids?) (set! cy2ec9@bound-id-member? (lambda (cy32e3@id cy32e4@id*) (and (pair? cy32e4@id*) (or (cy2ec1@bound-id=? cy32e3@id (car cy32e4@id*)) (cy2ec9@bound-id-member? cy32e3@id (cdr cy32e4@id*)))))) (set! cy4b4a@cy2ec9@bound-id-member? cy2ec9@bound-id-member?) (set! cy2ecb@self-evaluating? (lambda (cy32e7@x) (or (number? cy32e7@x) (string? cy32e7@x) (char? cy32e7@x) (boolean? cy32e7@x) (regexp? cy32e7@x) (bytevector? cy32e7@x)))) (set! cy4b4b@cy2ecb@self-evaluating? cy2ecb@self-evaluating?) (set! cy2ecd@strip-annotations (lambda (cy32e9@x) (if (pair? cy32e9@x) (cons (cy2ecd@strip-annotations (car cy32e9@x)) (cy2ecd@strip-annotations (cdr cy32e9@x))) (if (vector? cy32e9@x) (vector-map cy2ecd@strip-annotations cy32e9@x) (if (cy29fc@cy28d0@annotation? cy32e9@x) (cy29fb@cy28ce@annotation-stripped cy32e9@x) cy32e9@x))))) (set! cy4b4c@cy2ecd@strip-annotations cy2ecd@strip-annotations) (set! cy2ecf@strip (lambda (cy32eb@x cy32ec@m*) (if (cy2e43@top-marked? cy32ec@m*) (if (or (cy29fc@cy28d0@annotation? cy32eb@x) (and (pair? cy32eb@x) (cy29fc@cy28d0@annotation? (car cy32eb@x))) (and (vector? cy32eb@x) (> (vector-length cy32eb@x) '0) (cy29fc@cy28d0@annotation? (vector-ref cy32eb@x '0)))) (cy2ecd@strip-annotations cy32eb@x) cy32eb@x) (let cy32f1@f ((cy32ef@x cy32eb@x)) (if (cy2e89@stx? cy32ef@x) (cy2ecf@strip (cy2e8b@stx-expr cy32ef@x) (cy2e8f@stx-mark* cy32ef@x)) (if (cy29fc@cy28d0@annotation? cy32ef@x) (cy29fb@cy28ce@annotation-stripped cy32ef@x) (if (pair? cy32ef@x) (let ((cy32f3@a (cy32f1@f (car cy32ef@x))) (cy32f4@d (cy32f1@f (cdr cy32ef@x)))) (if (and (eq? cy32f3@a (car cy32ef@x)) (eq? cy32f4@d (cdr cy32ef@x))) cy32ef@x (cons cy32f3@a cy32f4@d))) (if (vector? cy32ef@x) (let ((cy32f7@old (vector->list cy32ef@x))) (let ((cy32f9@new (map cy32f1@f cy32f7@old))) (if (for-all eq? cy32f7@old cy32f9@new) cy32ef@x (list->vector cy32f9@new)))) cy32ef@x)))))))) (set! cy4b4d@cy2ecf@strip cy2ecf@strip) (set! cy2ed1@stx->datum (lambda (cy32fb@x) (cy2ecf@strip cy32fb@x '()))) (set! cy4b4e@cy2ed1@stx->datum cy2ed1@stx->datum) (set! cy2ed3@id->label (lambda (cy32fd@id) (or (id->real-label cy32fd@id) (let ((cy32ff@t (cy31b4@top-level-context))) (if cy32ff@t ((lambda (cy3301@env) (let ((cy3303@rib (cy3164@interaction-env-rib cy3301@env))) (call-with-values (lambda () (cy2e4d@gen-define-label+loc cy32fd@id cy3303@rib)) (lambda (cy3309@cy3306 cy330a@cy3308) (let ((cy330d@loc_ cy330a@cy3308) (cy330e@lab cy3309@cy3306)) (begin (cy2e73@extend-rib! cy3303@rib cy32fd@id cy330e@lab) cy330e@lab)))))) cy32ff@t) '#f))))) (set! cy4b4f@cy2ed3@id->label cy2ed3@id->label) (set! cy2ed5@label->binding (lambda (cy3311@x cy3312@r) (let ((cy3315@t (cy2cd2@cy2b1f@imported-label->binding cy3311@x))) (if cy3315@t ((lambda (cy3317@b) (if (and (pair? cy3317@b) (eq? (car cy3317@b) '$core-rtd)) (cons '$rtd (map cy307a@bless (cdr cy3317@b))) (if (and (pair? cy3317@b) (eq? (car cy3317@b) 'global-rtd)) (let ((cy3319@lib (cadr cy3317@b)) (cy331a@loc (cddr cy3317@b))) (cons '$rtd (symbol-value cy331a@loc))) cy3317@b))) cy3315@t) (let ((cy331d@t (assq cy3311@x cy3312@r))) (if cy331d@t (cdr cy331d@t) (let ((cy331f@t (cy31b4@top-level-context))) (if cy331f@t ((lambda (cy3321@env) (let ((cy3323@t (assq cy3311@x (cy316c@interaction-env-locs cy3321@env)))) (if cy3323@t ((lambda (cy3325@p) (cons* 'lexical (cdr cy3325@p) '#f)) cy3323@t) '(displaced-lexical . #f)))) cy331f@t) '(displaced-lexical . #f))))))))) (set! cy4b50@cy2ed5@label->binding cy2ed5@label->binding) (set! cy2ed7@make-binding cons) (set! cy4b51@cy2ed7@make-binding cy2ed7@make-binding) (set! cy2ed9@binding-type car) (set! cy4b52@cy2ed9@binding-type cy2ed9@binding-type) (set! cy2edb@binding-value cdr) (set! cy4b53@cy2edb@binding-value cy2edb@binding-value) (set! cy2edd@raise-unbound-error (lambda (cy3327@id) (cy31a2@syntax-violation* '#f '"unbound identifier" cy3327@id (cy4f49@cy4d8f@make-undefined-violation)))) (set! cy4b54@cy2edd@raise-unbound-error cy2edd@raise-unbound-error) (set! cy2edf@syntax-type (lambda (cy3329@e cy332a@r) (if (cy2ebd@id? cy3329@e) (let ((cy332d@id cy3329@e)) (let ((cy332f@label (cy2ed3@id->label cy332d@id))) (let ((cy3331@b (cy2ed5@label->binding cy332f@label cy332a@r))) (let ((cy3333@type (cy2ed9@binding-type cy3331@b))) (begin (if (not cy332f@label) (cy2edd@raise-unbound-error cy332d@id) (void)) (let ((cy3335@t cy3333@type)) (if (memv cy3335@t '(lexical core-prim macro macro! global local-macro local-macro! global-macro global-macro! displaced-lexical syntax import export $module $core-rtd library mutable)) (values cy3333@type (cy2edb@binding-value cy3331@b) cy332d@id) (values 'other '#f '#f)))))))) (if (cy2eaf@syntax-pair? cy3329@e) (let ((cy3337@id (cy2eb7@syntax-car cy3329@e))) (if (cy2ebd@id? cy3337@id) (let ((cy3339@label (cy2ed3@id->label cy3337@id))) (let ((cy333b@b (cy2ed5@label->binding cy3339@label cy332a@r))) (let ((cy333d@type (cy2ed9@binding-type cy333b@b))) (begin (if (not cy3339@label) (cy2edd@raise-unbound-error cy3337@id) (void)) (let ((cy333f@t cy333d@type)) (if (memv cy333f@t '(define define-syntax core-macro begin macro macro! local-macro local-macro! global-macro global-macro! module library set! let-syntax letrec-syntax import export $core-rtd)) (values cy333d@type (cy2edb@binding-value cy333b@b) cy3337@id) (values 'call '#f '#f))))))) (values 'call '#f '#f))) (let ((cy3341@d (cy2ed1@stx->datum cy3329@e))) (if (cy2ecb@self-evaluating? cy3341@d) (values 'constant cy3341@d '#f) (values 'other '#f '#f))))))) (set! cy4b55@cy2edf@syntax-type cy2edf@syntax-type) (set! cy2eed@sanitize-binding (lambda (cy3343@x cy3344@src) (if (procedure? cy3343@x) (cons* 'local-macro cy3343@x cy3344@src) (if (and (pair? cy3343@x) (eq? (car cy3343@x) 'macro!) (procedure? (cdr cy3343@x))) (cons* 'local-macro! (cdr cy3343@x) cy3344@src) (if (and (pair? cy3343@x) (eq? (car cy3343@x) '$rtd)) cy3343@x (assertion-violation 'expand '"invalid transformer" cy3343@x)))))) (set! cy4b56@cy2eed@sanitize-binding cy2eed@sanitize-binding) (set! cy2eef@make-variable-transformer (lambda (cy3347@x) (if (procedure? cy3347@x) (cons 'macro! cy3347@x) (assertion-violation 'make-variable-transformer '"not a procedure" cy3347@x)))) (set! cy4b57@cy2eef@make-variable-transformer cy2eef@make-variable-transformer) (set! cy2ef1@variable-transformer? (lambda (cy3349@x) (and (pair? cy3349@x) (eq? (car cy3349@x) 'macro!) (procedure? (cdr cy3349@x))))) (set! cy4b58@cy2ef1@variable-transformer? cy2ef1@variable-transformer?) (set! cy2ef3@variable-transformer-procedure (lambda (cy334b@x) (if (cy2ef1@variable-transformer? cy334b@x) (cdr cy334b@x) (assertion-violation 'variable-transformer-procedure '"not a variable transformer" cy334b@x)))) (set! cy4b59@cy2ef3@variable-transformer-procedure cy2ef3@variable-transformer-procedure) (set! cy2ef5@make-eval-transformer (lambda (cy334d@x) (cy2eed@sanitize-binding (eval-core (cy2a5d@cy2a15@expanded->core cy334d@x)) cy334d@x))) (set! cy4b5a@cy2ef5@make-eval-transformer cy2ef5@make-eval-transformer) (set! cy3046@parse-define (lambda (cy334f@x) (let ((cy3351@t cy334f@x)) (let ((cy3353@ls/false (cy30c4@syntax-dispatch cy3351@t '(_ (any . any) any . each-any)))) (if (and cy3353@ls/false (apply (lambda (cy3355@id cy3356@fmls cy3357@b cy3358@b*) (cy2ebd@id? cy3355@id)) cy3353@ls/false)) (apply (lambda (cy335d@id cy335e@fmls cy335f@b cy3360@b*) (begin (cy30ea@verify-formals cy335e@fmls cy334f@x) (values cy335d@id (cons 'defun (cons cy335e@fmls (cons cy335f@b cy3360@b*)))))) cy3353@ls/false) (let ((cy3365@t cy3351@t)) (let ((cy3367@ls/false (cy30c4@syntax-dispatch cy3365@t '(_ any any)))) (if (and cy3367@ls/false (apply (lambda (cy3369@id cy336a@val) (cy2ebd@id? cy3369@id)) cy3367@ls/false)) (apply (lambda (cy336d@id cy336e@val) (values cy336d@id (cons 'expr cy336e@val))) cy3367@ls/false) (let ((cy3371@t cy3365@t)) (let ((cy3373@ls/false (cy30c4@syntax-dispatch cy3371@t '(_ any)))) (if (and cy3373@ls/false (apply (lambda (cy3375@id) (cy2ebd@id? cy3375@id)) cy3373@ls/false)) (apply (lambda (cy3377@id) (values cy3377@id (cons 'expr (cy307a@bless '(void))))) cy3373@ls/false) (cy31a4@syntax-violation '#f '"invalid syntax" cy3371@t)))))))))))) (set! cy4b5b@cy3046@parse-define cy3046@parse-define) (set! cy3048@parse-define-syntax (lambda (cy3379@x) (let ((cy337b@t cy3379@x)) (let ((cy337d@ls/false (cy30c4@syntax-dispatch cy337b@t '(_ any any)))) (if (and cy337d@ls/false (apply (lambda (cy337f@id cy3380@val) (cy2ebd@id? cy337f@id)) cy337d@ls/false)) (apply (lambda (cy3383@id cy3384@val) (values cy3383@id cy3384@val)) cy337d@ls/false) (cy31a4@syntax-violation '#f '"invalid syntax" cy337b@t)))))) (set! cy4b5c@cy3048@parse-define-syntax cy3048@parse-define-syntax) (set! cy304a@scheme-stx-hashtable (make-eq-hashtable)) (set! cy4b5d@cy304a@scheme-stx-hashtable cy304a@scheme-stx-hashtable) (set! cy304c@scheme-stx (lambda (cy3387@sym) (or (hashtable-ref cy304a@scheme-stx-hashtable cy3387@sym '#f) (let ((cy3389@subst (cy2cae@cy2ad7@library-subst (cy2ccc@cy2b13@find-library-by-name '(psyntax system $all))))) (let ((cy338b@stx (make-simple-struct 'stx '5 (list cy3387@sym cy2e41@top-mark* '() '())))) (let ((cy338d@stx (let ((cy338f@t (assq cy3387@sym cy3389@subst))) (if cy338f@t ((lambda (cy3391@x) (let ((cy3393@name (car cy3391@x)) (cy3394@label (cdr cy3391@x))) (cy2ea9@add-subst (make-simple-struct 'rib '6 (list (list cy3393@name) (list cy2e41@top-mark*) (list cy3394@label) '#f '#f)) cy338b@stx))) cy338f@t) cy338b@stx)))) (begin (hashtable-set! cy304a@scheme-stx-hashtable cy3387@sym cy338d@stx) cy338d@stx))))))) (set! cy4b5e@cy304c@scheme-stx cy304c@scheme-stx) (set! cy304e@lexical-var car) (set! cy4b5f@cy304e@lexical-var cy304e@lexical-var) (set! cy3050@lexical-mutable? cdr) (set! cy4b60@cy3050@lexical-mutable? cy3050@lexical-mutable?) (set! cy3052@set-lexical-mutable! set-cdr!) (set! cy4b61@cy3052@set-lexical-mutable! cy3052@set-lexical-mutable!) (set! cy3054@add-lexical (lambda (cy3397@lab cy3398@lex cy3399@r) (cons (cons* cy3397@lab 'lexical cy3398@lex '#f) cy3399@r))) (set! cy4b62@cy3054@add-lexical cy3054@add-lexical) (set! cy3056@add-lexicals (lambda (cy339d@lab* cy339e@lex* cy339f@r) (if (null? cy339d@lab*) cy339f@r (cy3056@add-lexicals (cdr cy339d@lab*) (cdr cy339e@lex*) (cy3054@add-lexical (car cy339d@lab*) (car cy339e@lex*) cy339f@r))))) (set! cy4b63@cy3056@add-lexicals cy3056@add-lexicals) (set! cy3058@letrec-helper (lambda (cy33a3@e cy33a4@r cy33a5@mr cy33a6@build) (let ((cy33ab@t cy33a3@e)) (let ((cy33ad@ls/false (cy30c4@syntax-dispatch cy33ab@t '(_ #(each (any any)) any . each-any)))) (if cy33ad@ls/false (apply (lambda (cy33af@lhs* cy33b0@rhs* cy33b1@b cy33b2@b*) (if (not (cy2ec5@valid-bound-ids? cy33af@lhs*)) (cy307e@invalid-fmls-error cy33a3@e cy33af@lhs*) (let ((cy33b7@lex* (map cy2e45@gen-lexical cy33af@lhs*)) (cy33b8@lab* (map cy2e49@gen-label cy33af@lhs*))) (let ((cy33bb@rib (cy2e7d@make-full-rib cy33af@lhs* cy33b8@lab*)) (cy33bc@r (cy3056@add-lexicals cy33b8@lab* cy33b7@lex* cy33a4@r))) (let ((cy33bf@body (cy30fc@chi-internal (cy2ea9@add-subst cy33bb@rib (cons cy33b1@b cy33b2@b*)) cy33bc@r cy33a5@mr)) (cy33c0@rhs* (cy30e2@chi-expr* (map (lambda (cy33c3@x) (cy2ea9@add-subst cy33bb@rib cy33c3@x)) cy33b0@rhs*) cy33bc@r cy33a5@mr))) (cy33a6@build '#f cy33b7@lex* cy33c0@rhs* cy33bf@body)))))) cy33ad@ls/false) (cy31a4@syntax-violation '#f '"invalid syntax" cy33ab@t)))))) (set! cy4b64@cy3058@letrec-helper cy3058@letrec-helper) (set! cy305a@let-transformer (lambda (cy33c5@e cy33c6@r cy33c7@mr) (let ((cy33cb@t cy33c5@e)) (let ((cy33cd@ls/false (cy30c4@syntax-dispatch cy33cb@t '(_ #(each (any any)) any . each-any)))) (if cy33cd@ls/false (apply (lambda (cy33cf@lhs* cy33d0@rhs* cy33d1@b cy33d2@b*) (if (not (cy2ec5@valid-bound-ids? cy33cf@lhs*)) (cy307e@invalid-fmls-error cy33c5@e cy33cf@lhs*) (let ((cy33d7@lex* (map cy2e45@gen-lexical cy33cf@lhs*)) (cy33d8@lab* (map cy2e49@gen-label cy33cf@lhs*)) (cy33d9@rhs* (cy30e2@chi-expr* cy33d0@rhs* cy33c6@r cy33c7@mr))) (let ((cy33dd@rib (cy2e7d@make-full-rib cy33cf@lhs* cy33d8@lab*)) (cy33de@r (cy3056@add-lexicals cy33d8@lab* cy33d7@lex* cy33c6@r))) (let ((cy33e1@body (cy30fc@chi-internal (cy2ea9@add-subst cy33dd@rib (cons cy33d1@b cy33d2@b*)) cy33de@r cy33c7@mr))) (cy2e25@cy2d82@build-let '#f cy33d7@lex* cy33d9@rhs* cy33e1@body)))))) cy33cd@ls/false) (let ((cy33e3@t cy33cb@t)) (let ((cy33e5@ls/false (cy30c4@syntax-dispatch cy33e3@t '(_ any #(each (any any)) any . each-any)))) (if cy33e5@ls/false (apply (lambda (cy33e7@loop cy33e8@lhs* cy33e9@rhs* cy33ea@b cy33eb@b*) (if (not (cy2ec5@valid-bound-ids? cy33e8@lhs*)) (cy307e@invalid-fmls-error cy33c5@e cy33e8@lhs*) (let ((cy33f1@lex* (map cy2e45@gen-lexical cy33e8@lhs*)) (cy33f2@lab* (map cy2e49@gen-label cy33e8@lhs*)) (cy33f3@rhs* (cy30e2@chi-expr* cy33e9@rhs* cy33c6@r cy33c7@mr)) (cy33f4@loop-lex (cy2e45@gen-lexical cy33e7@loop)) (cy33f5@loop-lab (cy2e49@gen-label cy33e7@loop))) (let ((cy33fb@loop-rib (cy2e7d@make-full-rib (list cy33e7@loop) (list cy33f5@loop-lab))) (cy33fc@rib (cy2e7d@make-full-rib cy33e8@lhs* cy33f2@lab*)) (cy33fd@r (cy3056@add-lexicals (cons cy33f5@loop-lab cy33f2@lab*) (cons cy33f4@loop-lex cy33f1@lex*) cy33c6@r))) (let ((cy3401@body (cy30fc@chi-internal (cy2ea9@add-subst cy33fb@loop-rib (cy2ea9@add-subst cy33fc@rib (cons cy33ea@b cy33eb@b*))) cy33fd@r cy33c7@mr))) (cy2e26@cy2d84@build-named-let '#f cy33f4@loop-lex cy33f1@lex* cy33f3@rhs* cy3401@body)))))) cy33e5@ls/false) (cy31a4@syntax-violation '#f '"invalid syntax" cy33e3@t))))))))) (set! cy4b65@cy305a@let-transformer cy305a@let-transformer) (set! cy305c@letrec-transformer (lambda (cy3403@e cy3404@r cy3405@mr) (cy3058@letrec-helper cy3403@e cy3404@r cy3405@mr cy2e24@cy2d80@build-letrec))) (set! cy4b66@cy305c@letrec-transformer cy305c@letrec-transformer) (set! cy305e@letrec*-transformer (lambda (cy3409@e cy340a@r cy340b@mr) (cy3058@letrec-helper cy3409@e cy340a@r cy340b@mr cy2e27@cy2d86@build-letrec*))) (set! cy4b67@cy305e@letrec*-transformer cy305e@letrec*-transformer) (set! cy3060@fluid-let-syntax-transformer (lambda (cy340f@e cy3410@r cy3411@mr) (let ((cy3416@lookup '#f)) (begin (set! cy3416@lookup (lambda (cy3429@x) (or (cy2ed3@id->label cy3429@x) (cy31a4@syntax-violation '#f '"unbound identifier" cy340f@e cy3429@x)))) (let ((cy3417@t cy340f@e)) (let ((cy3419@ls/false (cy30c4@syntax-dispatch cy3417@t '(_ #(each (any any)) any . each-any)))) (if cy3419@ls/false (apply (lambda (cy341b@lhs* cy341c@rhs* cy341d@b cy341e@b*) (if (not (cy2ec5@valid-bound-ids? cy341b@lhs*)) (cy307e@invalid-fmls-error cy340f@e cy341b@lhs*) (let ((cy3423@lab* (map cy3416@lookup cy341b@lhs*)) (cy3424@rhs* (map (lambda (cy3427@x) (cy2ef5@make-eval-transformer (cy311e@expand-transformer cy3427@x cy3411@mr))) cy341c@rhs*))) (cy30fc@chi-internal (cons cy341d@b cy341e@b*) (append (map cons cy3423@lab* cy3424@rhs*) cy3410@r) (append (map cons cy3423@lab* cy3424@rhs*) cy3411@mr))))) cy3419@ls/false) (cy31a4@syntax-violation '#f '"invalid syntax" cy3417@t)))))))) (set! cy4b68@cy3060@fluid-let-syntax-transformer cy3060@fluid-let-syntax-transformer) (set! cy3062@type-descriptor-transformer (lambda (cy342b@e cy342c@r cy342d@mr) (let ((cy3431@t cy342b@e)) (let ((cy3433@ls/false (cy30c4@syntax-dispatch cy3431@t '(_ any)))) (if (and cy3433@ls/false (apply (lambda (cy3435@id) (cy2ebd@id? cy3435@id)) cy3433@ls/false)) (apply (lambda (cy3437@id) (let ((cy3439@lab (cy2ed3@id->label cy3437@id))) (let ((cy343b@b (cy2ed5@label->binding cy3439@lab cy342c@r))) (let ((cy343d@type (cy2ed9@binding-type cy343b@b))) (begin (if (not cy3439@lab) (cy2edd@raise-unbound-error cy3437@id) (void)) (if (not (and (eq? cy343d@type '$rtd) (not (list? (cy2edb@binding-value cy343b@b))))) (cy31a4@syntax-violation '#f '"not a record type" cy342b@e) (void)) (list 'quote (cy2edb@binding-value cy343b@b))))))) cy3433@ls/false) (cy31a4@syntax-violation '#f '"invalid syntax" cy3431@t)))))) (set! cy4b69@cy3062@type-descriptor-transformer cy3062@type-descriptor-transformer) (set! cy3064@record-type-descriptor-transformer (lambda (cy343f@e cy3440@r cy3441@mr) (let ((cy3445@t cy343f@e)) (let ((cy3447@ls/false (cy30c4@syntax-dispatch cy3445@t '(_ any)))) (if (and cy3447@ls/false (apply (lambda (cy3449@id) (cy2ebd@id? cy3449@id)) cy3447@ls/false)) (apply (lambda (cy344b@id) (let ((cy344d@lab (cy2ed3@id->label cy344b@id))) (let ((cy344f@b (cy2ed5@label->binding cy344d@lab cy3440@r))) (let ((cy3451@type (cy2ed9@binding-type cy344f@b))) (begin (if (not cy344d@lab) (cy2edd@raise-unbound-error cy344b@id) (void)) (if (not (and (eq? cy3451@type '$rtd) (list? (cy2edb@binding-value cy344f@b)))) (cy31a4@syntax-violation '#f '"not a record type" cy343f@e) (void)) (cy30e6@chi-expr (car (cy2edb@binding-value cy344f@b)) cy3440@r cy3441@mr)))))) cy3447@ls/false) (cy31a4@syntax-violation '#f '"invalid syntax" cy3445@t)))))) (set! cy4b6a@cy3064@record-type-descriptor-transformer cy3064@record-type-descriptor-transformer) (set! cy3066@record-constructor-descriptor-transformer (lambda (cy3453@e cy3454@r cy3455@mr) (let ((cy3459@t cy3453@e)) (let ((cy345b@ls/false (cy30c4@syntax-dispatch cy3459@t '(_ any)))) (if (and cy345b@ls/false (apply (lambda (cy345d@id) (cy2ebd@id? cy345d@id)) cy345b@ls/false)) (apply (lambda (cy345f@id) (let ((cy3461@lab (cy2ed3@id->label cy345f@id))) (let ((cy3463@b (cy2ed5@label->binding cy3461@lab cy3454@r))) (let ((cy3465@type (cy2ed9@binding-type cy3463@b))) (begin (if (not cy3461@lab) (cy2edd@raise-unbound-error cy345f@id) (void)) (if (not (and (eq? cy3465@type '$rtd) (list? (cy2edb@binding-value cy3463@b)))) (cy31a4@syntax-violation '#f '"invalid type" cy3453@e) (void)) (cy30e6@chi-expr (cadr (cy2edb@binding-value cy3463@b)) cy3454@r cy3455@mr)))))) cy345b@ls/false) (cy31a4@syntax-violation '#f '"invalid syntax" cy3459@t)))))) (set! cy4b6b@cy3066@record-constructor-descriptor-transformer cy3066@record-constructor-descriptor-transformer) (set! cy3068@when-macro (lambda (cy3467@e) (let ((cy3469@t cy3467@e)) (let ((cy346b@ls/false (cy30c4@syntax-dispatch cy3469@t '(_ any any . each-any)))) (if cy346b@ls/false (apply (lambda (cy346d@test cy346e@e cy346f@e*) (cy307a@bless (list 'if cy346d@test (cons 'begin (cons cy346e@e cy346f@e*))))) cy346b@ls/false) (cy31a4@syntax-violation '#f '"invalid syntax" cy3469@t)))))) (set! cy4b6c@cy3068@when-macro cy3068@when-macro) (set! cy306a@unless-macro (lambda (cy3473@e) (let ((cy3475@t cy3473@e)) (let ((cy3477@ls/false (cy30c4@syntax-dispatch cy3475@t '(_ any any . each-any)))) (if cy3477@ls/false (apply (lambda (cy3479@test cy347a@e cy347b@e*) (cy307a@bless (list 'if (list 'not cy3479@test) (cons 'begin (cons cy347a@e cy347b@e*))))) cy3477@ls/false) (cy31a4@syntax-violation '#f '"invalid syntax" cy3475@t)))))) (set! cy4b6d@cy306a@unless-macro cy306a@unless-macro) (set! cy306c@if-transformer (lambda (cy347f@e cy3480@r cy3481@mr) (let ((cy3485@t cy347f@e)) (let ((cy3487@ls/false (cy30c4@syntax-dispatch cy3485@t '(_ any any any)))) (if cy3487@ls/false (apply (lambda (cy3489@e0 cy348a@e1 cy348b@e2) (list 'if (cy30e6@chi-expr cy3489@e0 cy3480@r cy3481@mr) (cy30e6@chi-expr cy348a@e1 cy3480@r cy3481@mr) (cy30e6@chi-expr cy348b@e2 cy3480@r cy3481@mr))) cy3487@ls/false) (let ((cy348f@t cy3485@t)) (let ((cy3491@ls/false (cy30c4@syntax-dispatch cy348f@t '(_ any any)))) (if cy3491@ls/false (apply (lambda (cy3493@e0 cy3494@e1) (list 'if (cy30e6@chi-expr cy3493@e0 cy3480@r cy3481@mr) (cy30e6@chi-expr cy3494@e1 cy3480@r cy3481@mr) (cy2e23@cy2d7e@build-void))) cy3491@ls/false) (cy31a4@syntax-violation '#f '"invalid syntax" cy348f@t))))))))) (set! cy4b6e@cy306c@if-transformer cy306c@if-transformer) (set! cy306e@and-transformer (lambda (cy3497@e cy3498@r cy3499@mr) (let ((cy349d@t cy3497@e)) (let ((cy349f@ls/false (cy30c4@syntax-dispatch cy349d@t '(_ . each-any)))) (if cy349f@ls/false (apply (lambda (cy34a1@e*) (cons 'and (cy30e2@chi-expr* cy34a1@e* cy3498@r cy3499@mr))) cy349f@ls/false) (cy31a4@syntax-violation '#f '"invalid syntax" cy349d@t)))))) (set! cy4b6f@cy306e@and-transformer cy306e@and-transformer) (set! cy3070@or-transformer (lambda (cy34a3@e cy34a4@r cy34a5@mr) (let ((cy34a9@t cy34a3@e)) (let ((cy34ab@ls/false (cy30c4@syntax-dispatch cy34a9@t '(_ . each-any)))) (if cy34ab@ls/false (apply (lambda (cy34ad@e*) (cons 'or (cy30e2@chi-expr* cy34ad@e* cy34a4@r cy34a5@mr))) cy34ab@ls/false) (cy31a4@syntax-violation '#f '"invalid syntax" cy34a9@t)))))) (set! cy4b70@cy3070@or-transformer cy3070@or-transformer) (set! cy3072@case-macro (lambda (cy34af@e) (let ((cy34b2@build-last '#f) (cy34b4@build-one '#f)) (begin (set! cy34b2@build-last (lambda (cy34d9@cls) (let ((cy34db@t cy34d9@cls)) (let ((cy34dd@ls/false (cy30c4@syntax-dispatch cy34db@t '(#(scheme-id else) any . each-any)))) (if cy34dd@ls/false (apply (lambda (cy34df@e cy34e0@e*) (cons 'begin (cons cy34df@e cy34e0@e*))) cy34dd@ls/false) (let ((cy34e3@t cy34db@t)) (let ((cy34e5@ls/false (cy30c4@syntax-dispatch cy34e3@t '_))) (if cy34e5@ls/false (apply (lambda () (cy34b4@build-one cy34d9@cls '(if #f #f))) cy34e5@ls/false) (cy31a4@syntax-violation '#f '"invalid syntax" cy34e3@t))))))))) (set! cy34b4@build-one (lambda (cy34cb@cls cy34cc@k) (let ((cy34cf@t cy34cb@cls)) (let ((cy34d1@ls/false (cy30c4@syntax-dispatch cy34cf@t '(each-any any . each-any)))) (if cy34d1@ls/false (apply (lambda (cy34d3@d* cy34d4@e cy34d5@e*) (list 'if (list 'memv 't (list 'quote cy34d3@d*)) (cons 'begin (cons cy34d4@e cy34d5@e*)) cy34cc@k)) cy34d1@ls/false) (cy31a4@syntax-violation '#f '"invalid syntax" cy34cf@t)))))) (let ((cy34b5@t cy34af@e)) (let ((cy34b7@ls/false (cy30c4@syntax-dispatch cy34b5@t '(_ any)))) (if cy34b7@ls/false (apply (lambda (cy34b9@expr) (cy307a@bless (cons 'let (cons (list (list 't cy34b9@expr)) '((if #f #f)))))) cy34b7@ls/false) (let ((cy34bb@t cy34b5@t)) (let ((cy34bd@ls/false (cy30c4@syntax-dispatch cy34bb@t '(_ any any . each-any)))) (if cy34bd@ls/false (apply (lambda (cy34bf@expr cy34c0@cls cy34c1@cls*) (cy307a@bless (list 'let (list (list 't cy34bf@expr)) (let cy34c9@f ((cy34c5@cls cy34c0@cls) (cy34c6@cls* cy34c1@cls*)) (if (null? cy34c6@cls*) (cy34b2@build-last cy34c5@cls) (cy34b4@build-one cy34c5@cls (cy34c9@f (car cy34c6@cls*) (cdr cy34c6@cls*)))))))) cy34bd@ls/false) (cy31a4@syntax-violation '#f '"invalid syntax" cy34bb@t))))))))))) (set! cy4b71@cy3072@case-macro cy3072@case-macro) (set! cy3074@quote-transformer (lambda (cy34e7@e cy34e8@r cy34e9@mr) (let ((cy34ed@t cy34e7@e)) (let ((cy34ef@ls/false (cy30c4@syntax-dispatch cy34ed@t '(_ any)))) (if cy34ef@ls/false (apply (lambda (cy34f1@datum) (list 'quote (cy2ed1@stx->datum cy34f1@datum))) cy34ef@ls/false) (cy31a4@syntax-violation '#f '"invalid syntax" cy34ed@t)))))) (set! cy4b72@cy3074@quote-transformer cy3074@quote-transformer) (set! cy3076@case-lambda-transformer (lambda (cy34f3@e cy34f4@r cy34f5@mr) (let ((cy34f9@t cy34f3@e)) (let ((cy34fb@ls/false (cy30c4@syntax-dispatch cy34f9@t '(_ . #(each (any any . each-any)))))) (if cy34fb@ls/false (apply (lambda (cy34fd@fmls* cy34fe@b* cy34ff@b**) (call-with-values (lambda () (cy30ee@chi-lambda-clause* cy34f3@e cy34fd@fmls* (map cons cy34fe@b* cy34ff@b**) cy34f4@r cy34f5@mr)) (lambda (cy3507@cy3504 cy3508@cy3506) (let ((cy350b@body* cy3508@cy3506) (cy350c@fmls* cy3507@cy3504)) (cy2e21@cy2d4e@build-case-lambda '#f cy350c@fmls* cy350b@body*))))) cy34fb@ls/false) (cy31a4@syntax-violation '#f '"invalid syntax" cy34f9@t)))))) (set! cy4b73@cy3076@case-lambda-transformer cy3076@case-lambda-transformer) (set! cy3078@lambda-transformer (lambda (cy350f@e cy3510@r cy3511@mr) (let ((cy3515@t cy350f@e)) (let ((cy3517@ls/false (cy30c4@syntax-dispatch cy3515@t '(_ any any . each-any)))) (if cy3517@ls/false (apply (lambda (cy3519@fmls cy351a@b cy351b@b*) (call-with-values (lambda () (cy30ec@chi-lambda-clause cy350f@e cy3519@fmls (cons cy351a@b cy351b@b*) cy3510@r cy3511@mr)) (lambda (cy3523@cy3520 cy3524@cy3522) (let ((cy3527@body cy3524@cy3522) (cy3528@fmls cy3523@cy3520)) (cy2e20@cy2d4c@build-lambda '#f cy3528@fmls cy3527@body))))) cy3517@ls/false) (cy31a4@syntax-violation '#f '"invalid syntax" cy3515@t)))))) (set! cy4b74@cy3078@lambda-transformer cy3078@lambda-transformer) (set! cy307a@bless (lambda (cy352b@x) (cy2ea5@mkstx (let cy352f@f ((cy352d@x cy352b@x)) (if (cy2e89@stx? cy352d@x) cy352d@x (if (pair? cy352d@x) (cons (cy352f@f (car cy352d@x)) (cy352f@f (cdr cy352d@x))) (if (symbol? cy352d@x) (cy304c@scheme-stx cy352d@x) (if (vector? cy352d@x) (vector-map cy352f@f cy352d@x) cy352d@x))))) '() '() '()))) (set! cy4b75@cy307a@bless cy307a@bless) (set! cy307c@with-syntax-macro (lambda (cy3531@e) (let ((cy3533@t cy3531@e)) (let ((cy3535@ls/false (cy30c4@syntax-dispatch cy3533@t '(_ #(each (any any)) any . each-any)))) (if cy3535@ls/false (apply (lambda (cy3537@pat* cy3538@expr* cy3539@b cy353a@b*) (let ((cy353f@idn* (let cy3543@f ((cy3541@pat* cy3537@pat*)) (if (null? cy3541@pat*) '() (call-with-values (lambda () (cy30c2@convert-pattern (car cy3541@pat*) '())) (lambda (cy3549@cy3546 cy354a@cy3548) (let ((cy354d@idn* cy354a@cy3548) (cy354e@pat cy3549@cy3546)) (append cy354d@idn* (cy3543@f (cdr cy3541@pat*)))))))))) (begin (cy30ea@verify-formals (map car cy353f@idn*) cy3531@e) (let ((cy3551@t* (cy3192@generate-temporaries cy3538@expr*))) (cy307a@bless (list 'let (map list cy3551@t* cy3538@expr*) (let cy3557@f ((cy3553@pat* cy3537@pat*) (cy3554@t* cy3551@t*)) (if (null? cy3553@pat*) (cons 'begin (cons '#f (cons cy3539@b cy353a@b*))) (list 'syntax-case (car cy3554@t*) '() (list (car cy3553@pat*) (cy3557@f (cdr cy3553@pat*) (cdr cy3554@t*))) (list '_ (list 'assertion-violation ''with-syntax '"pattern does not match value" (list 'quote (car cy3553@pat*)) (car cy3554@t*)))))))))))) cy3535@ls/false) (cy31a4@syntax-violation '#f '"invalid syntax" cy3533@t)))))) (set! cy4b76@cy307c@with-syntax-macro cy307c@with-syntax-macro) (set! cy307e@invalid-fmls-error (lambda (cy3559@stx cy355a@fmls) (let ((cy355d@t cy355a@fmls)) (let ((cy355f@ls/false (cy30c4@syntax-dispatch cy355d@t '#(each+ any () any)))) (if cy355f@ls/false (apply (lambda (cy3561@id* cy3562@last) (let cy3567@f ((cy3565@id* (if (cy2ebd@id? cy3562@last) (cons cy3562@last cy3561@id*) (if (cy2eb3@syntax-null? cy3562@last) cy3561@id* (cy31a4@syntax-violation '#f '"not an identifier" cy3559@stx cy3562@last))))) (if (null? cy3565@id*) (values) (if (not (cy2ebd@id? (car cy3565@id*))) (cy31a4@syntax-violation '#f '"not an identifier" cy3559@stx (car cy3565@id*)) (begin (cy3567@f (cdr cy3565@id*)) (if (cy2ec9@bound-id-member? (car cy3565@id*) (cdr cy3565@id*)) (cy31a4@syntax-violation '#f '"duplicate binding" cy3559@stx (car cy3565@id*)) (void))))))) cy355f@ls/false) (let ((cy3569@t cy355d@t)) (let ((cy356b@ls/false (cy30c4@syntax-dispatch cy3569@t '_))) (if cy356b@ls/false (apply (lambda () (cy31a4@syntax-violation '#f '"malformed binding form" cy3559@stx cy355a@fmls)) cy356b@ls/false) (cy31a4@syntax-violation '#f '"invalid syntax" cy3569@t))))))))) (set! cy4b77@cy307e@invalid-fmls-error cy307e@invalid-fmls-error) (set! cy3080@let-macro (lambda (cy356d@stx) (let ((cy356f@t cy356d@stx)) (let ((cy3571@ls/false (cy30c4@syntax-dispatch cy356f@t '(_ #(each (any any)) any . each-any)))) (if cy3571@ls/false (apply (lambda (cy3573@lhs* cy3574@rhs* cy3575@b cy3576@b*) (if (cy2ec5@valid-bound-ids? cy3573@lhs*) (cy307a@bless (cons (cons 'lambda (cons cy3573@lhs* (cons cy3575@b cy3576@b*))) cy3574@rhs*)) (cy307e@invalid-fmls-error cy356d@stx cy3573@lhs*))) cy3571@ls/false) (let ((cy357b@t cy356f@t)) (let ((cy357d@ls/false (cy30c4@syntax-dispatch cy357b@t '(_ any #(each (any any)) any . each-any)))) (if (and cy357d@ls/false (apply (lambda (cy357f@f cy3580@lhs* cy3581@rhs* cy3582@b cy3583@b*) (cy2ebd@id? cy357f@f)) cy357d@ls/false)) (apply (lambda (cy3589@f cy358a@lhs* cy358b@rhs* cy358c@b cy358d@b*) (if (cy2ec5@valid-bound-ids? cy358a@lhs*) (cy307a@bless (cons (list 'letrec (list (list cy3589@f (cons 'lambda (cons cy358a@lhs* (cons cy358c@b cy358d@b*))))) cy3589@f) cy358b@rhs*)) (cy307e@invalid-fmls-error cy356d@stx cy358a@lhs*))) cy357d@ls/false) (cy31a4@syntax-violation '#f '"invalid syntax" cy357b@t))))))))) (set! cy4b78@cy3080@let-macro cy3080@let-macro) (set! cy3082@let-values-macro (lambda (cy3593@stx) (let ((cy3596@rename '#f) (cy3598@rename* '#f)) (begin (set! cy3596@rename (lambda (cy35fb@x cy35fc@old* cy35fd@new*) (begin (if (not (cy2ebd@id? cy35fb@x)) (cy31a4@syntax-violation '#f '"not an indentifier" cy3593@stx cy35fb@x) (void)) (if (cy2ec9@bound-id-member? cy35fb@x cy35fc@old*) (cy31a4@syntax-violation '#f '"duplicate binding" cy3593@stx cy35fb@x) (void)) (let ((cy3601@y (gensym (cy31aa@syntax->datum cy35fb@x)))) (values cy3601@y (cons cy35fb@x cy35fc@old*) (cons cy3601@y cy35fd@new*)))))) (set! cy3598@rename* (lambda (cy35e9@x* cy35ea@old* cy35eb@new*) (if (null? cy35e9@x*) (values '() cy35ea@old* cy35eb@new*) (call-with-values (lambda () (cy3596@rename (car cy35e9@x*) cy35ea@old* cy35eb@new*)) (lambda (cy35ef@x cy35f0@old* cy35f1@new*) (call-with-values (lambda () (cy3598@rename* (cdr cy35e9@x*) cy35f0@old* cy35f1@new*)) (lambda (cy35f5@x* cy35f6@old* cy35f7@new*) (values (cons cy35ef@x cy35f5@x*) cy35f6@old* cy35f7@new*)))))))) (let ((cy3599@t cy3593@stx)) (let ((cy359b@ls/false (cy30c4@syntax-dispatch cy3599@t '(_ () any . each-any)))) (if cy359b@ls/false (apply (lambda (cy359d@b cy359e@b*) (cons* (cy307a@bless 'let) '() cy359d@b cy359e@b*)) cy359b@ls/false) (let ((cy35a1@t cy3599@t)) (let ((cy35a3@ls/false (cy30c4@syntax-dispatch cy35a1@t '(_ #(each (any any)) any . each-any)))) (if cy35a3@ls/false (apply (lambda (cy35a5@lhs* cy35a6@rhs* cy35a7@b cy35a8@b*) (cy307a@bless (let cy35b5@f ((cy35ad@lhs* cy35a5@lhs*) (cy35ae@rhs* cy35a6@rhs*) (cy35af@old* '()) (cy35b0@new* '())) (if (null? cy35ad@lhs*) (cons 'let (cons (map list cy35af@old* cy35b0@new*) (cons cy35a7@b cy35a8@b*))) (let ((cy35b7@t (car cy35ad@lhs*))) (let ((cy35b9@ls/false (cy30c4@syntax-dispatch cy35b7@t 'each-any))) (if cy35b9@ls/false (apply (lambda (cy35bb@x*) (call-with-values (lambda () (cy3598@rename* cy35bb@x* cy35af@old* cy35b0@new*)) (lambda (cy35c3@cy35be cy35c4@cy35c0 cy35c5@cy35c2) (let ((cy35c9@new* cy35c5@cy35c2) (cy35ca@old* cy35c4@cy35c0) (cy35cb@y* cy35c3@cy35be)) (list 'call-with-values (list 'lambda '() (car cy35ae@rhs*)) (list 'lambda cy35cb@y* (cy35b5@f (cdr cy35ad@lhs*) (cdr cy35ae@rhs*) cy35ca@old* cy35c9@new*))))))) cy35b9@ls/false) (let ((cy35cf@t cy35b7@t)) (let ((cy35d1@ls/false (cy30c4@syntax-dispatch cy35cf@t '#(each+ any () any)))) (if cy35d1@ls/false (apply (lambda (cy35d3@x* cy35d4@x) (call-with-values (lambda () (cy3596@rename cy35d4@x cy35af@old* cy35b0@new*)) (lambda (cy35d7@y cy35d8@old* cy35d9@new*) (call-with-values (lambda () (cy3598@rename* cy35d3@x* cy35d8@old* cy35d9@new*)) (lambda (cy35dd@y* cy35de@old* cy35df@new*) (list 'call-with-values (list 'lambda '() (car cy35ae@rhs*)) (list 'lambda (append cy35dd@y* cy35d7@y) (cy35b5@f (cdr cy35ad@lhs*) (cdr cy35ae@rhs*) cy35de@old* cy35df@new*)))))))) cy35d1@ls/false) (let ((cy35e3@t cy35cf@t)) (let ((cy35e5@ls/false (cy30c4@syntax-dispatch cy35e3@t 'any))) (if cy35e5@ls/false (apply (lambda (cy35e7@others) (cy31a4@syntax-violation '#f '"malformed bindings" cy3593@stx cy35e7@others)) cy35e5@ls/false) (cy31a4@syntax-violation '#f '"invalid syntax" cy35e3@t)))))))))))))) cy35a3@ls/false) (cy31a4@syntax-violation '#f '"invalid syntax" cy35a1@t))))))))))) (set! cy4b79@cy3082@let-values-macro cy3082@let-values-macro) (set! cy3084@let*-values-macro (lambda (cy3603@stx) (let ((cy3606@check '#f)) (begin (set! cy3606@check (lambda (cy3635@x*) (if (not (null? cy3635@x*)) (let ((cy3637@x (car cy3635@x*))) (begin (if (not (cy2ebd@id? cy3637@x)) (cy31a4@syntax-violation '#f '"not an identifier" cy3603@stx cy3637@x) (void)) (cy3606@check (cdr cy3635@x*)) (if (cy2ec9@bound-id-member? cy3637@x (cdr cy3635@x*)) (cy31a4@syntax-violation '#f '"duplicate identifier" cy3603@stx cy3637@x) (void)))) (void)))) (let ((cy3607@t cy3603@stx)) (let ((cy3609@ls/false (cy30c4@syntax-dispatch cy3607@t '(_ () any . each-any)))) (if cy3609@ls/false (apply (lambda (cy360b@b cy360c@b*) (cons* (cy307a@bless 'let) '() cy360b@b cy360c@b*)) cy3609@ls/false) (let ((cy360f@t cy3607@t)) (let ((cy3611@ls/false (cy30c4@syntax-dispatch cy360f@t '(_ #(each (any any)) any . each-any)))) (if cy3611@ls/false (apply (lambda (cy3613@lhs* cy3614@rhs* cy3615@b cy3616@b*) (cy307a@bless (let cy361f@f ((cy361b@lhs* cy3613@lhs*) (cy361c@rhs* cy3614@rhs*)) (if (null? cy361b@lhs*) (cons 'begin (cons cy3615@b cy3616@b*)) (let ((cy3621@t (car cy361b@lhs*))) (let ((cy3623@ls/false (cy30c4@syntax-dispatch cy3621@t 'each-any))) (if cy3623@ls/false (apply (lambda (cy3625@x*) (begin (cy3606@check cy3625@x*) (list 'call-with-values (list 'lambda '() (car cy361c@rhs*)) (list 'lambda cy3625@x* (cy361f@f (cdr cy361b@lhs*) (cdr cy361c@rhs*)))))) cy3623@ls/false) (let ((cy3627@t cy3621@t)) (let ((cy3629@ls/false (cy30c4@syntax-dispatch cy3627@t '#(each+ any () any)))) (if cy3629@ls/false (apply (lambda (cy362b@x* cy362c@x) (begin (cy3606@check (cons cy362c@x cy362b@x*)) (list 'call-with-values (list 'lambda '() (car cy361c@rhs*)) (list 'lambda (append cy362b@x* cy362c@x) (cy361f@f (cdr cy361b@lhs*) (cdr cy361c@rhs*)))))) cy3629@ls/false) (let ((cy362f@t cy3627@t)) (let ((cy3631@ls/false (cy30c4@syntax-dispatch cy362f@t 'any))) (if cy3631@ls/false (apply (lambda (cy3633@others) (cy31a4@syntax-violation '#f '"malformed bindings" cy3603@stx cy3633@others)) cy3631@ls/false) (cy31a4@syntax-violation '#f '"invalid syntax" cy362f@t)))))))))))))) cy3611@ls/false) (cy31a4@syntax-violation '#f '"invalid syntax" cy360f@t))))))))))) (set! cy4b7a@cy3084@let*-values-macro cy3084@let*-values-macro) (set! cy3086@trace-lambda-macro (lambda (cy3639@stx) (let ((cy363b@t cy3639@stx)) (let ((cy363d@ls/false (cy30c4@syntax-dispatch cy363b@t '(_ any each-any any . each-any)))) (if cy363d@ls/false (apply (lambda (cy363f@who cy3640@fmls cy3641@b cy3642@b*) (if (cy2ec5@valid-bound-ids? cy3640@fmls) (cy307a@bless (list 'make-traced-procedure (list 'quote cy363f@who) (cons 'lambda (cons cy3640@fmls (cons cy3641@b cy3642@b*))))) (cy307e@invalid-fmls-error cy3639@stx cy3640@fmls))) cy363d@ls/false) (let ((cy3647@t cy363b@t)) (let ((cy3649@ls/false (cy30c4@syntax-dispatch cy3647@t '(_ any #(each+ any () any) any . each-any)))) (if cy3649@ls/false (apply (lambda (cy364b@who cy364c@fmls cy364d@last cy364e@b cy364f@b*) (if (cy2ec5@valid-bound-ids? (cons cy364d@last cy364c@fmls)) (cy307a@bless (list 'make-traced-procedure (list 'quote cy364b@who) (cons 'lambda (cons (append cy364c@fmls cy364d@last) (cons cy364e@b cy364f@b*))))) (cy307e@invalid-fmls-error cy3639@stx (append cy364c@fmls cy364d@last)))) cy3649@ls/false) (cy31a4@syntax-violation '#f '"invalid syntax" cy3647@t))))))))) (set! cy4b7b@cy3086@trace-lambda-macro cy3086@trace-lambda-macro) (set! cy3088@trace-define-macro (lambda (cy3655@stx) (let ((cy3657@t cy3655@stx)) (let ((cy3659@ls/false (cy30c4@syntax-dispatch cy3657@t '(_ (any . each-any) any . each-any)))) (if cy3659@ls/false (apply (lambda (cy365b@who cy365c@fmls cy365d@b cy365e@b*) (if (cy2ec5@valid-bound-ids? cy365c@fmls) (cy307a@bless (list 'define cy365b@who (list 'make-traced-procedure (list 'quote cy365b@who) (cons 'lambda (cons cy365c@fmls (cons cy365d@b cy365e@b*)))))) (cy307e@invalid-fmls-error cy3655@stx cy365c@fmls))) cy3659@ls/false) (let ((cy3663@t cy3657@t)) (let ((cy3665@ls/false (cy30c4@syntax-dispatch cy3663@t '(_ (any . #(each+ any () any)) any . each-any)))) (if cy3665@ls/false (apply (lambda (cy3667@who cy3668@fmls cy3669@last cy366a@b cy366b@b*) (if (cy2ec5@valid-bound-ids? (cons cy3669@last cy3668@fmls)) (cy307a@bless (list 'define cy3667@who (list 'make-traced-procedure (list 'quote cy3667@who) (cons 'lambda (cons (append cy3668@fmls cy3669@last) (cons cy366a@b cy366b@b*)))))) (cy307e@invalid-fmls-error cy3655@stx (append cy3668@fmls cy3669@last)))) cy3665@ls/false) (let ((cy3671@t cy3663@t)) (let ((cy3673@ls/false (cy30c4@syntax-dispatch cy3671@t '(_ any any)))) (if cy3673@ls/false (apply (lambda (cy3675@who cy3676@expr) (if (cy2ebd@id? cy3675@who) (cy307a@bless (list 'define cy3675@who (list 'let (list (list 'v cy3676@expr)) (cons 'if (cons '(procedure? v) (cons (cons 'make-traced-procedure (cons (list 'quote cy3675@who) '(v))) '((assertion-violation 'trace-define "not a procedure" v)))))))) (cy31a4@syntax-violation '#f '"invalid name" cy3655@stx))) cy3673@ls/false) (cy31a4@syntax-violation '#f '"invalid syntax" cy3671@t)))))))))))) (set! cy4b7c@cy3088@trace-define-macro cy3088@trace-define-macro) (set! cy308a@trace-define-syntax-macro (lambda (cy3679@stx) (let ((cy367b@t cy3679@stx)) (let ((cy367d@ls/false (cy30c4@syntax-dispatch cy367b@t '(_ any any)))) (if cy367d@ls/false (apply (lambda (cy367f@who cy3680@expr) (if (cy2ebd@id? cy367f@who) (cy307a@bless (list 'define-syntax cy367f@who (list 'make-traced-macro (list 'quote cy367f@who) cy3680@expr))) (cy31a4@syntax-violation '#f '"invalid name" cy3679@stx))) cy367d@ls/false) (cy31a4@syntax-violation '#f '"invalid syntax" cy367b@t)))))) (set! cy4b7d@cy308a@trace-define-syntax-macro cy308a@trace-define-syntax-macro) (set! cy308c@trace-let/rec-syntax (lambda (cy3683@who) (lambda (cy3685@stx) (let ((cy3687@t cy3685@stx)) (let ((cy3689@ls/false (cy30c4@syntax-dispatch cy3687@t '(_ #(each (any any)) any . each-any)))) (if cy3689@ls/false (apply (lambda (cy368b@lhs* cy368c@rhs* cy368d@b cy368e@b*) (if (cy2ec5@valid-bound-ids? cy368b@lhs*) (let ((cy3693@rhs* (map (lambda (cy3695@lhs cy3696@rhs) (list 'make-traced-macro (list 'quote cy3695@lhs) cy3696@rhs)) cy368b@lhs* cy368c@rhs*))) (cy307a@bless (cons cy3683@who (cons (map list cy368b@lhs* cy3693@rhs*) (cons cy368d@b cy368e@b*))))) (cy307e@invalid-fmls-error cy3685@stx cy368b@lhs*))) cy3689@ls/false) (cy31a4@syntax-violation '#f '"invalid syntax" cy3687@t))))))) (set! cy4b7e@cy308c@trace-let/rec-syntax cy308c@trace-let/rec-syntax) (set! cy308e@trace-let-syntax-macro (cy308c@trace-let/rec-syntax 'let-syntax)) (set! cy4b7f@cy308e@trace-let-syntax-macro cy308e@trace-let-syntax-macro) (set! cy3090@trace-letrec-syntax-macro (cy308c@trace-let/rec-syntax 'letrec-syntax)) (set! cy4b80@cy3090@trace-letrec-syntax-macro cy3090@trace-letrec-syntax-macro) (set! cy3092@guard-macro (lambda (cy3699@x) (let ((cy369c@gen-clauses '#f)) (begin (set! cy369c@gen-clauses (lambda (cy36b3@con cy36b4@outerk cy36b5@clause*) (let ((cy36ba@f '#f) (cy36bc@f* '#f)) (begin (set! cy36ba@f (lambda (cy36f3@x cy36f4@k) (let ((cy36f7@t cy36f3@x)) (let ((cy36f9@ls/false (cy30c4@syntax-dispatch cy36f7@t '(any #(scheme-id =>) any)))) (if cy36f9@ls/false (apply (lambda (cy36fb@e cy36fc@p) (let ((cy36ff@t (gensym))) (list 'let (list (list cy36ff@t cy36fb@e)) (list 'if cy36ff@t (list cy36fc@p cy36ff@t) cy36f4@k)))) cy36f9@ls/false) (let ((cy3701@t cy36f7@t)) (let ((cy3703@ls/false (cy30c4@syntax-dispatch cy3701@t '(any)))) (if cy3703@ls/false (apply (lambda (cy3705@e) (let ((cy3707@t (gensym))) (list 'let (list (list cy3707@t cy3705@e)) (list 'if cy3707@t cy3707@t cy36f4@k)))) cy3703@ls/false) (let ((cy3709@t cy3701@t)) (let ((cy370b@ls/false (cy30c4@syntax-dispatch cy3709@t '(any any . each-any)))) (if cy370b@ls/false (apply (lambda (cy370d@e cy370e@v cy370f@v*) (list 'if cy370d@e (cons 'begin (cons cy370e@v cy370f@v*)) cy36f4@k)) cy370b@ls/false) (let ((cy3713@t cy3709@t)) (let ((cy3715@ls/false (cy30c4@syntax-dispatch cy3713@t '_))) (if cy3715@ls/false (apply (lambda () (cy31a4@syntax-violation '#f '"invalid guard clause" cy36f3@x)) cy3715@ls/false) (cy31a4@syntax-violation '#f '"invalid syntax" cy3713@t))))))))))))))) (set! cy36bc@f* (lambda (cy36c9@x*) (let ((cy36cb@t cy36c9@x*)) (let ((cy36cd@ls/false (cy30c4@syntax-dispatch cy36cb@t '()))) (if cy36cd@ls/false (apply (lambda () (let ((cy36cf@g (gensym))) (values (list cy36cf@g (list 'lambda '() (list 'raise-continuable cy36b3@con))) cy36cf@g))) cy36cd@ls/false) (let ((cy36d1@t cy36cb@t)) (let ((cy36d3@ls/false (cy30c4@syntax-dispatch cy36d1@t '((#(scheme-id else) any . each-any))))) (if cy36d3@ls/false (apply (lambda (cy36d5@e cy36d6@e*) (values (cons 'begin (cons cy36d5@e cy36d6@e*)) '#f)) cy36d3@ls/false) (let ((cy36d9@t cy36d1@t)) (let ((cy36db@ls/false (cy30c4@syntax-dispatch cy36d9@t '(any . any)))) (if cy36db@ls/false (apply (lambda (cy36dd@cls cy36de@cls*) (call-with-values (lambda () (cy36bc@f* cy36de@cls*)) (lambda (cy36e5@cy36e2 cy36e6@cy36e4) (let ((cy36e9@g cy36e6@cy36e4) (cy36ea@e cy36e5@cy36e2)) (values (cy36ba@f cy36dd@cls cy36ea@e) cy36e9@g))))) cy36db@ls/false) (let ((cy36ed@t cy36d9@t)) (let ((cy36ef@ls/false (cy30c4@syntax-dispatch cy36ed@t 'any))) (if cy36ef@ls/false (apply (lambda (cy36f1@others) (cy31a4@syntax-violation '#f '"invalid guard clause" cy36f1@others)) cy36ef@ls/false) (cy31a4@syntax-violation '#f '"invalid syntax" cy36ed@t))))))))))))))) (call-with-values (lambda () (cy36bc@f* cy36b5@clause*)) (lambda (cy36c1@cy36be cy36c2@cy36c0) (let ((cy36c5@raisek cy36c2@cy36c0) (cy36c6@code cy36c1@cy36be)) (if cy36c5@raisek (list (list 'call/cc (list 'lambda (list cy36c5@raisek) (list cy36b4@outerk (list 'lambda '() cy36c6@code))))) (list cy36b4@outerk (list 'lambda '() cy36c6@code)))))))))) (let ((cy369d@t cy3699@x)) (let ((cy369f@ls/false (cy30c4@syntax-dispatch cy369d@t '(_ (any . each-any) any . each-any)))) (if (and cy369f@ls/false (apply (lambda (cy36a1@con cy36a2@clause* cy36a3@b cy36a4@b*) (cy2ebd@id? cy36a1@con)) cy369f@ls/false)) (apply (lambda (cy36a9@con cy36aa@clause* cy36ab@b cy36ac@b*) (let ((cy36b1@outerk (gensym))) (cy307a@bless (list (list 'call/cc (list 'lambda (list cy36b1@outerk) (list 'lambda '() (list 'with-exception-handler (list 'lambda (list cy36a9@con) (cy369c@gen-clauses cy36a9@con cy36b1@outerk cy36aa@clause*)) (cons 'lambda (cons '() (cons cy36ab@b cy36ac@b*))))))))))) cy369f@ls/false) (cy31a4@syntax-violation '#f '"invalid syntax" cy369d@t)))))))) (set! cy4b81@cy3092@guard-macro cy3092@guard-macro) (set! cy3094@define-enumeration-macro (lambda (cy3717@stx) (let ((cy371a@set? '#f) (cy371c@remove-dups '#f)) (begin (set! cy371a@set? (lambda (cy3733@x) (or (null? cy3733@x) (and (not (memq (car cy3733@x) (cdr cy3733@x))) (cy371a@set? (cdr cy3733@x)))))) (set! cy371c@remove-dups (lambda (cy3731@ls) (if (null? cy3731@ls) '() (cons (car cy3731@ls) (cy371c@remove-dups (remq (car cy3731@ls) (cdr cy3731@ls))))))) (let ((cy371d@t cy3717@stx)) (let ((cy371f@ls/false (cy30c4@syntax-dispatch cy371d@t '(_ any each-any any)))) (if (and cy371f@ls/false (apply (lambda (cy3721@name cy3722@id* cy3723@maker) (and (cy2ebd@id? cy3721@name) (cy2ebd@id? cy3723@maker) (for-all cy2ebd@id? cy3722@id*))) cy371f@ls/false)) (apply (lambda (cy3727@name cy3728@id* cy3729@maker) (let ((cy372d@name* (cy371c@remove-dups (cy31aa@syntax->datum cy3728@id*))) (cy372e@mk (gensym))) (cy307a@bless (list 'begin (list 'define cy372e@mk (list 'enum-set-constructor (list 'make-enumeration (list 'quote cy372d@name*)))) (list 'define-syntax cy3727@name (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n) '(identifier? (syntax n)) (list 'if (list 'memq '(syntax->datum (syntax n)) (list 'quote cy372d@name*)) '(syntax 'n) (cons 'syntax-violation (cons (list 'quote cy3727@name) '("not a member of set" x (syntax n))))))))) (list 'define-syntax cy3729@maker (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n* ...) (list 'begin (cons 'for-each (cons (list 'lambda '(n) (list 'unless '(identifier? n) (cons 'syntax-violation (cons (list 'quote cy3729@maker) '("non-identifier argument" x n)))) (list 'unless (list 'memq '(syntax->datum n) (list 'quote cy372d@name*)) (cons 'syntax-violation (cons (list 'quote cy3729@maker) '("not a member of set" x n))))) '((syntax (n* ...))))) (list 'syntax (cons cy372e@mk '('(n* ...))))))))))))) cy371f@ls/false) (cy31a4@syntax-violation '#f '"invalid syntax" cy371d@t)))))))) (set! cy4b82@cy3094@define-enumeration-macro cy3094@define-enumeration-macro) (set! cy3096@time-macro (lambda (cy3735@stx) (let ((cy3737@t cy3735@stx)) (let ((cy3739@ls/false (cy30c4@syntax-dispatch cy3737@t '(_ any)))) (if cy3739@ls/false (apply (lambda (cy373b@expr) (cy307a@bless (cons 'let* (cons (cons '(start (time-usage)) (cons (list 'result (list (list 'lambda '() cy373b@expr))) '((end (time-usage)) (used (map - end start)) (real (car used)) (user (cadr used)) (sys (caddr used))))) '((format #t "~%;;~a real ~a user ~a sys~%~!" real user sys) result))))) cy3739@ls/false) (cy31a4@syntax-violation '#f '"invalid syntax" cy3737@t)))))) (set! cy4b83@cy3096@time-macro cy3096@time-macro) (set! cy3098@delay-macro (lambda (cy373d@stx) (let ((cy373f@t cy373d@stx)) (let ((cy3741@ls/false (cy30c4@syntax-dispatch cy373f@t '(_ any)))) (if cy3741@ls/false (apply (lambda (cy3743@expr) (cy307a@bless (list 'make-promise (list 'lambda '() cy3743@expr)))) cy3741@ls/false) (cy31a4@syntax-violation '#f '"invalid syntax" cy373f@t)))))) (set! cy4b84@cy3098@delay-macro cy3098@delay-macro) (set! cy309a@assert-macro (lambda (cy3745@stx) (let ((cy3747@t cy3745@stx)) (let ((cy3749@ls/false (cy30c4@syntax-dispatch cy3747@t '(_ any)))) (if cy3749@ls/false (apply (lambda (cy374b@expr) (let ((cy374d@pos (or (cy319c@expression-position cy3745@stx) (cy319c@expression-position cy374b@expr)))) (cy307a@bless (list 'unless cy374b@expr (list 'assertion-error (list 'quote cy374b@expr) (list 'quote cy374d@pos)))))) cy3749@ls/false) (cy31a4@syntax-violation '#f '"invalid syntax" cy3747@t)))))) (set! cy4b85@cy309a@assert-macro cy309a@assert-macro) (set! cy309c@endianness-macro (lambda (cy374f@stx) (let ((cy3751@t cy374f@stx)) (let ((cy3753@ls/false (cy30c4@syntax-dispatch cy3751@t '(_ any)))) (if cy3753@ls/false (apply (lambda (cy3755@e) (let ((cy3757@t (cy31aa@syntax->datum cy3755@e))) (if (memv cy3757@t '(little)) (cy307a@bless ''little) (if (memv cy3757@t '(big)) (cy307a@bless ''big) (cy31a4@syntax-violation '#f '"endianness must be big or little" cy374f@stx))))) cy3753@ls/false) (cy31a4@syntax-violation '#f '"invalid syntax" cy3751@t)))))) (set! cy4b86@cy309c@endianness-macro cy309c@endianness-macro) (set! cy309e@identifier-syntax-macro (lambda (cy3759@stx) (let ((cy375b@t cy3759@stx)) (let ((cy375d@ls/false (cy30c4@syntax-dispatch cy375b@t '(_ any)))) (if cy375d@ls/false (apply (lambda (cy375f@expr) (cy307a@bless (list 'lambda '(x) (list 'syntax-case 'x '() (list 'id '(identifier? (syntax id)) (list 'syntax cy375f@expr)) (list '(id e* ...) '(identifier? (syntax id)) (cons 'cons (cons (list 'syntax cy375f@expr) '((syntax (e* ...)))))))))) cy375d@ls/false) (let ((cy3761@t cy375b@t)) (let ((cy3763@ls/false (cy30c4@syntax-dispatch cy3761@t '(_ (any any) ((#(scheme-id set!) any any) any))))) (if (and cy3763@ls/false (apply (lambda (cy3765@id1 cy3766@expr1 cy3767@id2 cy3768@expr2 cy3769@expr3) (and (cy2ebd@id? cy3765@id1) (cy2ebd@id? cy3767@id2) (cy2ebd@id? cy3768@expr2))) cy3763@ls/false)) (apply (lambda (cy376f@id1 cy3770@expr1 cy3771@id2 cy3772@expr2 cy3773@expr3) (cy307a@bless (list 'cons ''macro! (list 'lambda '(x) (list 'syntax-case 'x '(set!) (list 'id '(identifier? (syntax id)) (list 'syntax cy3770@expr1)) (list (list 'set! 'id cy3772@expr2) (list 'syntax cy3773@expr3)) (list '(id e* ...) '(identifier? (syntax id)) (list 'syntax (cons cy3770@expr1 '(e* ...))))))))) cy3763@ls/false) (cy31a4@syntax-violation '#f '"invalid syntax" cy3761@t))))))))) (set! cy4b87@cy309e@identifier-syntax-macro cy309e@identifier-syntax-macro) (set! cy30a0@do-macro (lambda (cy3779@stx) (let ((cy377c@bind '#f)) (begin (set! cy377c@bind (lambda (cy3793@x) (let ((cy3795@t cy3793@x)) (let ((cy3797@ls/false (cy30c4@syntax-dispatch cy3795@t '(any any)))) (if cy3797@ls/false (apply (lambda (cy3799@x cy379a@init) (list cy3799@x cy379a@init cy3799@x)) cy3797@ls/false) (let ((cy379d@t cy3795@t)) (let ((cy379f@ls/false (cy30c4@syntax-dispatch cy379d@t '(any any any)))) (if cy379f@ls/false (apply (lambda (cy37a1@x cy37a2@init cy37a3@step) (list cy37a1@x cy37a2@init cy37a3@step)) cy379f@ls/false) (let ((cy37a7@t cy379d@t)) (let ((cy37a9@ls/false (cy30c4@syntax-dispatch cy37a7@t '_))) (if cy37a9@ls/false (apply (lambda () (cy31a4@syntax-violation '#f '"invalid binding" cy3779@stx)) cy37a9@ls/false) (cy31a4@syntax-violation '#f '"invalid syntax" cy37a7@t)))))))))))) (let ((cy377d@t cy3779@stx)) (let ((cy377f@ls/false (cy30c4@syntax-dispatch cy377d@t '(_ each-any (any . each-any) . each-any)))) (if cy377f@ls/false (apply (lambda (cy3781@binding* cy3782@test cy3783@expr* cy3784@command*) (let ((cy3789@t (map cy377c@bind cy3781@binding*))) (let ((cy378b@ls/false (cy30c4@syntax-dispatch cy3789@t '#(each (any any any))))) (if cy378b@ls/false (apply (lambda (cy378d@x* cy378e@init* cy378f@step*) (if (cy2ec5@valid-bound-ids? cy378d@x*) (cy307a@bless (list 'letrec (list (list 'loop (list 'lambda cy378d@x* (list 'if cy3782@test (cons 'begin (cons '(if #f #f) cy3783@expr*)) (cons 'begin (append cy3784@command* (list (cons 'loop cy378f@step*)))))))) (cons 'loop cy378e@init*))) (cy31a4@syntax-violation '#f '"invalid bindings" cy3779@stx))) cy378b@ls/false) (cy31a4@syntax-violation '#f '"invalid syntax" cy3789@t))))) cy377f@ls/false) (cy31a4@syntax-violation '#f '"invalid syntax" cy377d@t)))))))) (set! cy4b88@cy30a0@do-macro cy30a0@do-macro) (set! cy30a2@let*-macro (lambda (cy37ab@stx) (let ((cy37ad@t cy37ab@stx)) (let ((cy37af@ls/false (cy30c4@syntax-dispatch cy37ad@t '(_ #(each (any any)) any . each-any)))) (if (and cy37af@ls/false (apply (lambda (cy37b1@lhs* cy37b2@rhs* cy37b3@b cy37b4@b*) (for-all cy2ebd@id? cy37b1@lhs*)) cy37af@ls/false)) (apply (lambda (cy37b9@lhs* cy37ba@rhs* cy37bb@b cy37bc@b*) (cy307a@bless (let cy37c3@f ((cy37c1@x* (map list cy37b9@lhs* cy37ba@rhs*))) (if (null? cy37c1@x*) (cons 'let (cons '() (cons cy37bb@b cy37bc@b*))) (list 'let (list (car cy37c1@x*)) (cy37c3@f (cdr cy37c1@x*))))))) cy37af@ls/false) (cy31a4@syntax-violation '#f '"invalid syntax" cy37ad@t)))))) (set! cy4b89@cy30a2@let*-macro cy30a2@let*-macro) (set! cy30a4@or-macro (lambda (cy37c5@stx) (let ((cy37c7@t cy37c5@stx)) (let ((cy37c9@ls/false (cy30c4@syntax-dispatch cy37c7@t '(_)))) (if cy37c9@ls/false (apply (lambda () '#f) cy37c9@ls/false) (let ((cy37cb@t cy37c7@t)) (let ((cy37cd@ls/false (cy30c4@syntax-dispatch cy37cb@t '(_ any . each-any)))) (if cy37cd@ls/false (apply (lambda (cy37cf@e cy37d0@e*) (cy307a@bless (let cy37d7@f ((cy37d3@e cy37cf@e) (cy37d4@e* cy37d0@e*)) (if (null? cy37d4@e*) (list 'begin '#f cy37d3@e) (list 'let (list (list 't cy37d3@e)) (list 'if 't 't (cy37d7@f (car cy37d4@e*) (cdr cy37d4@e*)))))))) cy37cd@ls/false) (cy31a4@syntax-violation '#f '"invalid syntax" cy37cb@t))))))))) (set! cy4b8a@cy30a4@or-macro cy30a4@or-macro) (set! cy30a6@and-macro (lambda (cy37d9@stx) (let ((cy37db@t cy37d9@stx)) (let ((cy37dd@ls/false (cy30c4@syntax-dispatch cy37db@t '(_)))) (if cy37dd@ls/false (apply (lambda () '#t) cy37dd@ls/false) (let ((cy37df@t cy37db@t)) (let ((cy37e1@ls/false (cy30c4@syntax-dispatch cy37df@t '(_ any . each-any)))) (if cy37e1@ls/false (apply (lambda (cy37e3@e cy37e4@e*) (cy307a@bless (let cy37eb@f ((cy37e7@e cy37e3@e) (cy37e8@e* cy37e4@e*)) (if (null? cy37e8@e*) (list 'begin '#f cy37e7@e) (cons 'if (cons cy37e7@e (cons (cy37eb@f (car cy37e8@e*) (cdr cy37e8@e*)) '(#f)))))))) cy37e1@ls/false) (cy31a4@syntax-violation '#f '"invalid syntax" cy37df@t))))))))) (set! cy4b8b@cy30a6@and-macro cy30a6@and-macro) (set! cy30a8@cond-macro (lambda (cy37ed@stx) (let ((cy37ef@t cy37ed@stx)) (let ((cy37f1@ls/false (cy30c4@syntax-dispatch cy37ef@t '(_ any . each-any)))) (if cy37f1@ls/false (apply (lambda (cy37f3@cls cy37f4@cls*) (cy307a@bless (let cy37fb@f ((cy37f7@cls cy37f3@cls) (cy37f8@cls* cy37f4@cls*)) (if (null? cy37f8@cls*) (let ((cy37fd@t cy37f7@cls)) (let ((cy37ff@ls/false (cy30c4@syntax-dispatch cy37fd@t '(#(scheme-id else) any . each-any)))) (if cy37ff@ls/false (apply (lambda (cy3801@e cy3802@e*) (cons 'begin (cons cy3801@e cy3802@e*))) cy37ff@ls/false) (let ((cy3805@t cy37fd@t)) (let ((cy3807@ls/false (cy30c4@syntax-dispatch cy3805@t '(any #(scheme-id =>) any)))) (if cy3807@ls/false (apply (lambda (cy3809@e cy380a@p) (list 'let (list (list 't cy3809@e)) (list 'if 't (cons cy380a@p '(t))))) cy3807@ls/false) (let ((cy380d@t cy3805@t)) (let ((cy380f@ls/false (cy30c4@syntax-dispatch cy380d@t '(any)))) (if cy380f@ls/false (apply (lambda (cy3811@e) (cons 'or (cons cy3811@e '((if #f #f))))) cy380f@ls/false) (let ((cy3813@t cy380d@t)) (let ((cy3815@ls/false (cy30c4@syntax-dispatch cy3813@t '(any . each-any)))) (if cy3815@ls/false (apply (lambda (cy3817@e cy3818@e*) (list 'if cy3817@e (cons 'begin cy3818@e*))) cy3815@ls/false) (let ((cy381b@t cy3813@t)) (let ((cy381d@ls/false (cy30c4@syntax-dispatch cy381b@t '_))) (if cy381d@ls/false (apply (lambda () (cy31a4@syntax-violation '#f '"invalid last clause" cy37ed@stx)) cy381d@ls/false) (cy31a4@syntax-violation '#f '"invalid syntax" cy381b@t)))))))))))))))) (let ((cy381f@t cy37f7@cls)) (let ((cy3821@ls/false (cy30c4@syntax-dispatch cy381f@t '(#(scheme-id else) any . each-any)))) (if cy3821@ls/false (apply (lambda (cy3823@e cy3824@e*) (cy31a4@syntax-violation '#f '"incorrect position of keyword else" cy37ed@stx)) cy3821@ls/false) (let ((cy3827@t cy381f@t)) (let ((cy3829@ls/false (cy30c4@syntax-dispatch cy3827@t '(any #(scheme-id =>) any)))) (if cy3829@ls/false (apply (lambda (cy382b@e cy382c@p) (list 'let (list (list 't cy382b@e)) (list 'if 't (cons cy382c@p '(t)) (cy37fb@f (car cy37f8@cls*) (cdr cy37f8@cls*))))) cy3829@ls/false) (let ((cy382f@t cy3827@t)) (let ((cy3831@ls/false (cy30c4@syntax-dispatch cy382f@t '(any)))) (if cy3831@ls/false (apply (lambda (cy3833@e) (list 'or cy3833@e (cy37fb@f (car cy37f8@cls*) (cdr cy37f8@cls*)))) cy3831@ls/false) (let ((cy3835@t cy382f@t)) (let ((cy3837@ls/false (cy30c4@syntax-dispatch cy3835@t '(any . each-any)))) (if cy3837@ls/false (apply (lambda (cy3839@e cy383a@e*) (list 'if cy3839@e (cons 'begin cy383a@e*) (cy37fb@f (car cy37f8@cls*) (cdr cy37f8@cls*)))) cy3837@ls/false) (let ((cy383d@t cy3835@t)) (let ((cy383f@ls/false (cy30c4@syntax-dispatch cy383d@t '_))) (if cy383f@ls/false (apply (lambda () (cy31a4@syntax-violation '#f '"invalid last clause" cy37ed@stx)) cy383f@ls/false) (cy31a4@syntax-violation '#f '"invalid syntax" cy383d@t)))))))))))))))))))) cy37f1@ls/false) (cy31a4@syntax-violation '#f '"invalid syntax" cy37ef@t)))))) (set! cy4b8c@cy30a8@cond-macro cy30a8@cond-macro) (set! cy30aa@do-include (lambda (cy3841@stx cy3842@id cy3843@filename) (let ((cy3847@filename (cy2ed1@stx->datum cy3843@filename))) (begin (if (not (and (string? cy3847@filename) (cy2ebd@id? cy3842@id))) (cy31a4@syntax-violation '#f '"invalid syntax" cy3841@stx) (void)) (cons (cy307a@bless 'begin) (with-input-from-file cy3847@filename (lambda () (let cy384b@f ((cy3849@ls '())) (let ((cy384d@x (cy29fa@cy28cc@read-annotated))) (if (eof-object? cy384d@x) (reverse cy3849@ls) (cy384b@f (cons (cy2e9d@datum->stx cy3842@id cy384d@x) cy3849@ls)))))))))))) (set! cy4b8d@cy30aa@do-include cy30aa@do-include) (set! cy30ac@include-macro (lambda (cy384f@e) (let ((cy3851@t cy384f@e)) (let ((cy3853@ls/false (cy30c4@syntax-dispatch cy3851@t '(any any)))) (if cy3853@ls/false (apply (lambda (cy3855@id cy3856@filename) (cy30aa@do-include cy384f@e cy3855@id cy3856@filename)) cy3853@ls/false) (cy31a4@syntax-violation '#f '"invalid syntax" cy3851@t)))))) (set! cy4b8e@cy30ac@include-macro cy30ac@include-macro) (set! cy30ae@include-into-macro (lambda (cy3859@e) (let ((cy385b@t cy3859@e)) (let ((cy385d@ls/false (cy30c4@syntax-dispatch cy385b@t '(_ any any)))) (if cy385d@ls/false (apply (lambda (cy385f@id cy3860@filename) (cy30aa@do-include cy3859@e cy385f@id cy3860@filename)) cy385d@ls/false) (cy31a4@syntax-violation '#f '"invalid syntax" cy385b@t)))))) (set! cy4b8f@cy30ae@include-into-macro cy30ae@include-into-macro) (set! cy30b0@syntax-rules-macro (lambda (cy3863@e) (let ((cy3865@t cy3863@e)) (let ((cy3867@ls/false (cy30c4@syntax-dispatch cy3865@t '(_ each-any . #(each (any any)))))) (if cy3867@ls/false (apply (lambda (cy3869@lits cy386a@pat* cy386b@tmp*) (begin (cy30ca@verify-literals cy3869@lits cy3863@e) (cy307a@bless (list 'lambda '(x) (cons 'syntax-case (cons 'x (cons cy3869@lits (map (lambda (cy386f@pat cy3870@tmp) (let ((cy3873@t cy386f@pat)) (let ((cy3875@ls/false (cy30c4@syntax-dispatch cy3873@t '(_ . any)))) (if cy3875@ls/false (apply (lambda (cy3877@rest) (list (cons 'g cy3877@rest) (list 'syntax cy3870@tmp))) cy3875@ls/false) (let ((cy3879@t cy3873@t)) (let ((cy387b@ls/false (cy30c4@syntax-dispatch cy3879@t '_))) (if cy387b@ls/false (apply (lambda () (cy31a4@syntax-violation '#f '"invalid syntax-rules pattern" cy3863@e cy386f@pat)) cy387b@ls/false) (cy31a4@syntax-violation '#f '"invalid syntax" cy3879@t)))))))) cy386a@pat* cy386b@tmp*)))))))) cy3867@ls/false) (cy31a4@syntax-violation '#f '"invalid syntax" cy3865@t)))))) (set! cy4b90@cy30b0@syntax-rules-macro cy30b0@syntax-rules-macro) (set! cy30b2@quasiquote-macro (let ((cy387e@datum '#f) (cy389a@quasicons* '#f) (cy389c@quasicons '#f) (cy389e@quasiappend '#f) (cy38a0@quasivector '#f) (cy38a2@vquasi '#f) (cy38a4@quasi '#f)) (begin (set! cy387e@datum (lambda (cy397f@x) (list (cy304c@scheme-stx 'quote) (cy2ea5@mkstx cy397f@x '() '() '())))) (set! cy389a@quasicons* (lambda (cy3977@x cy3978@y) (let cy397d@f ((cy397b@x cy3977@x)) (if (null? cy397b@x) cy3978@y (cy389c@quasicons (car cy397b@x) (cy397d@f (cdr cy397b@x))))))) (set! cy389c@quasicons (lambda (cy3951@x cy3952@y) (let ((cy3955@t cy3952@y)) (let ((cy3957@ls/false (cy30c4@syntax-dispatch cy3955@t '(#(scheme-id quote) any)))) (if cy3957@ls/false (apply (lambda (cy3959@dy) (let ((cy395b@t cy3951@x)) (let ((cy395d@ls/false (cy30c4@syntax-dispatch cy395b@t '(#(scheme-id quote) any)))) (if cy395d@ls/false (apply (lambda (cy395f@dx) (list (cy304c@scheme-stx 'quote) (cons cy395f@dx cy3959@dy))) cy395d@ls/false) (let ((cy3961@t cy395b@t)) (let ((cy3963@ls/false (cy30c4@syntax-dispatch cy3961@t '_))) (if cy3963@ls/false (apply (lambda () (let ((cy3965@t cy3959@dy)) (let ((cy3967@ls/false (cy30c4@syntax-dispatch cy3965@t '()))) (if cy3967@ls/false (apply (lambda () (list (cy304c@scheme-stx 'list) cy3951@x)) cy3967@ls/false) (let ((cy3969@t cy3965@t)) (let ((cy396b@ls/false (cy30c4@syntax-dispatch cy3969@t '_))) (if cy396b@ls/false (apply (lambda () (list (cy304c@scheme-stx 'cons) cy3951@x cy3952@y)) cy396b@ls/false) (cy31a4@syntax-violation '#f '"invalid syntax" cy3969@t)))))))) cy3963@ls/false) (cy31a4@syntax-violation '#f '"invalid syntax" cy3961@t)))))))) cy3957@ls/false) (let ((cy396d@t cy3955@t)) (let ((cy396f@ls/false (cy30c4@syntax-dispatch cy396d@t '(#(scheme-id list) . each-any)))) (if cy396f@ls/false (apply (lambda (cy3971@stuff) (cons* (cy304c@scheme-stx 'list) cy3951@x cy3971@stuff)) cy396f@ls/false) (let ((cy3973@t cy396d@t)) (let ((cy3975@ls/false (cy30c4@syntax-dispatch cy3973@t '_))) (if cy3975@ls/false (apply (lambda () (list (cy304c@scheme-stx 'cons) cy3951@x cy3952@y)) cy3975@ls/false) (cy31a4@syntax-violation '#f '"invalid syntax" cy3973@t)))))))))))) (set! cy389e@quasiappend (lambda (cy3937@x cy3938@y) (let ((cy393b@ls (let cy393f@f ((cy393d@x cy3937@x)) (if (null? cy393d@x) (let ((cy3941@t cy3938@y)) (let ((cy3943@ls/false (cy30c4@syntax-dispatch cy3941@t '(#(scheme-id quote) ())))) (if cy3943@ls/false (apply (lambda () '()) cy3943@ls/false) (let ((cy3945@t cy3941@t)) (let ((cy3947@ls/false (cy30c4@syntax-dispatch cy3945@t '_))) (if cy3947@ls/false (apply (lambda () (list cy3938@y)) cy3947@ls/false) (cy31a4@syntax-violation '#f '"invalid syntax" cy3945@t))))))) (let ((cy3949@t (car cy393d@x))) (let ((cy394b@ls/false (cy30c4@syntax-dispatch cy3949@t '(#(scheme-id quote) ())))) (if cy394b@ls/false (apply (lambda () (cy393f@f (cdr cy393d@x))) cy394b@ls/false) (let ((cy394d@t cy3949@t)) (let ((cy394f@ls/false (cy30c4@syntax-dispatch cy394d@t '_))) (if cy394f@ls/false (apply (lambda () (cons (car cy393d@x) (cy393f@f (cdr cy393d@x)))) cy394f@ls/false) (cy31a4@syntax-violation '#f '"invalid syntax" cy394d@t))))))))))) (if (null? cy393b@ls) (list (cy304c@scheme-stx 'quote) '()) (if (null? (cdr cy393b@ls)) (car cy393b@ls) (cons* (cy304c@scheme-stx 'append) cy393b@ls)))))) (set! cy38a0@quasivector (lambda (cy3905@x) (let ((cy3907@pat-x cy3905@x)) (let ((cy3909@t cy3907@pat-x)) (let ((cy390b@ls/false (cy30c4@syntax-dispatch cy3909@t '(#(scheme-id quote) each-any)))) (if cy390b@ls/false (apply (lambda (cy390d@x*) (list (cy304c@scheme-stx 'quote) (list->vector cy390d@x*))) cy390b@ls/false) (let ((cy390f@t cy3909@t)) (let ((cy3911@ls/false (cy30c4@syntax-dispatch cy390f@t '_))) (if cy3911@ls/false (apply (lambda () (let cy3919@f ((cy3913@x cy3905@x) (cy3914@k (lambda (cy3917@ls) (cons* (cy304c@scheme-stx 'vector) cy3917@ls)))) (let ((cy391b@t cy3913@x)) (let ((cy391d@ls/false (cy30c4@syntax-dispatch cy391b@t '(#(scheme-id quote) each-any)))) (if cy391d@ls/false (apply (lambda (cy391f@x*) (cy3914@k (map (lambda (cy3921@x) (list (cy304c@scheme-stx 'quote) cy3921@x)) cy391f@x*))) cy391d@ls/false) (let ((cy3923@t cy391b@t)) (let ((cy3925@ls/false (cy30c4@syntax-dispatch cy3923@t '(#(scheme-id list) . each-any)))) (if cy3925@ls/false (apply (lambda (cy3927@x*) (cy3914@k cy3927@x*)) cy3925@ls/false) (let ((cy3929@t cy3923@t)) (let ((cy392b@ls/false (cy30c4@syntax-dispatch cy3929@t '(#(scheme-id cons) any any)))) (if cy392b@ls/false (apply (lambda (cy392d@x cy392e@y) (cy3919@f cy392e@y (lambda (cy3931@ls) (cy3914@k (cons cy392d@x cy3931@ls))))) cy392b@ls/false) (let ((cy3933@t cy3929@t)) (let ((cy3935@ls/false (cy30c4@syntax-dispatch cy3933@t '_))) (if cy3935@ls/false (apply (lambda () (list (cy304c@scheme-stx 'list->vector) cy3907@pat-x)) cy3935@ls/false) (cy31a4@syntax-violation '#f '"invalid syntax" cy3933@t))))))))))))))) cy3911@ls/false) (cy31a4@syntax-violation '#f '"invalid syntax" cy390f@t)))))))))) (set! cy38a2@vquasi (lambda (cy38e3@p cy38e4@lev) (let ((cy38e7@t cy38e3@p)) (let ((cy38e9@ls/false (cy30c4@syntax-dispatch cy38e7@t '(any . any)))) (if cy38e9@ls/false (apply (lambda (cy38eb@p cy38ec@q) (let ((cy38ef@t cy38eb@p)) (let ((cy38f1@ls/false (cy30c4@syntax-dispatch cy38ef@t '(#(scheme-id unquote) . each-any)))) (if cy38f1@ls/false (apply (lambda (cy38f3@p) (if (= cy38e4@lev '0) (cy389a@quasicons* cy38f3@p (cy38a2@vquasi cy38ec@q cy38e4@lev)) (cy389c@quasicons (cy389c@quasicons (cy387e@datum 'unquote) (cy38a4@quasi cy38f3@p (- cy38e4@lev '1))) (cy38a2@vquasi cy38ec@q cy38e4@lev)))) cy38f1@ls/false) (let ((cy38f5@t cy38ef@t)) (let ((cy38f7@ls/false (cy30c4@syntax-dispatch cy38f5@t '(#(scheme-id unquote-splicing) . each-any)))) (if cy38f7@ls/false (apply (lambda (cy38f9@p) (if (= cy38e4@lev '0) (cy389e@quasiappend cy38f9@p (cy38a2@vquasi cy38ec@q cy38e4@lev)) (cy389c@quasicons (cy389c@quasicons (cy387e@datum 'unquote-splicing) (cy38a4@quasi cy38f9@p (- cy38e4@lev '1))) (cy38a2@vquasi cy38ec@q cy38e4@lev)))) cy38f7@ls/false) (let ((cy38fb@t cy38f5@t)) (let ((cy38fd@ls/false (cy30c4@syntax-dispatch cy38fb@t 'any))) (if cy38fd@ls/false (apply (lambda (cy38ff@p) (cy389c@quasicons (cy38a4@quasi cy38ff@p cy38e4@lev) (cy38a2@vquasi cy38ec@q cy38e4@lev))) cy38fd@ls/false) (cy31a4@syntax-violation '#f '"invalid syntax" cy38fb@t))))))))))) cy38e9@ls/false) (let ((cy3901@t cy38e7@t)) (let ((cy3903@ls/false (cy30c4@syntax-dispatch cy3901@t '()))) (if cy3903@ls/false (apply (lambda () (list (cy304c@scheme-stx 'quote) '())) cy3903@ls/false) (cy31a4@syntax-violation '#f '"invalid syntax" cy3901@t))))))))) (set! cy38a4@quasi (lambda (cy38ad@p cy38ae@lev) (let ((cy38b1@t cy38ad@p)) (let ((cy38b3@ls/false (cy30c4@syntax-dispatch cy38b1@t '(#(scheme-id unquote) any)))) (if cy38b3@ls/false (apply (lambda (cy38b5@p) (if (= cy38ae@lev '0) cy38b5@p (cy389c@quasicons (cy387e@datum 'unquote) (cy38a4@quasi (list cy38b5@p) (- cy38ae@lev '1))))) cy38b3@ls/false) (let ((cy38b7@t cy38b1@t)) (let ((cy38b9@ls/false (cy30c4@syntax-dispatch cy38b7@t '((#(scheme-id unquote) . each-any) . any)))) (if cy38b9@ls/false (apply (lambda (cy38bb@p cy38bc@q) (if (= cy38ae@lev '0) (cy389a@quasicons* cy38bb@p (cy38a4@quasi cy38bc@q cy38ae@lev)) (cy389c@quasicons (cy389c@quasicons (cy387e@datum 'unquote) (cy38a4@quasi cy38bb@p (- cy38ae@lev '1))) (cy38a4@quasi cy38bc@q cy38ae@lev)))) cy38b9@ls/false) (let ((cy38bf@t cy38b7@t)) (let ((cy38c1@ls/false (cy30c4@syntax-dispatch cy38bf@t '((#(scheme-id unquote-splicing) . each-any) . any)))) (if cy38c1@ls/false (apply (lambda (cy38c3@p cy38c4@q) (if (= cy38ae@lev '0) (cy389e@quasiappend cy38c3@p (cy38a4@quasi cy38c4@q cy38ae@lev)) (cy389c@quasicons (cy389c@quasicons (cy387e@datum 'unquote-splicing) (cy38a4@quasi cy38c3@p (- cy38ae@lev '1))) (cy38a4@quasi cy38c4@q cy38ae@lev)))) cy38c1@ls/false) (let ((cy38c7@t cy38bf@t)) (let ((cy38c9@ls/false (cy30c4@syntax-dispatch cy38c7@t '(#(scheme-id quasiquote) any)))) (if cy38c9@ls/false (apply (lambda (cy38cb@p) (cy389c@quasicons (cy387e@datum 'quasiquote) (cy38a4@quasi (list cy38cb@p) (+ cy38ae@lev '1)))) cy38c9@ls/false) (let ((cy38cd@t cy38c7@t)) (let ((cy38cf@ls/false (cy30c4@syntax-dispatch cy38cd@t '(any . any)))) (if cy38cf@ls/false (apply (lambda (cy38d1@p cy38d2@q) (cy389c@quasicons (cy38a4@quasi cy38d1@p cy38ae@lev) (cy38a4@quasi cy38d2@q cy38ae@lev))) cy38cf@ls/false) (let ((cy38d5@t cy38cd@t)) (let ((cy38d7@ls/false (cy30c4@syntax-dispatch cy38d5@t '#(vector each-any)))) (if (and cy38d7@ls/false (apply (lambda (cy38d9@x) (not (cy2e89@stx? cy38d9@x))) cy38d7@ls/false)) (apply (lambda (cy38db@x) (cy38a0@quasivector (cy38a2@vquasi cy38db@x cy38ae@lev))) cy38d7@ls/false) (let ((cy38dd@t cy38d5@t)) (let ((cy38df@ls/false (cy30c4@syntax-dispatch cy38dd@t 'any))) (if cy38df@ls/false (apply (lambda (cy38e1@p) (list (cy304c@scheme-stx 'quote) cy38e1@p)) cy38df@ls/false) (cy31a4@syntax-violation '#f '"invalid syntax" cy38dd@t)))))))))))))))))))))))) (lambda (cy38a5@x) (let ((cy38a7@t cy38a5@x)) (let ((cy38a9@ls/false (cy30c4@syntax-dispatch cy38a7@t '(_ any)))) (if cy38a9@ls/false (apply (lambda (cy38ab@e) (cy38a4@quasi cy38ab@e '0)) cy38a9@ls/false) (cy31a4@syntax-violation '#f '"invalid syntax" cy38a7@t)))))))) (set! cy4b91@cy30b2@quasiquote-macro cy30b2@quasiquote-macro) (set! cy30b4@quasisyntax-macro (let ((cy3982@quasi '#f)) (begin (set! cy3982@quasi (lambda (cy399d@p cy399e@lev) (let ((cy39a1@t cy399d@p)) (let ((cy39a3@ls/false (cy30c4@syntax-dispatch cy39a1@t '(#(scheme-id unsyntax) any)))) (if cy39a3@ls/false (apply (lambda (cy39a5@p) (if (= cy399e@lev '0) (let ((cy39a7@g (gensym))) (values (list cy39a7@g) (list cy39a5@p) cy39a7@g)) (call-with-values (lambda () (cy3982@quasi cy39a5@p (- cy399e@lev '1))) (lambda (cy39af@cy39aa cy39b0@cy39ac cy39b1@cy39ae) (let ((cy39b5@p cy39b1@cy39ae) (cy39b6@rhs* cy39b0@cy39ac) (cy39b7@lhs* cy39af@cy39aa)) (values cy39b7@lhs* cy39b6@rhs* (list 'unsyntax cy39b5@p))))))) cy39a3@ls/false) (let ((cy39bb@t cy39a1@t)) (let ((cy39bd@ls/false (cy30c4@syntax-dispatch cy39bb@t '#(scheme-id unsyntax)))) (if (and cy39bd@ls/false (apply (lambda () (= cy399e@lev '0)) cy39bd@ls/false)) (apply (lambda () (cy31a4@syntax-violation '#f '"incorrect use of unsyntax" cy399d@p)) cy39bd@ls/false) (let ((cy39bf@t cy39bb@t)) (let ((cy39c1@ls/false (cy30c4@syntax-dispatch cy39bf@t '((#(scheme-id unsyntax) . each-any) . any)))) (if cy39c1@ls/false (apply (lambda (cy39c3@p* cy39c4@q) (call-with-values (lambda () (cy3982@quasi cy39c4@q cy399e@lev)) (lambda (cy39cd@cy39c8 cy39ce@cy39ca cy39cf@cy39cc) (let ((cy39d3@q cy39cf@cy39cc) (cy39d4@rhs* cy39ce@cy39ca) (cy39d5@lhs* cy39cd@cy39c8)) (if (= cy399e@lev '0) (let ((cy39d9@g* (map (lambda (cy39db@x) (gensym)) cy39c3@p*))) (values (append cy39d9@g* cy39d5@lhs*) (append cy39c3@p* cy39d4@rhs*) (append cy39d9@g* cy39d3@q))) (call-with-values (lambda () (cy3982@quasi cy39c3@p* (- cy399e@lev '1))) (lambda (cy39e3@cy39de cy39e4@cy39e0 cy39e5@cy39e2) (let ((cy39e9@p* cy39e5@cy39e2) (cy39ea@rhs2* cy39e4@cy39e0) (cy39eb@lhs2* cy39e3@cy39de)) (values (append cy39eb@lhs2* cy39d5@lhs*) (append cy39ea@rhs2* cy39d4@rhs*) (cons (cons 'unsyntax cy39e9@p*) cy39d3@q)))))))))) cy39c1@ls/false) (let ((cy39ef@t cy39bf@t)) (let ((cy39f1@ls/false (cy30c4@syntax-dispatch cy39ef@t '((#(scheme-id unsyntax-splicing) . each-any) . any)))) (if cy39f1@ls/false (apply (lambda (cy39f3@p* cy39f4@q) (call-with-values (lambda () (cy3982@quasi cy39f4@q cy399e@lev)) (lambda (cy39fd@cy39f8 cy39fe@cy39fa cy39ff@cy39fc) (let ((cy3a03@q cy39ff@cy39fc) (cy3a04@rhs* cy39fe@cy39fa) (cy3a05@lhs* cy39fd@cy39f8)) (if (= cy399e@lev '0) (let ((cy3a09@g* (map (lambda (cy3a0b@x) (gensym)) cy39f3@p*))) (values (append (map (lambda (cy3a0d@g) (cons cy3a0d@g '(...))) cy3a09@g*) cy3a05@lhs*) (append cy39f3@p* cy3a04@rhs*) (append (apply append (map (lambda (cy3a0f@g) (cons cy3a0f@g '(...))) cy3a09@g*)) cy3a03@q))) (call-with-values (lambda () (cy3982@quasi cy39f3@p* (- cy399e@lev '1))) (lambda (cy3a17@cy3a12 cy3a18@cy3a14 cy3a19@cy3a16) (let ((cy3a1d@p* cy3a19@cy3a16) (cy3a1e@rhs2* cy3a18@cy3a14) (cy3a1f@lhs2* cy3a17@cy3a12)) (values (append cy3a1f@lhs2* cy3a05@lhs*) (append cy3a1e@rhs2* cy3a04@rhs*) (cons (cons 'unsyntax-splicing cy3a1d@p*) cy3a03@q)))))))))) cy39f1@ls/false) (let ((cy3a23@t cy39ef@t)) (let ((cy3a25@ls/false (cy30c4@syntax-dispatch cy3a23@t '#(scheme-id unsyntax-splicing)))) (if (and cy3a25@ls/false (apply (lambda () (= cy399e@lev '0)) cy3a25@ls/false)) (apply (lambda () (cy31a4@syntax-violation '#f '"incorrect use of unsyntax-splicing" cy399d@p)) cy3a25@ls/false) (let ((cy3a27@t cy3a23@t)) (let ((cy3a29@ls/false (cy30c4@syntax-dispatch cy3a27@t '(#(scheme-id quasisyntax) any)))) (if cy3a29@ls/false (apply (lambda (cy3a2b@p) (call-with-values (lambda () (cy3982@quasi cy3a2b@p (+ cy399e@lev '1))) (lambda (cy3a33@cy3a2e cy3a34@cy3a30 cy3a35@cy3a32) (let ((cy3a39@p cy3a35@cy3a32) (cy3a3a@rhs* cy3a34@cy3a30) (cy3a3b@lhs* cy3a33@cy3a2e)) (values cy3a3b@lhs* cy3a3a@rhs* (list 'quasisyntax cy3a39@p)))))) cy3a29@ls/false) (let ((cy3a3f@t cy3a27@t)) (let ((cy3a41@ls/false (cy30c4@syntax-dispatch cy3a3f@t '(any . any)))) (if cy3a41@ls/false (apply (lambda (cy3a43@p cy3a44@q) (call-with-values (lambda () (cy3982@quasi cy3a43@p cy399e@lev)) (lambda (cy3a53@cy3a48 cy3a54@cy3a4a cy3a55@cy3a4c) (call-with-values (lambda () (cy3982@quasi cy3a44@q cy399e@lev)) (lambda (cy3a59@cy3a4e cy3a5a@cy3a50 cy3a5b@cy3a52) (let ((cy3a5f@q cy3a5b@cy3a52) (cy3a60@rhs2* cy3a5a@cy3a50) (cy3a61@lhs2* cy3a59@cy3a4e) (cy3a62@p cy3a55@cy3a4c) (cy3a63@rhs* cy3a54@cy3a4a) (cy3a64@lhs* cy3a53@cy3a48)) (values (append cy3a61@lhs2* cy3a64@lhs*) (append cy3a60@rhs2* cy3a63@rhs*) (cons cy3a62@p cy3a5f@q)))))))) cy3a41@ls/false) (let ((cy3a6b@t cy3a3f@t)) (let ((cy3a6d@ls/false (cy30c4@syntax-dispatch cy3a6b@t '#(vector each-any)))) (if cy3a6d@ls/false (apply (lambda (cy3a6f@x*) (call-with-values (lambda () (cy3982@quasi cy3a6f@x* cy399e@lev)) (lambda (cy3a77@cy3a72 cy3a78@cy3a74 cy3a79@cy3a76) (let ((cy3a7d@x* cy3a79@cy3a76) (cy3a7e@rhs* cy3a78@cy3a74) (cy3a7f@lhs* cy3a77@cy3a72)) (values cy3a7f@lhs* cy3a7e@rhs* (list->vector cy3a7d@x*)))))) cy3a6d@ls/false) (let ((cy3a83@t cy3a6b@t)) (let ((cy3a85@ls/false (cy30c4@syntax-dispatch cy3a83@t '_))) (if cy3a85@ls/false (apply (lambda () (values '() '() cy399d@p)) cy3a85@ls/false) (cy31a4@syntax-violation '#f '"invalid syntax" cy3a83@t)))))))))))))))))))))))))))))) (lambda (cy3983@x) (let ((cy3985@t cy3983@x)) (let ((cy3987@ls/false (cy30c4@syntax-dispatch cy3985@t '(_ any)))) (if cy3987@ls/false (apply (lambda (cy3989@e) (call-with-values (lambda () (cy3982@quasi cy3989@e '0)) (lambda (cy3991@cy398c cy3992@cy398e cy3993@cy3990) (let ((cy3997@v cy3993@cy3990) (cy3998@rhs* cy3992@cy398e) (cy3999@lhs* cy3991@cy398c)) (cy307a@bless (list 'syntax-case (cons 'list cy3998@rhs*) '() (list cy3999@lhs* (list 'syntax cy3997@v)))))))) cy3987@ls/false) (cy31a4@syntax-violation '#f '"invalid syntax" cy3985@t)))))))) (set! cy4b92@cy30b4@quasisyntax-macro cy30b4@quasisyntax-macro) (set! cy30b6@define-struct-macro (lambda (cy3a87@stx) (cy31a4@syntax-violation '#f '"define-struct not supported" cy3a87@stx))) (set! cy4b93@cy30b6@define-struct-macro cy30b6@define-struct-macro) (set! cy30b8@define-record-type-macro (lambda (cy3a89@x) (let ((cy3a8c@id '#f) (cy3a8e@get-record-name '#f) (cy3a90@get-record-constructor-name '#f) (cy3a92@get-record-predicate-name '#f) (cy3a94@get-clause '#f) (cy3a96@foo-rtd-code '#f) (cy3a98@parent-rtd-code '#f) (cy3a9a@parent-rcd-code '#f) (cy3a9c@foo-rcd-code '#f) (cy3a9e@get-protocol-code '#f) (cy3aa0@get-fields '#f) (cy3aa2@get-mutator-indices '#f) (cy3aa4@get-mutators '#f) (cy3aa6@get-accessors '#f) (cy3aa8@enumerate '#f) (cy3aaa@do-define-record '#f) (cy3aac@verify-clauses '#f)) (begin (set! cy3a8c@id (lambda (cy3c7f@ctxt . cy3c81@str*) (cy31a8@datum->syntax cy3c7f@ctxt (string->symbol (apply string-append (map (lambda (cy3c83@x) (if (symbol? cy3c83@x) (symbol->string cy3c83@x) (if (string? cy3c83@x) cy3c83@x (assertion-violation 'define-record-type '"BUG")))) cy3c81@str*)))))) (set! cy3a8e@get-record-name (lambda (cy3c6d@spec) (let ((cy3c6f@t cy3c6d@spec)) (let ((cy3c71@ls/false (cy30c4@syntax-dispatch cy3c6f@t '(any any any)))) (if cy3c71@ls/false (apply (lambda (cy3c73@foo cy3c74@make-foo cy3c75@foo?) cy3c73@foo) cy3c71@ls/false) (let ((cy3c79@t cy3c6f@t)) (let ((cy3c7b@ls/false (cy30c4@syntax-dispatch cy3c79@t 'any))) (if cy3c7b@ls/false (apply (lambda (cy3c7d@foo) cy3c7d@foo) cy3c7b@ls/false) (cy31a4@syntax-violation '#f '"invalid syntax" cy3c79@t))))))))) (set! cy3a90@get-record-constructor-name (lambda (cy3c59@spec) (let ((cy3c5b@t cy3c59@spec)) (let ((cy3c5d@ls/false (cy30c4@syntax-dispatch cy3c5b@t '(any any any)))) (if cy3c5d@ls/false (apply (lambda (cy3c5f@foo cy3c60@make-foo cy3c61@foo?) cy3c60@make-foo) cy3c5d@ls/false) (let ((cy3c65@t cy3c5b@t)) (let ((cy3c67@ls/false (cy30c4@syntax-dispatch cy3c65@t 'any))) (if (and cy3c67@ls/false (apply (lambda (cy3c69@foo) (cy2ebd@id? cy3c69@foo)) cy3c67@ls/false)) (apply (lambda (cy3c6b@foo) (cy3a8c@id cy3c6b@foo '"make-" (cy2ed1@stx->datum cy3c6b@foo))) cy3c67@ls/false) (cy31a4@syntax-violation '#f '"invalid syntax" cy3c65@t))))))))) (set! cy3a92@get-record-predicate-name (lambda (cy3c45@spec) (let ((cy3c47@t cy3c45@spec)) (let ((cy3c49@ls/false (cy30c4@syntax-dispatch cy3c47@t '(any any any)))) (if cy3c49@ls/false (apply (lambda (cy3c4b@foo cy3c4c@make-foo cy3c4d@foo?) cy3c4d@foo?) cy3c49@ls/false) (let ((cy3c51@t cy3c47@t)) (let ((cy3c53@ls/false (cy30c4@syntax-dispatch cy3c51@t 'any))) (if (and cy3c53@ls/false (apply (lambda (cy3c55@foo) (cy2ebd@id? cy3c55@foo)) cy3c53@ls/false)) (apply (lambda (cy3c57@foo) (cy3a8c@id cy3c57@foo (cy2ed1@stx->datum cy3c57@foo) '"?")) cy3c53@ls/false) (cy31a4@syntax-violation '#f '"invalid syntax" cy3c51@t))))))))) (set! cy3a94@get-clause (lambda (cy3c33@id cy3c34@ls) (let ((cy3c37@t cy3c34@ls)) (let ((cy3c39@ls/false (cy30c4@syntax-dispatch cy3c37@t '()))) (if cy3c39@ls/false (apply (lambda () '#f) cy3c39@ls/false) (let ((cy3c3b@t cy3c37@t)) (let ((cy3c3d@ls/false (cy30c4@syntax-dispatch cy3c3b@t '((any . any) . any)))) (if cy3c3d@ls/false (apply (lambda (cy3c3f@x cy3c40@rest cy3c41@ls) (if (cy2ec3@free-id=? (cy307a@bless cy3c33@id) cy3c3f@x) (cons cy3c3f@x cy3c40@rest) (cy3a94@get-clause cy3c33@id cy3c41@ls))) cy3c3d@ls/false) (cy31a4@syntax-violation '#f '"invalid syntax" cy3c3b@t))))))))) (set! cy3a96@foo-rtd-code (lambda (cy3be1@name cy3be2@clause* cy3be3@parent-rtd-code) (let ((cy3be8@convert-field-spec* '#f)) (begin (set! cy3be8@convert-field-spec* (lambda (cy3c19@ls) (list->vector (map (lambda (cy3c1b@x) (let ((cy3c1d@t cy3c1b@x)) (let ((cy3c1f@ls/false (cy30c4@syntax-dispatch cy3c1d@t '(#(scheme-id mutable) any . any)))) (if cy3c1f@ls/false (apply (lambda (cy3c21@name cy3c22@rest) (list 'mutable cy3c21@name)) cy3c1f@ls/false) (let ((cy3c25@t cy3c1d@t)) (let ((cy3c27@ls/false (cy30c4@syntax-dispatch cy3c25@t '(#(scheme-id immutable) any . any)))) (if cy3c27@ls/false (apply (lambda (cy3c29@name cy3c2a@rest) (list 'immutable cy3c29@name)) cy3c27@ls/false) (let ((cy3c2d@t cy3c25@t)) (let ((cy3c2f@ls/false (cy30c4@syntax-dispatch cy3c2d@t 'any))) (if cy3c2f@ls/false (apply (lambda (cy3c31@name) (list 'immutable cy3c31@name)) cy3c2f@ls/false) (cy31a4@syntax-violation '#f '"invalid syntax" cy3c2d@t))))))))))) cy3c19@ls)))) (let ((cy3be9@uid-code (let ((cy3bf1@t (cy3a94@get-clause 'nongenerative cy3be2@clause*))) (let ((cy3bf3@ls/false (cy30c4@syntax-dispatch cy3bf1@t '(_)))) (if cy3bf3@ls/false (apply (lambda () (list 'quote (gensym))) cy3bf3@ls/false) (let ((cy3bf5@t cy3bf1@t)) (let ((cy3bf7@ls/false (cy30c4@syntax-dispatch cy3bf5@t '(_ any)))) (if cy3bf7@ls/false (apply (lambda (cy3bf9@uid) (list 'quote cy3bf9@uid)) cy3bf7@ls/false) (let ((cy3bfb@t cy3bf5@t)) (let ((cy3bfd@ls/false (cy30c4@syntax-dispatch cy3bfb@t '_))) (if cy3bfd@ls/false (apply (lambda () '#f) cy3bfd@ls/false) (cy31a4@syntax-violation '#f '"invalid syntax" cy3bfb@t))))))))))) (cy3bea@sealed? (let ((cy3bff@t (cy3a94@get-clause 'sealed cy3be2@clause*))) (let ((cy3c01@ls/false (cy30c4@syntax-dispatch cy3bff@t '(_ #(atom #t))))) (if cy3c01@ls/false (apply (lambda () '#t) cy3c01@ls/false) (let ((cy3c03@t cy3bff@t)) (let ((cy3c05@ls/false (cy30c4@syntax-dispatch cy3c03@t '_))) (if cy3c05@ls/false (apply (lambda () '#f) cy3c05@ls/false) (cy31a4@syntax-violation '#f '"invalid syntax" cy3c03@t)))))))) (cy3beb@opaque? (let ((cy3c07@t (cy3a94@get-clause 'opaque cy3be2@clause*))) (let ((cy3c09@ls/false (cy30c4@syntax-dispatch cy3c07@t '(_ #(atom #t))))) (if cy3c09@ls/false (apply (lambda () '#t) cy3c09@ls/false) (let ((cy3c0b@t cy3c07@t)) (let ((cy3c0d@ls/false (cy30c4@syntax-dispatch cy3c0b@t '_))) (if cy3c0d@ls/false (apply (lambda () '#f) cy3c0d@ls/false) (cy31a4@syntax-violation '#f '"invalid syntax" cy3c0b@t)))))))) (cy3bec@fields (let ((cy3c0f@t (cy3a94@get-clause 'fields cy3be2@clause*))) (let ((cy3c11@ls/false (cy30c4@syntax-dispatch cy3c0f@t '(_ . each-any)))) (if cy3c11@ls/false (apply (lambda (cy3c13@field-spec*) (list 'quote (cy3be8@convert-field-spec* cy3c13@field-spec*))) cy3c11@ls/false) (let ((cy3c15@t cy3c0f@t)) (let ((cy3c17@ls/false (cy30c4@syntax-dispatch cy3c15@t '_))) (if cy3c17@ls/false (apply (lambda () ''#()) cy3c17@ls/false) (cy31a4@syntax-violation '#f '"invalid syntax" cy3c15@t))))))))) (cy307a@bless (list 'make-record-type-descriptor (list 'quote cy3be1@name) cy3be3@parent-rtd-code cy3be9@uid-code cy3bea@sealed? cy3beb@opaque? cy3bec@fields))))))) (set! cy3a98@parent-rtd-code (lambda (cy3bc9@clause*) (let ((cy3bcb@t (cy3a94@get-clause 'parent cy3bc9@clause*))) (let ((cy3bcd@ls/false (cy30c4@syntax-dispatch cy3bcb@t '(_ any)))) (if cy3bcd@ls/false (apply (lambda (cy3bcf@name) (list 'record-type-descriptor cy3bcf@name)) cy3bcd@ls/false) (let ((cy3bd1@t cy3bcb@t)) (let ((cy3bd3@ls/false (cy30c4@syntax-dispatch cy3bd1@t '#(atom #f)))) (if cy3bd3@ls/false (apply (lambda () (let ((cy3bd5@t (cy3a94@get-clause 'parent-rtd cy3bc9@clause*))) (let ((cy3bd7@ls/false (cy30c4@syntax-dispatch cy3bd5@t '(_ any any)))) (if cy3bd7@ls/false (apply (lambda (cy3bd9@rtd cy3bda@rcd) cy3bd9@rtd) cy3bd7@ls/false) (let ((cy3bdd@t cy3bd5@t)) (let ((cy3bdf@ls/false (cy30c4@syntax-dispatch cy3bdd@t '#(atom #f)))) (if cy3bdf@ls/false (apply (lambda () '#f) cy3bdf@ls/false) (cy31a4@syntax-violation '#f '"invalid syntax" cy3bdd@t)))))))) cy3bd3@ls/false) (cy31a4@syntax-violation '#f '"invalid syntax" cy3bd1@t))))))))) (set! cy3a9a@parent-rcd-code (lambda (cy3bb1@clause*) (let ((cy3bb3@t (cy3a94@get-clause 'parent cy3bb1@clause*))) (let ((cy3bb5@ls/false (cy30c4@syntax-dispatch cy3bb3@t '(_ any)))) (if cy3bb5@ls/false (apply (lambda (cy3bb7@name) (list 'record-constructor-descriptor cy3bb7@name)) cy3bb5@ls/false) (let ((cy3bb9@t cy3bb3@t)) (let ((cy3bbb@ls/false (cy30c4@syntax-dispatch cy3bb9@t '#(atom #f)))) (if cy3bbb@ls/false (apply (lambda () (let ((cy3bbd@t (cy3a94@get-clause 'parent-rtd cy3bb1@clause*))) (let ((cy3bbf@ls/false (cy30c4@syntax-dispatch cy3bbd@t '(_ any any)))) (if cy3bbf@ls/false (apply (lambda (cy3bc1@rtd cy3bc2@rcd) cy3bc2@rcd) cy3bbf@ls/false) (let ((cy3bc5@t cy3bbd@t)) (let ((cy3bc7@ls/false (cy30c4@syntax-dispatch cy3bc5@t '#(atom #f)))) (if cy3bc7@ls/false (apply (lambda () '#f) cy3bc7@ls/false) (cy31a4@syntax-violation '#f '"invalid syntax" cy3bc5@t)))))))) cy3bbb@ls/false) (cy31a4@syntax-violation '#f '"invalid syntax" cy3bb9@t))))))))) (set! cy3a9c@foo-rcd-code (lambda (cy3ba9@clause* cy3baa@foo-rtd cy3bab@protocol cy3bac@parent-rcd-code) (list 'make-record-constructor-descriptor cy3baa@foo-rtd cy3bac@parent-rcd-code cy3bab@protocol))) (set! cy3a9e@get-protocol-code (lambda (cy3b9d@clause*) (let ((cy3b9f@t (cy3a94@get-clause 'protocol cy3b9d@clause*))) (let ((cy3ba1@ls/false (cy30c4@syntax-dispatch cy3b9f@t '(_ any)))) (if cy3ba1@ls/false (apply (lambda (cy3ba3@expr) cy3ba3@expr) cy3ba1@ls/false) (let ((cy3ba5@t cy3b9f@t)) (let ((cy3ba7@ls/false (cy30c4@syntax-dispatch cy3ba5@t '_))) (if cy3ba7@ls/false (apply (lambda () '#f) cy3ba7@ls/false) (cy31a4@syntax-violation '#f '"invalid syntax" cy3ba5@t))))))))) (set! cy3aa0@get-fields (lambda (cy3b8b@clause*) (let ((cy3b8d@t cy3b8b@clause*)) (let ((cy3b8f@ls/false (cy30c4@syntax-dispatch cy3b8d@t '()))) (if cy3b8f@ls/false (apply (lambda () '()) cy3b8f@ls/false) (let ((cy3b91@t cy3b8d@t)) (let ((cy3b93@ls/false (cy30c4@syntax-dispatch cy3b91@t '((#(scheme-id fields) . each-any) . _)))) (if cy3b93@ls/false (apply (lambda (cy3b95@f*) cy3b95@f*) cy3b93@ls/false) (let ((cy3b97@t cy3b91@t)) (let ((cy3b99@ls/false (cy30c4@syntax-dispatch cy3b97@t '(_ . any)))) (if cy3b99@ls/false (apply (lambda (cy3b9b@rest) (cy3aa0@get-fields cy3b9b@rest)) cy3b99@ls/false) (cy31a4@syntax-violation '#f '"invalid syntax" cy3b97@t)))))))))))) (set! cy3aa2@get-mutator-indices (lambda (cy3b73@fields) (let cy3b79@f ((cy3b75@fields cy3b73@fields) (cy3b76@i '0)) (let ((cy3b7b@t cy3b75@fields)) (let ((cy3b7d@ls/false (cy30c4@syntax-dispatch cy3b7b@t '()))) (if cy3b7d@ls/false (apply (lambda () '()) cy3b7d@ls/false) (let ((cy3b7f@t cy3b7b@t)) (let ((cy3b81@ls/false (cy30c4@syntax-dispatch cy3b7f@t '((#(scheme-id mutable) . _) . any)))) (if cy3b81@ls/false (apply (lambda (cy3b83@rest) (cons cy3b76@i (cy3b79@f cy3b83@rest (+ cy3b76@i '1)))) cy3b81@ls/false) (let ((cy3b85@t cy3b7f@t)) (let ((cy3b87@ls/false (cy30c4@syntax-dispatch cy3b85@t '(_ . any)))) (if cy3b87@ls/false (apply (lambda (cy3b89@rest) (cy3b79@f cy3b89@rest (+ cy3b76@i '1))) cy3b87@ls/false) (cy31a4@syntax-violation '#f '"invalid syntax" cy3b85@t))))))))))))) (set! cy3aa4@get-mutators (lambda (cy3b49@foo cy3b4a@fields) (let ((cy3b4e@gen-name '#f)) (begin (set! cy3b4e@gen-name (lambda (cy3b71@x) (cy31a8@datum->syntax cy3b49@foo (string->symbol (string-append (symbol->string (cy31aa@syntax->datum cy3b49@foo)) '"-" (symbol->string (cy31aa@syntax->datum cy3b71@x)) '"-set!"))))) (let cy3b51@f ((cy3b4f@fields cy3b4a@fields)) (let ((cy3b53@t cy3b4f@fields)) (let ((cy3b55@ls/false (cy30c4@syntax-dispatch cy3b53@t '()))) (if cy3b55@ls/false (apply (lambda () '()) cy3b55@ls/false) (let ((cy3b57@t cy3b53@t)) (let ((cy3b59@ls/false (cy30c4@syntax-dispatch cy3b57@t '((#(scheme-id mutable) any any any) . any)))) (if cy3b59@ls/false (apply (lambda (cy3b5b@name cy3b5c@accessor cy3b5d@mutator cy3b5e@rest) (cons cy3b5d@mutator (cy3b51@f cy3b5e@rest))) cy3b59@ls/false) (let ((cy3b63@t cy3b57@t)) (let ((cy3b65@ls/false (cy30c4@syntax-dispatch cy3b63@t '((#(scheme-id mutable) any) . any)))) (if cy3b65@ls/false (apply (lambda (cy3b67@name cy3b68@rest) (cons (cy3b4e@gen-name cy3b67@name) (cy3b51@f cy3b68@rest))) cy3b65@ls/false) (let ((cy3b6b@t cy3b63@t)) (let ((cy3b6d@ls/false (cy30c4@syntax-dispatch cy3b6b@t '(_ . any)))) (if cy3b6d@ls/false (apply (lambda (cy3b6f@rest) (cy3b51@f cy3b6f@rest)) cy3b6d@ls/false) (cy31a4@syntax-violation '#f '"invalid syntax" cy3b6b@t)))))))))))))))))) (set! cy3aa6@get-accessors (lambda (cy3b05@foo cy3b06@fields) (let ((cy3b0a@gen-name '#f)) (begin (set! cy3b0a@gen-name (lambda (cy3b47@x) (cy31a8@datum->syntax cy3b05@foo (string->symbol (string-append (symbol->string (cy31aa@syntax->datum cy3b05@foo)) '"-" (symbol->string (cy31aa@syntax->datum cy3b47@x))))))) (map (lambda (cy3b0b@field) (let ((cy3b0d@t cy3b0b@field)) (let ((cy3b0f@ls/false (cy30c4@syntax-dispatch cy3b0d@t '(#(scheme-id mutable) any any any)))) (if (and cy3b0f@ls/false (apply (lambda (cy3b11@name cy3b12@accessor cy3b13@mutator) (cy2ebd@id? cy3b12@accessor)) cy3b0f@ls/false)) (apply (lambda (cy3b17@name cy3b18@accessor cy3b19@mutator) cy3b18@accessor) cy3b0f@ls/false) (let ((cy3b1d@t cy3b0d@t)) (let ((cy3b1f@ls/false (cy30c4@syntax-dispatch cy3b1d@t '(#(scheme-id immutable) any any)))) (if (and cy3b1f@ls/false (apply (lambda (cy3b21@name cy3b22@accessor) (cy2ebd@id? cy3b22@accessor)) cy3b1f@ls/false)) (apply (lambda (cy3b25@name cy3b26@accessor) cy3b26@accessor) cy3b1f@ls/false) (let ((cy3b29@t cy3b1d@t)) (let ((cy3b2b@ls/false (cy30c4@syntax-dispatch cy3b29@t '(#(scheme-id mutable) any)))) (if (and cy3b2b@ls/false (apply (lambda (cy3b2d@name) (cy2ebd@id? cy3b2d@name)) cy3b2b@ls/false)) (apply (lambda (cy3b2f@name) (cy3b0a@gen-name cy3b2f@name)) cy3b2b@ls/false) (let ((cy3b31@t cy3b29@t)) (let ((cy3b33@ls/false (cy30c4@syntax-dispatch cy3b31@t '(#(scheme-id immutable) any)))) (if (and cy3b33@ls/false (apply (lambda (cy3b35@name) (cy2ebd@id? cy3b35@name)) cy3b33@ls/false)) (apply (lambda (cy3b37@name) (cy3b0a@gen-name cy3b37@name)) cy3b33@ls/false) (let ((cy3b39@t cy3b31@t)) (let ((cy3b3b@ls/false (cy30c4@syntax-dispatch cy3b39@t 'any))) (if (and cy3b3b@ls/false (apply (lambda (cy3b3d@name) (cy2ebd@id? cy3b3d@name)) cy3b3b@ls/false)) (apply (lambda (cy3b3f@name) (cy3b0a@gen-name cy3b3f@name)) cy3b3b@ls/false) (let ((cy3b41@t cy3b39@t)) (let ((cy3b43@ls/false (cy30c4@syntax-dispatch cy3b41@t 'any))) (if cy3b43@ls/false (apply (lambda (cy3b45@others) (cy31a4@syntax-violation '#f '"invalid field spec" cy3b0b@field)) cy3b43@ls/false) (cy31a4@syntax-violation '#f '"invalid syntax" cy3b41@t)))))))))))))))))))) cy3b06@fields))))) (set! cy3aa8@enumerate (lambda (cy3afd@ls) (let cy3b03@f ((cy3aff@ls cy3afd@ls) (cy3b00@i '0)) (if (null? cy3aff@ls) '() (cons cy3b00@i (cy3b03@f (cdr cy3aff@ls) (+ cy3b00@i '1))))))) (set! cy3aaa@do-define-record (lambda (cy3ad5@namespec cy3ad6@clause*) (let ((cy3ad9@foo (cy3a8e@get-record-name cy3ad5@namespec))) (let ((cy3adb@foo-rtd (gensym))) (let ((cy3add@foo-rcd (gensym))) (let ((cy3adf@protocol (gensym))) (let ((cy3ae1@make-foo (cy3a90@get-record-constructor-name cy3ad5@namespec))) (let ((cy3ae3@fields (cy3aa0@get-fields cy3ad6@clause*))) (let ((cy3ae5@idx* (cy3aa8@enumerate cy3ae3@fields))) (let ((cy3ae7@foo-x* (cy3aa6@get-accessors cy3ad9@foo cy3ae3@fields))) (let ((cy3ae9@set-foo-x!* (cy3aa4@get-mutators cy3ad9@foo cy3ae3@fields))) (let ((cy3aeb@set-foo-idx* (cy3aa2@get-mutator-indices cy3ae3@fields))) (let ((cy3aed@foo? (cy3a92@get-record-predicate-name cy3ad5@namespec))) (let ((cy3aef@foo-rtd-code (cy3a96@foo-rtd-code cy3ad9@foo cy3ad6@clause* (cy3a98@parent-rtd-code cy3ad6@clause*)))) (let ((cy3af1@foo-rcd-code (cy3a9c@foo-rcd-code cy3ad6@clause* cy3adb@foo-rtd cy3adf@protocol (cy3a9a@parent-rcd-code cy3ad6@clause*)))) (let ((cy3af3@protocol-code (cy3a9e@get-protocol-code cy3ad6@clause*))) (cy307a@bless (cons 'begin (cons (list 'define cy3adb@foo-rtd cy3aef@foo-rtd-code) (cons (list 'define cy3adf@protocol cy3af3@protocol-code) (cons (list 'define cy3add@foo-rcd cy3af1@foo-rcd-code) (cons (list 'define-syntax cy3ad9@foo (list 'list ''$rtd (list 'syntax cy3adb@foo-rtd) (list 'syntax cy3add@foo-rcd))) (cons (list 'define cy3aed@foo? (list 'record-predicate cy3adb@foo-rtd)) (cons (list 'define cy3ae1@make-foo (list 'record-constructor cy3add@foo-rcd)) (append (map (lambda (cy3af5@foo-x cy3af6@idx) (list 'define cy3af5@foo-x (list 'record-accessor cy3adb@foo-rtd cy3af6@idx))) cy3ae7@foo-x* cy3ae5@idx*) (map (lambda (cy3af9@set-foo-x! cy3afa@idx) (list 'define cy3af9@set-foo-x! (list 'record-mutator cy3adb@foo-rtd cy3afa@idx))) cy3ae9@set-foo-x!* cy3aeb@set-foo-idx*)))))))))))))))))))))))))) (set! cy3aac@verify-clauses (lambda (cy3ab5@x cy3ab6@cls*) (let ((cy3aba@valid-kwds '#f) (cy3abc@free-id-member? '#f)) (begin (set! cy3aba@valid-kwds (map cy307a@bless '(fields parent parent-rtd protocol sealed opaque nongenerative))) (set! cy3abc@free-id-member? (lambda (cy3ad1@x cy3ad2@ls) (and (pair? cy3ad2@ls) (or (cy2ec3@free-id=? cy3ad1@x (car cy3ad2@ls)) (cy3abc@free-id-member? cy3ad1@x (cdr cy3ad2@ls)))))) (let cy3ac1@f ((cy3abd@cls* cy3ab6@cls*) (cy3abe@seen* '())) (if (not (null? cy3abd@cls*)) (let ((cy3ac3@t (car cy3abd@cls*))) (let ((cy3ac5@ls/false (cy30c4@syntax-dispatch cy3ac3@t '(any . any)))) (if cy3ac5@ls/false (apply (lambda (cy3ac7@kwd cy3ac8@rest) (if (or (not (cy2ebd@id? cy3ac7@kwd)) (not (cy3abc@free-id-member? cy3ac7@kwd cy3aba@valid-kwds))) (cy31a4@syntax-violation '#f '"not a valid define-record-type keyword" cy3ac7@kwd) (if (cy2ec9@bound-id-member? cy3ac7@kwd cy3abe@seen*) (cy31a4@syntax-violation '#f '"duplicate use of keyword " cy3ab5@x cy3ac7@kwd) (cy3ac1@f (cdr cy3abd@cls*) (cons cy3ac7@kwd cy3abe@seen*))))) cy3ac5@ls/false) (let ((cy3acb@t cy3ac3@t)) (let ((cy3acd@ls/false (cy30c4@syntax-dispatch cy3acb@t 'any))) (if cy3acd@ls/false (apply (lambda (cy3acf@cls) (cy31a4@syntax-violation '#f '"malformed define-record-type clause" cy3acf@cls)) cy3acd@ls/false) (cy31a4@syntax-violation '#f '"invalid syntax" cy3acb@t))))))) (void))))))) (let ((cy3aad@t cy3a89@x)) (let ((cy3aaf@ls/false (cy30c4@syntax-dispatch cy3aad@t '(_ any . each-any)))) (if cy3aaf@ls/false (apply (lambda (cy3ab1@namespec cy3ab2@clause*) (begin (cy3aac@verify-clauses cy3a89@x cy3ab2@clause*) (cy3aaa@do-define-record cy3ab1@namespec cy3ab2@clause*))) cy3aaf@ls/false) (cy31a4@syntax-violation '#f '"invalid syntax" cy3aad@t)))))))) (set! cy4b94@cy30b8@define-record-type-macro cy30b8@define-record-type-macro) (set! cy30ba@define-condition-type-macro (lambda (cy3c85@x) (let ((cy3c88@mkname '#f)) (begin (set! cy3c88@mkname (lambda (cy3cb5@name cy3cb6@suffix) (cy31a8@datum->syntax cy3cb5@name (string->symbol (string-append (symbol->string (cy31aa@syntax->datum cy3cb5@name)) cy3cb6@suffix))))) (let ((cy3c89@t cy3c85@x)) (let ((cy3c8b@ls/false (cy30c4@syntax-dispatch cy3c89@t '(any any any any any . #(each (any any)))))) (if (and cy3c8b@ls/false (apply (lambda (cy3c8d@ctxt cy3c8e@name cy3c8f@super cy3c90@constructor cy3c91@predicate cy3c92@field* cy3c93@accessor*) (and (cy2ebd@id? cy3c8e@name) (cy2ebd@id? cy3c8f@super) (cy2ebd@id? cy3c90@constructor) (cy2ebd@id? cy3c91@predicate) (for-all cy2ebd@id? cy3c92@field*) (for-all cy2ebd@id? cy3c93@accessor*))) cy3c8b@ls/false)) (apply (lambda (cy3c9b@ctxt cy3c9c@name cy3c9d@super cy3c9e@constructor cy3c9f@predicate cy3ca0@field* cy3ca1@accessor*) (let ((cy3ca9@aux-accessor* (map (lambda (cy3cab@x) (gensym)) cy3ca1@accessor*))) (cy307a@bless (cons 'begin (cons (cons 'define-record-type (cons (list cy3c9c@name cy3c9e@constructor (gensym)) (cons (list 'parent cy3c9d@super) (cons (cons 'fields (map (lambda (cy3cad@field cy3cae@aux) (list 'immutable cy3cad@field cy3cae@aux)) cy3ca0@field* cy3ca9@aux-accessor*)) '((nongenerative) (sealed #f) (opaque #f)))))) (cons (list 'define cy3c9f@predicate (list 'condition-predicate (list 'record-type-descriptor cy3c9c@name))) (map (lambda (cy3cb1@accessor cy3cb2@aux) (list 'define cy3cb1@accessor (list 'condition-accessor (list 'record-type-descriptor cy3c9c@name) cy3cb2@aux))) cy3ca1@accessor* cy3ca9@aux-accessor*))))))) cy3c8b@ls/false) (cy31a4@syntax-violation '#f '"invalid syntax" cy3c89@t)))))))) (set! cy4b95@cy30ba@define-condition-type-macro cy30ba@define-condition-type-macro) (set! cy30bc@incorrect-usage-macro (lambda (cy3cb9@e) (cy31a4@syntax-violation '#f '"incorrect usage of auxiliary keyword" cy3cb9@e))) (set! cy4b96@cy30bc@incorrect-usage-macro cy30bc@incorrect-usage-macro) (set! cy30be@parameterize-macro (lambda (cy3cbb@e) (let ((cy3cbd@t cy3cbb@e)) (let ((cy3cbf@ls/false (cy30c4@syntax-dispatch cy3cbd@t '(_ () any . each-any)))) (if cy3cbf@ls/false (apply (lambda (cy3cc1@b cy3cc2@b*) (cy307a@bless (cons 'let (cons '() (cons cy3cc1@b cy3cc2@b*))))) cy3cbf@ls/false) (let ((cy3cc5@t cy3cbd@t)) (let ((cy3cc7@ls/false (cy30c4@syntax-dispatch cy3cc5@t '(_ #(each (any any)) any . each-any)))) (if cy3cc7@ls/false (apply (lambda (cy3cc9@olhs* cy3cca@orhs* cy3ccb@b cy3ccc@b*) (let ((cy3cd1@lhs* (cy3192@generate-temporaries cy3cc9@olhs*)) (cy3cd2@rhs* (cy3192@generate-temporaries cy3cca@orhs*))) (cy307a@bless (cons (list 'lambda (append cy3cd1@lhs* cy3cd2@rhs*) (list 'let (list (list 'swap (cons 'lambda (cons '() (map (lambda (cy3cd5@lhs cy3cd6@rhs) (list 'let (list (list 't (list cy3cd5@lhs))) (list cy3cd5@lhs cy3cd6@rhs) (cons 'set! (cons cy3cd6@rhs '(t))))) cy3cd1@lhs* cy3cd2@rhs*))))) (cons 'dynamic-wind (cons 'swap (cons (cons 'lambda (cons '() (cons cy3ccb@b cy3ccc@b*))) '(swap)))))) (append cy3cc9@olhs* cy3cca@orhs*))))) cy3cc7@ls/false) (cy31a4@syntax-violation '#f '"invalid syntax" cy3cc5@t))))))))) (set! cy4b97@cy30be@parameterize-macro cy30be@parameterize-macro) (set! cy30c0@foreign-call-transformer (lambda (cy3cd9@e cy3cda@r cy3cdb@mr) (let ((cy3cdf@t cy3cd9@e)) (let ((cy3ce1@ls/false (cy30c4@syntax-dispatch cy3cdf@t '(_ any . each-any)))) (if cy3ce1@ls/false (apply (lambda (cy3ce3@name cy3ce4@arg*) (cons 'foreign-call (cons (cy30e6@chi-expr cy3ce3@name cy3cda@r cy3cdb@mr) (cy30e2@chi-expr* cy3ce4@arg* cy3cda@r cy3cdb@mr)))) cy3ce1@ls/false) (cy31a4@syntax-violation '#f '"invalid syntax" cy3cdf@t)))))) (set! cy4b98@cy30c0@foreign-call-transformer cy30c0@foreign-call-transformer) (set! cy30c2@convert-pattern (lambda (cy3ce7@pattern cy3ce8@keys) (let ((cy3cec@cvt* '#f) (cy3cee@cvt '#f)) (begin (set! cy3cec@cvt* (lambda (cy3d8b@p* cy3d8c@n cy3d8d@ids) (if (null? cy3d8b@p*) (values '() cy3d8d@ids) (call-with-values (lambda () (cy3cec@cvt* (cdr cy3d8b@p*) cy3d8c@n cy3d8d@ids)) (lambda (cy3d95@cy3d92 cy3d96@cy3d94) (let ((cy3d99@ids cy3d96@cy3d94) (cy3d9a@y cy3d95@cy3d92)) (call-with-values (lambda () (cy3cee@cvt (car cy3d8b@p*) cy3d8c@n cy3d99@ids)) (lambda (cy3da1@cy3d9e cy3da2@cy3da0) (let ((cy3da5@ids cy3da2@cy3da0) (cy3da6@x cy3da1@cy3d9e)) (values (cons cy3da6@x cy3d9a@y) cy3da5@ids)))))))))) (set! cy3cee@cvt (lambda (cy3cef@p cy3cf0@n cy3cf1@ids) (let ((cy3cf5@t cy3cef@p)) (let ((cy3cf7@ls/false (cy30c4@syntax-dispatch cy3cf5@t 'any))) (if (and cy3cf7@ls/false (apply (lambda (cy3cf9@id) (cy2ebd@id? cy3cf9@id)) cy3cf7@ls/false)) (apply (lambda (cy3cfb@id) (if (cy2ec9@bound-id-member? cy3cef@p cy3ce8@keys) (values (vector 'free-id cy3cef@p) cy3cf1@ids) (if (cy2ec3@free-id=? cy3cef@p (cy304c@scheme-stx '_)) (values '_ cy3cf1@ids) (values 'any (cons (cons cy3cef@p cy3cf0@n) cy3cf1@ids))))) cy3cf7@ls/false) (let ((cy3cfd@t cy3cf5@t)) (let ((cy3cff@ls/false (cy30c4@syntax-dispatch cy3cfd@t '(any any)))) (if (and cy3cff@ls/false (apply (lambda (cy3d01@p cy3d02@dots) (cy30c6@ellipsis? cy3d02@dots)) cy3cff@ls/false)) (apply (lambda (cy3d05@p cy3d06@dots) (call-with-values (lambda () (cy3cee@cvt cy3d05@p (+ cy3cf0@n '1) cy3cf1@ids)) (lambda (cy3d0d@cy3d0a cy3d0e@cy3d0c) (let ((cy3d11@ids cy3d0e@cy3d0c) (cy3d12@p cy3d0d@cy3d0a)) (values (if (eq? cy3d12@p 'any) 'each-any (vector 'each cy3d12@p)) cy3d11@ids))))) cy3cff@ls/false) (let ((cy3d15@t cy3cfd@t)) (let ((cy3d17@ls/false (cy30c4@syntax-dispatch cy3d15@t '(any any . #(each+ any () any))))) (if (and cy3d17@ls/false (apply (lambda (cy3d19@x cy3d1a@dots cy3d1b@ys cy3d1c@z) (cy30c6@ellipsis? cy3d1a@dots)) cy3d17@ls/false)) (apply (lambda (cy3d21@x cy3d22@dots cy3d23@ys cy3d24@z) (call-with-values (lambda () (cy3cee@cvt cy3d24@z cy3cf0@n cy3cf1@ids)) (lambda (cy3d2d@cy3d2a cy3d2e@cy3d2c) (let ((cy3d31@ids cy3d2e@cy3d2c) (cy3d32@z cy3d2d@cy3d2a)) (call-with-values (lambda () (cy3cec@cvt* cy3d23@ys cy3cf0@n cy3d31@ids)) (lambda (cy3d39@cy3d36 cy3d3a@cy3d38) (let ((cy3d3d@ids cy3d3a@cy3d38) (cy3d3e@ys cy3d39@cy3d36)) (call-with-values (lambda () (cy3cee@cvt cy3d21@x (+ cy3cf0@n '1) cy3d3d@ids)) (lambda (cy3d45@cy3d42 cy3d46@cy3d44) (let ((cy3d49@ids cy3d46@cy3d44) (cy3d4a@x cy3d45@cy3d42)) (values (vector 'each+ cy3d4a@x (reverse cy3d3e@ys) cy3d32@z) cy3d49@ids))))))))))) cy3d17@ls/false) (let ((cy3d4d@t cy3d15@t)) (let ((cy3d4f@ls/false (cy30c4@syntax-dispatch cy3d4d@t '(any . any)))) (if cy3d4f@ls/false (apply (lambda (cy3d51@x cy3d52@y) (call-with-values (lambda () (cy3cee@cvt cy3d52@y cy3cf0@n cy3cf1@ids)) (lambda (cy3d59@cy3d56 cy3d5a@cy3d58) (let ((cy3d5d@ids cy3d5a@cy3d58) (cy3d5e@y cy3d59@cy3d56)) (call-with-values (lambda () (cy3cee@cvt cy3d51@x cy3cf0@n cy3d5d@ids)) (lambda (cy3d65@cy3d62 cy3d66@cy3d64) (let ((cy3d69@ids cy3d66@cy3d64) (cy3d6a@x cy3d65@cy3d62)) (values (cons cy3d6a@x cy3d5e@y) cy3d69@ids)))))))) cy3d4f@ls/false) (let ((cy3d6d@t cy3d4d@t)) (let ((cy3d6f@ls/false (cy30c4@syntax-dispatch cy3d6d@t '()))) (if cy3d6f@ls/false (apply (lambda () (values '() cy3cf1@ids)) cy3d6f@ls/false) (let ((cy3d71@t cy3d6d@t)) (let ((cy3d73@ls/false (cy30c4@syntax-dispatch cy3d71@t '#(vector each-any)))) (if (and cy3d73@ls/false (apply (lambda (cy3d75@p) (not (cy2e89@stx? cy3d75@p))) cy3d73@ls/false)) (apply (lambda (cy3d77@p) (call-with-values (lambda () (cy3cee@cvt cy3d77@p cy3cf0@n cy3cf1@ids)) (lambda (cy3d7d@cy3d7a cy3d7e@cy3d7c) (let ((cy3d81@ids cy3d7e@cy3d7c) (cy3d82@p cy3d7d@cy3d7a)) (values (vector 'vector cy3d82@p) cy3d81@ids))))) cy3d73@ls/false) (let ((cy3d85@t cy3d71@t)) (let ((cy3d87@ls/false (cy30c4@syntax-dispatch cy3d85@t 'any))) (if cy3d87@ls/false (apply (lambda (cy3d89@datum) (values (vector 'atom (cy2ed1@stx->datum cy3d89@datum)) cy3cf1@ids)) cy3d87@ls/false) (cy31a4@syntax-violation '#f '"invalid syntax" cy3d85@t)))))))))))))))))))))))) (cy3cee@cvt cy3ce7@pattern '0 '()))))) (set! cy4b99@cy30c2@convert-pattern cy30c2@convert-pattern) (set! cy30c4@syntax-dispatch (let ((cy3daa@stx^ '#f) (cy3dac@match-each '#f) (cy3dae@match-each+ '#f) (cy3db0@match-each-any '#f) (cy3db2@match-empty '#f) (cy3db4@combine '#f) (cy3db6@match* '#f) (cy3db8@match '#f)) (begin (set! cy3daa@stx^ (lambda (cy3e85@e cy3e86@m* cy3e87@s* cy3e88@ae*) (if (and (null? cy3e86@m*) (null? cy3e87@s*) (null? cy3e88@ae*)) cy3e85@e (cy2ea5@mkstx cy3e85@e cy3e86@m* cy3e87@s* cy3e88@ae*)))) (set! cy3dac@match-each (lambda (cy3e65@e cy3e66@p cy3e67@m* cy3e68@s* cy3e69@ae*) (if (pair? cy3e65@e) (let ((cy3e6f@first (cy3db8@match (car cy3e65@e) cy3e66@p cy3e67@m* cy3e68@s* cy3e69@ae* '()))) (and cy3e6f@first (let ((cy3e71@rest (cy3dac@match-each (cdr cy3e65@e) cy3e66@p cy3e67@m* cy3e68@s* cy3e69@ae*))) (and cy3e71@rest (cons cy3e6f@first cy3e71@rest))))) (if (null? cy3e65@e) '() (if (cy2e89@stx? cy3e65@e) (and (not (cy2e43@top-marked? cy3e67@m*)) (call-with-values (lambda () (join-wraps cy3e67@m* cy3e68@s* cy3e69@ae* cy3e65@e)) (lambda (cy3e79@cy3e74 cy3e7a@cy3e76 cy3e7b@cy3e78) (let ((cy3e7f@ae* cy3e7b@cy3e78) (cy3e80@s* cy3e7a@cy3e76) (cy3e81@m* cy3e79@cy3e74)) (cy3dac@match-each (cy2e8b@stx-expr cy3e65@e) cy3e66@p cy3e81@m* cy3e80@s* cy3e7f@ae*))))) (if (cy29fc@cy28d0@annotation? cy3e65@e) (cy3dac@match-each (cy29fe@cy28d4@annotation-expression cy3e65@e) cy3e66@p cy3e67@m* cy3e68@s* cy3e69@ae*) '#f)))))) (set! cy3dae@match-each+ (lambda (cy3e25@e cy3e26@x-pat cy3e27@y-pat cy3e28@z-pat cy3e29@m* cy3e2a@s* cy3e2b@ae* cy3e2c@r) (let cy3e3d@f ((cy3e35@e cy3e25@e) (cy3e36@m* cy3e29@m*) (cy3e37@s* cy3e2a@s*) (cy3e38@ae* cy3e2b@ae*)) (if (pair? cy3e35@e) (call-with-values (lambda () (cy3e3d@f (cdr cy3e35@e) cy3e36@m* cy3e37@s* cy3e38@ae*)) (lambda (cy3e45@cy3e40 cy3e46@cy3e42 cy3e47@cy3e44) (let ((cy3e4b@r cy3e47@cy3e44) (cy3e4c@y-pat cy3e46@cy3e42) (cy3e4d@xr* cy3e45@cy3e40)) (if cy3e4b@r (if (null? cy3e4c@y-pat) (let ((cy3e51@xr (cy3db8@match (car cy3e35@e) cy3e26@x-pat cy3e36@m* cy3e37@s* cy3e38@ae* '()))) (if cy3e51@xr (values (cons cy3e51@xr cy3e4d@xr*) cy3e4c@y-pat cy3e4b@r) (values '#f '#f '#f))) (values '() (cdr cy3e4c@y-pat) (cy3db8@match (car cy3e35@e) (car cy3e4c@y-pat) cy3e36@m* cy3e37@s* cy3e38@ae* cy3e4b@r))) (values '#f '#f '#f))))) (if (cy2e89@stx? cy3e35@e) (if (cy2e43@top-marked? cy3e36@m*) (values '() cy3e27@y-pat (cy3db8@match cy3e35@e cy3e28@z-pat cy3e36@m* cy3e37@s* cy3e38@ae* cy3e2c@r)) (call-with-values (lambda () (join-wraps cy3e36@m* cy3e37@s* cy3e38@ae* cy3e35@e)) (lambda (cy3e59@cy3e54 cy3e5a@cy3e56 cy3e5b@cy3e58) (let ((cy3e5f@ae* cy3e5b@cy3e58) (cy3e60@s* cy3e5a@cy3e56) (cy3e61@m* cy3e59@cy3e54)) (cy3e3d@f (cy2e8b@stx-expr cy3e35@e) cy3e61@m* cy3e60@s* cy3e5f@ae*))))) (if (cy29fc@cy28d0@annotation? cy3e35@e) (cy3e3d@f (cy29fe@cy28d4@annotation-expression cy3e35@e) cy3e36@m* cy3e37@s* cy3e38@ae*) (values '() cy3e27@y-pat (cy3db8@match cy3e35@e cy3e28@z-pat cy3e36@m* cy3e37@s* cy3e38@ae* cy3e2c@r)))))))) (set! cy3db0@match-each-any (lambda (cy3e09@e cy3e0a@m* cy3e0b@s* cy3e0c@ae*) (if (pair? cy3e09@e) (let ((cy3e11@l (cy3db0@match-each-any (cdr cy3e09@e) cy3e0a@m* cy3e0b@s* cy3e0c@ae*))) (and cy3e11@l (cons (cy3daa@stx^ (car cy3e09@e) cy3e0a@m* cy3e0b@s* cy3e0c@ae*) cy3e11@l))) (if (null? cy3e09@e) '() (if (cy2e89@stx? cy3e09@e) (and (not (cy2e43@top-marked? cy3e0a@m*)) (call-with-values (lambda () (join-wraps cy3e0a@m* cy3e0b@s* cy3e0c@ae* cy3e09@e)) (lambda (cy3e19@cy3e14 cy3e1a@cy3e16 cy3e1b@cy3e18) (let ((cy3e1f@ae* cy3e1b@cy3e18) (cy3e20@s* cy3e1a@cy3e16) (cy3e21@m* cy3e19@cy3e14)) (cy3db0@match-each-any (cy2e8b@stx-expr cy3e09@e) cy3e21@m* cy3e20@s* cy3e1f@ae*))))) (if (cy29fc@cy28d0@annotation? cy3e09@e) (cy3db0@match-each-any (cy29fe@cy28d4@annotation-expression cy3e09@e) cy3e0a@m* cy3e0b@s* cy3e0c@ae*) '#f)))))) (set! cy3db2@match-empty (lambda (cy3e03@p cy3e04@r) (if (null? cy3e03@p) cy3e04@r (if (eq? cy3e03@p '_) cy3e04@r (if (eq? cy3e03@p 'any) (cons '() cy3e04@r) (if (pair? cy3e03@p) (cy3db2@match-empty (car cy3e03@p) (cy3db2@match-empty (cdr cy3e03@p) cy3e04@r)) (if (eq? cy3e03@p 'each-any) (cons '() cy3e04@r) (let ((cy3e07@t (vector-ref cy3e03@p '0))) (if (memv cy3e07@t '(each)) (cy3db2@match-empty (vector-ref cy3e03@p '1) cy3e04@r) (if (memv cy3e07@t '(each+)) (cy3db2@match-empty (vector-ref cy3e03@p '1) (cy3db2@match-empty (reverse (vector-ref cy3e03@p '2)) (cy3db2@match-empty (vector-ref cy3e03@p '3) cy3e04@r))) (if (memv cy3e07@t '(free-id atom)) cy3e04@r (if (memv cy3e07@t '(scheme-id atom)) cy3e04@r (if (memv cy3e07@t '(vector)) (cy3db2@match-empty (vector-ref cy3e03@p '1) cy3e04@r) (assertion-violation 'syntax-dispatch '"invalid pattern" cy3e03@p)))))))))))))) (set! cy3db4@combine (lambda (cy3dff@r* cy3e00@r) (if (null? (car cy3dff@r*)) cy3e00@r (cons (map car cy3dff@r*) (cy3db4@combine (map cdr cy3dff@r*) cy3e00@r))))) (set! cy3db6@match* (lambda (cy3ddb@e cy3ddc@p cy3ddd@m* cy3dde@s* cy3ddf@ae* cy3de0@r) (if (null? cy3ddc@p) (and (null? cy3ddb@e) cy3de0@r) (if (pair? cy3ddc@p) (and (pair? cy3ddb@e) (cy3db8@match (car cy3ddb@e) (car cy3ddc@p) cy3ddd@m* cy3dde@s* cy3ddf@ae* (cy3db8@match (cdr cy3ddb@e) (cdr cy3ddc@p) cy3ddd@m* cy3dde@s* cy3ddf@ae* cy3de0@r))) (if (eq? cy3ddc@p 'each-any) (let ((cy3de7@l (cy3db0@match-each-any cy3ddb@e cy3ddd@m* cy3dde@s* cy3ddf@ae*))) (and cy3de7@l (cons cy3de7@l cy3de0@r))) (let ((cy3de9@t (vector-ref cy3ddc@p '0))) (if (memv cy3de9@t '(each)) (if (null? cy3ddb@e) (cy3db2@match-empty (vector-ref cy3ddc@p '1) cy3de0@r) (let ((cy3deb@r* (cy3dac@match-each cy3ddb@e (vector-ref cy3ddc@p '1) cy3ddd@m* cy3dde@s* cy3ddf@ae*))) (and cy3deb@r* (cy3db4@combine cy3deb@r* cy3de0@r)))) (if (memv cy3de9@t '(free-id)) (and (symbol? cy3ddb@e) (cy2e43@top-marked? cy3ddd@m*) (cy2ec3@free-id=? (cy3daa@stx^ cy3ddb@e cy3ddd@m* cy3dde@s* cy3ddf@ae*) (vector-ref cy3ddc@p '1)) cy3de0@r) (if (memv cy3de9@t '(scheme-id)) (and (symbol? cy3ddb@e) (cy2e43@top-marked? cy3ddd@m*) (cy2ec3@free-id=? (cy3daa@stx^ cy3ddb@e cy3ddd@m* cy3dde@s* cy3ddf@ae*) (cy304c@scheme-stx (vector-ref cy3ddc@p '1))) cy3de0@r) (if (memv cy3de9@t '(each+)) (call-with-values (lambda () (cy3dae@match-each+ cy3ddb@e (vector-ref cy3ddc@p '1) (vector-ref cy3ddc@p '2) (vector-ref cy3ddc@p '3) cy3ddd@m* cy3dde@s* cy3ddf@ae* cy3de0@r)) (lambda (cy3df3@cy3dee cy3df4@cy3df0 cy3df5@cy3df2) (let ((cy3df9@r cy3df5@cy3df2) (cy3dfa@y-pat cy3df4@cy3df0) (cy3dfb@xr* cy3df3@cy3dee)) (and cy3df9@r (null? cy3dfa@y-pat) (if (null? cy3dfb@xr*) (cy3db2@match-empty (vector-ref cy3ddc@p '1) cy3df9@r) (cy3db4@combine cy3dfb@xr* cy3df9@r)))))) (if (memv cy3de9@t '(atom)) (and (fast-equal? (vector-ref cy3ddc@p '1) (cy2ecf@strip cy3ddb@e cy3ddd@m*)) cy3de0@r) (if (memv cy3de9@t '(vector)) (and (vector? cy3ddb@e) (cy3db8@match (vector->list cy3ddb@e) (vector-ref cy3ddc@p '1) cy3ddd@m* cy3dde@s* cy3ddf@ae* cy3de0@r)) (assertion-violation 'syntax-dispatch '"invalid pattern" cy3ddc@p))))))))))))) (set! cy3db8@match (lambda (cy3dbd@e cy3dbe@p cy3dbf@m* cy3dc0@s* cy3dc1@ae* cy3dc2@r) (if (not cy3dc2@r) '#f (if (eq? cy3dbe@p '_) cy3dc2@r (if (eq? cy3dbe@p 'any) (cons (cy3daa@stx^ cy3dbd@e cy3dbf@m* cy3dc0@s* cy3dc1@ae*) cy3dc2@r) (if (cy2e89@stx? cy3dbd@e) (and (not (cy2e43@top-marked? cy3dbf@m*)) (call-with-values (lambda () (join-wraps cy3dbf@m* cy3dc0@s* cy3dc1@ae* cy3dbd@e)) (lambda (cy3dcf@cy3dca cy3dd0@cy3dcc cy3dd1@cy3dce) (let ((cy3dd5@ae* cy3dd1@cy3dce) (cy3dd6@s* cy3dd0@cy3dcc) (cy3dd7@m* cy3dcf@cy3dca)) (cy3db8@match (cy2e8b@stx-expr cy3dbd@e) cy3dbe@p cy3dd7@m* cy3dd6@s* cy3dd5@ae* cy3dc2@r))))) (if (cy29fc@cy28d0@annotation? cy3dbd@e) (cy3db8@match (cy29fe@cy28d4@annotation-expression cy3dbd@e) cy3dbe@p cy3dbf@m* cy3dc0@s* cy3dc1@ae* cy3dc2@r) (cy3db6@match* cy3dbd@e cy3dbe@p cy3dbf@m* cy3dc0@s* cy3dc1@ae* cy3dc2@r)))))))) (lambda (cy3db9@e cy3dba@p) (cy3db8@match cy3db9@e cy3dba@p '() '() '() '()))))) (set! cy4b9a@cy30c4@syntax-dispatch cy30c4@syntax-dispatch) (set! cy30c6@ellipsis? (lambda (cy3e8d@x) (and (cy2ebd@id? cy3e8d@x) (cy2ec3@free-id=? cy3e8d@x (cy304c@scheme-stx '...))))) (set! cy4b9b@cy30c6@ellipsis? cy30c6@ellipsis?) (set! cy30c8@underscore? (lambda (cy3e8f@x) (and (cy2ebd@id? cy3e8f@x) (cy2ec3@free-id=? cy3e8f@x (cy304c@scheme-stx '_))))) (set! cy4b9c@cy30c8@underscore? cy30c8@underscore?) (set! cy30ca@verify-literals (lambda (cy3e91@lits cy3e92@expr) (for-each (lambda (cy3e95@x) (if (or (not (cy2ebd@id? cy3e95@x)) (cy30c6@ellipsis? cy3e95@x) (cy30c8@underscore? cy3e95@x)) (cy31a4@syntax-violation '#f '"invalid literal" cy3e92@expr cy3e95@x) (void))) cy3e91@lits))) (set! cy4b9d@cy30ca@verify-literals cy30ca@verify-literals) (set! cy30cc@syntax-case-transformer (let ((cy3e98@build-dispatch-call '#f) (cy3e9a@invalid-ids-error '#f) (cy3e9c@gen-clause '#f) (cy3e9e@gen-syntax-case '#f)) (begin (set! cy3e98@build-dispatch-call (lambda (cy3f09@pvars cy3f0a@expr cy3f0b@y cy3f0c@r cy3f0d@mr) (let ((cy3f13@ids (map car cy3f09@pvars)) (cy3f14@levels (map cdr cy3f09@pvars))) (let ((cy3f17@labels (map cy2e49@gen-label cy3f13@ids)) (cy3f18@new-vars (map cy2e45@gen-lexical cy3f13@ids))) (let ((cy3f1b@body (cy30e6@chi-expr (cy2ea9@add-subst (cy2e7d@make-full-rib cy3f13@ids cy3f17@labels) cy3f0a@expr) (append (map (lambda (cy3f1d@label cy3f1e@var cy3f1f@level) (cons cy3f1d@label (cy2ed7@make-binding 'syntax (cons cy3f1e@var cy3f1f@level)))) cy3f17@labels cy3f18@new-vars (map cdr cy3f09@pvars)) cy3f0c@r) cy3f0d@mr))) (list '(primitive apply) (cy2e20@cy2d4c@build-lambda '#f cy3f18@new-vars cy3f1b@body) cy3f0b@y)))))) (set! cy3e9a@invalid-ids-error (lambda (cy3efd@id* cy3efe@e cy3eff@class) (let cy3f07@find ((cy3f03@id* cy3efd@id*) (cy3f04@ok* '())) (if (null? cy3f03@id*) (cy31a4@syntax-violation '#f '"invalid syntax" cy3efe@e) (if (cy2ebd@id? (car cy3f03@id*)) (if (cy2ec9@bound-id-member? (car cy3f03@id*) cy3f04@ok*) (cy31a0@syntax-error (car cy3f03@id*) '"duplicate " cy3eff@class) (cy3f07@find (cdr cy3f03@id*) (cons (car cy3f03@id*) cy3f04@ok*))) (cy31a0@syntax-error (car cy3f03@id*) '"invalid " cy3eff@class)))))) (set! cy3e9c@gen-clause (lambda (cy3ed5@x cy3ed6@keys cy3ed7@clauses cy3ed8@r cy3ed9@mr cy3eda@pat cy3edb@fender cy3edc@expr) (call-with-values (lambda () (cy30c2@convert-pattern cy3eda@pat cy3ed6@keys)) (lambda (cy3ee9@cy3ee6 cy3eea@cy3ee8) (let ((cy3eed@pvars cy3eea@cy3ee8) (cy3eee@p cy3ee9@cy3ee6)) (if (not (cy2ec7@distinct-bound-ids? (map car cy3eed@pvars))) (cy3e9a@invalid-ids-error (map car cy3eed@pvars) cy3eda@pat '"pattern variable") (if (not (for-all (lambda (cy3ef1@x) (not (cy30c6@ellipsis? (car cy3ef1@x)))) cy3eed@pvars)) (cy31a4@syntax-violation '#f '"misplaced ellipsis in syntax-case pattern" cy3eda@pat) (let ((cy3ef3@y (cy2e45@gen-lexical 'tmp))) (let ((cy3ef5@test (if (eq? cy3edb@fender '#t) cy3ef3@y (let ((cy3ef7@call (cy3e98@build-dispatch-call cy3eed@pvars cy3edb@fender cy3ef3@y cy3ed8@r cy3ed9@mr))) (list 'if cy3ef3@y cy3ef7@call (list 'quote '#f)))))) (let ((cy3ef9@conseq (cy3e98@build-dispatch-call cy3eed@pvars cy3edc@expr cy3ef3@y cy3ed8@r cy3ed9@mr))) (let ((cy3efb@altern (cy3e9e@gen-syntax-case cy3ed5@x cy3ed6@keys cy3ed7@clauses cy3ed8@r cy3ed9@mr))) (list (cy2e20@cy2d4c@build-lambda '#f (list cy3ef3@y) (list 'if cy3ef5@test cy3ef9@conseq cy3efb@altern)) (list '(primitive syntax-dispatch) cy3ed5@x (list 'quote cy3eee@p)))))))))))))) (set! cy3e9e@gen-syntax-case (lambda (cy3eb3@x cy3eb4@keys cy3eb5@clauses cy3eb6@r cy3eb7@mr) (if (null? cy3eb5@clauses) (list '(primitive syntax-error) cy3eb3@x) (let ((cy3ebd@t (car cy3eb5@clauses))) (let ((cy3ebf@ls/false (cy30c4@syntax-dispatch cy3ebd@t '(any any)))) (if cy3ebf@ls/false (apply (lambda (cy3ec1@pat cy3ec2@expr) (if (and (cy2ebd@id? cy3ec1@pat) (not (cy2ec9@bound-id-member? cy3ec1@pat cy3eb4@keys)) (not (cy30c6@ellipsis? cy3ec1@pat))) (if (cy2ec3@free-id=? cy3ec1@pat (cy304c@scheme-stx '_)) (cy30e6@chi-expr cy3ec2@expr cy3eb6@r cy3eb7@mr) (let ((cy3ec5@lab (cy2e49@gen-label cy3ec1@pat)) (cy3ec6@lex (cy2e45@gen-lexical cy3ec1@pat))) (let ((cy3ec9@body (cy30e6@chi-expr (cy2ea9@add-subst (cy2e7d@make-full-rib (list cy3ec1@pat) (list cy3ec5@lab)) cy3ec2@expr) (cons (cons cy3ec5@lab (cy2ed7@make-binding 'syntax (cons cy3ec6@lex '0))) cy3eb6@r) cy3eb7@mr))) (list (cy2e20@cy2d4c@build-lambda '#f (list cy3ec6@lex) cy3ec9@body) cy3eb3@x)))) (cy3e9c@gen-clause cy3eb3@x cy3eb4@keys (cdr cy3eb5@clauses) cy3eb6@r cy3eb7@mr cy3ec1@pat '#t cy3ec2@expr))) cy3ebf@ls/false) (let ((cy3ecb@t cy3ebd@t)) (let ((cy3ecd@ls/false (cy30c4@syntax-dispatch cy3ecb@t '(any any any)))) (if cy3ecd@ls/false (apply (lambda (cy3ecf@pat cy3ed0@fender cy3ed1@expr) (cy3e9c@gen-clause cy3eb3@x cy3eb4@keys (cdr cy3eb5@clauses) cy3eb6@r cy3eb7@mr cy3ecf@pat cy3ed0@fender cy3ed1@expr)) cy3ecd@ls/false) (cy31a4@syntax-violation '#f '"invalid syntax" cy3ecb@t)))))))))) (lambda (cy3e9f@e cy3ea0@r cy3ea1@mr) (let ((cy3ea5@t cy3e9f@e)) (let ((cy3ea7@ls/false (cy30c4@syntax-dispatch cy3ea5@t '(_ any each-any . each-any)))) (if cy3ea7@ls/false (apply (lambda (cy3ea9@expr cy3eaa@keys cy3eab@clauses) (begin (cy30ca@verify-literals cy3eaa@keys cy3e9f@e) (let ((cy3eaf@x (cy2e45@gen-lexical 'tmp))) (let ((cy3eb1@body (cy3e9e@gen-syntax-case cy3eaf@x cy3eaa@keys cy3eab@clauses cy3ea0@r cy3ea1@mr))) (list (cy2e20@cy2d4c@build-lambda '#f (list cy3eaf@x) cy3eb1@body) (cy30e6@chi-expr cy3ea9@expr cy3ea0@r cy3ea1@mr)))))) cy3ea7@ls/false) (cy31a4@syntax-violation '#f '"invalid syntax" cy3ea5@t)))))))) (set! cy4b9e@cy30cc@syntax-case-transformer cy30cc@syntax-case-transformer) (set! cy30ce@ellipsis-map (lambda (cy3f23@proc cy3f24@ls . cy3f27@ls*) (let ((cy3f2a@who '#f)) (begin (set! cy3f2a@who '...) (begin (if (not (list? cy3f24@ls)) (assertion-violation cy3f2a@who '"not a list" cy3f24@ls) (void)) (if (not (null? cy3f27@ls*)) (let ((cy3f2b@n (length cy3f24@ls))) (for-each (lambda (cy3f2d@x) (begin (if (not (list? cy3f2d@x)) (assertion-violation cy3f2a@who '"not a list" cy3f2d@x) (void)) (if (not (= (length cy3f2d@x) cy3f2b@n)) (assertion-violation cy3f2a@who '"length mismatch" cy3f24@ls cy3f2d@x) (void)))) cy3f27@ls*)) (void)) (apply map cy3f23@proc cy3f24@ls cy3f27@ls*)))))) (set! cy4b9f@cy30ce@ellipsis-map cy30ce@ellipsis-map) (set! cy30d0@syntax-transformer (let ((cy3f30@gen-syntax '#f) (cy3f32@gen-ref '#f) (cy3f34@gen-append '#f) (cy3f36@gen-mappend '#f) (cy3f38@gen-map '#f) (cy3f3a@gen-cons '#f) (cy3f3c@gen-vector '#f) (cy3f3e@regen '#f)) (begin (set! cy3f30@gen-syntax (lambda (cy3fa7@src cy3fa8@e cy3fa9@r cy3faa@maps cy3fab@ellipsis? cy3fac@vec?) (let ((cy3fb3@t cy3fa8@e)) (let ((cy3fb5@ls/false (cy30c4@syntax-dispatch cy3fb3@t 'any))) (if (and cy3fb5@ls/false (apply (lambda (cy3fb7@dots) (cy3fab@ellipsis? cy3fb7@dots)) cy3fb5@ls/false)) (apply (lambda (cy3fb9@dots) (cy31a4@syntax-violation '#f '"misplaced ellipsis in syntax form" cy3fa7@src)) cy3fb5@ls/false) (let ((cy3fbb@t cy3fb3@t)) (let ((cy3fbd@ls/false (cy30c4@syntax-dispatch cy3fbb@t 'any))) (if (and cy3fbd@ls/false (apply (lambda (cy3fbf@id) (cy2ebd@id? cy3fbf@id)) cy3fbd@ls/false)) (apply (lambda (cy3fc1@id) (let ((cy3fc3@label (cy2ed3@id->label cy3fa8@e))) (let ((cy3fc5@b (cy2ed5@label->binding cy3fc3@label cy3fa9@r))) (if (eq? (cy2ed9@binding-type cy3fc5@b) 'syntax) (call-with-values (lambda () (let ((cy3fcb@var.lev (cy2edb@binding-value cy3fc5@b))) (cy3f32@gen-ref cy3fa7@src (car cy3fcb@var.lev) (cdr cy3fcb@var.lev) cy3faa@maps))) (lambda (cy3fcd@cy3fc8 cy3fce@cy3fca) (let ((cy3fd1@maps cy3fce@cy3fca) (cy3fd2@var cy3fcd@cy3fc8)) (values (list 'ref cy3fd2@var) cy3fd1@maps)))) (values (list 'quote cy3fa8@e) cy3faa@maps))))) cy3fbd@ls/false) (let ((cy3fd5@t cy3fbb@t)) (let ((cy3fd7@ls/false (cy30c4@syntax-dispatch cy3fd5@t '(any any)))) (if (and cy3fd7@ls/false (apply (lambda (cy3fd9@dots cy3fda@e) (cy3fab@ellipsis? cy3fd9@dots)) cy3fd7@ls/false)) (apply (lambda (cy3fdd@dots cy3fde@e) (if cy3fac@vec? (cy31a4@syntax-violation '#f '"misplaced ellipsis in syntax form" cy3fa7@src) (cy3f30@gen-syntax cy3fa7@src cy3fde@e cy3fa9@r cy3faa@maps (lambda (cy3fe1@x) '#f) '#f))) cy3fd7@ls/false) (let ((cy3fe3@t cy3fd5@t)) (let ((cy3fe5@ls/false (cy30c4@syntax-dispatch cy3fe3@t '(any any . any)))) (if (and cy3fe5@ls/false (apply (lambda (cy3fe7@x cy3fe8@dots cy3fe9@y) (cy3fab@ellipsis? cy3fe8@dots)) cy3fe5@ls/false)) (apply (lambda (cy3fed@x cy3fee@dots cy3fef@y) (let cy4005@f ((cy3ff3@y cy3fef@y) (cy3ff4@k (lambda (cy3ff7@maps) (call-with-values (lambda () (cy3f30@gen-syntax cy3fa7@src cy3fed@x cy3fa9@r (cons '() cy3ff7@maps) cy3fab@ellipsis? '#f)) (lambda (cy3ffd@cy3ffa cy3ffe@cy3ffc) (let ((cy4001@maps cy3ffe@cy3ffc) (cy4002@x cy3ffd@cy3ffa)) (if (null? (car cy4001@maps)) (cy31a4@syntax-violation '#f '"extra ellipsis in syntax form" cy3fa7@src) (values (cy3f38@gen-map cy4002@x (car cy4001@maps)) (cdr cy4001@maps))))))))) (let ((cy4007@t cy3ff3@y)) (let ((cy4009@ls/false (cy30c4@syntax-dispatch cy4007@t '()))) (if cy4009@ls/false (apply (lambda () (cy3ff4@k cy3faa@maps)) cy4009@ls/false) (let ((cy400b@t cy4007@t)) (let ((cy400d@ls/false (cy30c4@syntax-dispatch cy400b@t '(any . any)))) (if (and cy400d@ls/false (apply (lambda (cy400f@dots cy4010@y) (cy3fab@ellipsis? cy400f@dots)) cy400d@ls/false)) (apply (lambda (cy4013@dots cy4014@y) (cy4005@f cy4014@y (lambda (cy4017@maps) (call-with-values (lambda () (cy3ff4@k (cons '() cy4017@maps))) (lambda (cy401d@cy401a cy401e@cy401c) (let ((cy4021@maps cy401e@cy401c) (cy4022@x cy401d@cy401a)) (if (null? (car cy4021@maps)) (cy31a4@syntax-violation '#f '"extra ellipsis in syntax form" cy3fa7@src) (values (cy3f36@gen-mappend cy4022@x (car cy4021@maps)) (cdr cy4021@maps))))))))) cy400d@ls/false) (let ((cy4025@t cy400b@t)) (let ((cy4027@ls/false (cy30c4@syntax-dispatch cy4025@t '_))) (if cy4027@ls/false (apply (lambda () (call-with-values (lambda () (cy3f30@gen-syntax cy3fa7@src cy3ff3@y cy3fa9@r cy3faa@maps cy3fab@ellipsis? cy3fac@vec?)) (lambda (cy402d@cy402a cy402e@cy402c) (let ((cy4031@maps cy402e@cy402c) (cy4032@y cy402d@cy402a)) (call-with-values (lambda () (cy3ff4@k cy4031@maps)) (lambda (cy4039@cy4036 cy403a@cy4038) (let ((cy403d@maps cy403a@cy4038) (cy403e@x cy4039@cy4036)) (values (cy3f34@gen-append cy403e@x cy4032@y) cy403d@maps)))))))) cy4027@ls/false) (cy31a4@syntax-violation '#f '"invalid syntax" cy4025@t)))))))))))) cy3fe5@ls/false) (let ((cy4041@t cy3fe3@t)) (let ((cy4043@ls/false (cy30c4@syntax-dispatch cy4041@t '(any . any)))) (if cy4043@ls/false (apply (lambda (cy4045@x cy4046@y) (call-with-values (lambda () (cy3f30@gen-syntax cy3fa7@src cy4045@x cy3fa9@r cy3faa@maps cy3fab@ellipsis? '#f)) (lambda (cy404d@cy404a cy404e@cy404c) (let ((cy4051@maps cy404e@cy404c) (cy4052@xnew cy404d@cy404a)) (call-with-values (lambda () (cy3f30@gen-syntax cy3fa7@src cy4046@y cy3fa9@r cy4051@maps cy3fab@ellipsis? cy3fac@vec?)) (lambda (cy4059@cy4056 cy405a@cy4058) (let ((cy405d@maps cy405a@cy4058) (cy405e@ynew cy4059@cy4056)) (values (cy3f3a@gen-cons cy3fa8@e cy4045@x cy4046@y cy4052@xnew cy405e@ynew) cy405d@maps)))))))) cy4043@ls/false) (let ((cy4061@t cy4041@t)) (let ((cy4063@ls/false (cy30c4@syntax-dispatch cy4061@t '#(vector each-any)))) (if cy4063@ls/false (apply (lambda (cy4065@ls) (call-with-values (lambda () (cy3f30@gen-syntax cy3fa7@src cy4065@ls cy3fa9@r cy3faa@maps cy3fab@ellipsis? '#t)) (lambda (cy406b@cy4068 cy406c@cy406a) (let ((cy406f@maps cy406c@cy406a) (cy4070@lsnew cy406b@cy4068)) (values (cy3f3c@gen-vector cy3fa8@e cy4065@ls cy4070@lsnew) cy406f@maps))))) cy4063@ls/false) (let ((cy4073@t cy4061@t)) (let ((cy4075@ls/false (cy30c4@syntax-dispatch cy4073@t '_))) (if cy4075@ls/false (apply (lambda () (values (list 'quote cy3fa8@e) cy3faa@maps)) cy4075@ls/false) (cy31a4@syntax-violation '#f '"invalid syntax" cy4073@t)))))))))))))))))))))))) (set! cy3f32@gen-ref (lambda (cy3f8d@src cy3f8e@var cy3f8f@level cy3f90@maps) (if (= cy3f8f@level '0) (values cy3f8e@var cy3f90@maps) (if (null? cy3f90@maps) (cy31a4@syntax-violation '#f '"missing ellipsis in syntax form" cy3f8d@src) (call-with-values (lambda () (cy3f32@gen-ref cy3f8d@src cy3f8e@var (- cy3f8f@level '1) (cdr cy3f90@maps))) (lambda (cy3f99@cy3f96 cy3f9a@cy3f98) (let ((cy3f9d@outer-maps cy3f9a@cy3f98) (cy3f9e@outer-var cy3f99@cy3f96)) (let ((cy3fa1@t (assq cy3f9e@outer-var (car cy3f90@maps)))) (if cy3fa1@t ((lambda (cy3fa3@b) (values (cdr cy3fa3@b) cy3f90@maps)) cy3fa1@t) (let ((cy3fa5@inner-var (cy2e45@gen-lexical 'tmp))) (values cy3fa5@inner-var (cons (cons (cons cy3f9e@outer-var cy3fa5@inner-var) (car cy3f90@maps)) cy3f9d@outer-maps)))))))))))) (set! cy3f34@gen-append (lambda (cy3f89@x cy3f8a@y) (if (fast-equal? cy3f8a@y ''()) cy3f89@x (list 'append cy3f89@x cy3f8a@y)))) (set! cy3f36@gen-mappend (lambda (cy3f85@e cy3f86@map-env) (list 'apply '(primitive append) (cy3f38@gen-map cy3f85@e cy3f86@map-env)))) (set! cy3f38@gen-map (lambda (cy3f73@e cy3f74@map-env) (let ((cy3f77@formals (map cdr cy3f74@map-env)) (cy3f78@actuals (map (lambda (cy3f7b@x) (list 'ref (car cy3f7b@x))) cy3f74@map-env))) (if (eq? (car cy3f73@e) 'ref) (car cy3f78@actuals) (if (for-all (lambda (cy3f7d@x) (and (eq? (car cy3f7d@x) 'ref) (memq (cadr cy3f7d@x) cy3f77@formals))) (cdr cy3f73@e)) (let ((cy3f7f@args (map (let ((cy3f81@r (map cons cy3f77@formals cy3f78@actuals))) (lambda (cy3f83@x) (cdr (assq (cadr cy3f83@x) cy3f81@r)))) (cdr cy3f73@e)))) (cons 'map (cons (list 'primitive (car cy3f73@e)) cy3f7f@args))) (cons* 'map (list 'lambda cy3f77@formals cy3f73@e) cy3f78@actuals)))))) (set! cy3f3a@gen-cons (lambda (cy3f63@e cy3f64@x cy3f65@y cy3f66@xnew cy3f67@ynew) (let ((cy3f6d@t (car cy3f67@ynew))) (if (memv cy3f6d@t '(quote)) (if (eq? (car cy3f66@xnew) 'quote) (let ((cy3f6f@xnew (cadr cy3f66@xnew)) (cy3f70@ynew (cadr cy3f67@ynew))) (if (and (eq? cy3f6f@xnew cy3f64@x) (eq? cy3f70@ynew cy3f65@y)) (list 'quote cy3f63@e) (list 'quote (cons cy3f6f@xnew cy3f70@ynew)))) (if (null? (cadr cy3f67@ynew)) (list 'list cy3f66@xnew) (list 'cons cy3f66@xnew cy3f67@ynew))) (if (memv cy3f6d@t '(list)) (cons 'list (cons cy3f66@xnew (cdr cy3f67@ynew))) (list 'cons cy3f66@xnew cy3f67@ynew)))))) (set! cy3f3c@gen-vector (lambda (cy3f5d@e cy3f5e@ls cy3f5f@lsnew) (if (eq? (car cy3f5f@lsnew) 'quote) (if (eq? (cadr cy3f5f@lsnew) cy3f5e@ls) (list 'quote cy3f5d@e) (list 'quote (list->vector (cadr cy3f5f@lsnew)))) (if (eq? (car cy3f5f@lsnew) 'list) (cons 'vector (cdr cy3f5f@lsnew)) (list 'list->vector cy3f5f@lsnew))))) (set! cy3f3e@regen (lambda (cy3f57@x) (let ((cy3f59@t (car cy3f57@x))) (if (memv cy3f59@t '(ref)) (cadr cy3f57@x) (if (memv cy3f59@t '(primitive)) (list 'primitive (cadr cy3f57@x)) (if (memv cy3f59@t '(quote)) (list 'quote (cadr cy3f57@x)) (if (memv cy3f59@t '(lambda)) (cy2e20@cy2d4c@build-lambda '#f (cadr cy3f57@x) (cy3f3e@regen (caddr cy3f57@x))) (if (memv cy3f59@t '(map)) (let ((cy3f5b@ls (map cy3f3e@regen (cdr cy3f57@x)))) (cons '(primitive ellipsis-map) cy3f5b@ls)) (cons (list 'primitive (car cy3f57@x)) (map cy3f3e@regen (cdr cy3f57@x))))))))))) (lambda (cy3f3f@e cy3f40@r cy3f41@mr) (let ((cy3f45@t cy3f3f@e)) (let ((cy3f47@ls/false (cy30c4@syntax-dispatch cy3f45@t '(_ any)))) (if cy3f47@ls/false (apply (lambda (cy3f49@x) (call-with-values (lambda () (cy3f30@gen-syntax cy3f3f@e cy3f49@x cy3f40@r '() cy30c6@ellipsis? '#f)) (lambda (cy3f4f@cy3f4c cy3f50@cy3f4e) (let ((cy3f53@maps cy3f50@cy3f4e) (cy3f54@e cy3f4f@cy3f4c)) (cy3f3e@regen cy3f54@e))))) cy3f47@ls/false) (cy31a4@syntax-violation '#f '"invalid syntax" cy3f45@t)))))))) (set! cy4ba0@cy30d0@syntax-transformer cy30d0@syntax-transformer) (set! cy30d2@core-macro-transformer (lambda (cy4077@name) (let ((cy4079@t cy4077@name)) (if (memv cy4079@t '(quote)) cy3074@quote-transformer (if (memv cy4079@t '(lambda)) cy3078@lambda-transformer (if (memv cy4079@t '(case-lambda)) cy3076@case-lambda-transformer (if (memv cy4079@t '(letrec)) cy305c@letrec-transformer (if (memv cy4079@t '(letrec*)) cy305e@letrec*-transformer (if (memv cy4079@t '(let)) cy305a@let-transformer (if (memv cy4079@t '(if)) cy306c@if-transformer (if (memv cy4079@t '(and)) cy306e@and-transformer (if (memv cy4079@t '(or)) cy3070@or-transformer (if (memv cy4079@t '(foreign-call)) cy30c0@foreign-call-transformer (if (memv cy4079@t '(syntax-case)) cy30cc@syntax-case-transformer (if (memv cy4079@t '(syntax)) cy30d0@syntax-transformer (if (memv cy4079@t '(type-descriptor)) cy3062@type-descriptor-transformer (if (memv cy4079@t '(record-type-descriptor)) cy3064@record-type-descriptor-transformer (if (memv cy4079@t '(record-constructor-descriptor)) cy3066@record-constructor-descriptor-transformer (if (memv cy4079@t '(fluid-let-syntax)) cy3060@fluid-let-syntax-transformer (assertion-violation 'macro-transformer '"BUG: cannot find transformer" cy4077@name)))))))))))))))))))) (set! cy4ba1@cy30d2@core-macro-transformer cy30d2@core-macro-transformer) (set! cy30d4@symbol-macro (lambda (cy407b@x cy407c@set) (let ((cy407f@t cy407b@x)) (let ((cy4081@ls/false (cy30c4@syntax-dispatch cy407f@t '(_ any)))) (if (and cy4081@ls/false (apply (lambda (cy4083@name) (and (cy2ebd@id? cy4083@name) (memq (cy2ebf@id->sym cy4083@name) cy407c@set))) cy4081@ls/false)) (apply (lambda (cy4085@name) (cy307a@bless (list 'quote cy4085@name))) cy4081@ls/false) (cy31a4@syntax-violation '#f '"invalid syntax" cy407f@t)))))) (set! cy4ba2@cy30d4@symbol-macro cy30d4@symbol-macro) (set! cy30d6@macro-transformer (lambda (cy4087@x) (if (procedure? cy4087@x) cy4087@x (if (symbol? cy4087@x) (let ((cy4089@t cy4087@x)) (if (memv cy4089@t '(define-record-type)) cy30b8@define-record-type-macro (if (memv cy4089@t '(define-struct)) cy30b6@define-struct-macro (if (memv cy4089@t '(include)) cy30ac@include-macro (if (memv cy4089@t '(cond)) cy30a8@cond-macro (if (memv cy4089@t '(let)) cy3080@let-macro (if (memv cy4089@t '(do)) cy30a0@do-macro (if (memv cy4089@t '(or)) cy30a4@or-macro (if (memv cy4089@t '(and)) cy30a6@and-macro (if (memv cy4089@t '(let*)) cy30a2@let*-macro (if (memv cy4089@t '(let-values)) cy3082@let-values-macro (if (memv cy4089@t '(let*-values)) cy3084@let*-values-macro (if (memv cy4089@t '(syntax-rules)) cy30b0@syntax-rules-macro (if (memv cy4089@t '(quasiquote)) cy30b2@quasiquote-macro (if (memv cy4089@t '(quasisyntax)) cy30b4@quasisyntax-macro (if (memv cy4089@t '(with-syntax)) cy307c@with-syntax-macro (if (memv cy4089@t '(when)) cy3068@when-macro (if (memv cy4089@t '(unless)) cy306a@unless-macro (if (memv cy4089@t '(case)) cy3072@case-macro (if (memv cy4089@t '(identifier-syntax)) cy309e@identifier-syntax-macro (if (memv cy4089@t '(time)) cy3096@time-macro (if (memv cy4089@t '(delay)) cy3098@delay-macro (if (memv cy4089@t '(assert)) cy309a@assert-macro (if (memv cy4089@t '(endianness)) cy309c@endianness-macro (if (memv cy4089@t '(guard)) cy3092@guard-macro (if (memv cy4089@t '(define-enumeration)) cy3094@define-enumeration-macro (if (memv cy4089@t '(trace-lambda)) cy3086@trace-lambda-macro (if (memv cy4089@t '(trace-define)) cy3088@trace-define-macro (if (memv cy4089@t '(trace-define-syntax)) cy308a@trace-define-syntax-macro (if (memv cy4089@t '(trace-let-syntax)) cy308e@trace-let-syntax-macro (if (memv cy4089@t '(trace-letrec-syntax)) cy3090@trace-letrec-syntax-macro (if (memv cy4089@t '(define-condition-type)) cy30ba@define-condition-type-macro (if (memv cy4089@t '(parameterize)) cy30be@parameterize-macro (if (memv cy4089@t '(include-into)) cy30ae@include-into-macro (if (memv cy4089@t '(eol-style)) (lambda (cy408b@x) (cy30d4@symbol-macro cy408b@x '(none lf cr crlf nel crnel ls))) (if (memv cy4089@t '(error-handling-mode)) (lambda (cy408d@x) (cy30d4@symbol-macro cy408d@x '(ignore raise replace))) (if (memv cy4089@t '(buffer-mode)) (lambda (cy408f@x) (cy30d4@symbol-macro cy408f@x '(none line block))) (if (memv cy4089@t '(file-options)) cy2e38@file-options-macro (if (memv cy4089@t '(... => _ else unquote unquote-splicing unsyntax unsyntax-splicing fields mutable immutable parent protocol sealed opaque nongenerative parent-rtd)) cy30bc@incorrect-usage-macro (error 'macro-transformer '"BUG: invalid macro" cy4087@x)))))))))))))))))))))))))))))))))))))))) (error 'core-macro-transformer '"BUG: invalid macro" cy4087@x))))) (set! cy4ba3@cy30d6@macro-transformer cy30d6@macro-transformer) (set! cy30d8@local-macro-transformer (lambda (cy4091@x) (car cy4091@x))) (set! cy4ba4@cy30d8@local-macro-transformer cy30d8@local-macro-transformer) (set! cy30da@do-macro-call (lambda (cy4093@transformer cy4094@expr) (let ((cy4097@out (cy4093@transformer (cy2ea7@add-mark cy2ea1@anti-mark cy4094@expr '#f)))) (begin (let cy409b@f ((cy4099@x cy4097@out)) (if (not (cy2e89@stx? cy4099@x)) (if (pair? cy4099@x) (begin (cy409b@f (car cy4099@x)) (cy409b@f (cdr cy4099@x))) (if (vector? cy4099@x) (vector-for-each cy409b@f cy4099@x) (if (symbol? cy4099@x) (cy31a4@syntax-violation '#f '"raw symbol encountered in output of macro" cy4094@expr cy4099@x) (void)))) (void))) (cy2ea7@add-mark (cy2e9f@gen-mark) cy4097@out cy4094@expr))))) (set! cy4ba5@cy30da@do-macro-call cy30da@do-macro-call) (set! cy30dc@chi-macro (lambda (cy409d@p cy409e@e) (cy30da@do-macro-call (cy30d6@macro-transformer cy409d@p) cy409e@e))) (set! cy4ba6@cy30dc@chi-macro cy30dc@chi-macro) (set! cy30de@chi-local-macro (lambda (cy40a1@p cy40a2@e) (cy30da@do-macro-call (cy30d8@local-macro-transformer cy40a1@p) cy40a2@e))) (set! cy4ba7@cy30de@chi-local-macro cy30de@chi-local-macro) (set! cy30e0@chi-global-macro (lambda (cy40a5@p cy40a6@e) (let ((cy40a9@lib (car cy40a5@p)) (cy40aa@loc (cdr cy40a5@p))) (begin (cy2cd4@cy2b23@visit-library cy40a9@lib) (let ((cy40ad@x (symbol-value cy40aa@loc))) (let ((cy40af@transformer (if (procedure? cy40ad@x) cy40ad@x (assertion-violation 'chi-global-macro '"BUG: not a procedure" cy40ad@x)))) (cy30da@do-macro-call cy40af@transformer cy40a6@e))))))) (set! cy4ba8@cy30e0@chi-global-macro cy30e0@chi-global-macro) (set! cy30e2@chi-expr* (lambda (cy40b1@e* cy40b2@r cy40b3@mr) (if (null? cy40b1@e*) '() (let ((cy40b7@e (cy30e6@chi-expr (car cy40b1@e*) cy40b2@r cy40b3@mr))) (cons cy40b7@e (cy30e2@chi-expr* (cdr cy40b1@e*) cy40b2@r cy40b3@mr)))))) (set! cy4ba9@cy30e2@chi-expr* cy30e2@chi-expr*) (set! cy30e4@chi-application (lambda (cy40b9@e cy40ba@r cy40bb@mr) (let ((cy40bf@t cy40b9@e)) (let ((cy40c1@ls/false (cy30c4@syntax-dispatch cy40bf@t '(any . each-any)))) (if cy40c1@ls/false (apply (lambda (cy40c3@rator cy40c4@rands) (let ((cy40c7@rator (cy30e6@chi-expr cy40c3@rator cy40ba@r cy40bb@mr))) (cons cy40c7@rator (cy30e2@chi-expr* cy40c4@rands cy40ba@r cy40bb@mr)))) cy40c1@ls/false) (cy31a4@syntax-violation '#f '"invalid syntax" cy40bf@t)))))) (set! cy4baa@cy30e4@chi-application cy30e4@chi-application) (set! cy30e6@chi-expr (lambda (cy40c9@e cy40ca@r cy40cb@mr) (call-with-values (lambda () (cy2edf@syntax-type cy40c9@e cy40ca@r)) (lambda (cy40d5@cy40d0 cy40d6@cy40d2 cy40d7@cy40d4) (let ((cy40db@kwd cy40d7@cy40d4) (cy40dc@value cy40d6@cy40d2) (cy40dd@type cy40d5@cy40d0)) (let ((cy40e1@t cy40dd@type)) (if (memv cy40e1@t '(core-macro)) (let ((cy40e3@transformer (cy30d2@core-macro-transformer cy40dc@value))) (cy40e3@transformer cy40c9@e cy40ca@r cy40cb@mr)) (if (memv cy40e1@t '(global)) (let ((cy40e5@lib (car cy40dc@value))) (let ((cy40e7@loc (cdr cy40dc@value))) (begin ((cy312c@inv-collector) cy40e5@lib) cy40e7@loc))) (if (memv cy40e1@t '(core-prim)) (let ((cy40e9@name cy40dc@value)) (list 'primitive cy40e9@name)) (if (memv cy40e1@t '(call)) (cy30e4@chi-application cy40c9@e cy40ca@r cy40cb@mr) (if (memv cy40e1@t '(lexical)) (let ((cy40eb@lex (cy304e@lexical-var cy40dc@value))) cy40eb@lex) (if (memv cy40e1@t '(global-macro global-macro!)) (cy30e6@chi-expr (cy30e0@chi-global-macro cy40dc@value cy40c9@e) cy40ca@r cy40cb@mr) (if (memv cy40e1@t '(local-macro local-macro!)) (cy30e6@chi-expr (cy30de@chi-local-macro cy40dc@value cy40c9@e) cy40ca@r cy40cb@mr) (if (memv cy40e1@t '(macro macro!)) (cy30e6@chi-expr (cy30dc@chi-macro cy40dc@value cy40c9@e) cy40ca@r cy40cb@mr) (if (memv cy40e1@t '(constant)) (let ((cy40ed@datum cy40dc@value)) (list 'quote cy40ed@datum)) (if (memv cy40e1@t '(set!)) (cy30e8@chi-set! cy40c9@e cy40ca@r cy40cb@mr) (if (memv cy40e1@t '(begin)) (let ((cy40ef@t cy40c9@e)) (let ((cy40f1@ls/false (cy30c4@syntax-dispatch cy40ef@t '(_ any . each-any)))) (if cy40f1@ls/false (apply (lambda (cy40f3@x cy40f4@x*) (cy2e22@cy2d7c@build-sequence '#f (cy30e2@chi-expr* (cons cy40f3@x cy40f4@x*) cy40ca@r cy40cb@mr))) cy40f1@ls/false) (cy31a4@syntax-violation '#f '"invalid syntax" cy40ef@t)))) (if (memv cy40e1@t '(let-syntax letrec-syntax)) (let ((cy40f7@t cy40c9@e)) (let ((cy40f9@ls/false (cy30c4@syntax-dispatch cy40f7@t '(_ #(each (any any)) any . each-any)))) (if (and cy40f9@ls/false (apply (lambda (cy40fb@xlhs* cy40fc@xrhs* cy40fd@xbody cy40fe@xbody*) (if (not (cy2ec5@valid-bound-ids? cy40fb@xlhs*)) (cy31a4@syntax-violation '#f '"invalid identifiers" cy40c9@e) (void))) cy40f9@ls/false)) (apply (lambda (cy4103@xlhs* cy4104@xrhs* cy4105@xbody cy4106@xbody*) (let ((cy410b@xlab* (map cy2e49@gen-label cy4103@xlhs*))) (let ((cy410d@xrib (cy2e7d@make-full-rib cy4103@xlhs* cy410b@xlab*))) (let ((cy410f@xb* (map (lambda (cy4111@x) (cy2ef5@make-eval-transformer (cy311e@expand-transformer (if (eq? cy40dd@type 'let-syntax) cy4111@x (cy2ea9@add-subst cy410d@xrib cy4111@x)) cy40cb@mr))) cy4104@xrhs*))) (cy2e22@cy2d7c@build-sequence '#f (cy30e2@chi-expr* (map (lambda (cy4113@x) (cy2ea9@add-subst cy410d@xrib cy4113@x)) (cons cy4105@xbody cy4106@xbody*)) (append (map cons cy410b@xlab* cy410f@xb*) cy40ca@r) (append (map cons cy410b@xlab* cy410f@xb*) cy40cb@mr))))))) cy40f9@ls/false) (cy31a4@syntax-violation '#f '"invalid syntax" cy40f7@t)))) (if (memv cy40e1@t '(displaced-lexical)) (cy31a4@syntax-violation '#f '"identifier out of context" cy40c9@e) (if (memv cy40e1@t '(syntax)) (cy31a4@syntax-violation '#f '"reference to pattern variable outside a syntax form" cy40c9@e) (if (memv cy40e1@t '(define define-syntax module import library)) (cy31a4@syntax-violation '#f (string-append (let ((cy4115@t cy40dd@type)) (if (memv cy4115@t '(define)) '"a definition" (if (memv cy4115@t '(define-syntax)) '"a define-syntax" (if (memv cy4115@t '(module)) '"a module definition" (if (memv cy4115@t '(library)) '"a library definition" (if (memv cy4115@t '(import)) '"an import declaration" (if (memv cy4115@t '(export)) '"an export declaration" '"a non-expression"))))))) '" was found where an expression was expected") cy40c9@e) (if (memv cy40e1@t '(mutable)) (cy31a4@syntax-violation '#f '"attempt to reference an unexportable variable" cy40c9@e) (cy31a4@syntax-violation '#f '"invalid expression" cy40c9@e))))))))))))))))))))))) (set! cy4bab@cy30e6@chi-expr cy30e6@chi-expr) (set! cy30e8@chi-set! (lambda (cy4117@e cy4118@r cy4119@mr) (let ((cy411d@t cy4117@e)) (let ((cy411f@ls/false (cy30c4@syntax-dispatch cy411d@t '(_ any any)))) (if (and cy411f@ls/false (apply (lambda (cy4121@x cy4122@v) (cy2ebd@id? cy4121@x)) cy411f@ls/false)) (apply (lambda (cy4125@x cy4126@v) (call-with-values (lambda () (cy2edf@syntax-type cy4125@x cy4118@r)) (lambda (cy412f@cy412a cy4130@cy412c cy4131@cy412e) (let ((cy4135@kwd cy4131@cy412e) (cy4136@value cy4130@cy412c) (cy4137@type cy412f@cy412a)) (let ((cy413b@t cy4137@type)) (if (memv cy413b@t '(lexical)) (begin (cy3052@set-lexical-mutable! cy4136@value '#t) (list 'set! (cy304e@lexical-var cy4136@value) (cy30e6@chi-expr cy4126@v cy4118@r cy4119@mr))) (if (memv cy413b@t '(core-prim)) (cy31a4@syntax-violation '#f '"cannot modify imported core primitive" cy4117@e) (if (memv cy413b@t '(global)) (cy31a4@syntax-violation '#f '"attempt to modify imported binding" cy4117@e) (if (memv cy413b@t '(global-macro!)) (cy30e6@chi-expr (cy30e0@chi-global-macro cy4136@value cy4117@e) cy4118@r cy4119@mr) (if (memv cy413b@t '(local-macro!)) (cy30e6@chi-expr (cy30de@chi-local-macro cy4136@value cy4117@e) cy4118@r cy4119@mr) (if (memv cy413b@t '(mutable)) (cy31a4@syntax-violation '#f '"attempt to assign to an unexportable variable" cy4117@e) (cy31a4@syntax-violation '#f '"invalid syntax" cy4117@e)))))))))))) cy411f@ls/false) (cy31a4@syntax-violation '#f '"invalid syntax" cy411d@t)))))) (set! cy4bac@cy30e8@chi-set! cy30e8@chi-set!) (set! cy30ea@verify-formals (lambda (cy413d@fmls cy413e@stx) (let ((cy4141@t cy413d@fmls)) (let ((cy4143@ls/false (cy30c4@syntax-dispatch cy4141@t 'each-any))) (if cy4143@ls/false (apply (lambda (cy4145@x*) (if (not (cy2ec5@valid-bound-ids? cy4145@x*)) (cy307e@invalid-fmls-error cy413e@stx cy413d@fmls) (void))) cy4143@ls/false) (let ((cy4147@t cy4141@t)) (let ((cy4149@ls/false (cy30c4@syntax-dispatch cy4147@t '#(each+ any () any)))) (if cy4149@ls/false (apply (lambda (cy414b@x* cy414c@x) (if (not (cy2ec5@valid-bound-ids? (cons cy414c@x cy414b@x*))) (cy307e@invalid-fmls-error cy413e@stx cy413d@fmls) (void))) cy4149@ls/false) (let ((cy414f@t cy4147@t)) (let ((cy4151@ls/false (cy30c4@syntax-dispatch cy414f@t '_))) (if cy4151@ls/false (apply (lambda () (cy31a4@syntax-violation '#f '"invalid syntax" cy413e@stx)) cy4151@ls/false) (cy31a4@syntax-violation '#f '"invalid syntax" cy414f@t)))))))))))) (set! cy4bad@cy30ea@verify-formals cy30ea@verify-formals) (set! cy30ec@chi-lambda-clause (lambda (cy4153@stx cy4154@fmls cy4155@body* cy4156@r cy4157@mr) (let ((cy415d@t cy4154@fmls)) (let ((cy415f@ls/false (cy30c4@syntax-dispatch cy415d@t 'each-any))) (if cy415f@ls/false (apply (lambda (cy4161@x*) (begin (cy30ea@verify-formals cy4154@fmls cy4153@stx) (let ((cy4163@lex* (map cy2e45@gen-lexical cy4161@x*)) (cy4164@lab* (map cy2e49@gen-label cy4161@x*))) (values cy4163@lex* (cy30fc@chi-internal (cy2ea9@add-subst (cy2e7d@make-full-rib cy4161@x* cy4164@lab*) cy4155@body*) (cy3056@add-lexicals cy4164@lab* cy4163@lex* cy4156@r) cy4157@mr))))) cy415f@ls/false) (let ((cy4167@t cy415d@t)) (let ((cy4169@ls/false (cy30c4@syntax-dispatch cy4167@t '#(each+ any () any)))) (if cy4169@ls/false (apply (lambda (cy416b@x* cy416c@x) (begin (cy30ea@verify-formals cy4154@fmls cy4153@stx) (let ((cy416f@lex* (map cy2e45@gen-lexical cy416b@x*)) (cy4170@lab* (map cy2e49@gen-label cy416b@x*)) (cy4171@lex (cy2e45@gen-lexical cy416c@x)) (cy4172@lab (cy2e49@gen-label cy416c@x))) (values (append cy416f@lex* cy4171@lex) (cy30fc@chi-internal (cy2ea9@add-subst (cy2e7d@make-full-rib (cons cy416c@x cy416b@x*) (cons cy4172@lab cy4170@lab*)) cy4155@body*) (cy3056@add-lexicals (cons cy4172@lab cy4170@lab*) (cons cy4171@lex cy416f@lex*) cy4156@r) cy4157@mr))))) cy4169@ls/false) (let ((cy4177@t cy4167@t)) (let ((cy4179@ls/false (cy30c4@syntax-dispatch cy4177@t '_))) (if cy4179@ls/false (apply (lambda () (cy31a4@syntax-violation '#f '"invalid syntax" cy4154@fmls)) cy4179@ls/false) (cy31a4@syntax-violation '#f '"invalid syntax" cy4177@t)))))))))))) (set! cy4bae@cy30ec@chi-lambda-clause cy30ec@chi-lambda-clause) (set! cy30ee@chi-lambda-clause* (lambda (cy417b@stx cy417c@fmls* cy417d@body** cy417e@r cy417f@mr) (if (null? cy417c@fmls*) (values '() '()) (call-with-values (lambda () (cy30ec@chi-lambda-clause cy417b@stx (car cy417c@fmls*) (car cy417d@body**) cy417e@r cy417f@mr)) (lambda (cy4189@cy4186 cy418a@cy4188) (let ((cy418d@b cy418a@cy4188) (cy418e@a cy4189@cy4186)) (call-with-values (lambda () (cy30ee@chi-lambda-clause* cy417b@stx (cdr cy417c@fmls*) (cdr cy417d@body**) cy417e@r cy417f@mr)) (lambda (cy4195@cy4192 cy4196@cy4194) (let ((cy4199@b* cy4196@cy4194) (cy419a@a* cy4195@cy4192)) (values (cons cy418e@a cy419a@a*) (cons cy418d@b cy4199@b*))))))))))) (set! cy4baf@cy30ee@chi-lambda-clause* cy30ee@chi-lambda-clause*) (set! cy30f0@chi-defun (lambda (cy419d@x cy419e@r cy419f@mr) (let ((cy41a3@fmls (car cy419d@x)) (cy41a4@body* (cdr cy419d@x))) (call-with-values (lambda () (cy30ec@chi-lambda-clause cy41a3@fmls cy41a3@fmls cy41a4@body* cy419e@r cy419f@mr)) (lambda (cy41ab@cy41a8 cy41ac@cy41aa) (let ((cy41af@body cy41ac@cy41aa) (cy41b0@fmls cy41ab@cy41a8)) (cy2e20@cy2d4c@build-lambda '#f cy41b0@fmls cy41af@body))))))) (set! cy4bb0@cy30f0@chi-defun cy30f0@chi-defun) (set! cy30f2@chi-rhs (lambda (cy41b3@rhs cy41b4@r cy41b5@mr) (let ((cy41b9@t (car cy41b3@rhs))) (if (memv cy41b9@t '(defun)) (cy30f0@chi-defun (cdr cy41b3@rhs) cy41b4@r cy41b5@mr) (if (memv cy41b9@t '(expr)) (let ((cy41bb@expr (cdr cy41b3@rhs))) (cy30e6@chi-expr cy41bb@expr cy41b4@r cy41b5@mr)) (if (memv cy41b9@t '(top-expr)) (let ((cy41bd@expr (cdr cy41b3@rhs))) (cy2e22@cy2d7c@build-sequence '#f (list (cy30e6@chi-expr cy41bd@expr cy41b4@r cy41b5@mr) (cy2e23@cy2d7e@build-void)))) (assertion-violation 'chi-rhs '"BUG: invalid rhs" cy41b3@rhs))))))) (set! cy4bb1@cy30f2@chi-rhs cy30f2@chi-rhs) (set! cy30f4@expand-interaction-rhs*/init* (lambda (cy41bf@lhs* cy41c0@rhs* cy41c1@init* cy41c2@r cy41c3@mr) (let cy41cd@f ((cy41c9@lhs* cy41bf@lhs*) (cy41ca@rhs* cy41c0@rhs*)) (if (null? cy41c9@lhs*) (map (lambda (cy41cf@x) (cy30e6@chi-expr cy41cf@x cy41c2@r cy41c3@mr)) cy41c1@init*) (let ((cy41d1@lhs (car cy41c9@lhs*)) (cy41d2@rhs (car cy41ca@rhs*))) (let ((cy41d5@t (car cy41d2@rhs))) (if (memv cy41d5@t '(defun)) (let ((cy41d7@rhs (cy30f0@chi-defun (cdr cy41d2@rhs) cy41c2@r cy41c3@mr))) (cons (list 'set! cy41d1@lhs cy41d7@rhs) (cy41cd@f (cdr cy41c9@lhs*) (cdr cy41ca@rhs*)))) (if (memv cy41d5@t '(expr)) (let ((cy41d9@rhs (cy30e6@chi-expr (cdr cy41d2@rhs) cy41c2@r cy41c3@mr))) (cons (list 'set! cy41d1@lhs cy41d9@rhs) (cy41cd@f (cdr cy41c9@lhs*) (cdr cy41ca@rhs*)))) (if (memv cy41d5@t '(top-expr)) (let ((cy41db@e (cy30e6@chi-expr (cdr cy41d2@rhs) cy41c2@r cy41c3@mr))) (cons cy41db@e (cy41cd@f (cdr cy41c9@lhs*) (cdr cy41ca@rhs*)))) (error 'expand-interaction '"invallid" cy41d2@rhs)))))))))) (set! cy4bb2@cy30f4@expand-interaction-rhs*/init* cy30f4@expand-interaction-rhs*/init*) (set! cy30f6@chi-rhs* (lambda (cy41dd@rhs* cy41de@r cy41df@mr) (let cy41e5@f ((cy41e3@ls cy41dd@rhs*)) (if (null? cy41e3@ls) '() (let ((cy41e7@a (cy30f2@chi-rhs (car cy41e3@ls) cy41de@r cy41df@mr))) (cons cy41e7@a (cy41e5@f (cdr cy41e3@ls)))))))) (set! cy4bb3@cy30f6@chi-rhs* cy30f6@chi-rhs*) (set! cy30f8@find-bound=? (lambda (cy41e9@x cy41ea@lhs* cy41eb@rhs*) (if (null? cy41ea@lhs*) '#f (if (cy2ec1@bound-id=? cy41e9@x (car cy41ea@lhs*)) (car cy41eb@rhs*) (cy30f8@find-bound=? cy41e9@x (cdr cy41ea@lhs*) (cdr cy41eb@rhs*)))))) (set! cy4bb4@cy30f8@find-bound=? cy30f8@find-bound=?) (set! cy30fa@find-dups (lambda (cy41ef@ls) (let cy41f5@f ((cy41f1@ls cy41ef@ls) (cy41f2@dups '())) (if (null? cy41f1@ls) cy41f2@dups (let ((cy41f7@t (cy30f8@find-bound=? (car cy41f1@ls) (cdr cy41f1@ls) (cdr cy41f1@ls)))) (if cy41f7@t ((lambda (cy41f9@x) (cy41f5@f (cdr cy41f1@ls) (cons (list (car cy41f1@ls) cy41f9@x) cy41f2@dups))) cy41f7@t) (cy41f5@f (cdr cy41f1@ls) cy41f2@dups))))))) (set! cy4bb5@cy30fa@find-dups cy30fa@find-dups) (set! cy30fc@chi-internal (lambda (cy41fb@e* cy41fc@r cy41fd@mr) (let ((cy4201@rib (cy2e71@make-empty-rib))) (call-with-values (lambda () (cy311c@chi-body* (map (lambda (cy4213@x) (cy2ea9@add-subst cy4201@rib cy4213@x)) (cy2ebb@syntax->list cy41fb@e*)) cy41fc@r cy41fd@mr '() '() '() '() '() cy4201@rib '#f)) (lambda (cy4215@cy4204 cy4216@cy4206 cy4217@cy4208 cy4218@cy420a cy4219@cy420c cy421a@cy420e cy421b@cy4210 cy421c@cy4212) (let ((cy4225@_exp* cy421c@cy4212) (cy4226@kwd* cy421b@cy4210) (cy4227@mod** cy421a@cy420e) (cy4228@rhs* cy4219@cy420c) (cy4229@lex* cy4218@cy420a) (cy422a@mr cy4217@cy4208) (cy422b@r cy4216@cy4206) (cy422c@e* cy4215@cy4204)) (begin (if (null? cy422c@e*) (cy31a4@syntax-violation '#f '"no expression in body" cy422c@e*) (void)) (let ((cy4235@init* (cy30e2@chi-expr* (append (apply append (reverse cy4227@mod**)) cy422c@e*) cy422b@r cy422a@mr))) (let ((cy4237@rhs* (cy30f6@chi-rhs* cy4228@rhs* cy422b@r cy422a@mr))) (cy2e27@cy2d86@build-letrec* '#f (reverse cy4229@lex*) (reverse cy4237@rhs*) (cy2e22@cy2d7c@build-sequence '#f cy4235@init*))))))))))) (set! cy4bb6@cy30fc@chi-internal cy30fc@chi-internal) (set! cy30fe@parse-module (lambda (cy4239@e) (let ((cy423b@t cy4239@e)) (let ((cy423d@ls/false (cy30c4@syntax-dispatch cy423b@t '(_ each-any . each-any)))) (if cy423d@ls/false (apply (lambda (cy423f@export* cy4240@b*) (begin (if (not (for-all cy2ebd@id? cy423f@export*)) (cy31a4@syntax-violation '#f '"module exports must be identifiers" cy4239@e) (void)) (values '#f (list->vector cy423f@export*) cy4240@b*))) cy423d@ls/false) (let ((cy4243@t cy423b@t)) (let ((cy4245@ls/false (cy30c4@syntax-dispatch cy4243@t '(_ any each-any . each-any)))) (if cy4245@ls/false (apply (lambda (cy4247@name cy4248@export* cy4249@b*) (begin (if (not (cy2ebd@id? cy4247@name)) (cy31a4@syntax-violation '#f '"module name must be an identifier" cy4239@e) (void)) (if (not (for-all cy2ebd@id? cy4248@export*)) (cy31a4@syntax-violation '#f '"module exports must be identifiers" cy4239@e) (void)) (values cy4247@name (list->vector cy4248@export*) cy4249@b*))) cy4245@ls/false) (cy31a4@syntax-violation '#f '"invalid syntax" cy4243@t))))))))) (set! cy4bb7@cy30fe@parse-module cy30fe@parse-module) (set! cy3108@module-interface? (lambda (cy424d@x) (and (simple-struct? cy424d@x) (eq? (simple-struct-name cy424d@x) 'module-interface)))) (set! cy4bb8@cy3108@module-interface? cy3108@module-interface?) (set! cy310a@module-interface-first-mark (lambda (cy424f@x) (simple-struct-ref cy424f@x '0))) (set! cy4bb9@cy310a@module-interface-first-mark cy310a@module-interface-first-mark) (set! cy310c@set-module-interface-first-mark! (lambda (cy4251@x cy4252@val) (simple-struct-set! cy4251@x '0 cy4252@val))) (set! cy4bba@cy310c@set-module-interface-first-mark! cy310c@set-module-interface-first-mark!) (set! cy310e@module-interface-exp-id-vec (lambda (cy4255@x) (simple-struct-ref cy4255@x '1))) (set! cy4bbb@cy310e@module-interface-exp-id-vec cy310e@module-interface-exp-id-vec) (set! cy3110@set-module-interface-exp-id-vec! (lambda (cy4257@x cy4258@val) (simple-struct-set! cy4257@x '1 cy4258@val))) (set! cy4bbc@cy3110@set-module-interface-exp-id-vec! cy3110@set-module-interface-exp-id-vec!) (set! cy3112@module-interface-exp-lab-vec (lambda (cy425b@x) (simple-struct-ref cy425b@x '2))) (set! cy4bbd@cy3112@module-interface-exp-lab-vec cy3112@module-interface-exp-lab-vec) (set! cy3114@set-module-interface-exp-lab-vec! (lambda (cy425d@x cy425e@val) (simple-struct-set! cy425d@x '2 cy425e@val))) (set! cy4bbe@cy3114@set-module-interface-exp-lab-vec! cy3114@set-module-interface-exp-lab-vec!) (set! cy3116@dummy '3) (set! cy4bbf@cy3116@dummy cy3116@dummy) (set! cy3118@module-interface-exp-id* (lambda (cy4261@iface cy4262@id) (let ((cy4266@diff-marks '#f)) (begin (set! cy4266@diff-marks (lambda (cy426d@ls cy426e@x) (begin (if (null? cy426d@ls) (error 'diff-marks '"BUG: should not happen") (void)) (let ((cy4271@a (car cy426d@ls))) (if (eq? cy4271@a cy426e@x) '() (cons cy4271@a (cy4266@diff-marks (cdr cy426d@ls) cy426e@x))))))) (let ((cy4267@diff (cy4266@diff-marks (cy2e8f@stx-mark* cy4262@id) (cy310a@module-interface-first-mark cy4261@iface))) (cy4268@id-vec (cy310e@module-interface-exp-id-vec cy4261@iface))) (if (null? cy4267@diff) cy4268@id-vec (vector-map (lambda (cy426b@x) (make-simple-struct 'stx '5 (list (cy2e8b@stx-expr cy426b@x) (append cy4267@diff (cy2e8f@stx-mark* cy426b@x)) '() '()))) cy4268@id-vec))))))) (set! cy4bc0@cy3118@module-interface-exp-id* cy3118@module-interface-exp-id*) (set! cy311a@chi-internal-module (lambda (cy4273@e cy4274@r cy4275@mr cy4276@lex* cy4277@rhs* cy4278@mod** cy4279@kwd*) (call-with-values (lambda () (cy30fe@parse-module cy4273@e)) (lambda (cy4287@cy4282 cy4288@cy4284 cy4289@cy4286) (let ((cy428d@e* cy4289@cy4286) (cy428e@exp-id* cy4288@cy4284) (cy428f@name cy4287@cy4282)) (let ((cy4293@rib (cy2e71@make-empty-rib))) (let ((cy4295@e* (map (lambda (cy4297@x) (cy2ea9@add-subst cy4293@rib cy4297@x)) (cy2ebb@syntax->list cy428d@e*)))) (call-with-values (lambda () (cy311c@chi-body* cy4295@e* cy4274@r cy4275@mr cy4276@lex* cy4277@rhs* cy4278@mod** cy4279@kwd* '() cy4293@rib '#f)) (lambda (cy42a9@cy429a cy42aa@cy429c cy42ab@cy429e cy42ac@cy42a0 cy42ad@cy42a2 cy42ae@cy42a4 cy42af@cy42a6 cy42b0@cy42a8) (let ((cy42b9@_exp* cy42b0@cy42a8) (cy42ba@kwd* cy42af@cy42a6) (cy42bb@mod** cy42ae@cy42a4) (cy42bc@rhs* cy42ad@cy42a2) (cy42bd@lex* cy42ac@cy42a0) (cy42be@mr cy42ab@cy429e) (cy42bf@r cy42aa@cy429c) (cy42c0@e* cy42a9@cy429a)) (let ((cy42c9@exp-lab* (vector-map (lambda (cy42cd@x) (or (cy2ed3@id->label (make-simple-struct 'stx '5 (list (cy2ebf@id->sym cy42cd@x) (cy2e8f@stx-mark* cy42cd@x) (list cy4293@rib) '()))) (cy31a4@syntax-violation '#f '"cannot find module export" cy42cd@x))) cy428e@exp-id*)) (cy42ca@mod** (cons cy42c0@e* cy42bb@mod**))) (if (not cy428f@name) (values cy42bd@lex* cy42bc@rhs* cy428e@exp-id* cy42c9@exp-lab* cy42bf@r cy42be@mr cy42ca@mod** cy42ba@kwd*) (let ((cy42cf@lab (cy2e49@gen-label 'module)) (cy42d0@iface (make-simple-struct 'module-interface '4 (list (car (cy2e8f@stx-mark* cy428f@name)) (vector-map (lambda (cy42d3@x) (make-simple-struct 'stx '5 (list (cy2e8b@stx-expr cy42d3@x) (cy2e8f@stx-mark* cy42d3@x) '() '()))) cy428e@exp-id*) cy42c9@exp-lab*)))) (values cy42bd@lex* cy42bc@rhs* (vector cy428f@name) (vector cy42cf@lab) (cons (cons cy42cf@lab (cons '$module cy42d0@iface)) cy42bf@r) (cons (cons cy42cf@lab (cons '$module cy42d0@iface)) cy42be@mr) cy42ca@mod** cy42ba@kwd*)))))))))))))) (set! cy4bc1@cy311a@chi-internal-module cy311a@chi-internal-module) (set! cy311c@chi-body* (lambda (cy42d5@e* cy42d6@r cy42d7@mr cy42d8@lex* cy42d9@rhs* cy42da@mod** cy42db@kwd* cy42dc@exp* cy42dd@rib cy42de@top?) (if (null? cy42d5@e*) (values cy42d5@e* cy42d6@r cy42d7@mr cy42d8@lex* cy42d9@rhs* cy42da@mod** cy42db@kwd* cy42dc@exp*) (let ((cy42e9@e (car cy42d5@e*))) (call-with-values (lambda () (cy2edf@syntax-type cy42e9@e cy42d6@r)) (lambda (cy42f1@cy42ec cy42f2@cy42ee cy42f3@cy42f0) (let ((cy42f7@kwd cy42f3@cy42f0) (cy42f8@value cy42f2@cy42ee) (cy42f9@type cy42f1@cy42ec)) (let ((cy42fd@kwd* (if (cy2ebd@id? cy42f7@kwd) (cons cy42f7@kwd cy42db@kwd*) cy42db@kwd*))) (let ((cy42ff@t cy42f9@type)) (if (memv cy42ff@t '(define)) (call-with-values (lambda () (cy3046@parse-define cy42e9@e)) (lambda (cy4305@cy4302 cy4306@cy4304) (let ((cy4309@rhs cy4306@cy4304) (cy430a@id cy4305@cy4302)) (begin (if (cy2ec9@bound-id-member? cy430a@id cy42fd@kwd*) (cy31a4@syntax-violation '#f '"cannot redefine keyword" cy42e9@e) (void)) (call-with-values (lambda () (cy2e4d@gen-define-label+loc cy430a@id cy42dd@rib)) (lambda (cy4311@cy430e cy4312@cy4310) (let ((cy4315@lex cy4312@cy4310) (cy4316@lab cy4311@cy430e)) (begin (cy2e73@extend-rib! cy42dd@rib cy430a@id cy4316@lab) (cy311c@chi-body* (cdr cy42d5@e*) (cy3054@add-lexical cy4316@lab cy4315@lex cy42d6@r) cy42d7@mr (cons cy4315@lex cy42d8@lex*) (cons cy4309@rhs cy42d9@rhs*) cy42da@mod** cy42fd@kwd* cy42dc@exp* cy42dd@rib cy42de@top?))))))))) (if (memv cy42ff@t '(define-syntax)) (call-with-values (lambda () (cy3048@parse-define-syntax cy42e9@e)) (lambda (cy431d@cy431a cy431e@cy431c) (let ((cy4321@rhs cy431e@cy431c) (cy4322@id cy431d@cy431a)) (begin (if (cy2ec9@bound-id-member? cy4322@id cy42fd@kwd*) (cy31a4@syntax-violation '#f '"cannot redefine keyword" cy42e9@e) (void)) (let ((cy4325@lab (cy2e4f@gen-define-label cy4322@id cy42dd@rib)) (cy4326@expanded-rhs (cy311e@expand-transformer cy4321@rhs cy42d7@mr))) (begin (cy2e73@extend-rib! cy42dd@rib cy4322@id cy4325@lab) (let ((cy4329@b (cy2ef5@make-eval-transformer cy4326@expanded-rhs))) (cy311c@chi-body* (cdr cy42d5@e*) (cons (cons cy4325@lab cy4329@b) cy42d6@r) (cons (cons cy4325@lab cy4329@b) cy42d7@mr) cy42d8@lex* cy42d9@rhs* cy42da@mod** cy42fd@kwd* cy42dc@exp* cy42dd@rib cy42de@top?)))))))) (if (memv cy42ff@t '(let-syntax letrec-syntax)) (let ((cy432b@t cy42e9@e)) (let ((cy432d@ls/false (cy30c4@syntax-dispatch cy432b@t '(_ #(each (any any)) . each-any)))) (if (and cy432d@ls/false (apply (lambda (cy432f@xlhs* cy4330@xrhs* cy4331@xbody*) (if (not (cy2ec5@valid-bound-ids? cy432f@xlhs*)) (cy31a4@syntax-violation '#f '"invalid identifiers" cy42e9@e) (void))) cy432d@ls/false)) (apply (lambda (cy4335@xlhs* cy4336@xrhs* cy4337@xbody*) (let ((cy433b@xlab* (map cy2e49@gen-label cy4335@xlhs*))) (let ((cy433d@xrib (cy2e7d@make-full-rib cy4335@xlhs* cy433b@xlab*))) (let ((cy433f@xb* (map (lambda (cy4341@x) (cy2ef5@make-eval-transformer (cy311e@expand-transformer (if (eq? cy42f9@type 'let-syntax) cy4341@x (cy2ea9@add-subst cy433d@xrib cy4341@x)) cy42d7@mr))) cy4336@xrhs*))) (cy311c@chi-body* (append (map (lambda (cy4343@x) (cy2ea9@add-subst cy433d@xrib cy4343@x)) cy4337@xbody*) (cdr cy42d5@e*)) (append (map cons cy433b@xlab* cy433f@xb*) cy42d6@r) (append (map cons cy433b@xlab* cy433f@xb*) cy42d7@mr) cy42d8@lex* cy42d9@rhs* cy42da@mod** cy42fd@kwd* cy42dc@exp* cy42dd@rib cy42de@top?))))) cy432d@ls/false) (cy31a4@syntax-violation '#f '"invalid syntax" cy432b@t)))) (if (memv cy42ff@t '(begin)) (let ((cy4345@t cy42e9@e)) (let ((cy4347@ls/false (cy30c4@syntax-dispatch cy4345@t '(_ . each-any)))) (if cy4347@ls/false (apply (lambda (cy4349@x*) (cy311c@chi-body* (append cy4349@x* (cdr cy42d5@e*)) cy42d6@r cy42d7@mr cy42d8@lex* cy42d9@rhs* cy42da@mod** cy42fd@kwd* cy42dc@exp* cy42dd@rib cy42de@top?)) cy4347@ls/false) (cy31a4@syntax-violation '#f '"invalid syntax" cy4345@t)))) (if (memv cy42ff@t '(global-macro global-macro!)) (cy311c@chi-body* (cons (cy2ea9@add-subst cy42dd@rib (cy30e0@chi-global-macro cy42f8@value cy42e9@e)) (cdr cy42d5@e*)) cy42d6@r cy42d7@mr cy42d8@lex* cy42d9@rhs* cy42da@mod** cy42fd@kwd* cy42dc@exp* cy42dd@rib cy42de@top?) (if (memv cy42ff@t '(local-macro local-macro!)) (cy311c@chi-body* (cons (cy2ea9@add-subst cy42dd@rib (cy30de@chi-local-macro cy42f8@value cy42e9@e)) (cdr cy42d5@e*)) cy42d6@r cy42d7@mr cy42d8@lex* cy42d9@rhs* cy42da@mod** cy42fd@kwd* cy42dc@exp* cy42dd@rib cy42de@top?) (if (memv cy42ff@t '(macro macro!)) (cy311c@chi-body* (cons (cy2ea9@add-subst cy42dd@rib (cy30dc@chi-macro cy42f8@value cy42e9@e)) (cdr cy42d5@e*)) cy42d6@r cy42d7@mr cy42d8@lex* cy42d9@rhs* cy42da@mod** cy42fd@kwd* cy42dc@exp* cy42dd@rib cy42de@top?) (if (memv cy42ff@t '(module)) (call-with-values (lambda () (cy311a@chi-internal-module cy42e9@e cy42d6@r cy42d7@mr cy42d8@lex* cy42d9@rhs* cy42da@mod** cy42fd@kwd*)) (lambda (cy435b@cy434c cy435c@cy434e cy435d@cy4350 cy435e@cy4352 cy435f@cy4354 cy4360@cy4356 cy4361@cy4358 cy4362@cy435a) (let ((cy436b@kwd* cy4362@cy435a) (cy436c@mod** cy4361@cy4358) (cy436d@mr cy4360@cy4356) (cy436e@r cy435f@cy4354) (cy436f@m-exp-lab* cy435e@cy4352) (cy4370@m-exp-id* cy435d@cy4350) (cy4371@rhs* cy435c@cy434e) (cy4372@lex* cy435b@cy434c)) (begin (vector-for-each (lambda (cy437b@id cy437c@lab) (cy2e73@extend-rib! cy42dd@rib cy437b@id cy437c@lab)) cy4370@m-exp-id* cy436f@m-exp-lab*) (cy311c@chi-body* (cdr cy42d5@e*) cy436e@r cy436d@mr cy4372@lex* cy4371@rhs* cy436c@mod** cy436b@kwd* cy42dc@exp* cy42dd@rib cy42de@top?))))) (if (memv cy42ff@t '(library)) (begin (cy3186@library-expander (cy2ed1@stx->datum cy42e9@e)) (cy311c@chi-body* (cdr cy42d5@e*) cy42d6@r cy42d7@mr cy42d8@lex* cy42d9@rhs* cy42da@mod** cy42fd@kwd* cy42dc@exp* cy42dd@rib cy42de@top?)) (if (memv cy42ff@t '(export)) (let ((cy437f@t cy42e9@e)) (let ((cy4381@ls/false (cy30c4@syntax-dispatch cy437f@t '(_ . each-any)))) (if cy4381@ls/false (apply (lambda (cy4383@exp-decl*) (cy311c@chi-body* (cdr cy42d5@e*) cy42d6@r cy42d7@mr cy42d8@lex* cy42d9@rhs* cy42da@mod** cy42fd@kwd* (append cy4383@exp-decl* cy42dc@exp*) cy42dd@rib cy42de@top?)) cy4381@ls/false) (cy31a4@syntax-violation '#f '"invalid syntax" cy437f@t)))) (if (memv cy42ff@t '(import)) (let ((cy4386@module-import? '#f) (cy4388@module-import '#f) (cy438a@library-import '#f)) (begin (set! cy4386@module-import? (lambda (cy43d9@e) (let ((cy43db@t cy43d9@e)) (let ((cy43dd@ls/false (cy30c4@syntax-dispatch cy43db@t '(_ any)))) (if (and cy43dd@ls/false (apply (lambda (cy43df@id) (cy2ebd@id? cy43df@id)) cy43dd@ls/false)) (apply (lambda (cy43e1@id) '#t) cy43dd@ls/false) (let ((cy43e3@t cy43db@t)) (let ((cy43e5@ls/false (cy30c4@syntax-dispatch cy43e3@t '(_ . each-any)))) (if cy43e5@ls/false (apply (lambda (cy43e7@imp*) '#f) cy43e5@ls/false) (let ((cy43e9@t cy43e3@t)) (let ((cy43eb@ls/false (cy30c4@syntax-dispatch cy43e9@t '_))) (if cy43eb@ls/false (apply (lambda () (cy31a4@syntax-violation '#f '"malformed import form" cy43d9@e)) cy43eb@ls/false) (cy31a4@syntax-violation '#f '"invalid syntax" cy43e9@t)))))))))))) (set! cy4388@module-import (lambda (cy43b7@e cy43b8@r) (let ((cy43bb@t cy43b7@e)) (let ((cy43bd@ls/false (cy30c4@syntax-dispatch cy43bb@t '(_ any)))) (if (and cy43bd@ls/false (apply (lambda (cy43bf@id) (cy2ebd@id? cy43bf@id)) cy43bd@ls/false)) (apply (lambda (cy43c1@id) (call-with-values (lambda () (cy2edf@syntax-type cy43c1@id cy43b8@r)) (lambda (cy43c9@cy43c4 cy43ca@cy43c6 cy43cb@cy43c8) (let ((cy43cf@kwd cy43cb@cy43c8) (cy43d0@value cy43ca@cy43c6) (cy43d1@type cy43c9@cy43c4)) (let ((cy43d5@t cy43d1@type)) (if (memv cy43d5@t '($module)) (let ((cy43d7@iface cy43d0@value)) (values (cy3118@module-interface-exp-id* cy43d7@iface cy43c1@id) (cy3112@module-interface-exp-lab-vec cy43d7@iface))) (cy31a4@syntax-violation '#f '"invalid import" cy43b7@e))))))) cy43bd@ls/false) (cy31a4@syntax-violation '#f '"invalid syntax" cy43bb@t)))))) (set! cy438a@library-import (lambda (cy439b@e) (let ((cy439d@t cy439b@e)) (let ((cy439f@ls/false (cy30c4@syntax-dispatch cy439d@t '(any . each-any)))) (if cy439f@ls/false (apply (lambda (cy43a1@ctxt cy43a2@imp*) (call-with-values (lambda () (cy3126@parse-import-spec* (cy31aa@syntax->datum cy43a2@imp*))) (lambda (cy43a9@cy43a6 cy43aa@cy43a8) (let ((cy43ad@subst-labels cy43aa@cy43a8) (cy43ae@subst-names cy43a9@cy43a6)) (values (vector-map (lambda (cy43b1@name) (cy2e9d@datum->stx cy43a1@ctxt cy43b1@name)) cy43ae@subst-names) cy43ad@subst-labels))))) cy439f@ls/false) (let ((cy43b3@t cy439d@t)) (let ((cy43b5@ls/false (cy30c4@syntax-dispatch cy43b3@t '_))) (if cy43b5@ls/false (apply (lambda () (cy31a4@syntax-violation '#f '"invalid import form" cy439b@e)) cy43b5@ls/false) (cy31a4@syntax-violation '#f '"invalid syntax" cy43b3@t))))))))) (begin (call-with-values (lambda () (if (cy4386@module-import? cy42e9@e) (cy4388@module-import cy42e9@e cy42d6@r) (cy438a@library-import cy42e9@e))) (lambda (cy438f@cy438c cy4390@cy438e) (let ((cy4393@lab* cy4390@cy438e) (cy4394@id* cy438f@cy438c)) (vector-for-each (lambda (cy4397@id cy4398@lab) (cy2e73@extend-rib! cy42dd@rib cy4397@id cy4398@lab)) cy4394@id* cy4393@lab*)))) (cy311c@chi-body* (cdr cy42d5@e*) cy42d6@r cy42d7@mr cy42d8@lex* cy42d9@rhs* cy42da@mod** cy42fd@kwd* cy42dc@exp* cy42dd@rib cy42de@top?)))) (if cy42de@top? (cy311c@chi-body* (cdr cy42d5@e*) cy42d6@r cy42d7@mr (cons (cy2e45@gen-lexical 'dummy) cy42d8@lex*) (cons (cons 'top-expr cy42e9@e) cy42d9@rhs*) cy42da@mod** cy42fd@kwd* cy42dc@exp* cy42dd@rib cy42de@top?) (values cy42d5@e* cy42d6@r cy42d7@mr cy42d8@lex* cy42d9@rhs* cy42da@mod** cy42fd@kwd* cy42dc@exp*)))))))))))))))))))))) (set! cy4bc2@cy311c@chi-body* cy311c@chi-body*) (set! cy311e@expand-transformer (lambda (cy43ed@expr cy43ee@r) (let ((cy43f1@rtc (cy312a@make-collector))) (let ((cy43f3@expanded-rhs (let ((cy43fd@cy43f6 cy312c@inv-collector) (cy43fe@cy43f8 cy312e@vis-collector) (cy43ff@cy43fa cy43f1@rtc) (cy4400@cy43fc (lambda (cy4405@x) (values)))) (let ((cy4407@swap (lambda () (begin (let ((cy4409@t (cy43fd@cy43f6))) (begin (cy43fd@cy43f6 cy43ff@cy43fa) (set! cy43ff@cy43fa cy4409@t))) (let ((cy440b@t (cy43fe@cy43f8))) (begin (cy43fe@cy43f8 cy4400@cy43fc) (set! cy4400@cy43fc cy440b@t))))))) (dynamic-wind cy4407@swap (lambda () (cy30e6@chi-expr cy43ed@expr cy43ee@r cy43ee@r)) cy4407@swap))))) (begin (for-each (let ((cy440d@mark-visit (cy312e@vis-collector))) (lambda (cy440f@x) (begin (cy2cd3@cy2b21@invoke-library cy440f@x) (cy440d@mark-visit cy440f@x)))) (cy43f1@rtc)) cy43f3@expanded-rhs))))) (set! cy4bc3@cy311e@expand-transformer cy311e@expand-transformer) (set! cy3120@parse-exports (lambda (cy4411@exp*) (let cy4419@f ((cy4413@exp* cy4411@exp*) (cy4414@int* '()) (cy4415@ext* '())) (if (null? cy4413@exp*) (begin (if (not (cy2ec5@valid-bound-ids? cy4415@ext*)) (cy31a4@syntax-violation 'export '"invalid exports" (cy30fa@find-dups cy4415@ext*)) (void)) (values (map cy31aa@syntax->datum cy4415@ext*) cy4414@int*)) (let ((cy441b@t (car cy4413@exp*))) (let ((cy441d@ls/false (cy30c4@syntax-dispatch cy441b@t '(any . #(each (any any)))))) (if cy441d@ls/false (apply (lambda (cy441f@rename cy4420@i* cy4421@e*) (begin (if (not (and (eq? (cy31aa@syntax->datum cy441f@rename) 'rename) (for-all cy2ebd@id? cy4420@i*) (for-all cy2ebd@id? cy4421@e*))) (cy31a4@syntax-violation 'export '"invalid export specifier" (car cy4413@exp*)) (void)) (cy4419@f (cdr cy4413@exp*) (append cy4420@i* cy4414@int*) (append cy4421@e* cy4415@ext*)))) cy441d@ls/false) (let ((cy4425@t cy441b@t)) (let ((cy4427@ls/false (cy30c4@syntax-dispatch cy4425@t 'any))) (if cy4427@ls/false (apply (lambda (cy4429@ie) (begin (if (not (cy2ebd@id? cy4429@ie)) (cy31a4@syntax-violation 'export '"invalid export" cy4429@ie) (void)) (cy4419@f (cdr cy4413@exp*) (cons cy4429@ie cy4414@int*) (cons cy4429@ie cy4415@ext*)))) cy4427@ls/false) (cy31a4@syntax-violation '#f '"invalid syntax" cy4425@t))))))))))) (set! cy4bc4@cy3120@parse-exports cy3120@parse-exports) (set! cy3122@parse-library-name (lambda (cy442b@spec) (let ((cy442e@parse '#f)) (begin (set! cy442e@parse (lambda (cy443b@x) (let ((cy443d@t cy443b@x)) (let ((cy443f@ls/false (cy30c4@syntax-dispatch cy443d@t '(each-any)))) (if (and cy443f@ls/false (apply (lambda (cy4441@v*) (for-all (lambda (cy4443@x) (let ((cy4445@x (cy31aa@syntax->datum cy4443@x))) (and (integer? cy4445@x) (exact? cy4445@x)))) cy4441@v*)) cy443f@ls/false)) (apply (lambda (cy4447@v*) (values '() (map cy31aa@syntax->datum cy4447@v*))) cy443f@ls/false) (let ((cy4449@t cy443d@t)) (let ((cy444b@ls/false (cy30c4@syntax-dispatch cy4449@t '(any . any)))) (if (and cy444b@ls/false (apply (lambda (cy444d@x cy444e@rest) (symbol? (cy31aa@syntax->datum cy444d@x))) cy444b@ls/false)) (apply (lambda (cy4451@x cy4452@rest) (call-with-values (lambda () (cy442e@parse cy4452@rest)) (lambda (cy4459@cy4456 cy445a@cy4458) (let ((cy445d@v* cy445a@cy4458) (cy445e@x* cy4459@cy4456)) (values (cons (cy31aa@syntax->datum cy4451@x) cy445e@x*) cy445d@v*))))) cy444b@ls/false) (let ((cy4461@t cy4449@t)) (let ((cy4463@ls/false (cy30c4@syntax-dispatch cy4461@t '()))) (if cy4463@ls/false (apply (lambda () (values '() '())) cy4463@ls/false) (let ((cy4465@t cy4461@t)) (let ((cy4467@ls/false (cy30c4@syntax-dispatch cy4465@t '_))) (if cy4467@ls/false (apply (lambda () (cy31a4@syntax-violation '#f '"invalid library name" cy442b@spec)) cy4467@ls/false) (cy31a4@syntax-violation '#f '"invalid syntax" cy4465@t))))))))))))))) (call-with-values (lambda () (cy442e@parse cy442b@spec)) (lambda (cy4433@cy4430 cy4434@cy4432) (let ((cy4437@ver* cy4434@cy4432) (cy4438@name* cy4433@cy4430)) (begin (if (null? cy4438@name*) (cy31a4@syntax-violation '#f '"empty library name" cy442b@spec) (void)) (values cy4438@name* cy4437@ver*))))))))) (set! cy4bc5@cy3122@parse-library-name cy3122@parse-library-name) (set! cy3124@parse-library (lambda (cy4469@e) (let ((cy446b@t cy4469@e)) (let ((cy446d@ls/false (cy30c4@syntax-dispatch cy446b@t '(any each-any (any . each-any) (any . each-any) . each-any)))) (if (and cy446d@ls/false (apply (lambda (cy446f@library cy4470@name* cy4471@export cy4472@exp* cy4473@import cy4474@imp* cy4475@b*) (and (eq? (cy31aa@syntax->datum cy4471@export) 'export) (eq? (cy31aa@syntax->datum cy4473@import) 'import) (eq? (cy31aa@syntax->datum cy446f@library) 'library))) cy446d@ls/false)) (apply (lambda (cy447d@library cy447e@name* cy447f@export cy4480@exp* cy4481@import cy4482@imp* cy4483@b*) (values cy447e@name* cy4480@exp* cy4482@imp* cy4483@b*)) cy446d@ls/false) (let ((cy448b@t cy446b@t)) (let ((cy448d@ls/false (cy30c4@syntax-dispatch cy448b@t '_))) (if cy448d@ls/false (apply (lambda () (cy31a4@syntax-violation '#f '"malformed library" cy4469@e)) cy448d@ls/false) (cy31a4@syntax-violation '#f '"invalid syntax" cy448b@t))))))))) (set! cy4bc6@cy3124@parse-library cy3124@parse-library) (set! cy3126@parse-import-spec* (let ((cy4490@idsyn? '#f) (cy4492@dup-error '#f) (cy4494@merge-substs '#f) (cy4496@exclude* '#f) (cy4498@find* '#f) (cy449a@rem* '#f) (cy449c@remove-dups '#f) (cy449e@parse-library-name '#f) (cy44a0@import-library '#f) (cy44a2@get-import '#f) (cy44a4@add-imports! '#f)) (begin (set! cy4490@idsyn? (lambda (cy4699@x) (symbol? (cy31aa@syntax->datum cy4699@x)))) (set! cy4492@dup-error (lambda (cy4697@name) (cy31a4@syntax-violation 'import '"two imports with different bindings" cy4697@name))) (set! cy4494@merge-substs (lambda (cy4685@s cy4686@subst) (let ((cy468a@insert-to-subst '#f)) (begin (set! cy468a@insert-to-subst (lambda (cy468b@a cy468c@subst) (let ((cy468f@name (car cy468b@a)) (cy4690@label (cdr cy468b@a))) (let ((cy4693@t (assq cy468f@name cy468c@subst))) (if cy4693@t ((lambda (cy4695@x) (if (eq? (cdr cy4695@x) cy4690@label) cy468c@subst (cy4492@dup-error cy468f@name))) cy4693@t) (cons cy468b@a cy468c@subst)))))) (if (null? cy4685@s) cy4686@subst (cy468a@insert-to-subst (car cy4685@s) (cy4494@merge-substs (cdr cy4685@s) cy4686@subst))))))) (set! cy4496@exclude* (lambda (cy4655@sym* cy4656@subst) (let ((cy465a@exclude '#f)) (begin (set! cy465a@exclude (lambda (cy4673@sym cy4674@subst) (if (null? cy4674@subst) (cy31a4@syntax-violation 'import '"cannot rename unbound identifier" cy4673@sym) (if (eq? cy4673@sym (caar cy4674@subst)) (values (cdar cy4674@subst) (cdr cy4674@subst)) (let ((cy4677@a (car cy4674@subst))) (call-with-values (lambda () (cy465a@exclude cy4673@sym (cdr cy4674@subst))) (lambda (cy467d@cy467a cy467e@cy467c) (let ((cy4681@subst cy467e@cy467c) (cy4682@old cy467d@cy467a)) (values cy4682@old (cons cy4677@a cy4681@subst)))))))))) (if (null? cy4655@sym*) (values '() cy4656@subst) (call-with-values (lambda () (cy465a@exclude (car cy4655@sym*) cy4656@subst)) (lambda (cy465f@cy465c cy4660@cy465e) (let ((cy4663@subst cy4660@cy465e) (cy4664@old cy465f@cy465c)) (call-with-values (lambda () (cy4496@exclude* (cdr cy4655@sym*) cy4663@subst)) (lambda (cy466b@cy4668 cy466c@cy466a) (let ((cy466f@subst cy466c@cy466a) (cy4670@old* cy466b@cy4668)) (values (cons cy4664@old cy4670@old*) cy466f@subst)))))))))))) (set! cy4498@find* (lambda (cy464d@sym* cy464e@subst) (map (lambda (cy4651@x) (let ((cy4653@t (assq cy4651@x cy464e@subst))) (if cy4653@t (cdr cy4653@t) (cy31a4@syntax-violation 'import '"cannot find identifier" cy4651@x)))) cy464d@sym*))) (set! cy449a@rem* (lambda (cy4645@sym* cy4646@subst) (let cy464b@f ((cy4649@subst cy4646@subst)) (if (null? cy4649@subst) '() (if (memq (caar cy4649@subst) cy4645@sym*) (cy464b@f (cdr cy4649@subst)) (cons (car cy4649@subst) (cy464b@f (cdr cy4649@subst)))))))) (set! cy449c@remove-dups (lambda (cy4643@ls) (if (null? cy4643@ls) '() (if (memq (car cy4643@ls) (cdr cy4643@ls)) (cy449c@remove-dups (cdr cy4643@ls)) (cons (car cy4643@ls) (cy449c@remove-dups (cdr cy4643@ls))))))) (set! cy449e@parse-library-name (lambda (cy455b@spec) (let ((cy455e@subversion? '#f) (cy4560@subversion-pred '#f) (cy4562@version-pred '#f)) (begin (set! cy455e@subversion? (lambda (cy463f@x) (let ((cy4641@x (cy31aa@syntax->datum cy463f@x))) (and (integer? cy4641@x) (exact? cy4641@x) (>= cy4641@x '0))))) (set! cy4560@subversion-pred (lambda (cy45df@x*) (let ((cy45e1@t cy45df@x*)) (let ((cy45e3@ls/false (cy30c4@syntax-dispatch cy45e1@t 'any))) (if (and cy45e3@ls/false (apply (lambda (cy45e5@n) (cy455e@subversion? cy45e5@n)) cy45e3@ls/false)) (apply (lambda (cy45e7@n) (lambda (cy45e9@x) (= cy45e9@x (cy31aa@syntax->datum cy45e7@n)))) cy45e3@ls/false) (let ((cy45eb@t cy45e1@t)) (let ((cy45ed@ls/false (cy30c4@syntax-dispatch cy45eb@t '(any . each-any)))) (if (and cy45ed@ls/false (apply (lambda (cy45ef@p? cy45f0@sub*) (eq? (cy31aa@syntax->datum cy45ef@p?) 'and)) cy45ed@ls/false)) (apply (lambda (cy45f3@p? cy45f4@sub*) (let ((cy45f7@p* (map cy4560@subversion-pred cy45f4@sub*))) (lambda (cy45f9@x) (for-all (lambda (cy45fb@p) (cy45fb@p cy45f9@x)) cy45f7@p*)))) cy45ed@ls/false) (let ((cy45fd@t cy45eb@t)) (let ((cy45ff@ls/false (cy30c4@syntax-dispatch cy45fd@t '(any . each-any)))) (if (and cy45ff@ls/false (apply (lambda (cy4601@p? cy4602@sub*) (eq? (cy31aa@syntax->datum cy4601@p?) 'or)) cy45ff@ls/false)) (apply (lambda (cy4605@p? cy4606@sub*) (let ((cy4609@p* (map cy4560@subversion-pred cy4606@sub*))) (lambda (cy460b@x) (exists (lambda (cy460d@p) (cy460d@p cy460b@x)) cy4609@p*)))) cy45ff@ls/false) (let ((cy460f@t cy45fd@t)) (let ((cy4611@ls/false (cy30c4@syntax-dispatch cy460f@t '(any any)))) (if (and cy4611@ls/false (apply (lambda (cy4613@p? cy4614@sub) (eq? (cy31aa@syntax->datum cy4613@p?) 'not)) cy4611@ls/false)) (apply (lambda (cy4617@p? cy4618@sub) (let ((cy461b@p (cy4560@subversion-pred cy4618@sub))) (lambda (cy461d@x) (not (cy461b@p cy461d@x))))) cy4611@ls/false) (let ((cy461f@t cy460f@t)) (let ((cy4621@ls/false (cy30c4@syntax-dispatch cy461f@t '(any any)))) (if (and cy4621@ls/false (apply (lambda (cy4623@p? cy4624@n) (and (eq? (cy31aa@syntax->datum cy4623@p?) '<=) (cy455e@subversion? cy4624@n))) cy4621@ls/false)) (apply (lambda (cy4627@p? cy4628@n) (lambda (cy462b@x) (<= cy462b@x (cy31aa@syntax->datum cy4628@n)))) cy4621@ls/false) (let ((cy462d@t cy461f@t)) (let ((cy462f@ls/false (cy30c4@syntax-dispatch cy462d@t '(any any)))) (if (and cy462f@ls/false (apply (lambda (cy4631@p? cy4632@n) (and (eq? (cy31aa@syntax->datum cy4631@p?) '>=) (cy455e@subversion? cy4632@n))) cy462f@ls/false)) (apply (lambda (cy4635@p? cy4636@n) (lambda (cy4639@x) (>= cy4639@x (cy31aa@syntax->datum cy4636@n)))) cy462f@ls/false) (let ((cy463b@t cy462d@t)) (let ((cy463d@ls/false (cy30c4@syntax-dispatch cy463b@t '_))) (if cy463d@ls/false (apply (lambda () (cy31a4@syntax-violation 'import '"invalid sub-version spec" cy455b@spec cy45df@x*)) cy463d@ls/false) (cy31a4@syntax-violation '#f '"invalid syntax" cy463b@t)))))))))))))))))))))))) (set! cy4562@version-pred (lambda (cy458f@x*) (let ((cy4591@t cy458f@x*)) (let ((cy4593@ls/false (cy30c4@syntax-dispatch cy4591@t '()))) (if cy4593@ls/false (apply (lambda () (lambda (cy4595@x) '#t)) cy4593@ls/false) (let ((cy4597@t cy4591@t)) (let ((cy4599@ls/false (cy30c4@syntax-dispatch cy4597@t '(any . each-any)))) (if (and cy4599@ls/false (apply (lambda (cy459b@c cy459c@ver*) (eq? (cy31aa@syntax->datum cy459b@c) 'and)) cy4599@ls/false)) (apply (lambda (cy459f@c cy45a0@ver*) (let ((cy45a3@p* (map cy4562@version-pred cy45a0@ver*))) (lambda (cy45a5@x) (for-all (lambda (cy45a7@p) (cy45a7@p cy45a5@x)) cy45a3@p*)))) cy4599@ls/false) (let ((cy45a9@t cy4597@t)) (let ((cy45ab@ls/false (cy30c4@syntax-dispatch cy45a9@t '(any . each-any)))) (if (and cy45ab@ls/false (apply (lambda (cy45ad@c cy45ae@ver*) (eq? (cy31aa@syntax->datum cy45ad@c) 'or)) cy45ab@ls/false)) (apply (lambda (cy45b1@c cy45b2@ver*) (let ((cy45b5@p* (map cy4562@version-pred cy45b2@ver*))) (lambda (cy45b7@x) (exists (lambda (cy45b9@p) (cy45b9@p cy45b7@x)) cy45b5@p*)))) cy45ab@ls/false) (let ((cy45bb@t cy45a9@t)) (let ((cy45bd@ls/false (cy30c4@syntax-dispatch cy45bb@t '(any any)))) (if (and cy45bd@ls/false (apply (lambda (cy45bf@c cy45c0@ver) (eq? (cy31aa@syntax->datum cy45bf@c) 'not)) cy45bd@ls/false)) (apply (lambda (cy45c3@c cy45c4@ver) (let ((cy45c7@p (cy4562@version-pred cy45c4@ver))) (lambda (cy45c9@x) (not (cy45c7@p cy45c9@x))))) cy45bd@ls/false) (let ((cy45cb@t cy45bb@t)) (let ((cy45cd@ls/false (cy30c4@syntax-dispatch cy45cb@t 'each-any))) (if cy45cd@ls/false (apply (lambda (cy45cf@sub*) (let ((cy45d1@p* (map cy4560@subversion-pred cy45cf@sub*))) (lambda (cy45d3@x) (let cy45d9@f ((cy45d5@p* cy45d1@p*) (cy45d6@x cy45d3@x)) (if (null? cy45d5@p*) '#t (if (null? cy45d6@x) '#f (and ((car cy45d5@p*) (car cy45d6@x)) (cy45d9@f (cdr cy45d5@p*) (cdr cy45d6@x))))))))) cy45cd@ls/false) (let ((cy45db@t cy45cb@t)) (let ((cy45dd@ls/false (cy30c4@syntax-dispatch cy45db@t '_))) (if cy45dd@ls/false (apply (lambda () (cy31a4@syntax-violation 'import '"invalid version spec" cy455b@spec cy458f@x*)) cy45dd@ls/false) (cy31a4@syntax-violation '#f '"invalid syntax" cy45db@t))))))))))))))))))))) (let cy4565@f ((cy4563@x cy455b@spec)) (let ((cy4567@t cy4563@x)) (let ((cy4569@ls/false (cy30c4@syntax-dispatch cy4567@t '(each-any)))) (if cy4569@ls/false (apply (lambda (cy456b@version-spec*) (values '() (cy4562@version-pred cy456b@version-spec*))) cy4569@ls/false) (let ((cy456d@t cy4567@t)) (let ((cy456f@ls/false (cy30c4@syntax-dispatch cy456d@t '(any . any)))) (if (and cy456f@ls/false (apply (lambda (cy4571@x cy4572@x*) (cy4490@idsyn? cy4571@x)) cy456f@ls/false)) (apply (lambda (cy4575@x cy4576@x*) (call-with-values (lambda () (cy4565@f cy4576@x*)) (lambda (cy457d@cy457a cy457e@cy457c) (let ((cy4581@pred cy457e@cy457c) (cy4582@name cy457d@cy457a)) (values (cons (cy31aa@syntax->datum cy4575@x) cy4582@name) cy4581@pred))))) cy456f@ls/false) (let ((cy4585@t cy456d@t)) (let ((cy4587@ls/false (cy30c4@syntax-dispatch cy4585@t '()))) (if cy4587@ls/false (apply (lambda () (values '() (lambda (cy4589@x) '#t))) cy4587@ls/false) (let ((cy458b@t cy4585@t)) (let ((cy458d@ls/false (cy30c4@syntax-dispatch cy458b@t '_))) (if cy458d@ls/false (apply (lambda () (cy31a4@syntax-violation '#f '"invalid import spec" cy455b@spec)) cy458d@ls/false) (cy31a4@syntax-violation '#f '"invalid syntax" cy458b@t)))))))))))))))))) (set! cy44a0@import-library (lambda (cy454b@spec*) (call-with-values (lambda () (cy449e@parse-library-name cy454b@spec*)) (lambda (cy4551@cy454e cy4552@cy4550) (let ((cy4555@pred cy4552@cy4550) (cy4556@name cy4551@cy454e)) (begin (if (null? cy4556@name) (cy31a4@syntax-violation 'import '"empty library name" cy454b@spec*) (void)) (let ((cy4559@lib (cy2ccc@cy2b13@find-library-by-name cy4556@name))) (begin (if (not cy4559@lib) (cy31a4@syntax-violation 'import '"cannot find library with required name" cy4556@name) (void)) (if (not (cy4555@pred (cy2ca6@cy2ac7@library-version cy4559@lib))) (cy31a4@syntax-violation 'import '"library does not satisfy version specification" cy454b@spec* cy4559@lib) (void)) ((cy3130@imp-collector) cy4559@lib) (cy2cae@cy2ad7@library-subst cy4559@lib))))))))) (set! cy44a2@get-import (lambda (cy44bd@spec) (let ((cy44bf@t cy44bd@spec)) (let ((cy44c1@ls/false (cy30c4@syntax-dispatch cy44bf@t '(any . each-any)))) (if (and cy44c1@ls/false (apply (lambda (cy44c3@x cy44c4@x*) (not (memq (cy31aa@syntax->datum cy44c3@x) '(for rename except only prefix library)))) cy44c1@ls/false)) (apply (lambda (cy44c7@x cy44c8@x*) (cy44a0@import-library (cons cy44c7@x cy44c8@x*))) cy44c1@ls/false) (let ((cy44cb@t cy44bf@t)) (let ((cy44cd@ls/false (cy30c4@syntax-dispatch cy44cb@t '(any any . #(each (any any)))))) (if (and cy44cd@ls/false (apply (lambda (cy44cf@rename cy44d0@isp cy44d1@old* cy44d2@new*) (and (eq? (cy31aa@syntax->datum cy44cf@rename) 'rename) (for-all cy4490@idsyn? cy44d1@old*) (for-all cy4490@idsyn? cy44d2@new*))) cy44cd@ls/false)) (apply (lambda (cy44d7@rename cy44d8@isp cy44d9@old* cy44da@new*) (let ((cy44df@subst (cy44a2@get-import cy44d8@isp)) (cy44e0@old* (map cy31aa@syntax->datum cy44d9@old*)) (cy44e1@new* (map cy31aa@syntax->datum cy44da@new*))) (let ((cy44e5@old-label* (cy4498@find* cy44e0@old* cy44df@subst))) (let ((cy44e7@subst (cy449a@rem* cy44e0@old* cy44df@subst))) (cy4494@merge-substs (map cons cy44e1@new* cy44e5@old-label*) cy44e7@subst))))) cy44cd@ls/false) (let ((cy44e9@t cy44cb@t)) (let ((cy44eb@ls/false (cy30c4@syntax-dispatch cy44e9@t '(any any . each-any)))) (if (and cy44eb@ls/false (apply (lambda (cy44ed@except cy44ee@isp cy44ef@sym*) (and (eq? (cy31aa@syntax->datum cy44ed@except) 'except) (for-all cy4490@idsyn? cy44ef@sym*))) cy44eb@ls/false)) (apply (lambda (cy44f3@except cy44f4@isp cy44f5@sym*) (let ((cy44f9@subst (cy44a2@get-import cy44f4@isp))) (cy449a@rem* (map cy31aa@syntax->datum cy44f5@sym*) cy44f9@subst))) cy44eb@ls/false) (let ((cy44fb@t cy44e9@t)) (let ((cy44fd@ls/false (cy30c4@syntax-dispatch cy44fb@t '(any any . each-any)))) (if (and cy44fd@ls/false (apply (lambda (cy44ff@only cy4500@isp cy4501@sym*) (and (eq? (cy31aa@syntax->datum cy44ff@only) 'only) (for-all cy4490@idsyn? cy4501@sym*))) cy44fd@ls/false)) (apply (lambda (cy4505@only cy4506@isp cy4507@sym*) (let ((cy450b@subst (cy44a2@get-import cy4506@isp)) (cy450c@sym* (map cy31aa@syntax->datum cy4507@sym*))) (let ((cy450f@sym* (cy449c@remove-dups cy450c@sym*))) (let ((cy4511@lab* (cy4498@find* cy450f@sym* cy450b@subst))) (map cons cy450f@sym* cy4511@lab*))))) cy44fd@ls/false) (let ((cy4513@t cy44fb@t)) (let ((cy4515@ls/false (cy30c4@syntax-dispatch cy4513@t '(any any any)))) (if (and cy4515@ls/false (apply (lambda (cy4517@prefix cy4518@isp cy4519@p) (and (eq? (cy31aa@syntax->datum cy4517@prefix) 'prefix) (cy4490@idsyn? cy4519@p))) cy4515@ls/false)) (apply (lambda (cy451d@prefix cy451e@isp cy451f@p) (let ((cy4523@subst (cy44a2@get-import cy451e@isp)) (cy4524@prefix (symbol->string (cy31aa@syntax->datum cy451f@p)))) (map (lambda (cy4527@x) (cons (string->symbol (string-append cy4524@prefix (symbol->string (car cy4527@x)))) (cdr cy4527@x))) cy4523@subst))) cy4515@ls/false) (let ((cy4529@t cy4513@t)) (let ((cy452b@ls/false (cy30c4@syntax-dispatch cy4529@t '(any each-any)))) (if (and cy452b@ls/false (apply (lambda (cy452d@library cy452e@spec*) (eq? (cy31aa@syntax->datum cy452d@library) 'library)) cy452b@ls/false)) (apply (lambda (cy4531@library cy4532@spec*) (cy44a0@import-library cy4532@spec*)) cy452b@ls/false) (let ((cy4535@t cy4529@t)) (let ((cy4537@ls/false (cy30c4@syntax-dispatch cy4535@t '(any any . any)))) (if (and cy4537@ls/false (apply (lambda (cy4539@for cy453a@isp cy453b@rest) (eq? (cy31aa@syntax->datum cy4539@for) 'for)) cy4537@ls/false)) (apply (lambda (cy453f@for cy4540@isp cy4541@rest) (cy44a2@get-import cy4540@isp)) cy4537@ls/false) (let ((cy4545@t cy4535@t)) (let ((cy4547@ls/false (cy30c4@syntax-dispatch cy4545@t 'any))) (if cy4547@ls/false (apply (lambda (cy4549@spec) (cy31a4@syntax-violation 'import '"invalid import spec" cy4549@spec)) cy4547@ls/false) (cy31a4@syntax-violation '#f '"invalid syntax" cy4545@t))))))))))))))))))))))))))) (set! cy44a4@add-imports! (lambda (cy44ad@imp cy44ae@h) (let ((cy44b1@subst (cy44a2@get-import cy44ad@imp))) (for-each (lambda (cy44b3@x) (let ((cy44b5@name (car cy44b3@x)) (cy44b6@label (cdr cy44b3@x))) (let ((cy44b9@t (hashtable-ref cy44ae@h cy44b5@name '#f))) (if cy44b9@t ((lambda (cy44bb@l) (if (not (eq? cy44bb@l cy44b6@label)) (cy4492@dup-error cy44b5@name) (void))) cy44b9@t) (hashtable-set! cy44ae@h cy44b5@name cy44b6@label))))) cy44b1@subst)))) (lambda (cy44a5@imp*) (let cy44ab@f ((cy44a7@imp* cy44a5@imp*) (cy44a8@h (make-eq-hashtable))) (if (null? cy44a7@imp*) (hashtable-entries cy44a8@h) (begin (cy44a4@add-imports! (car cy44a7@imp*) cy44a8@h) (cy44ab@f (cdr cy44a7@imp*) cy44a8@h)))))))) (set! cy4bc7@cy3126@parse-import-spec* cy3126@parse-import-spec*) (set! cy3128@make-top-rib (lambda (cy469b@names cy469c@labels) (let ((cy469f@rib (cy2e71@make-empty-rib))) (begin (vector-for-each (lambda (cy46a1@name cy46a2@label) (begin (if (not (symbol? cy46a1@name)) (error 'make-top-rib '"BUG: not a symbol" cy46a1@name) (void)) (cy2e75@extend-rib/nc! cy469f@rib (make-simple-struct 'stx '5 (list cy46a1@name cy2e41@top-mark* '() '())) cy46a2@label))) cy469b@names cy469c@labels) cy469f@rib)))) (set! cy4bc8@cy3128@make-top-rib cy3128@make-top-rib) (set! cy312a@make-collector (lambda () (let ((cy46a5@ls '())) (lambda cy46a9 (let ((cy46aa (length cy46a9))) (if (= cy46aa '0) (apply (lambda () cy46a5@ls) cy46a9) (if (= cy46aa '1) (apply (lambda (cy46a7@x) (set! cy46a5@ls (cy2e3a@set-cons cy46a7@x cy46a5@ls))) cy46a9) (error 'apply '"invalid arg count")))))))) (set! cy4bc9@cy312a@make-collector cy312a@make-collector) (set! cy312c@inv-collector (cy2a07@cy28e6@make-parameter (lambda cy46ab@args (assertion-violation 'inv-collector '"BUG: not initialized")) (lambda (cy46ad@x) (begin (if (not (procedure? cy46ad@x)) (assertion-violation 'inv-collector '"BUG: not a procedure" cy46ad@x) (void)) cy46ad@x)))) (set! cy4bca@cy312c@inv-collector cy312c@inv-collector) (set! cy312e@vis-collector (cy2a07@cy28e6@make-parameter (lambda cy46af@args (assertion-violation 'vis-collector '"BUG: not initialized")) (lambda (cy46b1@x) (begin (if (not (procedure? cy46b1@x)) (assertion-violation 'vis-collector '"BUG: not a procedure" cy46b1@x) (void)) cy46b1@x)))) (set! cy4bcb@cy312e@vis-collector cy312e@vis-collector) (set! cy3130@imp-collector (cy2a07@cy28e6@make-parameter (lambda cy46b3@args (assertion-violation 'imp-collector '"BUG: not initialized")) (lambda (cy46b5@x) (begin (if (not (procedure? cy46b5@x)) (assertion-violation 'imp-collector '"BUG: not a procedure" cy46b5@x) (void)) cy46b5@x)))) (set! cy4bcc@cy3130@imp-collector cy3130@imp-collector) (set! cy3132@chi-library-internal (lambda (cy46b7@e* cy46b8@rib cy46b9@top?) (call-with-values (lambda () (cy311c@chi-body* cy46b7@e* '() '() '() '() '() '() '() cy46b8@rib cy46b9@top?)) (lambda (cy46cd@cy46be cy46ce@cy46c0 cy46cf@cy46c2 cy46d0@cy46c4 cy46d1@cy46c6 cy46d2@cy46c8 cy46d3@cy46ca cy46d4@cy46cc) (let ((cy46dd@exp* cy46d4@cy46cc) (cy46de@_kwd* cy46d3@cy46ca) (cy46df@mod** cy46d2@cy46c8) (cy46e0@rhs* cy46d1@cy46c6) (cy46e1@lex* cy46d0@cy46c4) (cy46e2@mr cy46cf@cy46c2) (cy46e3@r cy46ce@cy46c0) (cy46e4@e* cy46cd@cy46be)) (values (append (apply append (reverse cy46df@mod**)) cy46e4@e*) cy46e3@r cy46e2@mr (reverse cy46e1@lex*) (reverse cy46e0@rhs*) cy46dd@exp*)))))) (set! cy4bcd@cy3132@chi-library-internal cy3132@chi-library-internal) (set! cy3134@chi-interaction-expr (lambda (cy46ed@e cy46ee@rib cy46ef@r) (call-with-values (lambda () (cy311c@chi-body* (list cy46ed@e) cy46ef@r cy46ef@r '() '() '() '() '() cy46ee@rib '#t)) (lambda (cy4703@cy46f4 cy4704@cy46f6 cy4705@cy46f8 cy4706@cy46fa cy4707@cy46fc cy4708@cy46fe cy4709@cy4700 cy470a@cy4702) (let ((cy4713@_exp* cy470a@cy4702) (cy4714@_kwd* cy4709@cy4700) (cy4715@mod** cy4708@cy46fe) (cy4716@rhs* cy4707@cy46fc) (cy4717@lex* cy4706@cy46fa) (cy4718@mr cy4705@cy46f8) (cy4719@r cy4704@cy46f6) (cy471a@e* cy4703@cy46f4)) (let ((cy4723@e* (cy30f4@expand-interaction-rhs*/init* (reverse cy4717@lex*) (reverse cy4716@rhs*) (append (apply append (reverse cy4715@mod**)) cy471a@e*) cy4719@r cy4718@mr))) (let ((cy4725@e (if (null? cy4723@e*) (cy2e23@cy2d7e@build-void) (if (null? (cdr cy4723@e*)) (car cy4723@e*) (cy2e22@cy2d7c@build-sequence '#f cy4723@e*))))) (values cy4725@e cy4719@r)))))))) (set! cy4bce@cy3134@chi-interaction-expr cy3134@chi-interaction-expr) (set! cy3136@library-body-expander (lambda (cy4727@name cy4728@main-exp* cy4729@imp* cy472a@b* cy472b@top?) (let ((cy4732@itc '#f)) (begin (set! cy4732@itc (cy312a@make-collector)) (let ((cy473b@cy4734 cy3130@imp-collector) (cy473c@cy4736 cy31b4@top-level-context) (cy473d@cy4738 cy4732@itc) (cy473e@cy473a '#f)) (let ((cy4743@swap (lambda () (begin (let ((cy4745@t (cy473b@cy4734))) (begin (cy473b@cy4734 cy473d@cy4738) (set! cy473d@cy4738 cy4745@t))) (let ((cy4747@t (cy473c@cy4736))) (begin (cy473c@cy4736 cy473e@cy473a) (set! cy473e@cy473a cy4747@t))))))) (dynamic-wind cy4743@swap (lambda () (call-with-values (lambda () (cy3126@parse-import-spec* cy4729@imp*)) (lambda (cy474d@cy474a cy474e@cy474c) (let ((cy4751@subst-labels cy474e@cy474c) (cy4752@subst-names cy474d@cy474a)) (let ((cy4755@rib (cy3128@make-top-rib cy4752@subst-names cy4751@subst-labels))) (let ((cy4758@wrap '#f)) (begin (set! cy4758@wrap (lambda (cy47d3@x) (make-simple-struct 'stx '5 (list cy47d3@x cy2e41@top-mark* (list cy4755@rib) '())))) (let ((cy4759@b* (map cy4758@wrap cy472a@b*)) (cy475a@main-exp* (map cy4758@wrap cy4728@main-exp*)) (cy475b@rtc (cy312a@make-collector)) (cy475c@vtc (cy312a@make-collector))) (let ((cy4769@cy4762 cy312c@inv-collector) (cy476a@cy4764 cy312e@vis-collector) (cy476b@cy4766 cy475b@rtc) (cy476c@cy4768 cy475c@vtc)) (let ((cy4771@swap (lambda () (begin (let ((cy4773@t (cy4769@cy4762))) (begin (cy4769@cy4762 cy476b@cy4766) (set! cy476b@cy4766 cy4773@t))) (let ((cy4775@t (cy476a@cy4764))) (begin (cy476a@cy4764 cy476c@cy4768) (set! cy476c@cy4768 cy4775@t))))))) (dynamic-wind cy4771@swap (lambda () (call-with-values (lambda () (cy3132@chi-library-internal cy4759@b* cy4755@rib cy472b@top?)) (lambda (cy4783@cy4778 cy4784@cy477a cy4785@cy477c cy4786@cy477e cy4787@cy4780 cy4788@cy4782) (let ((cy478f@internal-exp* cy4788@cy4782) (cy4790@rhs* cy4787@cy4780) (cy4791@lex* cy4786@cy477e) (cy4792@mr cy4785@cy477c) (cy4793@r cy4784@cy477a) (cy4794@init* cy4783@cy4778)) (call-with-values (lambda () (cy3120@parse-exports (append cy475a@main-exp* cy478f@internal-exp*))) (lambda (cy479f@cy479c cy47a0@cy479e) (let ((cy47a3@exp-id* cy47a0@cy479e) (cy47a4@exp-name* cy479f@cy479c)) (begin (cy2e79@seal-rib! cy4755@rib) (let ((cy47a7@init* (cy30e2@chi-expr* cy4794@init* cy4793@r cy4792@mr))) (let ((cy47a9@rhs* (cy30f6@chi-rhs* cy4790@rhs* cy4793@r cy4792@mr))) (begin (cy2e7b@unseal-rib! cy4755@rib) (let ((cy47ab@loc* (map cy2e47@gen-global cy4791@lex*)) (cy47ac@export-subst (cy318e@make-export-subst cy47a4@exp-name* cy47a3@exp-id*))) (let ((cy47b0@errstr '#f)) (begin (set! cy47b0@errstr '"attempt to export mutated variable") (call-with-values (lambda () (cy3190@make-export-env/macros cy4791@lex* cy47ab@loc* cy4793@r)) (lambda (cy47b7@cy47b2 cy47b8@cy47b4 cy47b9@cy47b6) (let ((cy47bd@macro* cy47b9@cy47b6) (cy47be@global* cy47b8@cy47b4) (cy47bf@export-env cy47b7@cy47b2)) (begin (for-each (lambda (cy47c3@s) (let ((cy47c5@name (car cy47c3@s)) (cy47c6@label (cdr cy47c3@s))) (let ((cy47c9@p (assq cy47c6@label cy47bf@export-env))) (if cy47c9@p (let ((cy47cb@b (cdr cy47c9@p))) (let ((cy47cd@type (car cy47cb@b))) (if (eq? cy47cd@type 'mutable) (cy31a4@syntax-violation 'export cy47b0@errstr cy47c5@name) (void)))) (void))))) cy47ac@export-subst) (let ((cy47cf@invoke-body (cy2e28@cy2d88@build-library-letrec* '#f cy4727@name cy4791@lex* cy47ab@loc* cy47a9@rhs* (if (null? cy47a7@init*) (cy2e23@cy2d7e@build-void) (cy2e22@cy2d7c@build-sequence '#f cy47a7@init*)))) (cy47d0@invoke-definitions (map cy2e1f@cy2cdb@build-global-define (map cdr cy47be@global*)))) (values (cy4732@itc) (cy475b@rtc) (cy475c@vtc) (cy2e22@cy2d7c@build-sequence '#f (append cy47d0@invoke-definitions (list cy47cf@invoke-body))) cy47bd@macro* cy47ac@export-subst cy47bf@export-env)))))))))))))))))))) cy4771@swap))))))))))) cy4743@swap))))))) (set! cy4bcf@cy3136@library-body-expander cy3136@library-body-expander) (set! cy3138@core-library-expander (lambda (cy47d5@e cy47d6@verify-name) (call-with-values (lambda () (cy3124@parse-library cy47d5@e)) (lambda (cy47e1@cy47da cy47e2@cy47dc cy47e3@cy47de cy47e4@cy47e0) (let ((cy47e9@b* cy47e4@cy47e0) (cy47ea@imp* cy47e3@cy47de) (cy47eb@exp* cy47e2@cy47dc) (cy47ec@name* cy47e1@cy47da)) (call-with-values (lambda () (cy3122@parse-library-name cy47ec@name*)) (lambda (cy47f5@cy47f2 cy47f6@cy47f4) (let ((cy47f9@ver cy47f6@cy47f4) (cy47fa@name cy47f5@cy47f2)) (begin (cy47d6@verify-name cy47fa@name) (call-with-values (lambda () (cy3136@library-body-expander cy47fa@name cy47eb@exp* cy47ea@imp* cy47e9@b* '#f)) (lambda (cy480b@cy47fe cy480c@cy4800 cy480d@cy4802 cy480e@cy4804 cy480f@cy4806 cy4810@cy4808 cy4811@cy480a) (let ((cy4819@export-env cy4811@cy480a) (cy481a@export-subst cy4810@cy4808) (cy481b@visit-code cy480f@cy4806) (cy481c@invoke-code cy480e@cy4804) (cy481d@visit-req* cy480d@cy4802) (cy481e@invoke-req* cy480c@cy4800) (cy481f@imp* cy480b@cy47fe)) (values cy47fa@name cy47f9@ver cy481f@imp* cy481e@invoke-req* cy481d@visit-req* cy481c@invoke-code cy481b@visit-code cy481a@export-subst cy4819@export-env))))))))))))) (set! cy4bd0@cy3138@core-library-expander cy3138@core-library-expander) (set! cy313a@parse-top-level-program (lambda (cy4827@e*) (let ((cy4829@t cy4827@e*)) (let ((cy482b@ls/false (cy30c4@syntax-dispatch cy4829@t '((any . each-any) . each-any)))) (if (and cy482b@ls/false (apply (lambda (cy482d@import cy482e@imp* cy482f@b*) (eq? (cy31aa@syntax->datum cy482d@import) 'import)) cy482b@ls/false)) (apply (lambda (cy4833@import cy4834@imp* cy4835@b*) (values cy4834@imp* cy4835@b*)) cy482b@ls/false) (let ((cy4839@t cy4829@t)) (let ((cy483b@ls/false (cy30c4@syntax-dispatch cy4839@t '((any . any) . any)))) (if (and cy483b@ls/false (apply (lambda (cy483d@import cy483e@x cy483f@y) (eq? (cy31aa@syntax->datum cy483d@import) 'import)) cy483b@ls/false)) (apply (lambda (cy4843@import cy4844@x cy4845@y) (cy31a4@syntax-violation 'expander '"invalid syntax of top-level program" (cy2eb7@syntax-car cy4827@e*))) cy483b@ls/false) (let ((cy4849@t cy4839@t)) (let ((cy484b@ls/false (cy30c4@syntax-dispatch cy4849@t '_))) (if cy484b@ls/false (apply (lambda () (assertion-violation 'expander '"top-level program is missing an (import ---) clause")) cy484b@ls/false) (cy31a4@syntax-violation '#f '"invalid syntax" cy4849@t)))))))))))) (set! cy4bd1@cy313a@parse-top-level-program cy313a@parse-top-level-program) (set! cy313c@top-level-expander (lambda (cy484d@e*) (call-with-values (lambda () (cy313a@parse-top-level-program cy484d@e*)) (lambda (cy4853@cy4850 cy4854@cy4852) (let ((cy4857@b* cy4854@cy4852) (cy4858@imp* cy4853@cy4850)) (call-with-values (lambda () (cy3136@library-body-expander '() '() cy4858@imp* cy4857@b* '#t)) (lambda (cy4869@cy485c cy486a@cy485e cy486b@cy4860 cy486c@cy4862 cy486d@cy4864 cy486e@cy4866 cy486f@cy4868) (let ((cy4877@export-env cy486f@cy4868) (cy4878@export-subst cy486e@cy4866) (cy4879@visit-code cy486d@cy4864) (cy487a@invoke-code cy486c@cy4862) (cy487b@visit-req* cy486b@cy4860) (cy487c@invoke-req* cy486a@cy485e) (cy487d@imp* cy4869@cy485c)) (values cy487c@invoke-req* cy487a@invoke-code))))))))) (set! cy4bd2@cy313c@top-level-expander cy313c@top-level-expander) (set! cy313e@rp (cy2a04@cy28e0@make-record-printer 'env (lambda (cy4885@x cy4886@p cy4887@wr) (display '"#<environment>" cy4886@p)))) (set! cy4bd3@cy313e@rp cy313e@rp) (set! cy3148@env? (lambda (cy488b@x) (and (simple-struct? cy488b@x) (eq? (simple-struct-name cy488b@x) 'env)))) (set! cy4bd4@cy3148@env? cy3148@env?) (set! cy314a@env-names (lambda (cy488d@x) (simple-struct-ref cy488d@x '0))) (set! cy4bd5@cy314a@env-names cy314a@env-names) (set! cy314c@set-env-names! (lambda (cy488f@x cy4890@val) (simple-struct-set! cy488f@x '0 cy4890@val))) (set! cy4bd6@cy314c@set-env-names! cy314c@set-env-names!) (set! cy314e@env-labels (lambda (cy4893@x) (simple-struct-ref cy4893@x '1))) (set! cy4bd7@cy314e@env-labels cy314e@env-labels) (set! cy3150@set-env-labels! (lambda (cy4895@x cy4896@val) (simple-struct-set! cy4895@x '1 cy4896@val))) (set! cy4bd8@cy3150@set-env-labels! cy3150@set-env-labels!) (set! cy3152@env-itc (lambda (cy4899@x) (simple-struct-ref cy4899@x '2))) (set! cy4bd9@cy3152@env-itc cy3152@env-itc) (set! cy3154@set-env-itc! (lambda (cy489b@x cy489c@val) (simple-struct-set! cy489b@x '2 cy489c@val))) (set! cy4bda@cy3154@set-env-itc! cy3154@set-env-itc!) (set! cy3156@dummy '3) (set! cy4bdb@cy3156@dummy cy3156@dummy) (set! cy3158@rp (cy2a04@cy28e0@make-record-printer 'interaction-env (lambda (cy489f@x cy48a0@p cy48a1@wr) (display '"#<environment>" cy48a0@p)))) (set! cy4bdc@cy3158@rp cy3158@rp) (set! cy3162@interaction-env? (lambda (cy48a5@x) (and (simple-struct? cy48a5@x) (eq? (simple-struct-name cy48a5@x) 'interaction-env)))) (set! cy4bdd@cy3162@interaction-env? cy3162@interaction-env?) (set! cy3164@interaction-env-rib (lambda (cy48a7@x) (simple-struct-ref cy48a7@x '0))) (set! cy4bde@cy3164@interaction-env-rib cy3164@interaction-env-rib) (set! cy3166@set-interaction-env-rib! (lambda (cy48a9@x cy48aa@val) (simple-struct-set! cy48a9@x '0 cy48aa@val))) (set! cy4bdf@cy3166@set-interaction-env-rib! cy3166@set-interaction-env-rib!) (set! cy3168@interaction-env-r (lambda (cy48ad@x) (simple-struct-ref cy48ad@x '1))) (set! cy4be0@cy3168@interaction-env-r cy3168@interaction-env-r) (set! cy316a@set-interaction-env-r! (lambda (cy48af@x cy48b0@val) (simple-struct-set! cy48af@x '1 cy48b0@val))) (set! cy4be1@cy316a@set-interaction-env-r! cy316a@set-interaction-env-r!) (set! cy316c@interaction-env-locs (lambda (cy48b3@x) (simple-struct-ref cy48b3@x '2))) (set! cy4be2@cy316c@interaction-env-locs cy316c@interaction-env-locs) (set! cy316e@set-interaction-env-locs! (lambda (cy48b5@x cy48b6@val) (simple-struct-set! cy48b5@x '2 cy48b6@val))) (set! cy4be3@cy316e@set-interaction-env-locs! cy316e@set-interaction-env-locs!) (set! cy3170@dummy '3) (set! cy4be4@cy3170@dummy cy3170@dummy) (set! cy3172@interaction-environment-symbols (lambda () (cy317a@environment-symbols (cy31b2@interaction-environment)))) (set! cy4be5@cy3172@interaction-environment-symbols cy3172@interaction-environment-symbols) (set! cy3174@environment-bindings (lambda (cy48b9@e) (vector->list (vector-map (lambda (cy48bb@name cy48bc@label) (cy3176@parse-binding (cons cy48bb@name (cy2cd2@cy2b1f@imported-label->binding cy48bc@label)))) (cy314a@env-names cy48b9@e) (cy314e@env-labels cy48b9@e))))) (set! cy4be6@cy3174@environment-bindings cy3174@environment-bindings) (set! cy3176@parse-binding (lambda (cy48bf@b) (cons (car cy48bf@b) (let ((cy48c1@t (cadr cy48bf@b))) (if (memv cy48c1@t '(core-prim global)) 'procedure (if (memv cy48c1@t '(core-macro macro global-macro)) 'syntax (if (memv cy48c1@t '($core-rtd)) 'record (if (eq? (car cy48bf@b) (cadr cy48bf@b)) 'syntax 'unknown)))))))) (set! cy4be7@cy3176@parse-binding cy3176@parse-binding) (set! cy3178@environment? (lambda (cy48c3@x) (or (cy3148@env? cy48c3@x) (cy3162@interaction-env? cy48c3@x)))) (set! cy4be8@cy3178@environment? cy3178@environment?) (set! cy317a@environment-symbols (lambda (cy48c5@x) (if (cy3148@env? cy48c5@x) (vector->list (cy314a@env-names cy48c5@x)) (if (cy3162@interaction-env? cy48c5@x) (map values (cy2e5b@rib-sym* (cy3164@interaction-env-rib cy48c5@x))) (assertion-violation 'environment-symbols '"not an environment" cy48c5@x))))) (set! cy4be9@cy317a@environment-symbols cy317a@environment-symbols) (set! cy317c@environment (lambda cy48c7@imp* (let ((cy48c9@itc (cy312a@make-collector))) (let ((cy48cf@cy48cc cy3130@imp-collector) (cy48d0@cy48ce cy48c9@itc)) (let ((cy48d3@swap (lambda () (let ((cy48d5@t (cy48cf@cy48cc))) (begin (cy48cf@cy48cc cy48d0@cy48ce) (set! cy48d0@cy48ce cy48d5@t)))))) (dynamic-wind cy48d3@swap (lambda () (call-with-values (lambda () (cy3126@parse-import-spec* cy48c7@imp*)) (lambda (cy48db@cy48d8 cy48dc@cy48da) (let ((cy48df@subst-labels cy48dc@cy48da) (cy48e0@subst-names cy48db@cy48d8)) (make-simple-struct 'env '4 (list cy48e0@subst-names cy48df@subst-labels cy48c9@itc)))))) cy48d3@swap)))))) (set! cy4bea@cy317c@environment cy317c@environment) (set! cy317e@null-environment (lambda (cy48e3@n) (begin (if (not (eqv? cy48e3@n '5)) (assertion-violation 'null-environment '"not 5" cy48e3@n) (void)) (cy317c@environment '(psyntax null-environment-5))))) (set! cy4beb@cy317e@null-environment cy317e@null-environment) (set! cy3180@scheme-report-environment (lambda (cy48e5@n) (begin (if (not (eqv? cy48e5@n '5)) (assertion-violation 'scheme-report-environment '"not 5" cy48e5@n) (void)) (cy317c@environment '(psyntax scheme-report-environment-5))))) (set! cy4bec@cy3180@scheme-report-environment cy3180@scheme-report-environment) (set! cy3182@expand (lambda (cy48e7@x cy48e8@env) (if (cy3148@env? cy48e8@env) (let ((cy48eb@rib (cy3128@make-top-rib (cy314a@env-names cy48e8@env) (cy314e@env-labels cy48e8@env)))) (let ((cy48ed@x (make-simple-struct 'stx '5 (list cy48e7@x cy2e41@top-mark* (list cy48eb@rib) '()))) (cy48ee@itc (cy3152@env-itc cy48e8@env)) (cy48ef@rtc (cy312a@make-collector)) (cy48f0@vtc (cy312a@make-collector))) (let ((cy48f5@x (let ((cy4907@cy48f8 cy31b4@top-level-context) (cy4908@cy48fa cy312c@inv-collector) (cy4909@cy48fc cy312e@vis-collector) (cy490a@cy48fe cy3130@imp-collector) (cy490b@cy4900 '#f) (cy490c@cy4902 cy48ef@rtc) (cy490d@cy4904 cy48f0@vtc) (cy490e@cy4906 cy48ee@itc)) (let ((cy4917@swap (lambda () (begin (let ((cy4919@t (cy4907@cy48f8))) (begin (cy4907@cy48f8 cy490b@cy4900) (set! cy490b@cy4900 cy4919@t))) (let ((cy491b@t (cy4908@cy48fa))) (begin (cy4908@cy48fa cy490c@cy4902) (set! cy490c@cy4902 cy491b@t))) (let ((cy491d@t (cy4909@cy48fc))) (begin (cy4909@cy48fc cy490d@cy4904) (set! cy490d@cy4904 cy491d@t))) (let ((cy491f@t (cy490a@cy48fe))) (begin (cy490a@cy48fe cy490e@cy4906) (set! cy490e@cy4906 cy491f@t))))))) (dynamic-wind cy4917@swap (lambda () (cy30e6@chi-expr cy48ed@x '() '())) cy4917@swap))))) (begin (cy2e79@seal-rib! cy48eb@rib) (values cy48f5@x (cy48ef@rtc)))))) (if (cy3162@interaction-env? cy48e8@env) (let ((cy4921@rib (cy3164@interaction-env-rib cy48e8@env)) (cy4922@r (cy3168@interaction-env-r cy48e8@env)) (cy4923@rtc (cy312a@make-collector))) (let ((cy4927@x (make-simple-struct 'stx '5 (list cy48e7@x cy2e41@top-mark* (list cy4921@rib) '())))) (call-with-values (lambda () (let ((cy493d@cy492e cy31b4@top-level-context) (cy493e@cy4930 cy312c@inv-collector) (cy493f@cy4932 cy312e@vis-collector) (cy4940@cy4934 cy3130@imp-collector) (cy4941@cy4936 cy48e8@env) (cy4942@cy4938 cy4923@rtc) (cy4943@cy493a (cy312a@make-collector)) (cy4944@cy493c (cy312a@make-collector))) (let ((cy494d@swap (lambda () (begin (let ((cy494f@t (cy493d@cy492e))) (begin (cy493d@cy492e cy4941@cy4936) (set! cy4941@cy4936 cy494f@t))) (let ((cy4951@t (cy493e@cy4930))) (begin (cy493e@cy4930 cy4942@cy4938) (set! cy4942@cy4938 cy4951@t))) (let ((cy4953@t (cy493f@cy4932))) (begin (cy493f@cy4932 cy4943@cy493a) (set! cy4943@cy493a cy4953@t))) (let ((cy4955@t (cy4940@cy4934))) (begin (cy4940@cy4934 cy4944@cy493c) (set! cy4944@cy493c cy4955@t))))))) (dynamic-wind cy494d@swap (lambda () (cy3134@chi-interaction-expr cy4927@x cy4921@rib cy4922@r)) cy494d@swap)))) (lambda (cy4957@cy492a cy4958@cy492c) (let ((cy495b@r^ cy4958@cy492c) (cy495c@e cy4957@cy492a)) (begin (cy316a@set-interaction-env-r! cy48e8@env cy495b@r^) (values cy495c@e (cy4923@rtc)))))))) (assertion-violation 'expand '"not an environment" cy48e8@env))))) (set! cy4bed@cy3182@expand cy3182@expand) (set! cy3184@eval (lambda (cy495f@x cy4960@env) (begin (if (not (cy3178@environment? cy4960@env)) (error 'eval '"not an environment" cy4960@env) (void)) (call-with-values (lambda () (cy3182@expand cy495f@x cy4960@env)) (lambda (cy4967@cy4964 cy4968@cy4966) (let ((cy496b@invoke-req* cy4968@cy4966) (cy496c@x cy4967@cy4964)) (begin (for-each cy2cd3@cy2b21@invoke-library cy496b@invoke-req*) (eval-core (cy2a5d@cy2a15@expanded->core cy496c@x))))))))) (set! cy4bee@cy3184@eval cy3184@eval) (set! cy3186@library-expander (lambda cy49dd (let ((cy49de (length cy49dd))) (if (= cy49de '3) (apply (lambda (cy496f@x cy4970@filename cy4971@verify-name) (let ((cy4976@build-visit-code '#f) (cy4978@visit! '#f)) (begin (set! cy4976@build-visit-code (lambda (cy49cb@macro*) (if (null? cy49cb@macro*) (cy2e23@cy2d7e@build-void) (cy2e22@cy2d7c@build-sequence '#f (map (lambda (cy49cd@x) (let ((cy49cf@loc (car cy49cd@x)) (cy49d0@src (cddr cy49cd@x))) (list 'set! cy49cf@loc cy49d0@src))) cy49cb@macro*))))) (set! cy4978@visit! (lambda (cy49c3@macro*) (for-each (lambda (cy49c5@x) (let ((cy49c7@loc (car cy49c5@x)) (cy49c8@proc (cadr cy49c5@x))) (set-symbol-value! cy49c7@loc cy49c8@proc))) cy49c3@macro*))) (call-with-values (lambda () (cy3138@core-library-expander cy496f@x cy4971@verify-name)) (lambda (cy498b@cy497a cy498c@cy497c cy498d@cy497e cy498e@cy4980 cy498f@cy4982 cy4990@cy4984 cy4991@cy4986 cy4992@cy4988 cy4993@cy498a) (let ((cy499d@export-env cy4993@cy498a) (cy499e@export-subst cy4992@cy4988) (cy499f@macro* cy4991@cy4986) (cy49a0@invoke-code cy4990@cy4984) (cy49a1@vis* cy498f@cy4982) (cy49a2@inv* cy498e@cy4980) (cy49a3@imp* cy498d@cy497e) (cy49a4@ver cy498c@cy497c) (cy49a5@name cy498b@cy497a)) (let ((cy49af@id (gensym)) (cy49b0@name cy49a5@name) (cy49b1@ver cy49a4@ver) (cy49b2@imp* (map cy2cd7@cy2b29@library-spec cy49a3@imp*)) (cy49b3@vis* (map cy2cd7@cy2b29@library-spec cy49a1@vis*)) (cy49b4@inv* (map cy2cd7@cy2b29@library-spec cy49a2@inv*)) (cy49b5@visit-proc (lambda () (cy4978@visit! cy499f@macro*))) (cy49b6@invoke-proc (lambda () (eval-core (cy2a5d@cy2a15@expanded->core cy49a0@invoke-code)))) (cy49b7@visit-code (cy4976@build-visit-code cy499f@macro*)) (cy49b8@invoke-code cy49a0@invoke-code)) (begin (cy2cd1@cy2b1d@install-library cy49af@id cy49b0@name cy49b1@ver cy49b2@imp* cy49b3@vis* cy49b4@inv* cy499e@export-subst cy499d@export-env cy49b5@visit-proc cy49b6@invoke-proc cy49b7@visit-code cy49b8@invoke-code '#t cy4970@filename) (values cy49af@id cy49b0@name cy49b1@ver cy49b2@imp* cy49b3@vis* cy49b4@inv* cy49b8@invoke-code cy49b7@visit-code cy499e@export-subst cy499d@export-env))))))))) cy49dd) (if (= cy49de '2) (apply (lambda (cy49d3@x cy49d4@filename) (cy3186@library-expander cy49d3@x cy49d4@filename (lambda (cy49d7@x) (values)))) cy49dd) (if (= cy49de '1) (apply (lambda (cy49d9@x) (cy3186@library-expander cy49d9@x '#f (lambda (cy49db@x) (values)))) cy49dd) (error 'apply '"invalid arg count"))))))) (set! cy4bef@cy3186@library-expander cy3186@library-expander) (set! cy3188@boot-library-expand (lambda (cy49df@x) (call-with-values (lambda () (cy3186@library-expander cy49df@x)) (lambda (cy49f5@cy49e2 cy49f6@cy49e4 cy49f7@cy49e6 cy49f8@cy49e8 cy49f9@cy49ea cy49fa@cy49ec cy49fb@cy49ee cy49fc@cy49f0 cy49fd@cy49f2 cy49fe@cy49f4) (let ((cy4a09@export-env cy49fe@cy49f4) (cy4a0a@export-subst cy49fd@cy49f2) (cy4a0b@visit-code cy49fc@cy49f0) (cy4a0c@invoke-code cy49fb@cy49ee) (cy4a0d@inv* cy49fa@cy49ec) (cy4a0e@vis* cy49f9@cy49ea) (cy4a0f@imp* cy49f8@cy49e8) (cy4a10@ver cy49f7@cy49e6) (cy4a11@name cy49f6@cy49e4) (cy4a12@id cy49f5@cy49e2)) (values cy4a11@name cy4a0c@invoke-code cy4a0a@export-subst cy4a09@export-env)))))) (set! cy4bf0@cy3188@boot-library-expand cy3188@boot-library-expand) (set! cy318a@rev-map-append (lambda (cy4a1d@f cy4a1e@ls cy4a1f@ac) (if (null? cy4a1e@ls) cy4a1f@ac (cy318a@rev-map-append cy4a1d@f (cdr cy4a1e@ls) (cons (cy4a1d@f (car cy4a1e@ls)) cy4a1f@ac))))) (set! cy4bf1@cy318a@rev-map-append cy318a@rev-map-append) (set! cy318c@build-exports (lambda (cy4a23@lex*+loc* cy4a24@init*) (cy2e22@cy2d7c@build-sequence '#f (cons (cy2e23@cy2d7e@build-void) (cy318a@rev-map-append (lambda (cy4a27@x) (list 'set! (cdr cy4a27@x) (car cy4a27@x))) cy4a23@lex*+loc* cy4a24@init*))))) (set! cy4bf2@cy318c@build-exports cy318c@build-exports) (set! cy318e@make-export-subst (lambda (cy4a29@name* cy4a2a@id*) (map (lambda (cy4a2d@name cy4a2e@id) (let ((cy4a31@label (cy2ed3@id->label cy4a2e@id))) (begin (if (not cy4a31@label) (cy31a4@syntax-violation '#f '"cannot export unbound identifier" cy4a2e@id) (void)) (cons cy4a2d@name cy4a31@label)))) cy4a29@name* cy4a2a@id*))) (set! cy4bf3@cy318e@make-export-subst cy318e@make-export-subst) (set! cy3190@make-export-env/macros (lambda (cy4a33@lex* cy4a34@loc* cy4a35@r) (let ((cy4a3a@lookup '#f)) (begin (set! cy4a3a@lookup (lambda (cy4a57@x) (let cy4a5f@f ((cy4a59@x cy4a57@x) (cy4a5a@lex* cy4a33@lex*) (cy4a5b@loc* cy4a34@loc*)) (if (pair? cy4a5a@lex*) (if (eq? cy4a59@x (car cy4a5a@lex*)) (car cy4a5b@loc*) (cy4a5f@f cy4a59@x (cdr cy4a5a@lex*) (cdr cy4a5b@loc*))) (assertion-violation 'lookup-make-export '"BUG"))))) (let cy4a43@f ((cy4a3b@r cy4a35@r) (cy4a3c@env '()) (cy4a3d@global* '()) (cy4a3e@macro* '())) (if (null? cy4a3b@r) (values cy4a3c@env cy4a3d@global* cy4a3e@macro*) (let ((cy4a45@x (car cy4a3b@r))) (let ((cy4a47@label (car cy4a45@x)) (cy4a48@b (cdr cy4a45@x))) (let ((cy4a4b@t (cy2ed9@binding-type cy4a48@b))) (if (memv cy4a4b@t '(lexical)) (let ((cy4a4d@v (cy2edb@binding-value cy4a48@b))) (let ((cy4a4f@loc (cy4a3a@lookup (cy304e@lexical-var cy4a4d@v))) (cy4a50@type (if (cy3050@lexical-mutable? cy4a4d@v) 'mutable 'global))) (cy4a43@f (cdr cy4a3b@r) (cons (cons* cy4a47@label cy4a50@type cy4a4f@loc) cy4a3c@env) (cons (cons (cy304e@lexical-var cy4a4d@v) cy4a4f@loc) cy4a3d@global*) cy4a3e@macro*))) (if (memv cy4a4b@t '(local-macro)) (let ((cy4a53@loc (gensym))) (cy4a43@f (cdr cy4a3b@r) (cons (cons* cy4a47@label 'global-macro cy4a53@loc) cy4a3c@env) cy4a3d@global* (cons (cons cy4a53@loc (cy2edb@binding-value cy4a48@b)) cy4a3e@macro*))) (if (memv cy4a4b@t '(local-macro!)) (let ((cy4a55@loc (gensym))) (cy4a43@f (cdr cy4a3b@r) (cons (cons* cy4a47@label 'global-macro! cy4a55@loc) cy4a3c@env) cy4a3d@global* (cons (cons cy4a55@loc (cy2edb@binding-value cy4a48@b)) cy4a3e@macro*))) (if (memv cy4a4b@t '($rtd $module)) (cy4a43@f (cdr cy4a3b@r) (cons cy4a45@x cy4a3c@env) cy4a3d@global* cy4a3e@macro*) (assertion-violation 'expander '"BUG: do not know how to export" (cy2ed9@binding-type cy4a48@b) (cy2edb@binding-value cy4a48@b))))))))))))))) (set! cy4bf4@cy3190@make-export-env/macros cy3190@make-export-env/macros) (set! cy3192@generate-temporaries (lambda (cy4a61@ls) (let ((cy4a63@t cy4a61@ls)) (let ((cy4a65@ls/false (cy30c4@syntax-dispatch cy4a63@t 'each-any))) (if cy4a65@ls/false (apply (lambda (cy4a67@ls) (map (lambda (cy4a69@x) (make-simple-struct 'stx '5 (list (let ((cy4a6b@x (cy31aa@syntax->datum cy4a69@x))) (if (or (symbol? cy4a6b@x) (string? cy4a6b@x)) (gensym cy4a6b@x) (gensym 't))) cy2e41@top-mark* '() '()))) cy4a67@ls)) cy4a65@ls/false) (let ((cy4a6d@t cy4a63@t)) (let ((cy4a6f@ls/false (cy30c4@syntax-dispatch cy4a6d@t '_))) (if cy4a6f@ls/false (apply (lambda () (assertion-violation 'generate-temporaries '"not a list")) cy4a6f@ls/false) (cy31a4@syntax-violation '#f '"invalid syntax" cy4a6d@t))))))))) (set! cy4bf5@cy3192@generate-temporaries cy3192@generate-temporaries) (set! cy3194@free-identifier=? (lambda (cy4a71@x cy4a72@y) (if (cy2ebd@id? cy4a71@x) (if (cy2ebd@id? cy4a72@y) (cy2ec3@free-id=? cy4a71@x cy4a72@y) (assertion-violation 'free-identifier=? '"not an identifier" cy4a72@y)) (assertion-violation 'free-identifier=? '"not an identifier" cy4a71@x)))) (set! cy4bf6@cy3194@free-identifier=? cy3194@free-identifier=?) (set! cy3196@bound-identifier=? (lambda (cy4a75@x cy4a76@y) (if (cy2ebd@id? cy4a75@x) (if (cy2ebd@id? cy4a76@y) (cy2ec1@bound-id=? cy4a75@x cy4a76@y) (assertion-violation 'bound-identifier=? '"not an identifier" cy4a76@y)) (assertion-violation 'bound-identifier=? '"not an identifier" cy4a75@x)))) (set! cy4bf7@cy3196@bound-identifier=? cy3196@bound-identifier=?) (set! cy3198@make-source-condition (lambda (cy4a79@x) (let ((cy4a83@cy4a7e '#f) (cy4a85@cy4a80 '#f) (cy4a87@cy4a7f '#f) (cy4a8a@cy4a7d '#f) (cy4a8c@make-source-condition '#f) (cy4a8e@cy4a7b '#f) (cy4a90@cy4a7c '#f) (cy4a92@source-condition? '#f) (cy4a94@source-filename '#f) (cy4a96@source-character '#f)) (begin (set! cy4a83@cy4a7e (make-record-type-descriptor '&source-information cy4ed9@cy4c20@&condition-rtd 'cy4a81 '#f '#f '#((immutable file-name) (immutable character)))) (set! cy4a85@cy4a80 '#f) (set! cy4a87@cy4a7f (make-record-constructor-descriptor cy4a83@cy4a7e cy4eda@cy4c22@&condition-rcd cy4a85@cy4a80)) (set! cy4a8a@cy4a7d (record-predicate cy4a83@cy4a7e)) (set! cy4a8c@make-source-condition (record-constructor cy4a87@cy4a7f)) (set! cy4a8e@cy4a7b (record-accessor cy4a83@cy4a7e '0)) (set! cy4a90@cy4a7c (record-accessor cy4a83@cy4a7e '1)) (set! cy4a92@source-condition? (condition-predicate cy4a83@cy4a7e)) (set! cy4a94@source-filename (condition-accessor cy4a83@cy4a7e cy4a8e@cy4a7b)) (set! cy4a96@source-character (condition-accessor cy4a83@cy4a7e cy4a90@cy4a7c)) (if (pair? cy4a79@x) (cy4a8c@make-source-condition (car cy4a79@x) (cdr cy4a79@x)) (condition)))))) (set! cy4bf8@cy3198@make-source-condition cy3198@make-source-condition) (set! cy319a@extract-position-condition (lambda (cy4a97@x) (cy3198@make-source-condition (cy319c@expression-position cy4a97@x)))) (set! cy4bf9@cy319a@extract-position-condition cy319a@extract-position-condition) (set! cy319c@expression-position (lambda (cy4a99@x) (and (cy2e89@stx? cy4a99@x) (let ((cy4a9b@x (cy2e8b@stx-expr cy4a99@x))) (and (cy29fc@cy28d0@annotation? cy4a9b@x) (cy29fd@cy28d2@annotation-source cy4a9b@x)))))) (set! cy4bfa@cy319c@expression-position cy319c@expression-position) (set! cy319e@assertion-error (lambda (cy4a9d@expr cy4a9e@pos) (raise (condition (cy4f09@cy4ce4@make-assertion-violation) (cy4f1b@cy4d16@make-who-condition 'assert) (cy4edf@cy4c77@make-message-condition '"assertion failed") (cy4f11@cy4cfb@make-irritants-condition (list cy4a9d@expr)) (cy3198@make-source-condition cy4a9e@pos))))) (set! cy4bfb@cy319e@assertion-error cy319e@assertion-error) (set! cy31a0@syntax-error (lambda (cy4aa1@x . cy4aa3@args) (begin (if (not (for-all string? cy4aa3@args)) (assertion-violation 'syntax-error '"invalid argument" cy4aa3@args) (void)) (raise (condition (cy4edf@cy4c77@make-message-condition (if (null? cy4aa3@args) '"invalid syntax" (apply string-append cy4aa3@args))) (cy4f3d@cy4d72@make-syntax-violation (cy31aa@syntax->datum cy4aa1@x) '#f) (cy319a@extract-position-condition cy4aa1@x)))))) (set! cy4bfc@cy31a0@syntax-error cy31a0@syntax-error) (set! cy31a2@syntax-violation* (lambda (cy4aa5@who cy4aa6@msg cy4aa7@form cy4aa8@condition-object) (begin (if (not (string? cy4aa6@msg)) (assertion-violation 'syntax-violation '"message is not a string" cy4aa6@msg) (void)) (let ((cy4aad@who (if (or (string? cy4aa5@who) (symbol? cy4aa5@who)) cy4aa5@who (if (not cy4aa5@who) (let ((cy4aaf@t cy4aa7@form)) (let ((cy4ab1@ls/false (cy30c4@syntax-dispatch cy4aaf@t 'any))) (if (and cy4ab1@ls/false (apply (lambda (cy4ab3@id) (cy2ebd@id? cy4ab3@id)) cy4ab1@ls/false)) (apply (lambda (cy4ab5@id) (cy31aa@syntax->datum cy4ab5@id)) cy4ab1@ls/false) (let ((cy4ab7@t cy4aaf@t)) (let ((cy4ab9@ls/false (cy30c4@syntax-dispatch cy4ab7@t '(any . any)))) (if (and cy4ab9@ls/false (apply (lambda (cy4abb@id cy4abc@rest) (cy2ebd@id? cy4abb@id)) cy4ab9@ls/false)) (apply (lambda (cy4abf@id cy4ac0@rest) (cy31aa@syntax->datum cy4abf@id)) cy4ab9@ls/false) (let ((cy4ac3@t cy4ab7@t)) (let ((cy4ac5@ls/false (cy30c4@syntax-dispatch cy4ac3@t '_))) (if cy4ac5@ls/false (apply (lambda () '#f) cy4ac5@ls/false) (cy31a4@syntax-violation '#f '"invalid syntax" cy4ac3@t)))))))))) (assertion-violation 'syntax-violation '"invalid who argument" cy4aa5@who))))) (raise (condition (if cy4aad@who (cy4f1b@cy4d16@make-who-condition cy4aad@who) (condition)) (cy4edf@cy4c77@make-message-condition cy4aa6@msg) cy4aa8@condition-object (cy319a@extract-position-condition cy4aa7@form))))))) (set! cy4bfd@cy31a2@syntax-violation* cy31a2@syntax-violation*) (set! cy31a4@syntax-violation (lambda cy4ad5 (let ((cy4ad6 (length cy4ad5))) (if (= cy4ad6 '3) (apply (lambda (cy4ac7@who cy4ac8@msg cy4ac9@form) (cy31a4@syntax-violation cy4ac7@who cy4ac8@msg cy4ac9@form '#f)) cy4ad5) (if (= cy4ad6 '4) (apply (lambda (cy4acd@who cy4ace@msg cy4acf@form cy4ad0@subform) (cy31a2@syntax-violation* cy4acd@who cy4ace@msg cy4acf@form (cy4f3d@cy4d72@make-syntax-violation (cy31aa@syntax->datum cy4acf@form) (cy31aa@syntax->datum cy4ad0@subform)))) cy4ad5) (error 'apply '"invalid arg count")))))) (set! cy4bfe@cy31a4@syntax-violation cy31a4@syntax-violation) (set! cy31a6@identifier? (lambda (cy4ad7@x) (cy2ebd@id? cy4ad7@x))) (set! cy4bff@cy31a6@identifier? cy31a6@identifier?) (set! cy31a8@datum->syntax (lambda (cy4ad9@id cy4ada@datum) (if (cy2ebd@id? cy4ad9@id) (cy2e9d@datum->stx cy4ad9@id cy4ada@datum) (assertion-violation 'datum->syntax '"not an identifier" cy4ad9@id)))) (set! cy4c00@cy31a8@datum->syntax cy31a8@datum->syntax) (set! cy31aa@syntax->datum (lambda (cy4add@x) (cy2ed1@stx->datum cy4add@x))) (set! cy4c01@cy31aa@syntax->datum cy31aa@syntax->datum) (set! cy31ac@ungensym-all (lambda (cy4adf@code) (if (pair? cy4adf@code) (cons (cy31ac@ungensym-all (car cy4adf@code)) (cy31ac@ungensym-all (cdr cy4adf@code))) (if (symbol? cy4adf@code) (ungensym cy4adf@code) cy4adf@code)))) (set! cy4c02@cy31ac@ungensym-all cy31ac@ungensym-all) (set! cy31ae@compile-r6rs-top-level (lambda (cy4ae1@x*) (call-with-values (lambda () (cy313c@top-level-expander cy4ae1@x*)) (lambda (cy4ae7@cy4ae4 cy4ae8@cy4ae6) (let ((cy4aeb@invoke-code cy4ae8@cy4ae6) (cy4aec@lib* cy4ae7@cy4ae4)) (lambda () (begin (for-each cy2cd3@cy2b21@invoke-library cy4aec@lib*) (let ((cy4aef@expanded (cy2a5d@cy2a15@expanded->core cy4aeb@invoke-code))) (begin (if (symbol-value 'debug-expand) (format '#t '"psyntax expanded=~a\n" (cy31ac@ungensym-all cy4aef@expanded)) (void)) (eval-core cy4aef@expanded)))))))))) (set! cy4c03@cy31ae@compile-r6rs-top-level cy31ae@compile-r6rs-top-level) (set! cy31b0@pre-compile-r6rs-top-level (lambda (cy4af1@x*) (call-with-values (lambda () (cy313c@top-level-expander cy4af1@x*)) (lambda (cy4af7@cy4af4 cy4af8@cy4af6) (let ((cy4afb@invoke-code cy4af8@cy4af6) (cy4afc@lib* cy4af7@cy4af4)) (begin (for-each cy2cd3@cy2b21@invoke-library cy4afc@lib*) (cy2a05@cy28e2@compile-core (cy2a5d@cy2a15@expanded->core cy4afb@invoke-code)))))))) (set! cy4c04@cy31b0@pre-compile-r6rs-top-level cy31b0@pre-compile-r6rs-top-level) (set! cy31b2@interaction-environment (let ((cy4aff@the-env '#f)) (lambda () (or cy4aff@the-env (let ((cy4b01@lib (cy2ccc@cy2b13@find-library-by-name '(mosh interaction))) (cy4b02@rib (cy2e71@make-empty-rib))) (begin (let ((cy4b05@subst (cy2cae@cy2ad7@library-subst cy4b01@lib))) (begin (cy2e5d@set-rib-sym*! cy4b02@rib (map car cy4b05@subst)) (cy2e61@set-rib-mark**! cy4b02@rib (map (lambda (cy4b07@x) cy2e41@top-mark*) cy4b05@subst)) (cy2e65@set-rib-label*! cy4b02@rib (map cdr cy4b05@subst)))) (let ((cy4b09@env (make-simple-struct 'interaction-env '4 (list cy4b02@rib '() '())))) (begin (set! cy4aff@the-env cy4b09@env) cy4b09@env)))))))) (set! cy4c05@cy31b2@interaction-environment cy31b2@interaction-environment) (set! cy31b4@top-level-context (cy2a07@cy28e6@make-parameter '#f)) (set! cy4c06@cy31b4@top-level-context cy31b4@top-level-context) (cy2cc9@cy2b0d@current-library-expander cy3186@library-expander))
(begin (set! cy4c15@cy4c10 (unspecified)) (set! cy4c17@cy4c12 (unspecified)) (set! cy4c19@cy4c11 (unspecified)) (set! cy4c1c@&condition? (unspecified)) (set! cy4c1e@make-&condition (unspecified)) (set! cy4c20@&condition-rtd (unspecified)) (set! cy4c22@&condition-rcd (unspecified)) (set! cy4c6e@cy4c69 (unspecified)) (set! cy4c70@cy4c6b (unspecified)) (set! cy4c72@cy4c6a (unspecified)) (set! cy4c75@p? (unspecified)) (set! cy4c77@make-message-condition (unspecified)) (set! cy4c79@cy4c68 (unspecified)) (set! cy4c7b@message-condition? (unspecified)) (set! cy4c7d@condition-message (unspecified)) (set! cy4c7f@&message-rtd (unspecified)) (set! cy4c81@&message-rcd (unspecified)) (set! cy4c87@cy4c82 (unspecified)) (set! cy4c89@cy4c84 (unspecified)) (set! cy4c8b@cy4c83 (unspecified)) (set! cy4c8e@p? (unspecified)) (set! cy4c90@make-warning (unspecified)) (set! cy4c92@warning? (unspecified)) (set! cy4c94@&warning-rtd (unspecified)) (set! cy4c96@&warning-rcd (unspecified)) (set! cy4c9c@cy4c97 (unspecified)) (set! cy4c9e@cy4c99 (unspecified)) (set! cy4ca0@cy4c98 (unspecified)) (set! cy4ca3@p? (unspecified)) (set! cy4ca5@make-serious-condition (unspecified)) (set! cy4ca7@serious-condition? (unspecified)) (set! cy4ca9@&serious-rtd (unspecified)) (set! cy4cab@&serious-rcd (unspecified)) (set! cy4cb1@cy4cac (unspecified)) (set! cy4cb3@cy4cae (unspecified)) (set! cy4cb5@cy4cad (unspecified)) (set! cy4cb8@p? (unspecified)) (set! cy4cba@make-error (unspecified)) (set! cy4cbc@error? (unspecified)) (set! cy4cbe@&error-rtd (unspecified)) (set! cy4cc0@&error-rcd (unspecified)) (set! cy4cc6@cy4cc1 (unspecified)) (set! cy4cc8@cy4cc3 (unspecified)) (set! cy4cca@cy4cc2 (unspecified)) (set! cy4ccd@p? (unspecified)) (set! cy4ccf@make-violation (unspecified)) (set! cy4cd1@violation? (unspecified)) (set! cy4cd3@&violation-rtd (unspecified)) (set! cy4cd5@&violation-rcd (unspecified)) (set! cy4cdb@cy4cd6 (unspecified)) (set! cy4cdd@cy4cd8 (unspecified)) (set! cy4cdf@cy4cd7 (unspecified)) (set! cy4ce2@p? (unspecified)) (set! cy4ce4@make-assertion-violation (unspecified)) (set! cy4ce6@assertion-violation? (unspecified)) (set! cy4ce8@&assertion-rtd (unspecified)) (set! cy4cea@&assertion-rcd (unspecified)) (set! cy4cf2@cy4ced (unspecified)) (set! cy4cf4@cy4cef (unspecified)) (set! cy4cf6@cy4cee (unspecified)) (set! cy4cf9@p? (unspecified)) (set! cy4cfb@make-irritants-condition (unspecified)) (set! cy4cfd@cy4cec (unspecified)) (set! cy4cff@irritants-condition? (unspecified)) (set! cy4d01@condition-irritants (unspecified)) (set! cy4d03@&irritants-rtd (unspecified)) (set! cy4d05@&irritants-rcd (unspecified)) (set! cy4d0d@cy4d08 (unspecified)) (set! cy4d0f@cy4d0a (unspecified)) (set! cy4d11@cy4d09 (unspecified)) (set! cy4d14@p? (unspecified)) (set! cy4d16@make-who-condition (unspecified)) (set! cy4d18@cy4d07 (unspecified)) (set! cy4d1a@who-condition? (unspecified)) (set! cy4d1c@condition-who (unspecified)) (set! cy4d1e@&who-rtd (unspecified)) (set! cy4d20@&who-rcd (unspecified)) (set! cy4d26@cy4d21 (unspecified)) (set! cy4d28@cy4d23 (unspecified)) (set! cy4d2a@cy4d22 (unspecified)) (set! cy4d2d@p? (unspecified)) (set! cy4d2f@make-non-continuable-violation (unspecified)) (set! cy4d31@non-continuable-violation? (unspecified)) (set! cy4d33@&non-continuable-rtd (unspecified)) (set! cy4d35@&non-continuable-rcd (unspecified)) (set! cy4d3b@cy4d36 (unspecified)) (set! cy4d3d@cy4d38 (unspecified)) (set! cy4d3f@cy4d37 (unspecified)) (set! cy4d42@p? (unspecified)) (set! cy4d44@make-implementation-restriction-violation (unspecified)) (set! cy4d46@implementation-restriction-violation? (unspecified)) (set! cy4d48@&implementation-restriction-rtd (unspecified)) (set! cy4d4a@&implementation-restriction-rcd (unspecified)) (set! cy4d50@cy4d4b (unspecified)) (set! cy4d52@cy4d4d (unspecified)) (set! cy4d54@cy4d4c (unspecified)) (set! cy4d57@p? (unspecified)) (set! cy4d59@make-lexical-violation (unspecified)) (set! cy4d5b@lexical-violation? (unspecified)) (set! cy4d5d@&lexical-rtd (unspecified)) (set! cy4d5f@&lexical-rcd (unspecified)) (set! cy4d69@cy4d64 (unspecified)) (set! cy4d6b@cy4d66 (unspecified)) (set! cy4d6d@cy4d65 (unspecified)) (set! cy4d70@p? (unspecified)) (set! cy4d72@make-syntax-violation (unspecified)) (set! cy4d74@cy4d61 (unspecified)) (set! cy4d76@cy4d63 (unspecified)) (set! cy4d78@syntax-violation? (unspecified)) (set! cy4d7a@syntax-violation-form (unspecified)) (set! cy4d7c@syntax-violation-subform (unspecified)) (set! cy4d7e@&syntax-rtd (unspecified)) (set! cy4d80@&syntax-rcd (unspecified)) (set! cy4d86@cy4d81 (unspecified)) (set! cy4d88@cy4d83 (unspecified)) (set! cy4d8a@cy4d82 (unspecified)) (set! cy4d8d@p? (unspecified)) (set! cy4d8f@make-undefined-violation (unspecified)) (set! cy4d91@undefined-violation? (unspecified)) (set! cy4d93@&undefined-rtd (unspecified)) (set! cy4d95@&undefined-rcd (unspecified)) (set! cy4d9b@cy4d96 (unspecified)) (set! cy4d9d@cy4d98 (unspecified)) (set! cy4d9f@cy4d97 (unspecified)) (set! cy4da2@p? (unspecified)) (set! cy4da4@make-i/o-error (unspecified)) (set! cy4da6@i/o-error? (unspecified)) (set! cy4da8@&i/o-rtd (unspecified)) (set! cy4daa@&i/o-rcd (unspecified)) (set! cy4db0@cy4dab (unspecified)) (set! cy4db2@cy4dad (unspecified)) (set! cy4db4@cy4dac (unspecified)) (set! cy4db7@p? (unspecified)) (set! cy4db9@make-i/o-read-error (unspecified)) (set! cy4dbb@i/o-read-error? (unspecified)) (set! cy4dbd@&i/o-read-rtd (unspecified)) (set! cy4dbf@&i/o-read-rcd (unspecified)) (set! cy4dc5@cy4dc0 (unspecified)) (set! cy4dc7@cy4dc2 (unspecified)) (set! cy4dc9@cy4dc1 (unspecified)) (set! cy4dcc@p? (unspecified)) (set! cy4dce@make-i/o-write-error (unspecified)) (set! cy4dd0@i/o-write-error? (unspecified)) (set! cy4dd2@&i/o-write-rtd (unspecified)) (set! cy4dd4@&i/o-write-rcd (unspecified)) (set! cy4ddc@cy4dd7 (unspecified)) (set! cy4dde@cy4dd9 (unspecified)) (set! cy4de0@cy4dd8 (unspecified)) (set! cy4de3@p? (unspecified)) (set! cy4de5@make-i/o-invalid-position-error (unspecified)) (set! cy4de7@cy4dd6 (unspecified)) (set! cy4de9@i/o-invalid-position-error? (unspecified)) (set! cy4deb@i/o-error-position (unspecified)) (set! cy4ded@&i/o-invalid-position-rtd (unspecified)) (set! cy4def@&i/o-invalid-position-rcd (unspecified)) (set! cy4df7@cy4df2 (unspecified)) (set! cy4df9@cy4df4 (unspecified)) (set! cy4dfb@cy4df3 (unspecified)) (set! cy4dfe@p? (unspecified)) (set! cy4e00@make-i/o-filename-error (unspecified)) (set! cy4e02@cy4df1 (unspecified)) (set! cy4e04@i/o-filename-error? (unspecified)) (set! cy4e06@i/o-error-filename (unspecified)) (set! cy4e08@&i/o-filename-rtd (unspecified)) (set! cy4e0a@&i/o-filename-rcd (unspecified)) (set! cy4e10@cy4e0b (unspecified)) (set! cy4e12@cy4e0d (unspecified)) (set! cy4e14@cy4e0c (unspecified)) (set! cy4e17@p? (unspecified)) (set! cy4e19@make-i/o-file-protection-error (unspecified)) (set! cy4e1b@i/o-file-protection-error? (unspecified)) (set! cy4e1d@&i/o-file-protection-rtd (unspecified)) (set! cy4e1f@&i/o-file-protection-rcd (unspecified)) (set! cy4e25@cy4e20 (unspecified)) (set! cy4e27@cy4e22 (unspecified)) (set! cy4e29@cy4e21 (unspecified)) (set! cy4e2c@p? (unspecified)) (set! cy4e2e@make-i/o-file-is-read-only-error (unspecified)) (set! cy4e30@i/o-file-is-read-only-error? (unspecified)) (set! cy4e32@&i/o-file-is-read-only-rtd (unspecified)) (set! cy4e34@&i/o-file-is-read-only-rcd (unspecified)) (set! cy4e3a@cy4e35 (unspecified)) (set! cy4e3c@cy4e37 (unspecified)) (set! cy4e3e@cy4e36 (unspecified)) (set! cy4e41@p? (unspecified)) (set! cy4e43@make-i/o-file-already-exists-error (unspecified)) (set! cy4e45@i/o-file-already-exists-error? (unspecified)) (set! cy4e47@&i/o-file-already-exists-rtd (unspecified)) (set! cy4e49@&i/o-file-already-exists-rcd (unspecified)) (set! cy4e4f@cy4e4a (unspecified)) (set! cy4e51@cy4e4c (unspecified)) (set! cy4e53@cy4e4b (unspecified)) (set! cy4e56@p? (unspecified)) (set! cy4e58@make-i/o-file-does-not-exist-error (unspecified)) (set! cy4e5a@i/o-file-does-not-exist-error? (unspecified)) (set! cy4e5c@&i/o-file-does-not-exist-rtd (unspecified)) (set! cy4e5e@&i/o-file-does-not-exist-rcd (unspecified)) (set! cy4e66@cy4e61 (unspecified)) (set! cy4e68@cy4e63 (unspecified)) (set! cy4e6a@cy4e62 (unspecified)) (set! cy4e6d@p? (unspecified)) (set! cy4e6f@make-i/o-port-error (unspecified)) (set! cy4e71@cy4e60 (unspecified)) (set! cy4e73@i/o-port-error? (unspecified)) (set! cy4e75@i/o-error-port (unspecified)) (set! cy4e77@&i/o-port-rtd (unspecified)) (set! cy4e79@&i/o-port-rcd (unspecified)) (set! cy4e7f@cy4e7a (unspecified)) (set! cy4e81@cy4e7c (unspecified)) (set! cy4e83@cy4e7b (unspecified)) (set! cy4e86@p? (unspecified)) (set! cy4e88@make-i/o-decoding-error (unspecified)) (set! cy4e8a@i/o-decoding-error? (unspecified)) (set! cy4e8c@&i/o-decoding-rtd (unspecified)) (set! cy4e8e@&i/o-decoding-rcd (unspecified)) (set! cy4e96@cy4e91 (unspecified)) (set! cy4e98@cy4e93 (unspecified)) (set! cy4e9a@cy4e92 (unspecified)) (set! cy4e9d@p? (unspecified)) (set! cy4e9f@make-i/o-encoding-error (unspecified)) (set! cy4ea1@cy4e90 (unspecified)) (set! cy4ea3@i/o-encoding-error? (unspecified)) (set! cy4ea5@i/o-encoding-error-char (unspecified)) (set! cy4ea7@&i/o-encoding-rtd (unspecified)) (set! cy4ea9@&i/o-encoding-rcd (unspecified)) (set! cy4eaf@cy4eaa (unspecified)) (set! cy4eb1@cy4eac (unspecified)) (set! cy4eb3@cy4eab (unspecified)) (set! cy4eb6@p? (unspecified)) (set! cy4eb8@make-no-infinities-violation (unspecified)) (set! cy4eba@no-infinities-violation? (unspecified)) (set! cy4ebc@&no-infinities-rtd (unspecified)) (set! cy4ebe@&no-infinities-rcd (unspecified)) (set! cy4ec4@cy4ebf (unspecified)) (set! cy4ec6@cy4ec1 (unspecified)) (set! cy4ec8@cy4ec0 (unspecified)) (set! cy4ecb@p? (unspecified)) (set! cy4ecd@make-no-nans-violation (unspecified)) (set! cy4ecf@no-nans-violation? (unspecified)) (set! cy4ed1@&no-nans-rtd (unspecified)) (set! cy4ed3@&no-nans-rcd (unspecified)) (set! cy4c15@cy4c10 (make-record-type-descriptor '&condition '#f 'cy4c13 '#f '#f '#())) (set! cy4ed4@cy4c15@cy4c10 cy4c15@cy4c10) (set! cy4c17@cy4c12 '#f) (set! cy4ed5@cy4c17@cy4c12 cy4c17@cy4c12) (set! cy4c19@cy4c11 (make-record-constructor-descriptor cy4c15@cy4c10 '#f cy4c17@cy4c12)) (set! cy4ed6@cy4c19@cy4c11 cy4c19@cy4c11) (set! cy4c1c@&condition? (record-predicate cy4c15@cy4c10)) (set! cy4ed7@cy4c1c@&condition? cy4c1c@&condition?) (set! cy4c1e@make-&condition (record-constructor cy4c19@cy4c11)) (set! cy4ed8@cy4c1e@make-&condition cy4c1e@make-&condition) (set! cy4c20@&condition-rtd cy4c15@cy4c10) (set! cy4ed9@cy4c20@&condition-rtd cy4c20@&condition-rtd) (set! cy4c22@&condition-rcd cy4c19@cy4c11) (set! cy4eda@cy4c22@&condition-rcd cy4c22@&condition-rcd) (set! cy4c6e@cy4c69 (make-record-type-descriptor '&message cy4c15@cy4c10 'cy4c6c '#f '#f '#((immutable message)))) (set! cy4edb@cy4c6e@cy4c69 cy4c6e@cy4c69) (set! cy4c70@cy4c6b '#f) (set! cy4edc@cy4c70@cy4c6b cy4c70@cy4c6b) (set! cy4c72@cy4c6a (make-record-constructor-descriptor cy4c6e@cy4c69 cy4c19@cy4c11 cy4c70@cy4c6b)) (set! cy4edd@cy4c72@cy4c6a cy4c72@cy4c6a) (set! cy4c75@p? (record-predicate cy4c6e@cy4c69)) (set! cy4ede@cy4c75@p? cy4c75@p?) (set! cy4c77@make-message-condition (record-constructor cy4c72@cy4c6a)) (set! cy4edf@cy4c77@make-message-condition cy4c77@make-message-condition) (set! cy4c79@cy4c68 (record-accessor cy4c6e@cy4c69 '0)) (set! cy4ee0@cy4c79@cy4c68 cy4c79@cy4c68) (set! cy4c7b@message-condition? (condition-predicate cy4c6e@cy4c69)) (set! cy4ee1@cy4c7b@message-condition? cy4c7b@message-condition?) (set! cy4c7d@condition-message (condition-accessor cy4c6e@cy4c69 cy4c79@cy4c68)) (set! cy4ee2@cy4c7d@condition-message cy4c7d@condition-message) (set! cy4c7f@&message-rtd cy4c6e@cy4c69) (set! cy4ee3@cy4c7f@&message-rtd cy4c7f@&message-rtd) (set! cy4c81@&message-rcd cy4c72@cy4c6a) (set! cy4ee4@cy4c81@&message-rcd cy4c81@&message-rcd) (set! cy4c87@cy4c82 (make-record-type-descriptor '&warning cy4c15@cy4c10 'cy4c85 '#f '#f '#())) (set! cy4ee5@cy4c87@cy4c82 cy4c87@cy4c82) (set! cy4c89@cy4c84 '#f) (set! cy4ee6@cy4c89@cy4c84 cy4c89@cy4c84) (set! cy4c8b@cy4c83 (make-record-constructor-descriptor cy4c87@cy4c82 cy4c19@cy4c11 cy4c89@cy4c84)) (set! cy4ee7@cy4c8b@cy4c83 cy4c8b@cy4c83) (set! cy4c8e@p? (record-predicate cy4c87@cy4c82)) (set! cy4ee8@cy4c8e@p? cy4c8e@p?) (set! cy4c90@make-warning (record-constructor cy4c8b@cy4c83)) (set! cy4ee9@cy4c90@make-warning cy4c90@make-warning) (set! cy4c92@warning? (condition-predicate cy4c87@cy4c82)) (set! cy4eea@cy4c92@warning? cy4c92@warning?) (set! cy4c94@&warning-rtd cy4c87@cy4c82) (set! cy4eeb@cy4c94@&warning-rtd cy4c94@&warning-rtd) (set! cy4c96@&warning-rcd cy4c8b@cy4c83) (set! cy4eec@cy4c96@&warning-rcd cy4c96@&warning-rcd) (set! cy4c9c@cy4c97 (make-record-type-descriptor '&serious cy4c15@cy4c10 'cy4c9a '#f '#f '#())) (set! cy4eed@cy4c9c@cy4c97 cy4c9c@cy4c97) (set! cy4c9e@cy4c99 '#f) (set! cy4eee@cy4c9e@cy4c99 cy4c9e@cy4c99) (set! cy4ca0@cy4c98 (make-record-constructor-descriptor cy4c9c@cy4c97 cy4c19@cy4c11 cy4c9e@cy4c99)) (set! cy4eef@cy4ca0@cy4c98 cy4ca0@cy4c98) (set! cy4ca3@p? (record-predicate cy4c9c@cy4c97)) (set! cy4ef0@cy4ca3@p? cy4ca3@p?) (set! cy4ca5@make-serious-condition (record-constructor cy4ca0@cy4c98)) (set! cy4ef1@cy4ca5@make-serious-condition cy4ca5@make-serious-condition) (set! cy4ca7@serious-condition? (condition-predicate cy4c9c@cy4c97)) (set! cy4ef2@cy4ca7@serious-condition? cy4ca7@serious-condition?) (set! cy4ca9@&serious-rtd cy4c9c@cy4c97) (set! cy4ef3@cy4ca9@&serious-rtd cy4ca9@&serious-rtd) (set! cy4cab@&serious-rcd cy4ca0@cy4c98) (set! cy4ef4@cy4cab@&serious-rcd cy4cab@&serious-rcd) (set! cy4cb1@cy4cac (make-record-type-descriptor '&error cy4c9c@cy4c97 'cy4caf '#f '#f '#())) (set! cy4ef5@cy4cb1@cy4cac cy4cb1@cy4cac) (set! cy4cb3@cy4cae '#f) (set! cy4ef6@cy4cb3@cy4cae cy4cb3@cy4cae) (set! cy4cb5@cy4cad (make-record-constructor-descriptor cy4cb1@cy4cac cy4ca0@cy4c98 cy4cb3@cy4cae)) (set! cy4ef7@cy4cb5@cy4cad cy4cb5@cy4cad) (set! cy4cb8@p? (record-predicate cy4cb1@cy4cac)) (set! cy4ef8@cy4cb8@p? cy4cb8@p?) (set! cy4cba@make-error (record-constructor cy4cb5@cy4cad)) (set! cy4ef9@cy4cba@make-error cy4cba@make-error) (set! cy4cbc@error? (condition-predicate cy4cb1@cy4cac)) (set! cy4efa@cy4cbc@error? cy4cbc@error?) (set! cy4cbe@&error-rtd cy4cb1@cy4cac) (set! cy4efb@cy4cbe@&error-rtd cy4cbe@&error-rtd) (set! cy4cc0@&error-rcd cy4cb5@cy4cad) (set! cy4efc@cy4cc0@&error-rcd cy4cc0@&error-rcd) (set! cy4cc6@cy4cc1 (make-record-type-descriptor '&violation cy4c9c@cy4c97 'cy4cc4 '#f '#f '#())) (set! cy4efd@cy4cc6@cy4cc1 cy4cc6@cy4cc1) (set! cy4cc8@cy4cc3 '#f) (set! cy4efe@cy4cc8@cy4cc3 cy4cc8@cy4cc3) (set! cy4cca@cy4cc2 (make-record-constructor-descriptor cy4cc6@cy4cc1 cy4ca0@cy4c98 cy4cc8@cy4cc3)) (set! cy4eff@cy4cca@cy4cc2 cy4cca@cy4cc2) (set! cy4ccd@p? (record-predicate cy4cc6@cy4cc1)) (set! cy4f00@cy4ccd@p? cy4ccd@p?) (set! cy4ccf@make-violation (record-constructor cy4cca@cy4cc2)) (set! cy4f01@cy4ccf@make-violation cy4ccf@make-violation) (set! cy4cd1@violation? (condition-predicate cy4cc6@cy4cc1)) (set! cy4f02@cy4cd1@violation? cy4cd1@violation?) (set! cy4cd3@&violation-rtd cy4cc6@cy4cc1) (set! cy4f03@cy4cd3@&violation-rtd cy4cd3@&violation-rtd) (set! cy4cd5@&violation-rcd cy4cca@cy4cc2) (set! cy4f04@cy4cd5@&violation-rcd cy4cd5@&violation-rcd) (set! cy4cdb@cy4cd6 (make-record-type-descriptor '&assertion cy4cc6@cy4cc1 'cy4cd9 '#f '#f '#())) (set! cy4f05@cy4cdb@cy4cd6 cy4cdb@cy4cd6) (set! cy4cdd@cy4cd8 '#f) (set! cy4f06@cy4cdd@cy4cd8 cy4cdd@cy4cd8) (set! cy4cdf@cy4cd7 (make-record-constructor-descriptor cy4cdb@cy4cd6 cy4cca@cy4cc2 cy4cdd@cy4cd8)) (set! cy4f07@cy4cdf@cy4cd7 cy4cdf@cy4cd7) (set! cy4ce2@p? (record-predicate cy4cdb@cy4cd6)) (set! cy4f08@cy4ce2@p? cy4ce2@p?) (set! cy4ce4@make-assertion-violation (record-constructor cy4cdf@cy4cd7)) (set! cy4f09@cy4ce4@make-assertion-violation cy4ce4@make-assertion-violation) (set! cy4ce6@assertion-violation? (condition-predicate cy4cdb@cy4cd6)) (set! cy4f0a@cy4ce6@assertion-violation? cy4ce6@assertion-violation?) (set! cy4ce8@&assertion-rtd cy4cdb@cy4cd6) (set! cy4f0b@cy4ce8@&assertion-rtd cy4ce8@&assertion-rtd) (set! cy4cea@&assertion-rcd cy4cdf@cy4cd7) (set! cy4f0c@cy4cea@&assertion-rcd cy4cea@&assertion-rcd) (set! cy4cf2@cy4ced (make-record-type-descriptor '&irritants cy4c15@cy4c10 'cy4cf0 '#f '#f '#((immutable irritants)))) (set! cy4f0d@cy4cf2@cy4ced cy4cf2@cy4ced) (set! cy4cf4@cy4cef '#f) (set! cy4f0e@cy4cf4@cy4cef cy4cf4@cy4cef) (set! cy4cf6@cy4cee (make-record-constructor-descriptor cy4cf2@cy4ced cy4c19@cy4c11 cy4cf4@cy4cef)) (set! cy4f0f@cy4cf6@cy4cee cy4cf6@cy4cee) (set! cy4cf9@p? (record-predicate cy4cf2@cy4ced)) (set! cy4f10@cy4cf9@p? cy4cf9@p?) (set! cy4cfb@make-irritants-condition (record-constructor cy4cf6@cy4cee)) (set! cy4f11@cy4cfb@make-irritants-condition cy4cfb@make-irritants-condition) (set! cy4cfd@cy4cec (record-accessor cy4cf2@cy4ced '0)) (set! cy4f12@cy4cfd@cy4cec cy4cfd@cy4cec) (set! cy4cff@irritants-condition? (condition-predicate cy4cf2@cy4ced)) (set! cy4f13@cy4cff@irritants-condition? cy4cff@irritants-condition?) (set! cy4d01@condition-irritants (condition-accessor cy4cf2@cy4ced cy4cfd@cy4cec)) (set! cy4f14@cy4d01@condition-irritants cy4d01@condition-irritants) (set! cy4d03@&irritants-rtd cy4cf2@cy4ced) (set! cy4f15@cy4d03@&irritants-rtd cy4d03@&irritants-rtd) (set! cy4d05@&irritants-rcd cy4cf6@cy4cee) (set! cy4f16@cy4d05@&irritants-rcd cy4d05@&irritants-rcd) (set! cy4d0d@cy4d08 (make-record-type-descriptor '&who cy4c15@cy4c10 'cy4d0b '#f '#f '#((immutable who)))) (set! cy4f17@cy4d0d@cy4d08 cy4d0d@cy4d08) (set! cy4d0f@cy4d0a '#f) (set! cy4f18@cy4d0f@cy4d0a cy4d0f@cy4d0a) (set! cy4d11@cy4d09 (make-record-constructor-descriptor cy4d0d@cy4d08 cy4c19@cy4c11 cy4d0f@cy4d0a)) (set! cy4f19@cy4d11@cy4d09 cy4d11@cy4d09) (set! cy4d14@p? (record-predicate cy4d0d@cy4d08)) (set! cy4f1a@cy4d14@p? cy4d14@p?) (set! cy4d16@make-who-condition (record-constructor cy4d11@cy4d09)) (set! cy4f1b@cy4d16@make-who-condition cy4d16@make-who-condition) (set! cy4d18@cy4d07 (record-accessor cy4d0d@cy4d08 '0)) (set! cy4f1c@cy4d18@cy4d07 cy4d18@cy4d07) (set! cy4d1a@who-condition? (condition-predicate cy4d0d@cy4d08)) (set! cy4f1d@cy4d1a@who-condition? cy4d1a@who-condition?) (set! cy4d1c@condition-who (condition-accessor cy4d0d@cy4d08 cy4d18@cy4d07)) (set! cy4f1e@cy4d1c@condition-who cy4d1c@condition-who) (set! cy4d1e@&who-rtd cy4d0d@cy4d08) (set! cy4f1f@cy4d1e@&who-rtd cy4d1e@&who-rtd) (set! cy4d20@&who-rcd cy4d11@cy4d09) (set! cy4f20@cy4d20@&who-rcd cy4d20@&who-rcd) (set! cy4d26@cy4d21 (make-record-type-descriptor '&non-continuable cy4cc6@cy4cc1 'cy4d24 '#f '#f '#())) (set! cy4f21@cy4d26@cy4d21 cy4d26@cy4d21) (set! cy4d28@cy4d23 '#f) (set! cy4f22@cy4d28@cy4d23 cy4d28@cy4d23) (set! cy4d2a@cy4d22 (make-record-constructor-descriptor cy4d26@cy4d21 cy4cca@cy4cc2 cy4d28@cy4d23)) (set! cy4f23@cy4d2a@cy4d22 cy4d2a@cy4d22) (set! cy4d2d@p? (record-predicate cy4d26@cy4d21)) (set! cy4f24@cy4d2d@p? cy4d2d@p?) (set! cy4d2f@make-non-continuable-violation (record-constructor cy4d2a@cy4d22)) (set! cy4f25@cy4d2f@make-non-continuable-violation cy4d2f@make-non-continuable-violation) (set! cy4d31@non-continuable-violation? (condition-predicate cy4d26@cy4d21)) (set! cy4f26@cy4d31@non-continuable-violation? cy4d31@non-continuable-violation?) (set! cy4d33@&non-continuable-rtd cy4d26@cy4d21) (set! cy4f27@cy4d33@&non-continuable-rtd cy4d33@&non-continuable-rtd) (set! cy4d35@&non-continuable-rcd cy4d2a@cy4d22) (set! cy4f28@cy4d35@&non-continuable-rcd cy4d35@&non-continuable-rcd) (set! cy4d3b@cy4d36 (make-record-type-descriptor '&implementation-restriction cy4cc6@cy4cc1 'cy4d39 '#f '#f '#())) (set! cy4f29@cy4d3b@cy4d36 cy4d3b@cy4d36) (set! cy4d3d@cy4d38 '#f) (set! cy4f2a@cy4d3d@cy4d38 cy4d3d@cy4d38) (set! cy4d3f@cy4d37 (make-record-constructor-descriptor cy4d3b@cy4d36 cy4cca@cy4cc2 cy4d3d@cy4d38)) (set! cy4f2b@cy4d3f@cy4d37 cy4d3f@cy4d37) (set! cy4d42@p? (record-predicate cy4d3b@cy4d36)) (set! cy4f2c@cy4d42@p? cy4d42@p?) (set! cy4d44@make-implementation-restriction-violation (record-constructor cy4d3f@cy4d37)) (set! cy4f2d@cy4d44@make-implementation-restriction-violation cy4d44@make-implementation-restriction-violation) (set! cy4d46@implementation-restriction-violation? (condition-predicate cy4d3b@cy4d36)) (set! cy4f2e@cy4d46@implementation-restriction-violation? cy4d46@implementation-restriction-violation?) (set! cy4d48@&implementation-restriction-rtd cy4d3b@cy4d36) (set! cy4f2f@cy4d48@&implementation-restriction-rtd cy4d48@&implementation-restriction-rtd) (set! cy4d4a@&implementation-restriction-rcd cy4d3f@cy4d37) (set! cy4f30@cy4d4a@&implementation-restriction-rcd cy4d4a@&implementation-restriction-rcd) (set! cy4d50@cy4d4b (make-record-type-descriptor '&lexical cy4cc6@cy4cc1 'cy4d4e '#f '#f '#())) (set! cy4f31@cy4d50@cy4d4b cy4d50@cy4d4b) (set! cy4d52@cy4d4d '#f) (set! cy4f32@cy4d52@cy4d4d cy4d52@cy4d4d) (set! cy4d54@cy4d4c (make-record-constructor-descriptor cy4d50@cy4d4b cy4cca@cy4cc2 cy4d52@cy4d4d)) (set! cy4f33@cy4d54@cy4d4c cy4d54@cy4d4c) (set! cy4d57@p? (record-predicate cy4d50@cy4d4b)) (set! cy4f34@cy4d57@p? cy4d57@p?) (set! cy4d59@make-lexical-violation (record-constructor cy4d54@cy4d4c)) (set! cy4f35@cy4d59@make-lexical-violation cy4d59@make-lexical-violation) (set! cy4d5b@lexical-violation? (condition-predicate cy4d50@cy4d4b)) (set! cy4f36@cy4d5b@lexical-violation? cy4d5b@lexical-violation?) (set! cy4d5d@&lexical-rtd cy4d50@cy4d4b) (set! cy4f37@cy4d5d@&lexical-rtd cy4d5d@&lexical-rtd) (set! cy4d5f@&lexical-rcd cy4d54@cy4d4c) (set! cy4f38@cy4d5f@&lexical-rcd cy4d5f@&lexical-rcd) (set! cy4d69@cy4d64 (make-record-type-descriptor '&syntax cy4cc6@cy4cc1 'cy4d67 '#f '#f '#((immutable form) (immutable subform)))) (set! cy4f39@cy4d69@cy4d64 cy4d69@cy4d64) (set! cy4d6b@cy4d66 '#f) (set! cy4f3a@cy4d6b@cy4d66 cy4d6b@cy4d66) (set! cy4d6d@cy4d65 (make-record-constructor-descriptor cy4d69@cy4d64 cy4cca@cy4cc2 cy4d6b@cy4d66)) (set! cy4f3b@cy4d6d@cy4d65 cy4d6d@cy4d65) (set! cy4d70@p? (record-predicate cy4d69@cy4d64)) (set! cy4f3c@cy4d70@p? cy4d70@p?) (set! cy4d72@make-syntax-violation (record-constructor cy4d6d@cy4d65)) (set! cy4f3d@cy4d72@make-syntax-violation cy4d72@make-syntax-violation) (set! cy4d74@cy4d61 (record-accessor cy4d69@cy4d64 '0)) (set! cy4f3e@cy4d74@cy4d61 cy4d74@cy4d61) (set! cy4d76@cy4d63 (record-accessor cy4d69@cy4d64 '1)) (set! cy4f3f@cy4d76@cy4d63 cy4d76@cy4d63) (set! cy4d78@syntax-violation? (condition-predicate cy4d69@cy4d64)) (set! cy4f40@cy4d78@syntax-violation? cy4d78@syntax-violation?) (set! cy4d7a@syntax-violation-form (condition-accessor cy4d69@cy4d64 cy4d74@cy4d61)) (set! cy4f41@cy4d7a@syntax-violation-form cy4d7a@syntax-violation-form) (set! cy4d7c@syntax-violation-subform (condition-accessor cy4d69@cy4d64 cy4d76@cy4d63)) (set! cy4f42@cy4d7c@syntax-violation-subform cy4d7c@syntax-violation-subform) (set! cy4d7e@&syntax-rtd cy4d69@cy4d64) (set! cy4f43@cy4d7e@&syntax-rtd cy4d7e@&syntax-rtd) (set! cy4d80@&syntax-rcd cy4d6d@cy4d65) (set! cy4f44@cy4d80@&syntax-rcd cy4d80@&syntax-rcd) (set! cy4d86@cy4d81 (make-record-type-descriptor '&undefined cy4cc6@cy4cc1 'cy4d84 '#f '#f '#())) (set! cy4f45@cy4d86@cy4d81 cy4d86@cy4d81) (set! cy4d88@cy4d83 '#f) (set! cy4f46@cy4d88@cy4d83 cy4d88@cy4d83) (set! cy4d8a@cy4d82 (make-record-constructor-descriptor cy4d86@cy4d81 cy4cca@cy4cc2 cy4d88@cy4d83)) (set! cy4f47@cy4d8a@cy4d82 cy4d8a@cy4d82) (set! cy4d8d@p? (record-predicate cy4d86@cy4d81)) (set! cy4f48@cy4d8d@p? cy4d8d@p?) (set! cy4d8f@make-undefined-violation (record-constructor cy4d8a@cy4d82)) (set! cy4f49@cy4d8f@make-undefined-violation cy4d8f@make-undefined-violation) (set! cy4d91@undefined-violation? (condition-predicate cy4d86@cy4d81)) (set! cy4f4a@cy4d91@undefined-violation? cy4d91@undefined-violation?) (set! cy4d93@&undefined-rtd cy4d86@cy4d81) (set! cy4f4b@cy4d93@&undefined-rtd cy4d93@&undefined-rtd) (set! cy4d95@&undefined-rcd cy4d8a@cy4d82) (set! cy4f4c@cy4d95@&undefined-rcd cy4d95@&undefined-rcd) (set! cy4d9b@cy4d96 (make-record-type-descriptor '&i/o cy4cb1@cy4cac 'cy4d99 '#f '#f '#())) (set! cy4f4d@cy4d9b@cy4d96 cy4d9b@cy4d96) (set! cy4d9d@cy4d98 '#f) (set! cy4f4e@cy4d9d@cy4d98 cy4d9d@cy4d98) (set! cy4d9f@cy4d97 (make-record-constructor-descriptor cy4d9b@cy4d96 cy4cb5@cy4cad cy4d9d@cy4d98)) (set! cy4f4f@cy4d9f@cy4d97 cy4d9f@cy4d97) (set! cy4da2@p? (record-predicate cy4d9b@cy4d96)) (set! cy4f50@cy4da2@p? cy4da2@p?) (set! cy4da4@make-i/o-error (record-constructor cy4d9f@cy4d97)) (set! cy4f51@cy4da4@make-i/o-error cy4da4@make-i/o-error) (set! cy4da6@i/o-error? (condition-predicate cy4d9b@cy4d96)) (set! cy4f52@cy4da6@i/o-error? cy4da6@i/o-error?) (set! cy4da8@&i/o-rtd cy4d9b@cy4d96) (set! cy4f53@cy4da8@&i/o-rtd cy4da8@&i/o-rtd) (set! cy4daa@&i/o-rcd cy4d9f@cy4d97) (set! cy4f54@cy4daa@&i/o-rcd cy4daa@&i/o-rcd) (set! cy4db0@cy4dab (make-record-type-descriptor '&i/o-read cy4d9b@cy4d96 'cy4dae '#f '#f '#())) (set! cy4f55@cy4db0@cy4dab cy4db0@cy4dab) (set! cy4db2@cy4dad '#f) (set! cy4f56@cy4db2@cy4dad cy4db2@cy4dad) (set! cy4db4@cy4dac (make-record-constructor-descriptor cy4db0@cy4dab cy4d9f@cy4d97 cy4db2@cy4dad)) (set! cy4f57@cy4db4@cy4dac cy4db4@cy4dac) (set! cy4db7@p? (record-predicate cy4db0@cy4dab)) (set! cy4f58@cy4db7@p? cy4db7@p?) (set! cy4db9@make-i/o-read-error (record-constructor cy4db4@cy4dac)) (set! cy4f59@cy4db9@make-i/o-read-error cy4db9@make-i/o-read-error) (set! cy4dbb@i/o-read-error? (condition-predicate cy4db0@cy4dab)) (set! cy4f5a@cy4dbb@i/o-read-error? cy4dbb@i/o-read-error?) (set! cy4dbd@&i/o-read-rtd cy4db0@cy4dab) (set! cy4f5b@cy4dbd@&i/o-read-rtd cy4dbd@&i/o-read-rtd) (set! cy4dbf@&i/o-read-rcd cy4db4@cy4dac) (set! cy4f5c@cy4dbf@&i/o-read-rcd cy4dbf@&i/o-read-rcd) (set! cy4dc5@cy4dc0 (make-record-type-descriptor '&i/o-write cy4d9b@cy4d96 'cy4dc3 '#f '#f '#())) (set! cy4f5d@cy4dc5@cy4dc0 cy4dc5@cy4dc0) (set! cy4dc7@cy4dc2 '#f) (set! cy4f5e@cy4dc7@cy4dc2 cy4dc7@cy4dc2) (set! cy4dc9@cy4dc1 (make-record-constructor-descriptor cy4dc5@cy4dc0 cy4d9f@cy4d97 cy4dc7@cy4dc2)) (set! cy4f5f@cy4dc9@cy4dc1 cy4dc9@cy4dc1) (set! cy4dcc@p? (record-predicate cy4dc5@cy4dc0)) (set! cy4f60@cy4dcc@p? cy4dcc@p?) (set! cy4dce@make-i/o-write-error (record-constructor cy4dc9@cy4dc1)) (set! cy4f61@cy4dce@make-i/o-write-error cy4dce@make-i/o-write-error) (set! cy4dd0@i/o-write-error? (condition-predicate cy4dc5@cy4dc0)) (set! cy4f62@cy4dd0@i/o-write-error? cy4dd0@i/o-write-error?) (set! cy4dd2@&i/o-write-rtd cy4dc5@cy4dc0) (set! cy4f63@cy4dd2@&i/o-write-rtd cy4dd2@&i/o-write-rtd) (set! cy4dd4@&i/o-write-rcd cy4dc9@cy4dc1) (set! cy4f64@cy4dd4@&i/o-write-rcd cy4dd4@&i/o-write-rcd) (set! cy4ddc@cy4dd7 (make-record-type-descriptor '&i/o-invalid-position cy4d9b@cy4d96 'cy4dda '#f '#f '#((immutable position)))) (set! cy4f65@cy4ddc@cy4dd7 cy4ddc@cy4dd7) (set! cy4dde@cy4dd9 '#f) (set! cy4f66@cy4dde@cy4dd9 cy4dde@cy4dd9) (set! cy4de0@cy4dd8 (make-record-constructor-descriptor cy4ddc@cy4dd7 cy4d9f@cy4d97 cy4dde@cy4dd9)) (set! cy4f67@cy4de0@cy4dd8 cy4de0@cy4dd8) (set! cy4de3@p? (record-predicate cy4ddc@cy4dd7)) (set! cy4f68@cy4de3@p? cy4de3@p?) (set! cy4de5@make-i/o-invalid-position-error (record-constructor cy4de0@cy4dd8)) (set! cy4f69@cy4de5@make-i/o-invalid-position-error cy4de5@make-i/o-invalid-position-error) (set! cy4de7@cy4dd6 (record-accessor cy4ddc@cy4dd7 '0)) (set! cy4f6a@cy4de7@cy4dd6 cy4de7@cy4dd6) (set! cy4de9@i/o-invalid-position-error? (condition-predicate cy4ddc@cy4dd7)) (set! cy4f6b@cy4de9@i/o-invalid-position-error? cy4de9@i/o-invalid-position-error?) (set! cy4deb@i/o-error-position (condition-accessor cy4ddc@cy4dd7 cy4de7@cy4dd6)) (set! cy4f6c@cy4deb@i/o-error-position cy4deb@i/o-error-position) (set! cy4ded@&i/o-invalid-position-rtd cy4ddc@cy4dd7) (set! cy4f6d@cy4ded@&i/o-invalid-position-rtd cy4ded@&i/o-invalid-position-rtd) (set! cy4def@&i/o-invalid-position-rcd cy4de0@cy4dd8) (set! cy4f6e@cy4def@&i/o-invalid-position-rcd cy4def@&i/o-invalid-position-rcd) (set! cy4df7@cy4df2 (make-record-type-descriptor '&i/o-filename cy4d9b@cy4d96 'cy4df5 '#f '#f '#((immutable filename)))) (set! cy4f6f@cy4df7@cy4df2 cy4df7@cy4df2) (set! cy4df9@cy4df4 '#f) (set! cy4f70@cy4df9@cy4df4 cy4df9@cy4df4) (set! cy4dfb@cy4df3 (make-record-constructor-descriptor cy4df7@cy4df2 cy4d9f@cy4d97 cy4df9@cy4df4)) (set! cy4f71@cy4dfb@cy4df3 cy4dfb@cy4df3) (set! cy4dfe@p? (record-predicate cy4df7@cy4df2)) (set! cy4f72@cy4dfe@p? cy4dfe@p?) (set! cy4e00@make-i/o-filename-error (record-constructor cy4dfb@cy4df3)) (set! cy4f73@cy4e00@make-i/o-filename-error cy4e00@make-i/o-filename-error) (set! cy4e02@cy4df1 (record-accessor cy4df7@cy4df2 '0)) (set! cy4f74@cy4e02@cy4df1 cy4e02@cy4df1) (set! cy4e04@i/o-filename-error? (condition-predicate cy4df7@cy4df2)) (set! cy4f75@cy4e04@i/o-filename-error? cy4e04@i/o-filename-error?) (set! cy4e06@i/o-error-filename (condition-accessor cy4df7@cy4df2 cy4e02@cy4df1)) (set! cy4f76@cy4e06@i/o-error-filename cy4e06@i/o-error-filename) (set! cy4e08@&i/o-filename-rtd cy4df7@cy4df2) (set! cy4f77@cy4e08@&i/o-filename-rtd cy4e08@&i/o-filename-rtd) (set! cy4e0a@&i/o-filename-rcd cy4dfb@cy4df3) (set! cy4f78@cy4e0a@&i/o-filename-rcd cy4e0a@&i/o-filename-rcd) (set! cy4e10@cy4e0b (make-record-type-descriptor '&i/o-file-protection cy4df7@cy4df2 'cy4e0e '#f '#f '#())) (set! cy4f79@cy4e10@cy4e0b cy4e10@cy4e0b) (set! cy4e12@cy4e0d '#f) (set! cy4f7a@cy4e12@cy4e0d cy4e12@cy4e0d) (set! cy4e14@cy4e0c (make-record-constructor-descriptor cy4e10@cy4e0b cy4dfb@cy4df3 cy4e12@cy4e0d)) (set! cy4f7b@cy4e14@cy4e0c cy4e14@cy4e0c) (set! cy4e17@p? (record-predicate cy4e10@cy4e0b)) (set! cy4f7c@cy4e17@p? cy4e17@p?) (set! cy4e19@make-i/o-file-protection-error (record-constructor cy4e14@cy4e0c)) (set! cy4f7d@cy4e19@make-i/o-file-protection-error cy4e19@make-i/o-file-protection-error) (set! cy4e1b@i/o-file-protection-error? (condition-predicate cy4e10@cy4e0b)) (set! cy4f7e@cy4e1b@i/o-file-protection-error? cy4e1b@i/o-file-protection-error?) (set! cy4e1d@&i/o-file-protection-rtd cy4e10@cy4e0b) (set! cy4f7f@cy4e1d@&i/o-file-protection-rtd cy4e1d@&i/o-file-protection-rtd) (set! cy4e1f@&i/o-file-protection-rcd cy4e14@cy4e0c) (set! cy4f80@cy4e1f@&i/o-file-protection-rcd cy4e1f@&i/o-file-protection-rcd) (set! cy4e25@cy4e20 (make-record-type-descriptor '&i/o-file-is-read-only cy4e10@cy4e0b 'cy4e23 '#f '#f '#())) (set! cy4f81@cy4e25@cy4e20 cy4e25@cy4e20) (set! cy4e27@cy4e22 '#f) (set! cy4f82@cy4e27@cy4e22 cy4e27@cy4e22) (set! cy4e29@cy4e21 (make-record-constructor-descriptor cy4e25@cy4e20 cy4e14@cy4e0c cy4e27@cy4e22)) (set! cy4f83@cy4e29@cy4e21 cy4e29@cy4e21) (set! cy4e2c@p? (record-predicate cy4e25@cy4e20)) (set! cy4f84@cy4e2c@p? cy4e2c@p?) (set! cy4e2e@make-i/o-file-is-read-only-error (record-constructor cy4e29@cy4e21)) (set! cy4f85@cy4e2e@make-i/o-file-is-read-only-error cy4e2e@make-i/o-file-is-read-only-error) (set! cy4e30@i/o-file-is-read-only-error? (condition-predicate cy4e25@cy4e20)) (set! cy4f86@cy4e30@i/o-file-is-read-only-error? cy4e30@i/o-file-is-read-only-error?) (set! cy4e32@&i/o-file-is-read-only-rtd cy4e25@cy4e20) (set! cy4f87@cy4e32@&i/o-file-is-read-only-rtd cy4e32@&i/o-file-is-read-only-rtd) (set! cy4e34@&i/o-file-is-read-only-rcd cy4e29@cy4e21) (set! cy4f88@cy4e34@&i/o-file-is-read-only-rcd cy4e34@&i/o-file-is-read-only-rcd) (set! cy4e3a@cy4e35 (make-record-type-descriptor '&i/o-file-already-exists cy4df7@cy4df2 'cy4e38 '#f '#f '#())) (set! cy4f89@cy4e3a@cy4e35 cy4e3a@cy4e35) (set! cy4e3c@cy4e37 '#f) (set! cy4f8a@cy4e3c@cy4e37 cy4e3c@cy4e37) (set! cy4e3e@cy4e36 (make-record-constructor-descriptor cy4e3a@cy4e35 cy4dfb@cy4df3 cy4e3c@cy4e37)) (set! cy4f8b@cy4e3e@cy4e36 cy4e3e@cy4e36) (set! cy4e41@p? (record-predicate cy4e3a@cy4e35)) (set! cy4f8c@cy4e41@p? cy4e41@p?) (set! cy4e43@make-i/o-file-already-exists-error (record-constructor cy4e3e@cy4e36)) (set! cy4f8d@cy4e43@make-i/o-file-already-exists-error cy4e43@make-i/o-file-already-exists-error) (set! cy4e45@i/o-file-already-exists-error? (condition-predicate cy4e3a@cy4e35)) (set! cy4f8e@cy4e45@i/o-file-already-exists-error? cy4e45@i/o-file-already-exists-error?) (set! cy4e47@&i/o-file-already-exists-rtd cy4e3a@cy4e35) (set! cy4f8f@cy4e47@&i/o-file-already-exists-rtd cy4e47@&i/o-file-already-exists-rtd) (set! cy4e49@&i/o-file-already-exists-rcd cy4e3e@cy4e36) (set! cy4f90@cy4e49@&i/o-file-already-exists-rcd cy4e49@&i/o-file-already-exists-rcd) (set! cy4e4f@cy4e4a (make-record-type-descriptor '&i/o-file-does-not-exist cy4df7@cy4df2 'cy4e4d '#f '#f '#())) (set! cy4f91@cy4e4f@cy4e4a cy4e4f@cy4e4a) (set! cy4e51@cy4e4c '#f) (set! cy4f92@cy4e51@cy4e4c cy4e51@cy4e4c) (set! cy4e53@cy4e4b (make-record-constructor-descriptor cy4e4f@cy4e4a cy4dfb@cy4df3 cy4e51@cy4e4c)) (set! cy4f93@cy4e53@cy4e4b cy4e53@cy4e4b) (set! cy4e56@p? (record-predicate cy4e4f@cy4e4a)) (set! cy4f94@cy4e56@p? cy4e56@p?) (set! cy4e58@make-i/o-file-does-not-exist-error (record-constructor cy4e53@cy4e4b)) (set! cy4f95@cy4e58@make-i/o-file-does-not-exist-error cy4e58@make-i/o-file-does-not-exist-error) (set! cy4e5a@i/o-file-does-not-exist-error? (condition-predicate cy4e4f@cy4e4a)) (set! cy4f96@cy4e5a@i/o-file-does-not-exist-error? cy4e5a@i/o-file-does-not-exist-error?) (set! cy4e5c@&i/o-file-does-not-exist-rtd cy4e4f@cy4e4a) (set! cy4f97@cy4e5c@&i/o-file-does-not-exist-rtd cy4e5c@&i/o-file-does-not-exist-rtd) (set! cy4e5e@&i/o-file-does-not-exist-rcd cy4e53@cy4e4b) (set! cy4f98@cy4e5e@&i/o-file-does-not-exist-rcd cy4e5e@&i/o-file-does-not-exist-rcd) (set! cy4e66@cy4e61 (make-record-type-descriptor '&i/o-port cy4d9b@cy4d96 'cy4e64 '#f '#f '#((immutable port)))) (set! cy4f99@cy4e66@cy4e61 cy4e66@cy4e61) (set! cy4e68@cy4e63 '#f) (set! cy4f9a@cy4e68@cy4e63 cy4e68@cy4e63) (set! cy4e6a@cy4e62 (make-record-constructor-descriptor cy4e66@cy4e61 cy4d9f@cy4d97 cy4e68@cy4e63)) (set! cy4f9b@cy4e6a@cy4e62 cy4e6a@cy4e62) (set! cy4e6d@p? (record-predicate cy4e66@cy4e61)) (set! cy4f9c@cy4e6d@p? cy4e6d@p?) (set! cy4e6f@make-i/o-port-error (record-constructor cy4e6a@cy4e62)) (set! cy4f9d@cy4e6f@make-i/o-port-error cy4e6f@make-i/o-port-error) (set! cy4e71@cy4e60 (record-accessor cy4e66@cy4e61 '0)) (set! cy4f9e@cy4e71@cy4e60 cy4e71@cy4e60) (set! cy4e73@i/o-port-error? (condition-predicate cy4e66@cy4e61)) (set! cy4f9f@cy4e73@i/o-port-error? cy4e73@i/o-port-error?) (set! cy4e75@i/o-error-port (condition-accessor cy4e66@cy4e61 cy4e71@cy4e60)) (set! cy4fa0@cy4e75@i/o-error-port cy4e75@i/o-error-port) (set! cy4e77@&i/o-port-rtd cy4e66@cy4e61) (set! cy4fa1@cy4e77@&i/o-port-rtd cy4e77@&i/o-port-rtd) (set! cy4e79@&i/o-port-rcd cy4e6a@cy4e62) (set! cy4fa2@cy4e79@&i/o-port-rcd cy4e79@&i/o-port-rcd) (set! cy4e7f@cy4e7a (make-record-type-descriptor '&i/o-decoding cy4e66@cy4e61 'cy4e7d '#f '#f '#())) (set! cy4fa3@cy4e7f@cy4e7a cy4e7f@cy4e7a) (set! cy4e81@cy4e7c '#f) (set! cy4fa4@cy4e81@cy4e7c cy4e81@cy4e7c) (set! cy4e83@cy4e7b (make-record-constructor-descriptor cy4e7f@cy4e7a cy4e6a@cy4e62 cy4e81@cy4e7c)) (set! cy4fa5@cy4e83@cy4e7b cy4e83@cy4e7b) (set! cy4e86@p? (record-predicate cy4e7f@cy4e7a)) (set! cy4fa6@cy4e86@p? cy4e86@p?) (set! cy4e88@make-i/o-decoding-error (record-constructor cy4e83@cy4e7b)) (set! cy4fa7@cy4e88@make-i/o-decoding-error cy4e88@make-i/o-decoding-error) (set! cy4e8a@i/o-decoding-error? (condition-predicate cy4e7f@cy4e7a)) (set! cy4fa8@cy4e8a@i/o-decoding-error? cy4e8a@i/o-decoding-error?) (set! cy4e8c@&i/o-decoding-rtd cy4e7f@cy4e7a) (set! cy4fa9@cy4e8c@&i/o-decoding-rtd cy4e8c@&i/o-decoding-rtd) (set! cy4e8e@&i/o-decoding-rcd cy4e83@cy4e7b) (set! cy4faa@cy4e8e@&i/o-decoding-rcd cy4e8e@&i/o-decoding-rcd) (set! cy4e96@cy4e91 (make-record-type-descriptor '&i/o-encoding cy4e66@cy4e61 'cy4e94 '#f '#f '#((immutable char)))) (set! cy4fab@cy4e96@cy4e91 cy4e96@cy4e91) (set! cy4e98@cy4e93 '#f) (set! cy4fac@cy4e98@cy4e93 cy4e98@cy4e93) (set! cy4e9a@cy4e92 (make-record-constructor-descriptor cy4e96@cy4e91 cy4e6a@cy4e62 cy4e98@cy4e93)) (set! cy4fad@cy4e9a@cy4e92 cy4e9a@cy4e92) (set! cy4e9d@p? (record-predicate cy4e96@cy4e91)) (set! cy4fae@cy4e9d@p? cy4e9d@p?) (set! cy4e9f@make-i/o-encoding-error (record-constructor cy4e9a@cy4e92)) (set! cy4faf@cy4e9f@make-i/o-encoding-error cy4e9f@make-i/o-encoding-error) (set! cy4ea1@cy4e90 (record-accessor cy4e96@cy4e91 '0)) (set! cy4fb0@cy4ea1@cy4e90 cy4ea1@cy4e90) (set! cy4ea3@i/o-encoding-error? (condition-predicate cy4e96@cy4e91)) (set! cy4fb1@cy4ea3@i/o-encoding-error? cy4ea3@i/o-encoding-error?) (set! cy4ea5@i/o-encoding-error-char (condition-accessor cy4e96@cy4e91 cy4ea1@cy4e90)) (set! cy4fb2@cy4ea5@i/o-encoding-error-char cy4ea5@i/o-encoding-error-char) (set! cy4ea7@&i/o-encoding-rtd cy4e96@cy4e91) (set! cy4fb3@cy4ea7@&i/o-encoding-rtd cy4ea7@&i/o-encoding-rtd) (set! cy4ea9@&i/o-encoding-rcd cy4e9a@cy4e92) (set! cy4fb4@cy4ea9@&i/o-encoding-rcd cy4ea9@&i/o-encoding-rcd) (set! cy4eaf@cy4eaa (make-record-type-descriptor '&no-infinities cy4d3b@cy4d36 'cy4ead '#f '#f '#())) (set! cy4fb5@cy4eaf@cy4eaa cy4eaf@cy4eaa) (set! cy4eb1@cy4eac '#f) (set! cy4fb6@cy4eb1@cy4eac cy4eb1@cy4eac) (set! cy4eb3@cy4eab (make-record-constructor-descriptor cy4eaf@cy4eaa cy4d3f@cy4d37 cy4eb1@cy4eac)) (set! cy4fb7@cy4eb3@cy4eab cy4eb3@cy4eab) (set! cy4eb6@p? (record-predicate cy4eaf@cy4eaa)) (set! cy4fb8@cy4eb6@p? cy4eb6@p?) (set! cy4eb8@make-no-infinities-violation (record-constructor cy4eb3@cy4eab)) (set! cy4fb9@cy4eb8@make-no-infinities-violation cy4eb8@make-no-infinities-violation) (set! cy4eba@no-infinities-violation? (condition-predicate cy4eaf@cy4eaa)) (set! cy4fba@cy4eba@no-infinities-violation? cy4eba@no-infinities-violation?) (set! cy4ebc@&no-infinities-rtd cy4eaf@cy4eaa) (set! cy4fbb@cy4ebc@&no-infinities-rtd cy4ebc@&no-infinities-rtd) (set! cy4ebe@&no-infinities-rcd cy4eb3@cy4eab) (set! cy4fbc@cy4ebe@&no-infinities-rcd cy4ebe@&no-infinities-rcd) (set! cy4ec4@cy4ebf (make-record-type-descriptor '&no-nans cy4d3b@cy4d36 'cy4ec2 '#f '#f '#())) (set! cy4fbd@cy4ec4@cy4ebf cy4ec4@cy4ebf) (set! cy4ec6@cy4ec1 '#f) (set! cy4fbe@cy4ec6@cy4ec1 cy4ec6@cy4ec1) (set! cy4ec8@cy4ec0 (make-record-constructor-descriptor cy4ec4@cy4ebf cy4d3f@cy4d37 cy4ec6@cy4ec1)) (set! cy4fbf@cy4ec8@cy4ec0 cy4ec8@cy4ec0) (set! cy4ecb@p? (record-predicate cy4ec4@cy4ebf)) (set! cy4fc0@cy4ecb@p? cy4ecb@p?) (set! cy4ecd@make-no-nans-violation (record-constructor cy4ec8@cy4ec0)) (set! cy4fc1@cy4ecd@make-no-nans-violation cy4ecd@make-no-nans-violation) (set! cy4ecf@no-nans-violation? (condition-predicate cy4ec4@cy4ebf)) (set! cy4fc2@cy4ecf@no-nans-violation? cy4ecf@no-nans-violation?) (set! cy4ed1@&no-nans-rtd cy4ec4@cy4ebf) (set! cy4fc3@cy4ed1@&no-nans-rtd cy4ed1@&no-nans-rtd) (set! cy4ed3@&no-nans-rcd cy4ec8@cy4ec0) (set! cy4fc4@cy4ed3@&no-nans-rcd cy4ed3@&no-nans-rcd) (void))
(begin (begin (cy2a5a@cy2a0f@current-primitive-locations (lambda (cy5493@x) (let ((cy5495@t (assq cy5493@x '((&no-nans-rcd . cy4fc4@cy4ed3@&no-nans-rcd) (&no-nans-rtd . cy4fc3@cy4ed1@&no-nans-rtd) (&no-infinities-rcd . cy4fbc@cy4ebe@&no-infinities-rcd) (&no-infinities-rtd . cy4fbb@cy4ebc@&no-infinities-rtd) (&i/o-encoding-rcd . cy4fb4@cy4ea9@&i/o-encoding-rcd) (&i/o-encoding-rtd . cy4fb3@cy4ea7@&i/o-encoding-rtd) (&i/o-decoding-rcd . cy4faa@cy4e8e@&i/o-decoding-rcd) (&i/o-decoding-rtd . cy4fa9@cy4e8c@&i/o-decoding-rtd) (&i/o-port-rcd . cy4fa2@cy4e79@&i/o-port-rcd) (&i/o-port-rtd . cy4fa1@cy4e77@&i/o-port-rtd) (&i/o-file-does-not-exist-rcd . cy4f98@cy4e5e@&i/o-file-does-not-exist-rcd) (&i/o-file-does-not-exist-rtd . cy4f97@cy4e5c@&i/o-file-does-not-exist-rtd) (&i/o-file-already-exists-rcd . cy4f90@cy4e49@&i/o-file-already-exists-rcd) (&i/o-file-already-exists-rtd . cy4f8f@cy4e47@&i/o-file-already-exists-rtd) (&i/o-file-is-read-only-rcd . cy4f88@cy4e34@&i/o-file-is-read-only-rcd) (&i/o-file-is-read-only-rtd . cy4f87@cy4e32@&i/o-file-is-read-only-rtd) (&i/o-file-protection-rcd . cy4f80@cy4e1f@&i/o-file-protection-rcd) (&i/o-file-protection-rtd . cy4f7f@cy4e1d@&i/o-file-protection-rtd) (&i/o-filename-rcd . cy4f78@cy4e0a@&i/o-filename-rcd) (&i/o-filename-rtd . cy4f77@cy4e08@&i/o-filename-rtd) (&i/o-invalid-position-rcd . cy4f6e@cy4def@&i/o-invalid-position-rcd) (&i/o-invalid-position-rtd . cy4f6d@cy4ded@&i/o-invalid-position-rtd) (&i/o-write-rcd . cy4f64@cy4dd4@&i/o-write-rcd) (&i/o-write-rtd . cy4f63@cy4dd2@&i/o-write-rtd) (&i/o-read-rcd . cy4f5c@cy4dbf@&i/o-read-rcd) (&i/o-read-rtd . cy4f5b@cy4dbd@&i/o-read-rtd) (&i/o-rcd . cy4f54@cy4daa@&i/o-rcd) (&i/o-rtd . cy4f53@cy4da8@&i/o-rtd) (&undefined-rcd . cy4f4c@cy4d95@&undefined-rcd) (&undefined-rtd . cy4f4b@cy4d93@&undefined-rtd) (&syntax-rcd . cy4f44@cy4d80@&syntax-rcd) (&syntax-rtd . cy4f43@cy4d7e@&syntax-rtd) (&lexical-rcd . cy4f38@cy4d5f@&lexical-rcd) (&lexical-rtd . cy4f37@cy4d5d@&lexical-rtd) (&implementation-restriction-rcd . cy4f30@cy4d4a@&implementation-restriction-rcd) (&implementation-restriction-rtd . cy4f2f@cy4d48@&implementation-restriction-rtd) (&non-continuable-rcd . cy4f28@cy4d35@&non-continuable-rcd) (&non-continuable-rtd . cy4f27@cy4d33@&non-continuable-rtd) (&who-rcd . cy4f20@cy4d20@&who-rcd) (&who-rtd . cy4f1f@cy4d1e@&who-rtd) (&irritants-rcd . cy4f16@cy4d05@&irritants-rcd) (&irritants-rtd . cy4f15@cy4d03@&irritants-rtd) (&assertion-rcd . cy4f0c@cy4cea@&assertion-rcd) (&assertion-rtd . cy4f0b@cy4ce8@&assertion-rtd) (&violation-rcd . cy4f04@cy4cd5@&violation-rcd) (&violation-rtd . cy4f03@cy4cd3@&violation-rtd) (&error-rcd . cy4efc@cy4cc0@&error-rcd) (&error-rtd . cy4efb@cy4cbe@&error-rtd) (&serious-rcd . cy4ef4@cy4cab@&serious-rcd) (&serious-rtd . cy4ef3@cy4ca9@&serious-rtd) (&warning-rcd . cy4eec@cy4c96@&warning-rcd) (&warning-rtd . cy4eeb@cy4c94@&warning-rtd) (&message-rcd . cy4ee4@cy4c81@&message-rcd) (&message-rtd . cy4ee3@cy4c7f@&message-rtd) (&condition-rcd . cy4eda@cy4c22@&condition-rcd) (&condition-rtd . cy4ed9@cy4c20@&condition-rtd) (syntax-error . cy4bfc@cy31a0@syntax-error) (syntax-dispatch . cy4b9a@cy30c4@syntax-dispatch) (load . cy5139@cy4fe4@load) (interaction-environment . cy4c05@cy31b2@interaction-environment) (library-path . cy2cc1@cy2afd@library-path) (mosh-cache-dir . cy2a08@cy28e8@mosh-cache-dir) (make-parameter . cy2a07@cy28e6@make-parameter) (make-variable-transformer . cy4b57@cy2eef@make-variable-transformer) (identifier? . cy4bff@cy31a6@identifier?) (generate-temporaries . cy4bf5@cy3192@generate-temporaries) (free-identifier=? . cy4bf6@cy3194@free-identifier=?) (syntax->datum . cy4c01@cy31aa@syntax->datum) (datum->syntax . cy4c00@cy31a8@datum->syntax) (bound-identifier=? . cy4bf7@cy3196@bound-identifier=?) (make-i/o-write-error . cy4f61@cy4dce@make-i/o-write-error) (make-i/o-read-error . cy4f59@cy4db9@make-i/o-read-error) (make-i/o-port-error . cy4f9d@cy4e6f@make-i/o-port-error) (make-i/o-invalid-position-error . cy4f69@cy4de5@make-i/o-invalid-position-error) (make-i/o-filename-error . cy4f73@cy4e00@make-i/o-filename-error) (make-i/o-file-protection-error . cy4f7d@cy4e19@make-i/o-file-protection-error) (make-i/o-file-is-read-only-error . cy4f85@cy4e2e@make-i/o-file-is-read-only-error) (make-i/o-file-does-not-exist-error . cy4f95@cy4e58@make-i/o-file-does-not-exist-error) (make-i/o-file-already-exists-error . cy4f8d@cy4e43@make-i/o-file-already-exists-error) (make-i/o-error . cy4f51@cy4da4@make-i/o-error) (make-i/o-encoding-error . cy4faf@cy4e9f@make-i/o-encoding-error) (make-i/o-decoding-error . cy4fa7@cy4e88@make-i/o-decoding-error) (i/o-write-error? . cy4f62@cy4dd0@i/o-write-error?) (i/o-read-error? . cy4f5a@cy4dbb@i/o-read-error?) (i/o-port-error? . cy4f9f@cy4e73@i/o-port-error?) (i/o-invalid-position-error? . cy4f6b@cy4de9@i/o-invalid-position-error?) (i/o-filename-error? . cy4f75@cy4e04@i/o-filename-error?) (i/o-file-protection-error? . cy4f7e@cy4e1b@i/o-file-protection-error?) (i/o-file-is-read-only-error? . cy4f86@cy4e30@i/o-file-is-read-only-error?) (i/o-file-does-not-exist-error? . cy4f96@cy4e5a@i/o-file-does-not-exist-error?) (i/o-file-already-exists-error? . cy4f8e@cy4e45@i/o-file-already-exists-error?) (i/o-error? . cy4f52@cy4da6@i/o-error?) (i/o-error-position . cy4f6c@cy4deb@i/o-error-position) (i/o-error-port . cy4fa0@cy4e75@i/o-error-port) (i/o-error-filename . cy4f76@cy4e06@i/o-error-filename) (i/o-encoding-error? . cy4fb1@cy4ea3@i/o-encoding-error?) (i/o-encoding-error-char . cy4fb2@cy4ea5@i/o-encoding-error-char) (i/o-decoding-error? . cy4fa8@cy4e8a@i/o-decoding-error?) (scheme-report-environment . cy4bec@cy3180@scheme-report-environment) (null-environment . cy4beb@cy317e@null-environment) (command-line . cy5136@cy4fde@command-line) (eval . cy4bee@cy3184@eval) (environment . cy4bea@cy317c@environment) (who-condition? . cy4f1d@cy4d1a@who-condition?) (warning? . cy4eea@cy4c92@warning?) (violation? . cy4f02@cy4cd1@violation?) (undefined-violation? . cy4f4a@cy4d91@undefined-violation?) (syntax-violation? . cy4f40@cy4d78@syntax-violation?) (syntax-violation-subform . cy4f42@cy4d7c@syntax-violation-subform) (syntax-violation-form . cy4f41@cy4d7a@syntax-violation-form) (syntax-violation . cy4bfe@cy31a4@syntax-violation) (serious-condition? . cy4ef2@cy4ca7@serious-condition?) (non-continuable-violation? . cy4f26@cy4d31@non-continuable-violation?) (message-condition? . cy4ee1@cy4c7b@message-condition?) (make-who-condition . cy4f1b@cy4d16@make-who-condition) (make-warning . cy4ee9@cy4c90@make-warning) (make-violation . cy4f01@cy4ccf@make-violation) (make-undefined-violation . cy4f49@cy4d8f@make-undefined-violation) (make-syntax-violation . cy4f3d@cy4d72@make-syntax-violation) (make-serious-condition . cy4ef1@cy4ca5@make-serious-condition) (make-non-continuable-violation . cy4f25@cy4d2f@make-non-continuable-violation) (make-message-condition . cy4edf@cy4c77@make-message-condition) (make-lexical-violation . cy4f35@cy4d59@make-lexical-violation) (make-irritants-condition . cy4f11@cy4cfb@make-irritants-condition) (make-implementation-restriction-violation . cy4f2d@cy4d44@make-implementation-restriction-violation) (make-error . cy4ef9@cy4cba@make-error) (make-assertion-violation . cy4f09@cy4ce4@make-assertion-violation) (lexical-violation? . cy4f36@cy4d5b@lexical-violation?) (irritants-condition? . cy4f13@cy4cff@irritants-condition?) (implementation-restriction-violation? . cy4f2e@cy4d46@implementation-restriction-violation?) (error? . cy4efa@cy4cbc@error?) (condition-who . cy4f1e@cy4d1c@condition-who) (condition-message . cy4ee2@cy4c7d@condition-message) (condition-irritants . cy4f14@cy4d01@condition-irritants) (assertion-violation? . cy4f0a@cy4ce6@assertion-violation?) (no-nans-violation? . cy4fc2@cy4ecf@no-nans-violation?) (no-infinities-violation? . cy4fba@cy4eba@no-infinities-violation?) (make-no-nans-violation . cy4fc1@cy4ecd@make-no-nans-violation) (make-no-infinities-violation . cy4fb9@cy4eb8@make-no-infinities-violation) (assertion-error . cy4bfb@cy319e@assertion-error))))) (if cy5495@t (cdr cy5495@t) '#f)))) (cy2cd1@cy2b1d@install-library 'cy5470 '(mosh interaction) '() '() '() '() '((regexp? . cy5468) (alist->eq-hash-table . cy5464) (format . cy5461) (string-split . cy5456) (call-process . cy5450) (set-current-directory! . cy544c) (expand-path . cy544b) (current-directory . cy544a) (%spawn . cy5449) (%waitpid . cy5448) (simple-struct-name . cy5447) (simple-struct-set! . cy5446) (simple-struct-ref . cy5445) (make-simple-struct . cy5444) (simple-struct? . cy5443) (pointer-ref-c-int64 . cy5442) (pointer-ref-c-int32 . cy5441) (pointer-ref-c-int16 . cy5440) (pointer-ref-c-int8 . cy543f) (pointer-ref-c-uint64 . cy543e) (pointer-ref-c-uint32 . cy543d) (pointer-ref-c-uint16 . cy543c) (pointer-ref-c-uint8 . cy543b) (pointer-set-c-uint64! . cy543a) (pointer-set-c-uint32! . cy5439) (pointer-set-c-uint16! . cy5438) (pointer-set-c-uint8! . cy5437) (pointer-set-c-int64! . cy5436) (pointer-set-c-int32! . cy5435) (pointer-set-c-int16! . cy5434) (pointer-set-c-int8! . cy5433) (pointer-set-c-pointer! . cy5432) (pointer-set-c-double! . cy5431) (pointer-set-c-float! . cy5430) (pointer-set-c-long-long! . cy542f) (pointer-set-c-long! . cy542e) (pointer-set-c-int! . cy542d) (pointer-set-c-short! . cy542c) (pointer-set-c-char! . cy542b) (pointer-ref-c-pointer . cy542a) (pointer-ref-c-double . cy5429) (pointer-ref-c-float . cy5428) (pointer-ref-c-unsigned-long-long . cy5427) (pointer-ref-c-signed-long-long . cy5426) (pointer-ref-c-unsigned-long . cy5425) (pointer-ref-c-signed-long . cy5424) (pointer-ref-c-unsigned-int . cy5423) (pointer-ref-c-signed-int . cy5422) (pointer-ref-c-unsigned-short . cy5421) (pointer-ref-c-signed-short . cy5420) (pointer-ref-c-unsigned-char . cy541f) (pointer-ref-c-signed-char . cy541e) (pointer->integer . cy541d) (integer->pointer . cy541c) (pointer? . cy541b) (shared-errno . cy541a) (%ffi-supported? . cy5414) (%ffi-pointer->string . cy5413) (%ffi-call->string-or-zero . cy5412) (%ffi-call->double . cy5411) (%ffi-call->void* . cy5410) (%ffi-call->void . cy540f) (%ffi-call->char . cy540e) (%ffi-call->int . cy540d) (%ffi-lookup . cy540c) (%ffi-open . cy540b) (%fork . cy540a) (%pipe . cy5409) (p . cy5408) (whereis . cy53ec) (register . cy53eb) (vm-join! . cy53ea) (vm-set-value! . cy53e9) (vm? . cy53e8) (main-vm? . cy53e7) (vm-eval . cy53e6) (vm-self . cy53e5) (vm-start! . cy53e4) (make-vm . cy53e3) (mutex-try-lock! . cy53e2) (mutex-unlock! . cy53e1) (mutex-lock! . cy53e0) (mutex? . cy53df) (make-mutex . cy53de) (condition-variable-notify-all! . cy53dd) (condition-variable-notify! . cy53dc) (condition-variable-wait! . cy53db) (make-condition-variable . cy53da) (string-upcase . cy53c2) (string-titlecase . cy53c1) (string-normalize-nfkd . cy53c0) (string-normalize-nfkc . cy53bf) (string-normalize-nfd . cy53be) (string-normalize-nfc . cy53bd) (string-foldcase . cy53bc) (string-downcase . cy53bb) (string-ci>? . cy53ba) (string-ci>=? . cy53b9) (string-ci=? . cy53b8) (string-ci<? . cy53b7) (string-ci<=? . cy53b6) (char-whitespace? . cy53b5) (char-upper-case? . cy53b4) (char-title-case? . cy53b3) (char-numeric? . cy53b2) (char-lower-case? . cy53b1) (char-general-category . cy53b0) (char-upcase . cy53af) (char-titlecase . cy53ae) (char-foldcase . cy53ad) (char-downcase . cy53ac) (char-ci>? . cy53ab) (char-ci>=? . cy53aa) (char-ci=? . cy53a9) (char-ci<? . cy53a8) (char-ci<=? . cy53a7) (char-alphabetic? . cy53a6) (make-variable-transformer . cy2eee) (identifier? . cy31a5) (generate-temporaries . cy3191) (free-identifier=? . cy3193) (syntax->datum . cy31a9) (datum->syntax . cy31a7) (bound-identifier=? . cy3195) (record-type-descriptor? . cy53a5) (record-predicate . cy53a4) (record-mutator . cy53a3) (record-constructor . cy53a2) (record-accessor . cy53a1) (make-record-type-descriptor . cy53a0) (make-record-constructor-descriptor . cy539f) (record? . cy539e) (record-type-uid . cy539d) (record-type-sealed? . cy539c) (record-type-parent . cy539b) (record-type-opaque? . cy539a) (record-type-name . cy5399) (record-type-generative? . cy5398) (record-type-field-names . cy5397) (record-rtd . cy5396) (record-field-mutable? . cy5395) (delete-file . cy5394) (file-exists? . cy5393) (vector-sort! . cy5392) (vector-sort . cy5391) (list-sort . cy5390) (symbol-hash . cy538f) (string-ci-hash . cy538e) (string-hash . cy538d) (equal-hash . cy538c) (hashtable-equivalence-function . cy538b) (make-hashtable . cy538a) (hashtable-hash-function . cy5389) (make-eqv-hashtable . cy5388) (make-eq-hashtable . cy5387) (hashtable? . cy5386) (hashtable-update! . cy5385) (hashtable-size . cy5384) (hashtable-set! . cy5383) (hashtable-ref . cy5382) (hashtable-mutable? . cy5381) (hashtable-keys . cy5380) (hashtable-entries . cy537f) (hashtable-delete! . cy537e) (hashtable-copy . cy537d) (hashtable-contains? . cy537c) (hashtable-clear! . cy537b) (call-with-output-file . cy537a) (call-with-input-file . cy5379) (write-char . cy5378) (write . cy5377) (with-output-to-file . cy5376) (with-input-from-file . cy5375) (read-char . cy5374) (read . cy5373) (peek-char . cy5372) (open-output-file . cy5371) (open-input-file . cy5370) (newline . cy536f) (display . cy536e) (close-output-port . cy536d) (close-input-port . cy536c) (eof-object? . cy536b) (eof-object . cy536a) (current-error-port . cy5369) (current-output-port . cy5368) (current-input-port . cy5367) (output-port? . cy5366) (input-port? . cy5365) (utf-8-codec . cy5364) (utf-16-codec . cy5363) (transcoder-error-handling-mode . cy5362) (transcoder-eol-style . cy5361) (transcoder-codec . cy5360) (transcoded-port . cy535f) (textual-port? . cy535e) (string->bytevector . cy535d) (standard-output-port . cy535c) (standard-input-port . cy535b) (standard-error-port . cy535a) (set-port-position! . cy5359) (put-u8 . cy5358) (put-string . cy5357) (put-datum . cy5356) (put-char . cy5355) (put-bytevector . cy5354) (port? . cy5353) (port-transcoder . cy5352) (port-position . cy5351) (port-has-set-port-position!? . cy5350) (port-has-port-position? . cy534f) (port-eof? . cy534e) (output-port-buffer-mode . cy534d) (open-string-output-port . cy534c) (open-string-input-port . cy534b) (open-file-output-port . cy534a) (open-file-input/output-port . cy5349) (open-file-input-port . cy5348) (open-bytevector-output-port . cy5347) (open-bytevector-input-port . cy5346) (native-transcoder . cy5345) (native-eol-style . cy5344) (make-transcoder . cy5343) (latin-1-codec . cy5342) (make-i/o-write-error . cy4dcd) (make-i/o-read-error . cy4db8) (make-i/o-port-error . cy4e6e) (make-i/o-invalid-position-error . cy4de4) (make-i/o-filename-error . cy4dff) (make-i/o-file-protection-error . cy4e18) (make-i/o-file-is-read-only-error . cy4e2d) (make-i/o-file-does-not-exist-error . cy4e57) (make-i/o-file-already-exists-error . cy4e42) (make-i/o-error . cy4da3) (make-i/o-encoding-error . cy4e9e) (make-i/o-decoding-error . cy4e87) (make-custom-textual-output-port . cy5341) (make-custom-textual-input/output-port . cy5340) (make-custom-textual-input-port . cy533f) (make-custom-binary-output-port . cy533e) (make-custom-binary-input/output-port . cy533d) (make-custom-binary-input-port . cy533c) (make-bytevector . cy533b) (lookahead-u8 . cy533a) (lookahead-char . cy5339) (i/o-write-error? . cy4dcf) (i/o-read-error? . cy4dba) (i/o-port-error? . cy4e72) (i/o-invalid-position-error? . cy4de8) (i/o-filename-error? . cy4e03) (i/o-file-protection-error? . cy4e1a) (i/o-file-is-read-only-error? . cy4e2f) (i/o-file-does-not-exist-error? . cy4e59) (i/o-file-already-exists-error? . cy4e44) (i/o-error? . cy4da5) (i/o-error-position . cy4dea) (i/o-error-port . cy4e74) (i/o-error-filename . cy4e05) (i/o-encoding-error? . cy4ea2) (i/o-encoding-error-char . cy4ea4) (i/o-decoding-error? . cy4e89) (get-u8 . cy5338) (get-string-n! . cy5337) (get-string-n . cy5336) (get-string-all . cy5335) (get-line . cy5334) (get-datum . cy5333) (get-char . cy5332) (get-bytevector-some . cy5331) (get-bytevector-n! . cy5330) (get-bytevector-n . cy532f) (get-bytevector-all . cy532e) (flush-output-port . cy532d) (close-port . cy532c) (exit . cy5324) (command-line . cy4fdd) (string-fill! . cy5323) (string-set! . cy5322) (set-cdr! . cy5321) (set-car! . cy5320) (remove . cy531f) (remv . cy531e) (remp . cy531d) (remq . cy531c) (partition . cy531b) (memv . cy531a) (memq . cy5319) (memp . cy5318) (member . cy5317) (exists . cy5316) (for-all . cy5315) (fold-right . cy5314) (fold-left . cy5313) (find . cy5312) (filter . cy5311) (cons* . cy5310) (assv . cy530f) (assq . cy530e) (assp . cy530d) (assoc . cy530c) (call-with-string-output-port . cy530b) (call-with-port . cy530a) (call-with-bytevector-output-port . cy5309) (bytevector->string . cy5308) (buffer-mode? . cy5307) (binary-port? . cy5306) (with-exception-handler . cy5305) (raise-continuable . cy5304) (raise . cy5303) (eval . cy3183) (environment . cy317b) (make-enumeration . cy5302) (enum-set=? . cy5301) (enum-set-universe . cy5300) (enum-set-union . cy52ff) (enum-set-subset? . cy52fe) (enum-set-projection . cy52fd) (enum-set-member? . cy52fc) (enum-set-intersection . cy52fb) (enum-set-indexer . cy52fa) (enum-set-difference . cy52f9) (enum-set-constructor . cy52f8) (enum-set-complement . cy52f7) (enum-set->list . cy52f6) (who-condition? . cy4d19) (warning? . cy4c91) (violation? . cy4cd0) (undefined-violation? . cy4d90) (syntax-violation? . cy4d77) (syntax-violation-subform . cy4d7b) (syntax-violation-form . cy4d79) (syntax-violation . cy31a3) (simple-conditions . cy52f5) (serious-condition? . cy4ca6) (non-continuable-violation? . cy4d30) (message-condition? . cy4c7a) (make-who-condition . cy4d15) (make-warning . cy4c8f) (make-violation . cy4cce) (make-undefined-violation . cy4d8e) (make-syntax-violation . cy4d71) (make-serious-condition . cy4ca4) (make-non-continuable-violation . cy4d2e) (make-message-condition . cy4c76) (make-lexical-violation . cy4d58) (make-irritants-condition . cy4cfa) (make-implementation-restriction-violation . cy4d43) (make-error . cy4cb9) (make-assertion-violation . cy4ce3) (lexical-violation? . cy4d5a) (irritants-condition? . cy4cfe) (implementation-restriction-violation? . cy4d45) (error? . cy4cbb) (condition-who . cy4d1b) (condition-predicate . cy52f4) (condition-message . cy4c7c) (condition-irritants . cy4d00) (condition-accessor . cy52f3) (condition . cy52f2) (assertion-violation? . cy4ce5) (condition? . cy52f1) (utf32->string . cy52f0) (utf16->string . cy52ef) (utf8->string . cy52ee) (uint-list->bytevector . cy52ed) (u8-list->bytevector . cy52ec) (string->utf8 . cy52eb) (string->utf32 . cy52ea) (string->utf16 . cy52e9) (sint-list->bytevector . cy52e8) (native-endianness . cy52e7) (bytevector? . cy52e6) (bytevector=? . cy52e5) (bytevector-uint-set! . cy52e4) (bytevector-uint-ref . cy52e3) (bytevector-u8-set! . cy52e2) (bytevector-u8-ref . cy52e1) (bytevector-u64-set! . cy52e0) (bytevector-u64-ref . cy52df) (bytevector-u64-native-set! . cy52de) (bytevector-u64-native-ref . cy52dd) (bytevector-u32-set! . cy52dc) (bytevector-u32-ref . cy52db) (bytevector-u32-native-set! . cy52da) (bytevector-u32-native-ref . cy52d9) (bytevector-u16-set! . cy52d8) (bytevector-u16-ref . cy52d7) (bytevector-u16-native-set! . cy52d6) (bytevector-u16-native-ref . cy52d5) (bytevector-sint-set! . cy52d4) (bytevector-sint-ref . cy52d3) (bytevector-s8-set! . cy52d2) (bytevector-s8-ref . cy52d1) (bytevector-s64-set! . cy52d0) (bytevector-s64-ref . cy52cf) (bytevector-s64-native-set! . cy52ce) (bytevector-s64-native-ref . cy52cd) (bytevector-s32-set! . cy52cc) (bytevector-s32-ref . cy52cb) (bytevector-s32-native-set! . cy52ca) (bytevector-s32-native-ref . cy52c9) (bytevector-s16-set! . cy52c8) (bytevector-s16-ref . cy52c7) (bytevector-s16-native-set! . cy52c6) (bytevector-s16-native-ref . cy52c5) (bytevector-length . cy52c4) (bytevector-ieee-single-ref . cy52c3) (bytevector-ieee-single-set! . cy52c2) (bytevector-ieee-single-native-set! . cy52c1) (bytevector-ieee-single-native-ref . cy52c0) (bytevector-ieee-double-set! . cy52bf) (bytevector-ieee-double-ref . cy52be) (bytevector-ieee-double-native-set! . cy52bd) (bytevector-ieee-double-native-ref . cy52bc) (bytevector-fill! . cy52bb) (bytevector-copy! . cy52ba) (bytevector-copy . cy52b9) (bytevector->uint-list . cy52b8) (bytevector->u8-list . cy52b7) (bytevector->sint-list . cy52b6) (no-nans-violation? . cy4ece) (no-infinities-violation? . cy4eb9) (make-no-nans-violation . cy4ecc) (make-no-infinities-violation . cy4eb7) (real->flonum . cy52b5) (flzero? . cy52b4) (fltruncate . cy52b3) (fltan . cy52b2) (flsqrt . cy52b1) (flsin . cy52b0) (flround . cy52af) (flpositive? . cy52ae) (flonum? . cy52ad) (flodd? . cy52ac) (flnumerator . cy52ab) (flnegative? . cy52aa) (flnan? . cy52a9) (flmod0 . cy52a8) (flmod . cy52a7) (flmin . cy52a6) (flmax . cy52a5) (fllog . cy52a4) (flinteger? . cy52a3) (flinfinite? . cy52a2) (flfloor . cy52a1) (flfinite? . cy52a0) (flexpt . cy529f) (flexp . cy529e) (fleven? . cy529d) (fldiv0-and-mod0 . cy529c) (fldiv0 . cy529b) (fldiv-and-mod . cy529a) (fldiv . cy5299) (fldenominator . cy5298) (flcos . cy5297) (flceiling . cy5296) (flatan . cy5295) (flasin . cy5294) (flacos . cy5293) (flabs . cy5292) (fl>? . cy5291) (fl>=? . cy5290) (fl=? . cy528f) (fl<? . cy528e) (fl<=? . cy528d) (fl/ . cy528c) (fl- . cy528b) (fl+ . cy528a) (fl* . cy5289) (fixnum->flonum . cy5288) (fxzero? . cy5287) (fxxor . cy5286) (fxrotate-bit-field . cy5285) (fxreverse-bit-field . cy5284) (fxpositive? . cy5283) (fxodd? . cy5282) (fxnot . cy5281) (fxnegative? . cy5280) (fxmod0 . cy527f) (fxmod . cy527e) (fxmin . cy527d) (fxmax . cy527c) (fxlength . cy527b) (fxior . cy527a) (fxif . cy5279) (fxfirst-bit-set . cy5278) (fxeven? . cy5277) (fxdiv0-and-mod0 . cy5276) (fxdiv0 . cy5275) (fxdiv-and-mod . cy5274) (fxdiv . cy5273) (fxcopy-bit-field . cy5272) (fxcopy-bit . cy5271) (fxbit-set? . cy5270) (fxbit-field . cy526f) (fxbit-count . cy526e) (fxarithmetic-shift-right . cy526d) (fxarithmetic-shift-left . cy526c) (fxarithmetic-shift . cy526b) (fxand . cy526a) (fx>? . cy5269) (fx>=? . cy5268) (fx=? . cy5267) (fx<? . cy5266) (fx<=? . cy5265) (fx-/carry . cy5264) (fx- . cy5263) (fx+/carry . cy5262) (fx+ . cy5261) (fx*/carry . cy5260) (fx* . cy525f) (greatest-fixnum . cy525e) (least-fixnum . cy525d) (fixnum-width . cy525c) (fixnum? . cy525b) (bitwise-rotate-bit-field . cy525a) (bitwise-reverse-bit-field . cy5259) (bitwise-length . cy5258) (bitwise-if . cy5257) (bitwise-first-bit-set . cy5256) (bitwise-copy-bit-field . cy5255) (bitwise-copy-bit . cy5254) (bitwise-bit-set? . cy5253) (bitwise-bit-field . cy5252) (bitwise-bit-count . cy5251) (bitwise-xor . cy5250) (bitwise-ior . cy524f) (bitwise-and . cy524e) (bitwise-not . cy524d) (bitwise-arithmetic-shift-right . cy524c) (bitwise-arithmetic-shift-left . cy524b) (bitwise-arithmetic-shift . cy524a) (zero? . cy5249) (vector? . cy5248) (vector-set! . cy5247) (vector-ref . cy5246) (vector-map . cy5245) (vector-length . cy5244) (vector-for-each . cy5243) (vector-fill! . cy5242) (vector->list . cy5241) (vector . cy5240) (values . cy523f) (truncate . cy523e) (tan . cy523d) (symbol? . cy523c) (symbol=? . cy523b) (symbol->string . cy523a) (substring . cy5239) (string? . cy5238) (string>? . cy5237) (string>=? . cy5236) (string=? . cy5235) (string<? . cy5234) (string<=? . cy5233) (string-ref . cy5232) (string-length . cy5231) (string-for-each . cy5230) (string-copy . cy522f) (string-append . cy522e) (string->symbol . cy522d) (string->number . cy522c) (string->list . cy522b) (string . cy522a) (sqrt . cy5229) (sin . cy5228) (round . cy5227) (reverse . cy5226) (real? . cy5225) (real-valued? . cy5224) (real-part . cy5223) (rationalize . cy5222) (rational? . cy5221) (rational-valued? . cy5220) (procedure? . cy521f) (positive? . cy521e) (pair? . cy521d) (odd? . cy521c) (numerator . cy521b) (number? . cy521a) (number->string . cy5219) (null? . cy5218) (not . cy5217) (negative? . cy5216) (nan? . cy5215) (min . cy5214) (max . cy5213) (map . cy5212) (make-vector . cy5211) (make-string . cy5210) (make-rectangular . cy520f) (make-polar . cy520e) (magnitude . cy520d) (log . cy520c) (list? . cy520b) (list-tail . cy520a) (list-ref . cy5209) (list->vector . cy5208) (list->string . cy5207) (list . cy5206) (length . cy5205) (lcm . cy5204) (integer? . cy5203) (integer-valued? . cy5202) (integer->char . cy5201) (infinite? . cy5200) (inexact? . cy51ff) (inexact . cy51fe) (imag-part . cy51fd) (gcd . cy51fc) (for-each . cy51fb) (floor . cy51fa) (finite? . cy51f9) (expt . cy51f8) (exp . cy51f7) (exact? . cy51f6) (exact-integer-sqrt . cy51f5) (exact . cy51f4) (even? . cy51f3) (error . cy51f2) (eqv? . cy51f1) (equal? . cy51f0) (eq? . cy51ef) (dynamic-wind . cy51ee) (div0-and-mod0 . cy51ed) (mod0 . cy51ec) (div0 . cy51eb) (div-and-mod . cy51ea) (mod . cy51e9) (div . cy51e8) (denominator . cy51e7) (cos . cy51e6) (cons . cy51e5) (complex? . cy51e4) (char? . cy51e3) (char>? . cy51e2) (char>=? . cy51e1) (char=? . cy51e0) (char<? . cy51df) (char<=? . cy51de) (char->integer . cy51dd) (ceiling . cy51dc) (call-with-values . cy51db) (call/cc . cy51da) (call-with-current-continuation . cy51d9) (cddddr . cy51d8) (cdddar . cy51d7) (cddadr . cy51d6) (cddaar . cy51d5) (cdaddr . cy51d4) (cdadar . cy51d3) (cdaadr . cy51d2) (cdaaar . cy51d1) (cadddr . cy51d0) (caddar . cy51cf) (cadadr . cy51ce) (cadaar . cy51cd) (caaddr . cy51cc) (caadar . cy51cb) (caaadr . cy51ca) (caaaar . cy51c9) (cdddr . cy51c8) (cddar . cy51c7) (cdadr . cy51c6) (cdaar . cy51c5) (caddr . cy51c4) (cadar . cy51c3) (caadr . cy51c2) (caaar . cy51c1) (cddr . cy51c0) (cdar . cy51bf) (cadr . cy51be) (caar . cy51bd) (cdr . cy51bc) (car . cy51bb) (boolean? . cy51ba) (boolean=? . cy51b9) (atan . cy51b8) (assertion-violation . cy51b7) (asin . cy51b6) (apply . cy51b5) (append . cy51b4) (angle . cy51b3) (acos . cy51b2) (abs . cy51b1) (/ . cy51b0) (* . cy51af) (- . cy51ae) (+ . cy51ad) (>= . cy51ac) (> . cy51ab) (= . cy51aa) (<= . cy51a9) (< . cy51a8) (library . cy51a7) (&no-nans . cy51a6) (&no-infinities . cy51a5) (&i/o-encoding . cy51a4) (&i/o-decoding . cy51a3) (&i/o-port . cy51a2) (&i/o-file-does-not-exist . cy51a1) (&i/o-file-already-exists . cy51a0) (&i/o-file-is-read-only . cy519f) (&i/o-file-protection . cy519e) (&i/o-filename . cy519d) (&i/o-invalid-position . cy519c) (&i/o-write . cy519b) (&i/o-read . cy519a) (&i/o . cy5199) (&undefined . cy5198) (&syntax . cy5197) (&lexical . cy5196) (&implementation-restriction . cy5195) (&non-continuable . cy5194) (&who . cy5193) (&irritants . cy5192) (&assertion . cy5191) (&violation . cy5190) (&error . cy518f) (&serious . cy518e) (&warning . cy518d) (&message . cy518c) (&condition . cy518b) (define-condition-type . cy518a) (define-enumeration . cy5189) (define-record-type . cy5188) (parent-rtd . cy5187) (nongenerative . cy5186) (opaque . cy5185) (sealed . cy5184) (protocol . cy5183) (parent . cy5182) (immutable . cy5181) (mutable . cy5180) (fields . cy517f) (error-handling-mode . cy517e) (file-options . cy517d) (buffer-mode . cy517c) (eol-style . cy517b) (guard . cy517a) (unsyntax-splicing . cy5177) (unsyntax . cy5176) (unquote-splicing . cy5175) (unquote . cy5174) (_ . cy5173) (else . cy5172) (=> . cy5171) (... . cy5170) (assert . cy516f) (endianness . cy516e) (time . cy516c) (do . cy516b) (cond . cy516a) (let* . cy5169) (let*-values . cy5168) (let-values . cy5167) (identifier-syntax . cy5166) (with-syntax . cy5165) (quasisyntax . cy5164) (quasiquote . cy5163) (syntax-rules . cy5162) (include . cy5161) (record-constructor-descriptor . cy515f) (record-type-descriptor . cy515e) (case . cy515d) (unless . cy515b) (when . cy515a) (or . cy5159) (and . cy5158) (if . cy5157) (let . cy5156) (letrec* . cy5155) (letrec . cy5154) (case-lambda . cy5152) (lambda . cy5151) (syntax . cy5150) (syntax-case . cy514f) (quote . cy514e) (letrec-syntax . cy514c) (let-syntax . cy514b) (set! . cy514a) (import . cy5149) (begin . cy5148) (define-syntax . cy5146) (define . cy5145)) '() values values '#f '#f '#t '#f) (cy2cd1@cy2b1d@install-library 'cy5471 '(psyntax null-environment-5) '() '() '() '() '((make-promise . cy5325) (unquote-splicing . cy5175) (unquote . cy5174) (_ . cy5173) (else . cy5172) (=> . cy5171) (... . cy5170) (delay . cy516d) (do . cy516b) (cond . cy516a) (let* . cy5169) (quasiquote . cy5163) (syntax-rules . cy5162) (case . cy515d) (or . cy5159) (and . cy5158) (if . cy5157) (let . cy5156) (letrec . cy5154) (lambda . cy5151) (quote . cy514e) (letrec-syntax . cy514c) (let-syntax . cy514b) (set! . cy514a) (begin . cy5148) (define-syntax . cy5146) (define . cy5145)) '() values values '#f '#f '#t '#f) (cy2cd1@cy2b1d@install-library 'cy5472 '(psyntax scheme-report-environment-5) '() '() '() '() '((string-ci>? . cy53ba) (string-ci>=? . cy53b9) (string-ci=? . cy53b8) (string-ci<? . cy53b7) (string-ci<=? . cy53b6) (char-whitespace? . cy53b5) (char-upper-case? . cy53b4) (char-numeric? . cy53b2) (char-lower-case? . cy53b1) (char-upcase . cy53af) (char-downcase . cy53ac) (char-ci>? . cy53ab) (char-ci>=? . cy53aa) (char-ci=? . cy53a9) (char-ci<? . cy53a8) (char-ci<=? . cy53a7) (char-alphabetic? . cy53a6) (call-with-output-file . cy537a) (call-with-input-file . cy5379) (write-char . cy5378) (write . cy5377) (with-output-to-file . cy5376) (with-input-from-file . cy5375) (read-char . cy5374) (read . cy5373) (peek-char . cy5372) (open-output-file . cy5371) (open-input-file . cy5370) (newline . cy536f) (display . cy536e) (close-output-port . cy536d) (close-input-port . cy536c) (eof-object . cy536a) (current-output-port . cy5368) (current-input-port . cy5367) (output-port? . cy5366) (input-port? . cy5365) (scheme-report-environment . cy317f) (quotient . cy532b) (null-environment . cy317d) (remainder . cy532a) (modulo . cy5329) (inexact->exact . cy5328) (force . cy5327) (exact->inexact . cy5326) (make-promise . cy5325) (string-fill! . cy5323) (string-set! . cy5322) (set-cdr! . cy5321) (set-car! . cy5320) (memv . cy531a) (memq . cy5319) (member . cy5317) (assv . cy530f) (assq . cy530e) (assoc . cy530c) (eval . cy3183) (zero? . cy5249) (vector? . cy5248) (vector-set! . cy5247) (vector-ref . cy5246) (vector-length . cy5244) (vector-fill! . cy5242) (vector->list . cy5241) (vector . cy5240) (values . cy523f) (truncate . cy523e) (tan . cy523d) (symbol? . cy523c) (symbol->string . cy523a) (substring . cy5239) (string? . cy5238) (string>? . cy5237) (string>=? . cy5236) (string=? . cy5235) (string<? . cy5234) (string<=? . cy5233) (string-ref . cy5232) (string-length . cy5231) (string-copy . cy522f) (string-append . cy522e) (string->symbol . cy522d) (string->number . cy522c) (string->list . cy522b) (string . cy522a) (sqrt . cy5229) (sin . cy5228) (round . cy5227) (reverse . cy5226) (real? . cy5225) (real-part . cy5223) (rationalize . cy5222) (rational? . cy5221) (procedure? . cy521f) (positive? . cy521e) (pair? . cy521d) (odd? . cy521c) (numerator . cy521b) (number? . cy521a) (number->string . cy5219) (not . cy5217) (negative? . cy5216) (min . cy5214) (max . cy5213) (map . cy5212) (make-vector . cy5211) (make-string . cy5210) (make-rectangular . cy520f) (make-polar . cy520e) (magnitude . cy520d) (log . cy520c) (list? . cy520b) (list-tail . cy520a) (list-ref . cy5209) (list->vector . cy5208) (list->string . cy5207) (list . cy5206) (length . cy5205) (lcm . cy5204) (integer? . cy5203) (integer->char . cy5201) (inexact? . cy51ff) (imag-part . cy51fd) (gcd . cy51fc) (for-each . cy51fb) (floor . cy51fa) (expt . cy51f8) (exp . cy51f7) (exact? . cy51f6) (even? . cy51f3) (eqv? . cy51f1) (equal? . cy51f0) (eq? . cy51ef) (dynamic-wind . cy51ee) (denominator . cy51e7) (cos . cy51e6) (cons . cy51e5) (complex? . cy51e4) (char? . cy51e3) (char>? . cy51e2) (char>=? . cy51e1) (char=? . cy51e0) (char<? . cy51df) (char<=? . cy51de) (char->integer . cy51dd) (ceiling . cy51dc) (call-with-values . cy51db) (call-with-current-continuation . cy51d9) (cddddr . cy51d8) (cdddar . cy51d7) (cddadr . cy51d6) (cddaar . cy51d5) (cdaddr . cy51d4) (cdadar . cy51d3) (cdaadr . cy51d2) (cdaaar . cy51d1) (cadddr . cy51d0) (caddar . cy51cf) (cadadr . cy51ce) (cadaar . cy51cd) (caaddr . cy51cc) (caadar . cy51cb) (caaadr . cy51ca) (caaaar . cy51c9) (cdddr . cy51c8) (cddar . cy51c7) (cdadr . cy51c6) (cdaar . cy51c5) (caddr . cy51c4) (cadar . cy51c3) (caadr . cy51c2) (caaar . cy51c1) (cddr . cy51c0) (cdar . cy51bf) (cadr . cy51be) (caar . cy51bd) (cdr . cy51bc) (car . cy51bb) (boolean? . cy51ba) (atan . cy51b8) (asin . cy51b6) (apply . cy51b5) (append . cy51b4) (angle . cy51b3) (acos . cy51b2) (abs . cy51b1) (/ . cy51b0) (* . cy51af) (- . cy51ae) (+ . cy51ad) (>= . cy51ac) (> . cy51ab) (= . cy51aa) (<= . cy51a9) (< . cy51a8) (unquote-splicing . cy5175) (unquote . cy5174) (else . cy5172) (=> . cy5171) (... . cy5170) (delay . cy516d) (do . cy516b) (cond . cy516a) (let* . cy5169) (quasiquote . cy5163) (syntax-rules . cy5162) (case . cy515d) (or . cy5159) (and . cy5158) (if . cy5157) (let . cy5156) (letrec . cy5154) (lambda . cy5151) (quote . cy514e) (letrec-syntax . cy514c) (let-syntax . cy514b) (set! . cy514a) (begin . cy5148) (define-syntax . cy5146) (define . cy5145)) '() values values '#f '#f '#t '#f) (cy2cd1@cy2b1d@install-library 'cy5473 '(psyntax modules) '() '() '() '() '((module . cy5147)) '() values values '#f '#f '#t '#f) (cy2cd1@cy2b1d@install-library 'cy5474 '(chez parameters) '() '() '() '() '() '() values values '#f '#f '#t '#f) (cy2cd1@cy2b1d@install-library 'cy5475 '(rnrs) '(6) '() '() '() '((regexp? . cy5468) (string-upcase . cy53c2) (string-titlecase . cy53c1) (string-normalize-nfkd . cy53c0) (string-normalize-nfkc . cy53bf) (string-normalize-nfd . cy53be) (string-normalize-nfc . cy53bd) (string-foldcase . cy53bc) (string-downcase . cy53bb) (string-ci>? . cy53ba) (string-ci>=? . cy53b9) (string-ci=? . cy53b8) (string-ci<? . cy53b7) (string-ci<=? . cy53b6) (char-whitespace? . cy53b5) (char-upper-case? . cy53b4) (char-title-case? . cy53b3) (char-numeric? . cy53b2) (char-lower-case? . cy53b1) (char-general-category . cy53b0) (char-upcase . cy53af) (char-titlecase . cy53ae) (char-foldcase . cy53ad) (char-downcase . cy53ac) (char-ci>? . cy53ab) (char-ci>=? . cy53aa) (char-ci=? . cy53a9) (char-ci<? . cy53a8) (char-ci<=? . cy53a7) (char-alphabetic? . cy53a6) (make-variable-transformer . cy2eee) (identifier? . cy31a5) (generate-temporaries . cy3191) (free-identifier=? . cy3193) (syntax->datum . cy31a9) (datum->syntax . cy31a7) (bound-identifier=? . cy3195) (record-type-descriptor? . cy53a5) (record-predicate . cy53a4) (record-mutator . cy53a3) (record-constructor . cy53a2) (record-accessor . cy53a1) (make-record-type-descriptor . cy53a0) (make-record-constructor-descriptor . cy539f) (record? . cy539e) (record-type-uid . cy539d) (record-type-sealed? . cy539c) (record-type-parent . cy539b) (record-type-opaque? . cy539a) (record-type-name . cy5399) (record-type-generative? . cy5398) (record-type-field-names . cy5397) (record-rtd . cy5396) (record-field-mutable? . cy5395) (delete-file . cy5394) (file-exists? . cy5393) (vector-sort! . cy5392) (vector-sort . cy5391) (list-sort . cy5390) (symbol-hash . cy538f) (string-ci-hash . cy538e) (string-hash . cy538d) (equal-hash . cy538c) (hashtable-equivalence-function . cy538b) (make-hashtable . cy538a) (hashtable-hash-function . cy5389) (make-eqv-hashtable . cy5388) (make-eq-hashtable . cy5387) (hashtable? . cy5386) (hashtable-update! . cy5385) (hashtable-size . cy5384) (hashtable-set! . cy5383) (hashtable-ref . cy5382) (hashtable-mutable? . cy5381) (hashtable-keys . cy5380) (hashtable-entries . cy537f) (hashtable-delete! . cy537e) (hashtable-copy . cy537d) (hashtable-contains? . cy537c) (hashtable-clear! . cy537b) (call-with-output-file . cy537a) (call-with-input-file . cy5379) (write-char . cy5378) (write . cy5377) (with-output-to-file . cy5376) (with-input-from-file . cy5375) (read-char . cy5374) (read . cy5373) (peek-char . cy5372) (open-output-file . cy5371) (open-input-file . cy5370) (newline . cy536f) (display . cy536e) (close-output-port . cy536d) (close-input-port . cy536c) (eof-object? . cy536b) (eof-object . cy536a) (current-error-port . cy5369) (current-output-port . cy5368) (current-input-port . cy5367) (output-port? . cy5366) (input-port? . cy5365) (utf-8-codec . cy5364) (utf-16-codec . cy5363) (transcoder-error-handling-mode . cy5362) (transcoder-eol-style . cy5361) (transcoder-codec . cy5360) (transcoded-port . cy535f) (textual-port? . cy535e) (string->bytevector . cy535d) (standard-output-port . cy535c) (standard-input-port . cy535b) (standard-error-port . cy535a) (set-port-position! . cy5359) (put-u8 . cy5358) (put-string . cy5357) (put-datum . cy5356) (put-char . cy5355) (put-bytevector . cy5354) (port? . cy5353) (port-transcoder . cy5352) (port-position . cy5351) (port-has-set-port-position!? . cy5350) (port-has-port-position? . cy534f) (port-eof? . cy534e) (output-port-buffer-mode . cy534d) (open-string-output-port . cy534c) (open-string-input-port . cy534b) (open-file-output-port . cy534a) (open-file-input/output-port . cy5349) (open-file-input-port . cy5348) (open-bytevector-output-port . cy5347) (open-bytevector-input-port . cy5346) (native-transcoder . cy5345) (native-eol-style . cy5344) (make-transcoder . cy5343) (latin-1-codec . cy5342) (make-i/o-write-error . cy4dcd) (make-i/o-read-error . cy4db8) (make-i/o-port-error . cy4e6e) (make-i/o-invalid-position-error . cy4de4) (make-i/o-filename-error . cy4dff) (make-i/o-file-protection-error . cy4e18) (make-i/o-file-is-read-only-error . cy4e2d) (make-i/o-file-does-not-exist-error . cy4e57) (make-i/o-file-already-exists-error . cy4e42) (make-i/o-error . cy4da3) (make-i/o-encoding-error . cy4e9e) (make-i/o-decoding-error . cy4e87) (make-custom-textual-output-port . cy5341) (make-custom-textual-input/output-port . cy5340) (make-custom-textual-input-port . cy533f) (make-custom-binary-output-port . cy533e) (make-custom-binary-input/output-port . cy533d) (make-custom-binary-input-port . cy533c) (make-bytevector . cy533b) (lookahead-u8 . cy533a) (lookahead-char . cy5339) (i/o-write-error? . cy4dcf) (i/o-read-error? . cy4dba) (i/o-port-error? . cy4e72) (i/o-invalid-position-error? . cy4de8) (i/o-filename-error? . cy4e03) (i/o-file-protection-error? . cy4e1a) (i/o-file-is-read-only-error? . cy4e2f) (i/o-file-does-not-exist-error? . cy4e59) (i/o-file-already-exists-error? . cy4e44) (i/o-error? . cy4da5) (i/o-error-position . cy4dea) (i/o-error-port . cy4e74) (i/o-error-filename . cy4e05) (i/o-encoding-error? . cy4ea2) (i/o-encoding-error-char . cy4ea4) (i/o-decoding-error? . cy4e89) (get-u8 . cy5338) (get-string-n! . cy5337) (get-string-n . cy5336) (get-string-all . cy5335) (get-line . cy5334) (get-datum . cy5333) (get-char . cy5332) (get-bytevector-some . cy5331) (get-bytevector-n! . cy5330) (get-bytevector-n . cy532f) (get-bytevector-all . cy532e) (flush-output-port . cy532d) (close-port . cy532c) (exit . cy5324) (command-line . cy4fdd) (remove . cy531f) (remv . cy531e) (remp . cy531d) (remq . cy531c) (partition . cy531b) (memv . cy531a) (memq . cy5319) (memp . cy5318) (member . cy5317) (exists . cy5316) (for-all . cy5315) (fold-right . cy5314) (fold-left . cy5313) (find . cy5312) (filter . cy5311) (cons* . cy5310) (assv . cy530f) (assq . cy530e) (assp . cy530d) (assoc . cy530c) (call-with-string-output-port . cy530b) (call-with-port . cy530a) (call-with-bytevector-output-port . cy5309) (bytevector->string . cy5308) (buffer-mode? . cy5307) (binary-port? . cy5306) (with-exception-handler . cy5305) (raise-continuable . cy5304) (raise . cy5303) (make-enumeration . cy5302) (enum-set=? . cy5301) (enum-set-universe . cy5300) (enum-set-union . cy52ff) (enum-set-subset? . cy52fe) (enum-set-projection . cy52fd) (enum-set-member? . cy52fc) (enum-set-intersection . cy52fb) (enum-set-indexer . cy52fa) (enum-set-difference . cy52f9) (enum-set-constructor . cy52f8) (enum-set-complement . cy52f7) (enum-set->list . cy52f6) (who-condition? . cy4d19) (warning? . cy4c91) (violation? . cy4cd0) (undefined-violation? . cy4d90) (syntax-violation? . cy4d77) (syntax-violation-subform . cy4d7b) (syntax-violation-form . cy4d79) (syntax-violation . cy31a3) (simple-conditions . cy52f5) (serious-condition? . cy4ca6) (non-continuable-violation? . cy4d30) (message-condition? . cy4c7a) (make-who-condition . cy4d15) (make-warning . cy4c8f) (make-violation . cy4cce) (make-undefined-violation . cy4d8e) (make-syntax-violation . cy4d71) (make-serious-condition . cy4ca4) (make-non-continuable-violation . cy4d2e) (make-message-condition . cy4c76) (make-lexical-violation . cy4d58) (make-irritants-condition . cy4cfa) (make-implementation-restriction-violation . cy4d43) (make-error . cy4cb9) (make-assertion-violation . cy4ce3) (lexical-violation? . cy4d5a) (irritants-condition? . cy4cfe) (implementation-restriction-violation? . cy4d45) (error? . cy4cbb) (condition-who . cy4d1b) (condition-predicate . cy52f4) (condition-message . cy4c7c) (condition-irritants . cy4d00) (condition-accessor . cy52f3) (condition . cy52f2) (assertion-violation? . cy4ce5) (condition? . cy52f1) (utf32->string . cy52f0) (utf16->string . cy52ef) (utf8->string . cy52ee) (uint-list->bytevector . cy52ed) (u8-list->bytevector . cy52ec) (string->utf8 . cy52eb) (string->utf32 . cy52ea) (string->utf16 . cy52e9) (sint-list->bytevector . cy52e8) (native-endianness . cy52e7) (bytevector? . cy52e6) (bytevector=? . cy52e5) (bytevector-uint-set! . cy52e4) (bytevector-uint-ref . cy52e3) (bytevector-u8-set! . cy52e2) (bytevector-u8-ref . cy52e1) (bytevector-u64-set! . cy52e0) (bytevector-u64-ref . cy52df) (bytevector-u64-native-set! . cy52de) (bytevector-u64-native-ref . cy52dd) (bytevector-u32-set! . cy52dc) (bytevector-u32-ref . cy52db) (bytevector-u32-native-set! . cy52da) (bytevector-u32-native-ref . cy52d9) (bytevector-u16-set! . cy52d8) (bytevector-u16-ref . cy52d7) (bytevector-u16-native-set! . cy52d6) (bytevector-u16-native-ref . cy52d5) (bytevector-sint-set! . cy52d4) (bytevector-sint-ref . cy52d3) (bytevector-s8-set! . cy52d2) (bytevector-s8-ref . cy52d1) (bytevector-s64-set! . cy52d0) (bytevector-s64-ref . cy52cf) (bytevector-s64-native-set! . cy52ce) (bytevector-s64-native-ref . cy52cd) (bytevector-s32-set! . cy52cc) (bytevector-s32-ref . cy52cb) (bytevector-s32-native-set! . cy52ca) (bytevector-s32-native-ref . cy52c9) (bytevector-s16-set! . cy52c8) (bytevector-s16-ref . cy52c7) (bytevector-s16-native-set! . cy52c6) (bytevector-s16-native-ref . cy52c5) (bytevector-length . cy52c4) (bytevector-ieee-single-ref . cy52c3) (bytevector-ieee-single-set! . cy52c2) (bytevector-ieee-single-native-set! . cy52c1) (bytevector-ieee-single-native-ref . cy52c0) (bytevector-ieee-double-set! . cy52bf) (bytevector-ieee-double-ref . cy52be) (bytevector-ieee-double-native-set! . cy52bd) (bytevector-ieee-double-native-ref . cy52bc) (bytevector-fill! . cy52bb) (bytevector-copy! . cy52ba) (bytevector-copy . cy52b9) (bytevector->uint-list . cy52b8) (bytevector->u8-list . cy52b7) (bytevector->sint-list . cy52b6) (no-nans-violation? . cy4ece) (no-infinities-violation? . cy4eb9) (make-no-nans-violation . cy4ecc) (make-no-infinities-violation . cy4eb7) (real->flonum . cy52b5) (flzero? . cy52b4) (fltruncate . cy52b3) (fltan . cy52b2) (flsqrt . cy52b1) (flsin . cy52b0) (flround . cy52af) (flpositive? . cy52ae) (flonum? . cy52ad) (flodd? . cy52ac) (flnumerator . cy52ab) (flnegative? . cy52aa) (flnan? . cy52a9) (flmod0 . cy52a8) (flmod . cy52a7) (flmin . cy52a6) (flmax . cy52a5) (fllog . cy52a4) (flinteger? . cy52a3) (flinfinite? . cy52a2) (flfloor . cy52a1) (flfinite? . cy52a0) (flexpt . cy529f) (flexp . cy529e) (fleven? . cy529d) (fldiv0-and-mod0 . cy529c) (fldiv0 . cy529b) (fldiv-and-mod . cy529a) (fldiv . cy5299) (fldenominator . cy5298) (flcos . cy5297) (flceiling . cy5296) (flatan . cy5295) (flasin . cy5294) (flacos . cy5293) (flabs . cy5292) (fl>? . cy5291) (fl>=? . cy5290) (fl=? . cy528f) (fl<? . cy528e) (fl<=? . cy528d) (fl/ . cy528c) (fl- . cy528b) (fl+ . cy528a) (fl* . cy5289) (fixnum->flonum . cy5288) (fxzero? . cy5287) (fxxor . cy5286) (fxrotate-bit-field . cy5285) (fxreverse-bit-field . cy5284) (fxpositive? . cy5283) (fxodd? . cy5282) (fxnot . cy5281) (fxnegative? . cy5280) (fxmod0 . cy527f) (fxmod . cy527e) (fxmin . cy527d) (fxmax . cy527c) (fxlength . cy527b) (fxior . cy527a) (fxif . cy5279) (fxfirst-bit-set . cy5278) (fxeven? . cy5277) (fxdiv0-and-mod0 . cy5276) (fxdiv0 . cy5275) (fxdiv-and-mod . cy5274) (fxdiv . cy5273) (fxcopy-bit-field . cy5272) (fxcopy-bit . cy5271) (fxbit-set? . cy5270) (fxbit-field . cy526f) (fxbit-count . cy526e) (fxarithmetic-shift-right . cy526d) (fxarithmetic-shift-left . cy526c) (fxarithmetic-shift . cy526b) (fxand . cy526a) (fx>? . cy5269) (fx>=? . cy5268) (fx=? . cy5267) (fx<? . cy5266) (fx<=? . cy5265) (fx-/carry . cy5264) (fx- . cy5263) (fx+/carry . cy5262) (fx+ . cy5261) (fx*/carry . cy5260) (fx* . cy525f) (greatest-fixnum . cy525e) (least-fixnum . cy525d) (fixnum-width . cy525c) (fixnum? . cy525b) (bitwise-rotate-bit-field . cy525a) (bitwise-reverse-bit-field . cy5259) (bitwise-length . cy5258) (bitwise-if . cy5257) (bitwise-first-bit-set . cy5256) (bitwise-copy-bit-field . cy5255) (bitwise-copy-bit . cy5254) (bitwise-bit-set? . cy5253) (bitwise-bit-field . cy5252) (bitwise-bit-count . cy5251) (bitwise-xor . cy5250) (bitwise-ior . cy524f) (bitwise-and . cy524e) (bitwise-not . cy524d) (bitwise-arithmetic-shift-right . cy524c) (bitwise-arithmetic-shift-left . cy524b) (bitwise-arithmetic-shift . cy524a) (zero? . cy5249) (vector? . cy5248) (vector-set! . cy5247) (vector-ref . cy5246) (vector-map . cy5245) (vector-length . cy5244) (vector-for-each . cy5243) (vector-fill! . cy5242) (vector->list . cy5241) (vector . cy5240) (values . cy523f) (truncate . cy523e) (tan . cy523d) (symbol? . cy523c) (symbol=? . cy523b) (symbol->string . cy523a) (substring . cy5239) (string? . cy5238) (string>? . cy5237) (string>=? . cy5236) (string=? . cy5235) (string<? . cy5234) (string<=? . cy5233) (string-ref . cy5232) (string-length . cy5231) (string-for-each . cy5230) (string-copy . cy522f) (string-append . cy522e) (string->symbol . cy522d) (string->number . cy522c) (string->list . cy522b) (string . cy522a) (sqrt . cy5229) (sin . cy5228) (round . cy5227) (reverse . cy5226) (real? . cy5225) (real-valued? . cy5224) (real-part . cy5223) (rationalize . cy5222) (rational? . cy5221) (rational-valued? . cy5220) (procedure? . cy521f) (positive? . cy521e) (pair? . cy521d) (odd? . cy521c) (numerator . cy521b) (number? . cy521a) (number->string . cy5219) (null? . cy5218) (not . cy5217) (negative? . cy5216) (nan? . cy5215) (min . cy5214) (max . cy5213) (map . cy5212) (make-vector . cy5211) (make-string . cy5210) (make-rectangular . cy520f) (make-polar . cy520e) (magnitude . cy520d) (log . cy520c) (list? . cy520b) (list-tail . cy520a) (list-ref . cy5209) (list->vector . cy5208) (list->string . cy5207) (list . cy5206) (length . cy5205) (lcm . cy5204) (integer? . cy5203) (integer-valued? . cy5202) (integer->char . cy5201) (infinite? . cy5200) (inexact? . cy51ff) (inexact . cy51fe) (imag-part . cy51fd) (gcd . cy51fc) (for-each . cy51fb) (floor . cy51fa) (finite? . cy51f9) (expt . cy51f8) (exp . cy51f7) (exact? . cy51f6) (exact-integer-sqrt . cy51f5) (exact . cy51f4) (even? . cy51f3) (error . cy51f2) (eqv? . cy51f1) (equal? . cy51f0) (eq? . cy51ef) (dynamic-wind . cy51ee) (div0-and-mod0 . cy51ed) (mod0 . cy51ec) (div0 . cy51eb) (div-and-mod . cy51ea) (mod . cy51e9) (div . cy51e8) (denominator . cy51e7) (cos . cy51e6) (cons . cy51e5) (complex? . cy51e4) (char? . cy51e3) (char>? . cy51e2) (char>=? . cy51e1) (char=? . cy51e0) (char<? . cy51df) (char<=? . cy51de) (char->integer . cy51dd) (ceiling . cy51dc) (call-with-values . cy51db) (call/cc . cy51da) (call-with-current-continuation . cy51d9) (cddddr . cy51d8) (cdddar . cy51d7) (cddadr . cy51d6) (cddaar . cy51d5) (cdaddr . cy51d4) (cdadar . cy51d3) (cdaadr . cy51d2) (cdaaar . cy51d1) (cadddr . cy51d0) (caddar . cy51cf) (cadadr . cy51ce) (cadaar . cy51cd) (caaddr . cy51cc) (caadar . cy51cb) (caaadr . cy51ca) (caaaar . cy51c9) (cdddr . cy51c8) (cddar . cy51c7) (cdadr . cy51c6) (cdaar . cy51c5) (caddr . cy51c4) (cadar . cy51c3) (caadr . cy51c2) (caaar . cy51c1) (cddr . cy51c0) (cdar . cy51bf) (cadr . cy51be) (caar . cy51bd) (cdr . cy51bc) (car . cy51bb) (boolean? . cy51ba) (boolean=? . cy51b9) (atan . cy51b8) (assertion-violation . cy51b7) (asin . cy51b6) (apply . cy51b5) (append . cy51b4) (angle . cy51b3) (acos . cy51b2) (abs . cy51b1) (/ . cy51b0) (* . cy51af) (- . cy51ae) (+ . cy51ad) (>= . cy51ac) (> . cy51ab) (= . cy51aa) (<= . cy51a9) (< . cy51a8) (&no-nans . cy51a6) (&no-infinities . cy51a5) (&i/o-encoding . cy51a4) (&i/o-decoding . cy51a3) (&i/o-port . cy51a2) (&i/o-file-does-not-exist . cy51a1) (&i/o-file-already-exists . cy51a0) (&i/o-file-is-read-only . cy519f) (&i/o-file-protection . cy519e) (&i/o-filename . cy519d) (&i/o-invalid-position . cy519c) (&i/o-write . cy519b) (&i/o-read . cy519a) (&i/o . cy5199) (&undefined . cy5198) (&syntax . cy5197) (&lexical . cy5196) (&implementation-restriction . cy5195) (&non-continuable . cy5194) (&who . cy5193) (&irritants . cy5192) (&assertion . cy5191) (&violation . cy5190) (&error . cy518f) (&serious . cy518e) (&warning . cy518d) (&message . cy518c) (&condition . cy518b) (define-condition-type . cy518a) (define-enumeration . cy5189) (define-record-type . cy5188) (parent-rtd . cy5187) (nongenerative . cy5186) (opaque . cy5185) (sealed . cy5184) (protocol . cy5183) (parent . cy5182) (immutable . cy5181) (mutable . cy5180) (fields . cy517f) (error-handling-mode . cy517e) (file-options . cy517d) (buffer-mode . cy517c) (eol-style . cy517b) (guard . cy517a) (unsyntax-splicing . cy5177) (unsyntax . cy5176) (unquote-splicing . cy5175) (unquote . cy5174) (_ . cy5173) (else . cy5172) (=> . cy5171) (... . cy5170) (assert . cy516f) (endianness . cy516e) (do . cy516b) (cond . cy516a) (let* . cy5169) (let*-values . cy5168) (let-values . cy5167) (identifier-syntax . cy5166) (with-syntax . cy5165) (quasisyntax . cy5164) (quasiquote . cy5163) (syntax-rules . cy5162) (record-constructor-descriptor . cy515f) (record-type-descriptor . cy515e) (case . cy515d) (unless . cy515b) (when . cy515a) (or . cy5159) (and . cy5158) (if . cy5157) (let . cy5156) (letrec* . cy5155) (letrec . cy5154) (case-lambda . cy5152) (lambda . cy5151) (syntax . cy5150) (syntax-case . cy514f) (quote . cy514e) (letrec-syntax . cy514c) (let-syntax . cy514b) (set! . cy514a) (begin . cy5148) (define-syntax . cy5146) (define . cy5145)) '() values values '#f '#f '#t '#f) (cy2cd1@cy2b1d@install-library 'cy5476 '(rnrs r5rs) '(6) '() '() '() '((scheme-report-environment . cy317f) (quotient . cy532b) (null-environment . cy317d) (remainder . cy532a) (modulo . cy5329) (inexact->exact . cy5328) (force . cy5327) (exact->inexact . cy5326) (make-promise . cy5325) (delay . cy516d)) '() values values '#f '#f '#t '#f) (cy2cd1@cy2b1d@install-library 'cy5477 '(rnrs control) '(6) '() '() '() '((do . cy516b) (unless . cy515b) (when . cy515a) (case-lambda . cy5152)) '() values values '#f '#f '#t '#f) (cy2cd1@cy2b1d@install-library 'cy5478 '(rnrs eval) '(6) '() '() '() '((eval . cy3183) (environment . cy317b)) '() values values '#f '#f '#t '#f) (cy2cd1@cy2b1d@install-library 'cy5479 '(rnrs mutable-pairs) '(6) '() '() '() '((set-cdr! . cy5321) (set-car! . cy5320)) '() values values '#f '#f '#t '#f) (cy2cd1@cy2b1d@install-library 'cy547a '(rnrs mutable-strings) '(6) '() '() '() '((string-fill! . cy5323) (string-set! . cy5322)) '() values values '#f '#f '#t '#f) (cy2cd1@cy2b1d@install-library 'cy547b '(rnrs programs) '(6) '() '() '() '((exit . cy5324) (command-line . cy4fdd)) '() values values '#f '#f '#t '#f) (cy2cd1@cy2b1d@install-library 'cy547c '(rnrs syntax-case) '(6) '() '() '() '((make-variable-transformer . cy2eee) (identifier? . cy31a5) (generate-temporaries . cy3191) (free-identifier=? . cy3193) (syntax->datum . cy31a9) (datum->syntax . cy31a7) (bound-identifier=? . cy3195) (syntax-violation . cy31a3) (unsyntax-splicing . cy5177) (unsyntax . cy5176) (_ . cy5173) (... . cy5170) (with-syntax . cy5165) (quasisyntax . cy5164) (syntax . cy5150) (syntax-case . cy514f)) '() values values '#f '#f '#t '#f) (cy2cd1@cy2b1d@install-library 'cy547d '(rnrs files) '(6) '() '() '() '((delete-file . cy5394) (file-exists? . cy5393) (make-i/o-write-error . cy4dcd) (make-i/o-read-error . cy4db8) (make-i/o-port-error . cy4e6e) (make-i/o-invalid-position-error . cy4de4) (make-i/o-filename-error . cy4dff) (make-i/o-file-protection-error . cy4e18) (make-i/o-file-is-read-only-error . cy4e2d) (make-i/o-file-does-not-exist-error . cy4e57) (make-i/o-file-already-exists-error . cy4e42) (make-i/o-error . cy4da3) (i/o-write-error? . cy4dcf) (i/o-read-error? . cy4dba) (i/o-port-error? . cy4e72) (i/o-invalid-position-error? . cy4de8) (i/o-filename-error? . cy4e03) (i/o-file-protection-error? . cy4e1a) (i/o-file-is-read-only-error? . cy4e2f) (i/o-file-does-not-exist-error? . cy4e59) (i/o-file-already-exists-error? . cy4e44) (i/o-error? . cy4da5) (i/o-error-position . cy4dea) (i/o-error-port . cy4e74) (i/o-error-filename . cy4e05) (&i/o-port . cy51a2) (&i/o-file-does-not-exist . cy51a1) (&i/o-file-already-exists . cy51a0) (&i/o-file-is-read-only . cy519f) (&i/o-file-protection . cy519e) (&i/o-filename . cy519d) (&i/o-invalid-position . cy519c) (&i/o-write . cy519b) (&i/o-read . cy519a) (&i/o . cy5199)) '() values values '#f '#f '#t '#f) (cy2cd1@cy2b1d@install-library 'cy547e '(rnrs sorting) '(6) '() '() '() '((vector-sort! . cy5392) (vector-sort . cy5391) (list-sort . cy5390)) '() values values '#f '#f '#t '#f) (cy2cd1@cy2b1d@install-library 'cy547f '(rnrs base) '(6) '() '() '() '((zero? . cy5249) (vector? . cy5248) (vector-set! . cy5247) (vector-ref . cy5246) (vector-map . cy5245) (vector-length . cy5244) (vector-for-each . cy5243) (vector-fill! . cy5242) (vector->list . cy5241) (vector . cy5240) (values . cy523f) (truncate . cy523e) (tan . cy523d) (symbol? . cy523c) (symbol=? . cy523b) (symbol->string . cy523a) (substring . cy5239) (string? . cy5238) (string>? . cy5237) (string>=? . cy5236) (string=? . cy5235) (string<? . cy5234) (string<=? . cy5233) (string-ref . cy5232) (string-length . cy5231) (string-for-each . cy5230) (string-copy . cy522f) (string-append . cy522e) (string->symbol . cy522d) (string->number . cy522c) (string->list . cy522b) (string . cy522a) (sqrt . cy5229) (sin . cy5228) (round . cy5227) (reverse . cy5226) (real? . cy5225) (real-valued? . cy5224) (real-part . cy5223) (rationalize . cy5222) (rational? . cy5221) (rational-valued? . cy5220) (procedure? . cy521f) (positive? . cy521e) (pair? . cy521d) (odd? . cy521c) (numerator . cy521b) (number? . cy521a) (number->string . cy5219) (null? . cy5218) (not . cy5217) (negative? . cy5216) (nan? . cy5215) (min . cy5214) (max . cy5213) (map . cy5212) (make-vector . cy5211) (make-string . cy5210) (make-rectangular . cy520f) (make-polar . cy520e) (magnitude . cy520d) (log . cy520c) (list? . cy520b) (list-tail . cy520a) (list-ref . cy5209) (list->vector . cy5208) (list->string . cy5207) (list . cy5206) (length . cy5205) (lcm . cy5204) (integer? . cy5203) (integer-valued? . cy5202) (integer->char . cy5201) (infinite? . cy5200) (inexact? . cy51ff) (inexact . cy51fe) (imag-part . cy51fd) (gcd . cy51fc) (for-each . cy51fb) (floor . cy51fa) (finite? . cy51f9) (expt . cy51f8) (exp . cy51f7) (exact? . cy51f6) (exact-integer-sqrt . cy51f5) (exact . cy51f4) (even? . cy51f3) (error . cy51f2) (eqv? . cy51f1) (equal? . cy51f0) (eq? . cy51ef) (dynamic-wind . cy51ee) (div0-and-mod0 . cy51ed) (mod0 . cy51ec) (div0 . cy51eb) (div-and-mod . cy51ea) (mod . cy51e9) (div . cy51e8) (denominator . cy51e7) (cos . cy51e6) (cons . cy51e5) (complex? . cy51e4) (char? . cy51e3) (char>? . cy51e2) (char>=? . cy51e1) (char=? . cy51e0) (char<? . cy51df) (char<=? . cy51de) (char->integer . cy51dd) (ceiling . cy51dc) (call-with-values . cy51db) (call/cc . cy51da) (call-with-current-continuation . cy51d9) (cddddr . cy51d8) (cdddar . cy51d7) (cddadr . cy51d6) (cddaar . cy51d5) (cdaddr . cy51d4) (cdadar . cy51d3) (cdaadr . cy51d2) (cdaaar . cy51d1) (cadddr . cy51d0) (caddar . cy51cf) (cadadr . cy51ce) (cadaar . cy51cd) (caaddr . cy51cc) (caadar . cy51cb) (caaadr . cy51ca) (caaaar . cy51c9) (cdddr . cy51c8) (cddar . cy51c7) (cdadr . cy51c6) (cdaar . cy51c5) (caddr . cy51c4) (cadar . cy51c3) (caadr . cy51c2) (caaar . cy51c1) (cddr . cy51c0) (cdar . cy51bf) (cadr . cy51be) (caar . cy51bd) (cdr . cy51bc) (car . cy51bb) (boolean? . cy51ba) (boolean=? . cy51b9) (atan . cy51b8) (assertion-violation . cy51b7) (asin . cy51b6) (apply . cy51b5) (append . cy51b4) (angle . cy51b3) (acos . cy51b2) (abs . cy51b1) (/ . cy51b0) (* . cy51af) (- . cy51ae) (+ . cy51ad) (>= . cy51ac) (> . cy51ab) (= . cy51aa) (<= . cy51a9) (< . cy51a8) (unquote-splicing . cy5175) (unquote . cy5174) (_ . cy5173) (else . cy5172) (=> . cy5171) (... . cy5170) (assert . cy516f) (cond . cy516a) (let* . cy5169) (let*-values . cy5168) (let-values . cy5167) (identifier-syntax . cy5166) (quasiquote . cy5163) (syntax-rules . cy5162) (case . cy515d) (or . cy5159) (and . cy5158) (if . cy5157) (let . cy5156) (letrec* . cy5155) (letrec . cy5154) (lambda . cy5151) (quote . cy514e) (letrec-syntax . cy514c) (let-syntax . cy514b) (set! . cy514a) (begin . cy5148) (define-syntax . cy5146) (define . cy5145)) '() values values '#f '#f '#t '#f) (cy2cd1@cy2b1d@install-library 'cy5480 '(rnrs lists) '(6) '() '() '() '((remove . cy531f) (remv . cy531e) (remp . cy531d) (remq . cy531c) (partition . cy531b) (memv . cy531a) (memq . cy5319) (memp . cy5318) (member . cy5317) (exists . cy5316) (for-all . cy5315) (fold-right . cy5314) (fold-left . cy5313) (find . cy5312) (filter . cy5311) (cons* . cy5310) (assv . cy530f) (assq . cy530e) (assp . cy530d) (assoc . cy530c)) '() values values '#f '#f '#t '#f) (cy2cd1@cy2b1d@install-library 'cy5481 '(rnrs io simple) '(6) '() '() '() '((call-with-output-file . cy537a) (call-with-input-file . cy5379) (write-char . cy5378) (write . cy5377) (with-output-to-file . cy5376) (with-input-from-file . cy5375) (read-char . cy5374) (read . cy5373) (peek-char . cy5372) (open-output-file . cy5371) (open-input-file . cy5370) (newline . cy536f) (display . cy536e) (close-output-port . cy536d) (close-input-port . cy536c) (eof-object? . cy536b) (eof-object . cy536a) (current-error-port . cy5369) (current-output-port . cy5368) (current-input-port . cy5367) (output-port? . cy5366) (input-port? . cy5365) (make-i/o-write-error . cy4dcd) (make-i/o-read-error . cy4db8) (make-i/o-port-error . cy4e6e) (make-i/o-invalid-position-error . cy4de4) (make-i/o-filename-error . cy4dff) (make-i/o-file-protection-error . cy4e18) (make-i/o-file-is-read-only-error . cy4e2d) (make-i/o-file-does-not-exist-error . cy4e57) (make-i/o-file-already-exists-error . cy4e42) (make-i/o-error . cy4da3) (i/o-write-error? . cy4dcf) (i/o-read-error? . cy4dba) (i/o-port-error? . cy4e72) (i/o-invalid-position-error? . cy4de8) (i/o-filename-error? . cy4e03) (i/o-file-protection-error? . cy4e1a) (i/o-file-is-read-only-error? . cy4e2f) (i/o-file-does-not-exist-error? . cy4e59) (i/o-file-already-exists-error? . cy4e44) (i/o-error? . cy4da5) (i/o-error-position . cy4dea) (i/o-error-port . cy4e74) (i/o-error-filename . cy4e05) (&i/o-port . cy51a2) (&i/o-file-does-not-exist . cy51a1) (&i/o-file-already-exists . cy51a0) (&i/o-file-is-read-only . cy519f) (&i/o-file-protection . cy519e) (&i/o-filename . cy519d) (&i/o-invalid-position . cy519c) (&i/o-write . cy519b) (&i/o-read . cy519a) (&i/o . cy5199)) '() values values '#f '#f '#t '#f) (cy2cd1@cy2b1d@install-library 'cy5482 '(rnrs bytevectors) '(6) '() '() '() '((make-bytevector . cy533b) (utf32->string . cy52f0) (utf16->string . cy52ef) (utf8->string . cy52ee) (uint-list->bytevector . cy52ed) (u8-list->bytevector . cy52ec) (string->utf8 . cy52eb) (string->utf32 . cy52ea) (string->utf16 . cy52e9) (sint-list->bytevector . cy52e8) (native-endianness . cy52e7) (bytevector? . cy52e6) (bytevector=? . cy52e5) (bytevector-uint-set! . cy52e4) (bytevector-uint-ref . cy52e3) (bytevector-u8-set! . cy52e2) (bytevector-u8-ref . cy52e1) (bytevector-u64-set! . cy52e0) (bytevector-u64-ref . cy52df) (bytevector-u64-native-set! . cy52de) (bytevector-u64-native-ref . cy52dd) (bytevector-u32-set! . cy52dc) (bytevector-u32-ref . cy52db) (bytevector-u32-native-set! . cy52da) (bytevector-u32-native-ref . cy52d9) (bytevector-u16-set! . cy52d8) (bytevector-u16-ref . cy52d7) (bytevector-u16-native-set! . cy52d6) (bytevector-u16-native-ref . cy52d5) (bytevector-sint-set! . cy52d4) (bytevector-sint-ref . cy52d3) (bytevector-s8-set! . cy52d2) (bytevector-s8-ref . cy52d1) (bytevector-s64-set! . cy52d0) (bytevector-s64-ref . cy52cf) (bytevector-s64-native-set! . cy52ce) (bytevector-s64-native-ref . cy52cd) (bytevector-s32-set! . cy52cc) (bytevector-s32-ref . cy52cb) (bytevector-s32-native-set! . cy52ca) (bytevector-s32-native-ref . cy52c9) (bytevector-s16-set! . cy52c8) (bytevector-s16-ref . cy52c7) (bytevector-s16-native-set! . cy52c6) (bytevector-s16-native-ref . cy52c5) (bytevector-length . cy52c4) (bytevector-ieee-single-ref . cy52c3) (bytevector-ieee-single-set! . cy52c2) (bytevector-ieee-single-native-set! . cy52c1) (bytevector-ieee-single-native-ref . cy52c0) (bytevector-ieee-double-set! . cy52bf) (bytevector-ieee-double-ref . cy52be) (bytevector-ieee-double-native-set! . cy52bd) (bytevector-ieee-double-native-ref . cy52bc) (bytevector-fill! . cy52bb) (bytevector-copy! . cy52ba) (bytevector-copy . cy52b9) (bytevector->uint-list . cy52b8) (bytevector->u8-list . cy52b7) (bytevector->sint-list . cy52b6) (endianness . cy516e)) '() values values '#f '#f '#t '#f) (cy2cd1@cy2b1d@install-library 'cy5483 '(rnrs unicode) '(6) '() '() '() '((string-upcase . cy53c2) (string-titlecase . cy53c1) (string-normalize-nfkd . cy53c0) (string-normalize-nfkc . cy53bf) (string-normalize-nfd . cy53be) (string-normalize-nfc . cy53bd) (string-foldcase . cy53bc) (string-downcase . cy53bb) (string-ci>? . cy53ba) (string-ci>=? . cy53b9) (string-ci=? . cy53b8) (string-ci<? . cy53b7) (string-ci<=? . cy53b6) (char-whitespace? . cy53b5) (char-upper-case? . cy53b4) (char-title-case? . cy53b3) (char-numeric? . cy53b2) (char-lower-case? . cy53b1) (char-general-category . cy53b0) (char-upcase . cy53af) (char-titlecase . cy53ae) (char-foldcase . cy53ad) (char-downcase . cy53ac) (char-ci>? . cy53ab) (char-ci>=? . cy53aa) (char-ci=? . cy53a9) (char-ci<? . cy53a8) (char-ci<=? . cy53a7) (char-alphabetic? . cy53a6)) '() values values '#f '#f '#t '#f) (cy2cd1@cy2b1d@install-library 'cy5484 '(rnrs exceptions) '(6) '() '() '() '((with-exception-handler . cy5305) (raise-continuable . cy5304) (raise . cy5303) (guard . cy517a) (else . cy5172) (=> . cy5171)) '() values values '#f '#f '#t '#f) (cy2cd1@cy2b1d@install-library 'cy5485 '(rnrs arithmetic bitwise) '(6) '() '() '() '((bitwise-rotate-bit-field . cy525a) (bitwise-reverse-bit-field . cy5259) (bitwise-length . cy5258) (bitwise-if . cy5257) (bitwise-first-bit-set . cy5256) (bitwise-copy-bit-field . cy5255) (bitwise-copy-bit . cy5254) (bitwise-bit-set? . cy5253) (bitwise-bit-field . cy5252) (bitwise-bit-count . cy5251) (bitwise-xor . cy5250) (bitwise-ior . cy524f) (bitwise-and . cy524e) (bitwise-not . cy524d) (bitwise-arithmetic-shift-right . cy524c) (bitwise-arithmetic-shift-left . cy524b) (bitwise-arithmetic-shift . cy524a)) '() values values '#f '#f '#t '#f) (cy2cd1@cy2b1d@install-library 'cy5486 '(rnrs arithmetic fixnums) '(6) '() '() '() '((fxzero? . cy5287) (fxxor . cy5286) (fxrotate-bit-field . cy5285) (fxreverse-bit-field . cy5284) (fxpositive? . cy5283) (fxodd? . cy5282) (fxnot . cy5281) (fxnegative? . cy5280) (fxmod0 . cy527f) (fxmod . cy527e) (fxmin . cy527d) (fxmax . cy527c) (fxlength . cy527b) (fxior . cy527a) (fxif . cy5279) (fxfirst-bit-set . cy5278) (fxeven? . cy5277) (fxdiv0-and-mod0 . cy5276) (fxdiv0 . cy5275) (fxdiv-and-mod . cy5274) (fxdiv . cy5273) (fxcopy-bit-field . cy5272) (fxcopy-bit . cy5271) (fxbit-set? . cy5270) (fxbit-field . cy526f) (fxbit-count . cy526e) (fxarithmetic-shift-right . cy526d) (fxarithmetic-shift-left . cy526c) (fxarithmetic-shift . cy526b) (fxand . cy526a) (fx>? . cy5269) (fx>=? . cy5268) (fx=? . cy5267) (fx<? . cy5266) (fx<=? . cy5265) (fx-/carry . cy5264) (fx- . cy5263) (fx+/carry . cy5262) (fx+ . cy5261) (fx*/carry . cy5260) (fx* . cy525f) (greatest-fixnum . cy525e) (least-fixnum . cy525d) (fixnum-width . cy525c) (fixnum? . cy525b)) '() values values '#f '#f '#t '#f) (cy2cd1@cy2b1d@install-library 'cy5487 '(rnrs arithmetic flonums) '(6) '() '() '() '((no-nans-violation? . cy4ece) (no-infinities-violation? . cy4eb9) (make-no-nans-violation . cy4ecc) (make-no-infinities-violation . cy4eb7) (real->flonum . cy52b5) (flzero? . cy52b4) (fltruncate . cy52b3) (fltan . cy52b2) (flsqrt . cy52b1) (flsin . cy52b0) (flround . cy52af) (flpositive? . cy52ae) (flonum? . cy52ad) (flodd? . cy52ac) (flnumerator . cy52ab) (flnegative? . cy52aa) (flnan? . cy52a9) (flmod0 . cy52a8) (flmod . cy52a7) (flmin . cy52a6) (flmax . cy52a5) (fllog . cy52a4) (flinteger? . cy52a3) (flinfinite? . cy52a2) (flfloor . cy52a1) (flfinite? . cy52a0) (flexpt . cy529f) (flexp . cy529e) (fleven? . cy529d) (fldiv0-and-mod0 . cy529c) (fldiv0 . cy529b) (fldiv-and-mod . cy529a) (fldiv . cy5299) (fldenominator . cy5298) (flcos . cy5297) (flceiling . cy5296) (flatan . cy5295) (flasin . cy5294) (flacos . cy5293) (flabs . cy5292) (fl>? . cy5291) (fl>=? . cy5290) (fl=? . cy528f) (fl<? . cy528e) (fl<=? . cy528d) (fl/ . cy528c) (fl- . cy528b) (fl+ . cy528a) (fl* . cy5289) (fixnum->flonum . cy5288) (&no-nans . cy51a6) (&no-infinities . cy51a5)) '() values values '#f '#f '#t '#f) (cy2cd1@cy2b1d@install-library 'cy5488 '(rnrs hashtables) '(6) '() '() '() '((symbol-hash . cy538f) (string-ci-hash . cy538e) (string-hash . cy538d) (equal-hash . cy538c) (hashtable-equivalence-function . cy538b) (make-hashtable . cy538a) (hashtable-hash-function . cy5389) (make-eqv-hashtable . cy5388) (make-eq-hashtable . cy5387) (hashtable? . cy5386) (hashtable-update! . cy5385) (hashtable-size . cy5384) (hashtable-set! . cy5383) (hashtable-ref . cy5382) (hashtable-mutable? . cy5381) (hashtable-keys . cy5380) (hashtable-entries . cy537f) (hashtable-delete! . cy537e) (hashtable-copy . cy537d) (hashtable-contains? . cy537c) (hashtable-clear! . cy537b)) '() values values '#f '#f '#t '#f) (cy2cd1@cy2b1d@install-library 'cy5489 '(rnrs io ports) '(6) '() '() '() '((eof-object? . cy536b) (eof-object . cy536a) (current-error-port . cy5369) (current-output-port . cy5368) (current-input-port . cy5367) (output-port? . cy5366) (input-port? . cy5365) (utf-8-codec . cy5364) (utf-16-codec . cy5363) (transcoder-error-handling-mode . cy5362) (transcoder-eol-style . cy5361) (transcoder-codec . cy5360) (transcoded-port . cy535f) (textual-port? . cy535e) (string->bytevector . cy535d) (standard-output-port . cy535c) (standard-input-port . cy535b) (standard-error-port . cy535a) (set-port-position! . cy5359) (put-u8 . cy5358) (put-string . cy5357) (put-datum . cy5356) (put-char . cy5355) (put-bytevector . cy5354) (port? . cy5353) (port-transcoder . cy5352) (port-position . cy5351) (port-has-set-port-position!? . cy5350) (port-has-port-position? . cy534f) (port-eof? . cy534e) (output-port-buffer-mode . cy534d) (open-string-output-port . cy534c) (open-string-input-port . cy534b) (open-file-output-port . cy534a) (open-file-input/output-port . cy5349) (open-file-input-port . cy5348) (open-bytevector-output-port . cy5347) (open-bytevector-input-port . cy5346) (native-transcoder . cy5345) (native-eol-style . cy5344) (make-transcoder . cy5343) (latin-1-codec . cy5342) (make-i/o-write-error . cy4dcd) (make-i/o-read-error . cy4db8) (make-i/o-port-error . cy4e6e) (make-i/o-invalid-position-error . cy4de4) (make-i/o-filename-error . cy4dff) (make-i/o-file-protection-error . cy4e18) (make-i/o-file-is-read-only-error . cy4e2d) (make-i/o-file-does-not-exist-error . cy4e57) (make-i/o-file-already-exists-error . cy4e42) (make-i/o-error . cy4da3) (make-i/o-encoding-error . cy4e9e) (make-i/o-decoding-error . cy4e87) (make-custom-textual-output-port . cy5341) (make-custom-textual-input/output-port . cy5340) (make-custom-textual-input-port . cy533f) (make-custom-binary-output-port . cy533e) (make-custom-binary-input/output-port . cy533d) (make-custom-binary-input-port . cy533c) (lookahead-u8 . cy533a) (lookahead-char . cy5339) (i/o-write-error? . cy4dcf) (i/o-read-error? . cy4dba) (i/o-port-error? . cy4e72) (i/o-invalid-position-error? . cy4de8) (i/o-filename-error? . cy4e03) (i/o-file-protection-error? . cy4e1a) (i/o-file-is-read-only-error? . cy4e2f) (i/o-file-does-not-exist-error? . cy4e59) (i/o-file-already-exists-error? . cy4e44) (i/o-error? . cy4da5) (i/o-error-position . cy4dea) (i/o-error-port . cy4e74) (i/o-error-filename . cy4e05) (i/o-encoding-error? . cy4ea2) (i/o-encoding-error-char . cy4ea4) (i/o-decoding-error? . cy4e89) (get-u8 . cy5338) (get-string-n! . cy5337) (get-string-n . cy5336) (get-string-all . cy5335) (get-line . cy5334) (get-datum . cy5333) (get-char . cy5332) (get-bytevector-some . cy5331) (get-bytevector-n! . cy5330) (get-bytevector-n . cy532f) (get-bytevector-all . cy532e) (flush-output-port . cy532d) (close-port . cy532c) (call-with-string-output-port . cy530b) (call-with-port . cy530a) (call-with-bytevector-output-port . cy5309) (bytevector->string . cy5308) (buffer-mode? . cy5307) (binary-port? . cy5306) (&i/o-encoding . cy51a4) (&i/o-decoding . cy51a3) (&i/o-port . cy51a2) (&i/o-file-does-not-exist . cy51a1) (&i/o-file-already-exists . cy51a0) (&i/o-file-is-read-only . cy519f) (&i/o-file-protection . cy519e) (&i/o-filename . cy519d) (&i/o-invalid-position . cy519c) (&i/o-write . cy519b) (&i/o-read . cy519a) (&i/o . cy5199) (error-handling-mode . cy517e) (file-options . cy517d) (buffer-mode . cy517c) (eol-style . cy517b)) '() values values '#f '#f '#t '#f) (cy2cd1@cy2b1d@install-library 'cy548a '(rnrs enums) '(6) '() '() '() '((make-enumeration . cy5302) (enum-set=? . cy5301) (enum-set-universe . cy5300) (enum-set-union . cy52ff) (enum-set-subset? . cy52fe) (enum-set-projection . cy52fd) (enum-set-member? . cy52fc) (enum-set-intersection . cy52fb) (enum-set-indexer . cy52fa) (enum-set-difference . cy52f9) (enum-set-constructor . cy52f8) (enum-set-complement . cy52f7) (enum-set->list . cy52f6) (define-enumeration . cy5189)) '() values values '#f '#f '#t '#f) (cy2cd1@cy2b1d@install-library 'cy548b '(rnrs conditions) '(6) '() '() '() '((who-condition? . cy4d19) (warning? . cy4c91) (violation? . cy4cd0) (undefined-violation? . cy4d90) (syntax-violation? . cy4d77) (syntax-violation-subform . cy4d7b) (syntax-violation-form . cy4d79) (syntax-violation . cy31a3) (simple-conditions . cy52f5) (serious-condition? . cy4ca6) (non-continuable-violation? . cy4d30) (message-condition? . cy4c7a) (make-who-condition . cy4d15) (make-warning . cy4c8f) (make-violation . cy4cce) (make-undefined-violation . cy4d8e) (make-syntax-violation . cy4d71) (make-serious-condition . cy4ca4) (make-non-continuable-violation . cy4d2e) (make-message-condition . cy4c76) (make-lexical-violation . cy4d58) (make-irritants-condition . cy4cfa) (make-implementation-restriction-violation . cy4d43) (make-error . cy4cb9) (make-assertion-violation . cy4ce3) (lexical-violation? . cy4d5a) (irritants-condition? . cy4cfe) (implementation-restriction-violation? . cy4d45) (error? . cy4cbb) (condition-who . cy4d1b) (condition-predicate . cy52f4) (condition-message . cy4c7c) (condition-irritants . cy4d00) (condition-accessor . cy52f3) (condition . cy52f2) (assertion-violation? . cy4ce5) (condition? . cy52f1) (&undefined . cy5198) (&syntax . cy5197) (&lexical . cy5196) (&implementation-restriction . cy5195) (&non-continuable . cy5194) (&who . cy5193) (&irritants . cy5192) (&assertion . cy5191) (&violation . cy5190) (&error . cy518f) (&serious . cy518e) (&warning . cy518d) (&message . cy518c) (&condition . cy518b) (define-condition-type . cy518a)) '() values values '#f '#f '#t '#f) (cy2cd1@cy2b1d@install-library 'cy548c '(rnrs records inspection) '(6) '() '() '() '((record? . cy539e) (record-type-uid . cy539d) (record-type-sealed? . cy539c) (record-type-parent . cy539b) (record-type-opaque? . cy539a) (record-type-name . cy5399) (record-type-generative? . cy5398) (record-type-field-names . cy5397) (record-rtd . cy5396) (record-field-mutable? . cy5395)) '() values values '#f '#f '#t '#f) (cy2cd1@cy2b1d@install-library 'cy548d '(rnrs records procedural) '(6) '() '() '() '((record-type-descriptor? . cy53a5) (record-predicate . cy53a4) (record-mutator . cy53a3) (record-constructor . cy53a2) (record-accessor . cy53a1) (make-record-type-descriptor . cy53a0) (make-record-constructor-descriptor . cy539f)) '() values values '#f '#f '#t '#f) (cy2cd1@cy2b1d@install-library 'cy548e '(rnrs records syntactic) '(6) '() '() '() '((define-record-type . cy5188) (parent-rtd . cy5187) (nongenerative . cy5186) (opaque . cy5185) (sealed . cy5184) (protocol . cy5183) (parent . cy5182) (immutable . cy5181) (mutable . cy5180) (fields . cy517f) (record-constructor-descriptor . cy515f) (record-type-descriptor . cy515e)) '() values values '#f '#f '#t '#f) (cy2cd1@cy2b1d@install-library 'cy548f '(psyntax system $all) '() '() '() '() '((&no-nans-rcd . cy4ed2) (&no-nans-rtd . cy4ed0) (&no-infinities-rcd . cy4ebd) (&no-infinities-rtd . cy4ebb) (&i/o-encoding-rcd . cy4ea8) (&i/o-encoding-rtd . cy4ea6) (&i/o-decoding-rcd . cy4e8d) (&i/o-decoding-rtd . cy4e8b) (&i/o-port-rcd . cy4e78) (&i/o-port-rtd . cy4e76) (&i/o-file-does-not-exist-rcd . cy4e5d) (&i/o-file-does-not-exist-rtd . cy4e5b) (&i/o-file-already-exists-rcd . cy4e48) (&i/o-file-already-exists-rtd . cy4e46) (&i/o-file-is-read-only-rcd . cy4e33) (&i/o-file-is-read-only-rtd . cy4e31) (&i/o-file-protection-rcd . cy4e1e) (&i/o-file-protection-rtd . cy4e1c) (&i/o-filename-rcd . cy4e09) (&i/o-filename-rtd . cy4e07) (&i/o-invalid-position-rcd . cy4dee) (&i/o-invalid-position-rtd . cy4dec) (&i/o-write-rcd . cy4dd3) (&i/o-write-rtd . cy4dd1) (&i/o-read-rcd . cy4dbe) (&i/o-read-rtd . cy4dbc) (&i/o-rcd . cy4da9) (&i/o-rtd . cy4da7) (&undefined-rcd . cy4d94) (&undefined-rtd . cy4d92) (&syntax-rcd . cy4d7f) (&syntax-rtd . cy4d7d) (&lexical-rcd . cy4d5e) (&lexical-rtd . cy4d5c) (&implementation-restriction-rcd . cy4d49) (&implementation-restriction-rtd . cy4d47) (&non-continuable-rcd . cy4d34) (&non-continuable-rtd . cy4d32) (&who-rcd . cy4d1f) (&who-rtd . cy4d1d) (&irritants-rcd . cy4d04) (&irritants-rtd . cy4d02) (&assertion-rcd . cy4ce9) (&assertion-rtd . cy4ce7) (&violation-rcd . cy4cd4) (&violation-rtd . cy4cd2) (&error-rcd . cy4cbf) (&error-rtd . cy4cbd) (&serious-rcd . cy4caa) (&serious-rtd . cy4ca8) (&warning-rcd . cy4c95) (&warning-rtd . cy4c93) (&message-rcd . cy4c80) (&message-rtd . cy4c7e) (&condition-rcd . cy4c21) (&condition-rtd . cy4c1f) (syntax-error . cy319f) (syntax-dispatch . cy30c3) (pretty-print . cy546f) (eval-core . cy546e) (set-symbol-value! . cy546d) (symbol-value . cy546c) (gensym . cy546b) (void . cy546a) (load . cy4fe3) (interaction-environment . cy31b1) (char-ready? . cy5469) (regexp? . cy5468) (read-line . cy5467) (gensym-prefix-set! . cy5466) (ungensym . cy5465) (alist->eq-hash-table . cy5464) (assoc-ref . cy5463) (print . cy5462) (format . cy5461) (host-os . cy5460) (library-path . cy2afc) (standard-library-path . cy545f) (file-newer? . cy545e) (stat-mtime . cy545d) (write-to-file . cy545c) (file->list . cy545b) (file->string . cy545a) (digit->integer . cy5459) (call-with-string-input-port . cy5458) (call-with-string-io . cy5457) (string-split . cy5456) (bytevector-for-each . cy5455) (string->regexp . cy5454) (rxmatch . cy5453) (regexp-replace-all . cy5452) (hashtable-for-each . cy5451) (mosh-cache-dir . cy28e7) (call-process . cy5450) (local-tz-offset . cy544f) (microseconds . cy544e) (directory-list . cy544d) (set-current-directory! . cy544c) (expand-path . cy544b) (current-directory . cy544a) (%spawn . cy5449) (%waitpid . cy5448) (simple-struct-name . cy5447) (simple-struct-set! . cy5446) (simple-struct-ref . cy5445) (make-simple-struct . cy5444) (simple-struct? . cy5443) (pointer-ref-c-int64 . cy5442) (pointer-ref-c-int32 . cy5441) (pointer-ref-c-int16 . cy5440) (pointer-ref-c-int8 . cy543f) (pointer-ref-c-uint64 . cy543e) (pointer-ref-c-uint32 . cy543d) (pointer-ref-c-uint16 . cy543c) (pointer-ref-c-uint8 . cy543b) (pointer-set-c-uint64! . cy543a) (pointer-set-c-uint32! . cy5439) (pointer-set-c-uint16! . cy5438) (pointer-set-c-uint8! . cy5437) (pointer-set-c-int64! . cy5436) (pointer-set-c-int32! . cy5435) (pointer-set-c-int16! . cy5434) (pointer-set-c-int8! . cy5433) (pointer-set-c-pointer! . cy5432) (pointer-set-c-double! . cy5431) (pointer-set-c-float! . cy5430) (pointer-set-c-long-long! . cy542f) (pointer-set-c-long! . cy542e) (pointer-set-c-int! . cy542d) (pointer-set-c-short! . cy542c) (pointer-set-c-char! . cy542b) (pointer-ref-c-pointer . cy542a) (pointer-ref-c-double . cy5429) (pointer-ref-c-float . cy5428) (pointer-ref-c-unsigned-long-long . cy5427) (pointer-ref-c-signed-long-long . cy5426) (pointer-ref-c-unsigned-long . cy5425) (pointer-ref-c-signed-long . cy5424) (pointer-ref-c-unsigned-int . cy5423) (pointer-ref-c-signed-int . cy5422) (pointer-ref-c-unsigned-short . cy5421) (pointer-ref-c-signed-short . cy5420) (pointer-ref-c-unsigned-char . cy541f) (pointer-ref-c-signed-char . cy541e) (pointer->integer . cy541d) (integer->pointer . cy541c) (pointer? . cy541b) (shared-errno . cy541a) (u8-list->c-procedure . cy5419) (%ffi-free-c-callback-trampoline . cy5418) (%ffi-make-c-callback-trampoline . cy5417) (%ffi-free . cy5416) (%ffi-malloc . cy5415) (%ffi-supported? . cy5414) (%ffi-pointer->string . cy5413) (%ffi-call->string-or-zero . cy5412) (%ffi-call->double . cy5411) (%ffi-call->void* . cy5410) (%ffi-call->void . cy540f) (%ffi-call->char . cy540e) (%ffi-call->int . cy540d) (%ffi-lookup . cy540c) (%ffi-open . cy540b) (%fork . cy540a) (%pipe . cy5409) (p . cy5408) (open-output-string . cy5407) (get-output-string . cy5406) (file-stat-ctime . cy5405) (file-stat-atime . cy5404) (file-stat-mtime . cy5403) (file-size-in-bytes . cy5402) (file-writable? . cy5401) (file-executable? . cy5400) (file-readable? . cy53ff) (file-regular? . cy53fe) (file-symbolic-link? . cy53fd) (file-directory? . cy53fc) (create-symbolic-link . cy53fb) (rename-file . cy53fa) (delete-directory . cy53f9) (create-directory . cy53f8) (create-mosh-cache-dir . cy53f7) (get-environment-variables . cy53f6) (current-exception-handler . cy53f5) (get-environment-variable . cy53f4) (join-wraps . cy53f3) (id->real-label . cy53f2) (same-marks? . cy53f1) (same-marks*? . cy53f0) (get-timeofday . cy53ef) (get-command-line . cy53ee) (sys-display . cy53ed) (whereis . cy53ec) (register . cy53eb) (vm-join! . cy53ea) (vm-set-value! . cy53e9) (vm? . cy53e8) (main-vm? . cy53e7) (vm-eval . cy53e6) (vm-self . cy53e5) (vm-start! . cy53e4) (make-vm . cy53e3) (mutex-try-lock! . cy53e2) (mutex-unlock! . cy53e1) (mutex-lock! . cy53e0) (mutex? . cy53df) (make-mutex . cy53de) (condition-variable-notify-all! . cy53dd) (condition-variable-notify! . cy53dc) (condition-variable-wait! . cy53db) (make-condition-variable . cy53da) (mosh-executable-path . cy53d9) (make-file-options . cy53d8) (source-info . cy53d7) (make-compiler-instruction . cy53d6) (make-instruction . cy53d5) (set-source-info! . cy53d4) (bignum? . cy53d3) (fast-equal? . cy53d2) (fasl-read . cy53d1) (fasl-write . cy53d0) (time-usage . cy53cf) (os-constant . cy53ce) (disasm . cy53cd) (make-parameter . cy28e5) (socket-port . cy53cc) (socket-shutdown . cy53cb) (socket-close . cy53ca) (socket-send . cy53c9) (socket-recv! . cy53c8) (socket-recv . cy53c7) (make-server-socket . cy53c6) (make-client-socket . cy53c5) (socket-accept . cy53c4) (socket? . cy53c3) (string-upcase . cy53c2) (string-titlecase . cy53c1) (string-normalize-nfkd . cy53c0) (string-normalize-nfkc . cy53bf) (string-normalize-nfd . cy53be) (string-normalize-nfc . cy53bd) (string-foldcase . cy53bc) (string-downcase . cy53bb) (string-ci>? . cy53ba) (string-ci>=? . cy53b9) (string-ci=? . cy53b8) (string-ci<? . cy53b7) (string-ci<=? . cy53b6) (char-whitespace? . cy53b5) (char-upper-case? . cy53b4) (char-title-case? . cy53b3) (char-numeric? . cy53b2) (char-lower-case? . cy53b1) (char-general-category . cy53b0) (char-upcase . cy53af) (char-titlecase . cy53ae) (char-foldcase . cy53ad) (char-downcase . cy53ac) (char-ci>? . cy53ab) (char-ci>=? . cy53aa) (char-ci=? . cy53a9) (char-ci<? . cy53a8) (char-ci<=? . cy53a7) (char-alphabetic? . cy53a6) (make-variable-transformer . cy2eee) (identifier? . cy31a5) (generate-temporaries . cy3191) (free-identifier=? . cy3193) (syntax->datum . cy31a9) (datum->syntax . cy31a7) (bound-identifier=? . cy3195) (record-type-descriptor? . cy53a5) (record-predicate . cy53a4) (record-mutator . cy53a3) (record-constructor . cy53a2) (record-accessor . cy53a1) (make-record-type-descriptor . cy53a0) (make-record-constructor-descriptor . cy539f) (record? . cy539e) (record-type-uid . cy539d) (record-type-sealed? . cy539c) (record-type-parent . cy539b) (record-type-opaque? . cy539a) (record-type-name . cy5399) (record-type-generative? . cy5398) (record-type-field-names . cy5397) (record-rtd . cy5396) (record-field-mutable? . cy5395) (delete-file . cy5394) (file-exists? . cy5393) (vector-sort! . cy5392) (vector-sort . cy5391) (list-sort . cy5390) (symbol-hash . cy538f) (string-ci-hash . cy538e) (string-hash . cy538d) (equal-hash . cy538c) (hashtable-equivalence-function . cy538b) (make-hashtable . cy538a) (hashtable-hash-function . cy5389) (make-eqv-hashtable . cy5388) (make-eq-hashtable . cy5387) (hashtable? . cy5386) (hashtable-update! . cy5385) (hashtable-size . cy5384) (hashtable-set! . cy5383) (hashtable-ref . cy5382) (hashtable-mutable? . cy5381) (hashtable-keys . cy5380) (hashtable-entries . cy537f) (hashtable-delete! . cy537e) (hashtable-copy . cy537d) (hashtable-contains? . cy537c) (hashtable-clear! . cy537b) (call-with-output-file . cy537a) (call-with-input-file . cy5379) (write-char . cy5378) (write . cy5377) (with-output-to-file . cy5376) (with-input-from-file . cy5375) (read-char . cy5374) (read . cy5373) (peek-char . cy5372) (open-output-file . cy5371) (open-input-file . cy5370) (newline . cy536f) (display . cy536e) (close-output-port . cy536d) (close-input-port . cy536c) (eof-object? . cy536b) (eof-object . cy536a) (current-error-port . cy5369) (current-output-port . cy5368) (current-input-port . cy5367) (output-port? . cy5366) (input-port? . cy5365) (utf-8-codec . cy5364) (utf-16-codec . cy5363) (transcoder-error-handling-mode . cy5362) (transcoder-eol-style . cy5361) (transcoder-codec . cy5360) (transcoded-port . cy535f) (textual-port? . cy535e) (string->bytevector . cy535d) (standard-output-port . cy535c) (standard-input-port . cy535b) (standard-error-port . cy535a) (set-port-position! . cy5359) (put-u8 . cy5358) (put-string . cy5357) (put-datum . cy5356) (put-char . cy5355) (put-bytevector . cy5354) (port? . cy5353) (port-transcoder . cy5352) (port-position . cy5351) (port-has-set-port-position!? . cy5350) (port-has-port-position? . cy534f) (port-eof? . cy534e) (output-port-buffer-mode . cy534d) (open-string-output-port . cy534c) (open-string-input-port . cy534b) (open-file-output-port . cy534a) (open-file-input/output-port . cy5349) (open-file-input-port . cy5348) (open-bytevector-output-port . cy5347) (open-bytevector-input-port . cy5346) (native-transcoder . cy5345) (native-eol-style . cy5344) (make-transcoder . cy5343) (latin-1-codec . cy5342) (make-i/o-write-error . cy4dcd) (make-i/o-read-error . cy4db8) (make-i/o-port-error . cy4e6e) (make-i/o-invalid-position-error . cy4de4) (make-i/o-filename-error . cy4dff) (make-i/o-file-protection-error . cy4e18) (make-i/o-file-is-read-only-error . cy4e2d) (make-i/o-file-does-not-exist-error . cy4e57) (make-i/o-file-already-exists-error . cy4e42) (make-i/o-error . cy4da3) (make-i/o-encoding-error . cy4e9e) (make-i/o-decoding-error . cy4e87) (make-custom-textual-output-port . cy5341) (make-custom-textual-input/output-port . cy5340) (make-custom-textual-input-port . cy533f) (make-custom-binary-output-port . cy533e) (make-custom-binary-input/output-port . cy533d) (make-custom-binary-input-port . cy533c) (make-bytevector . cy533b) (lookahead-u8 . cy533a) (lookahead-char . cy5339) (i/o-write-error? . cy4dcf) (i/o-read-error? . cy4dba) (i/o-port-error? . cy4e72) (i/o-invalid-position-error? . cy4de8) (i/o-filename-error? . cy4e03) (i/o-file-protection-error? . cy4e1a) (i/o-file-is-read-only-error? . cy4e2f) (i/o-file-does-not-exist-error? . cy4e59) (i/o-file-already-exists-error? . cy4e44) (i/o-error? . cy4da5) (i/o-error-position . cy4dea) (i/o-error-port . cy4e74) (i/o-error-filename . cy4e05) (i/o-encoding-error? . cy4ea2) (i/o-encoding-error-char . cy4ea4) (i/o-decoding-error? . cy4e89) (get-u8 . cy5338) (get-string-n! . cy5337) (get-string-n . cy5336) (get-string-all . cy5335) (get-line . cy5334) (get-datum . cy5333) (get-char . cy5332) (get-bytevector-some . cy5331) (get-bytevector-n! . cy5330) (get-bytevector-n . cy532f) (get-bytevector-all . cy532e) (flush-output-port . cy532d) (close-port . cy532c) (scheme-report-environment . cy317f) (quotient . cy532b) (null-environment . cy317d) (remainder . cy532a) (modulo . cy5329) (inexact->exact . cy5328) (force . cy5327) (exact->inexact . cy5326) (make-promise . cy5325) (exit . cy5324) (command-line . cy4fdd) (string-fill! . cy5323) (string-set! . cy5322) (set-cdr! . cy5321) (set-car! . cy5320) (remove . cy531f) (remv . cy531e) (remp . cy531d) (remq . cy531c) (partition . cy531b) (memv . cy531a) (memq . cy5319) (memp . cy5318) (member . cy5317) (exists . cy5316) (for-all . cy5315) (fold-right . cy5314) (fold-left . cy5313) (find . cy5312) (filter . cy5311) (cons* . cy5310) (assv . cy530f) (assq . cy530e) (assp . cy530d) (assoc . cy530c) (call-with-string-output-port . cy530b) (call-with-port . cy530a) (call-with-bytevector-output-port . cy5309) (bytevector->string . cy5308) (buffer-mode? . cy5307) (binary-port? . cy5306) (with-exception-handler . cy5305) (raise-continuable . cy5304) (raise . cy5303) (eval . cy3183) (environment . cy317b) (make-enumeration . cy5302) (enum-set=? . cy5301) (enum-set-universe . cy5300) (enum-set-union . cy52ff) (enum-set-subset? . cy52fe) (enum-set-projection . cy52fd) (enum-set-member? . cy52fc) (enum-set-intersection . cy52fb) (enum-set-indexer . cy52fa) (enum-set-difference . cy52f9) (enum-set-constructor . cy52f8) (enum-set-complement . cy52f7) (enum-set->list . cy52f6) (who-condition? . cy4d19) (warning? . cy4c91) (violation? . cy4cd0) (undefined-violation? . cy4d90) (syntax-violation? . cy4d77) (syntax-violation-subform . cy4d7b) (syntax-violation-form . cy4d79) (syntax-violation . cy31a3) (simple-conditions . cy52f5) (serious-condition? . cy4ca6) (non-continuable-violation? . cy4d30) (message-condition? . cy4c7a) (make-who-condition . cy4d15) (make-warning . cy4c8f) (make-violation . cy4cce) (make-undefined-violation . cy4d8e) (make-syntax-violation . cy4d71) (make-serious-condition . cy4ca4) (make-non-continuable-violation . cy4d2e) (make-message-condition . cy4c76) (make-lexical-violation . cy4d58) (make-irritants-condition . cy4cfa) (make-implementation-restriction-violation . cy4d43) (make-error . cy4cb9) (make-assertion-violation . cy4ce3) (lexical-violation? . cy4d5a) (irritants-condition? . cy4cfe) (implementation-restriction-violation? . cy4d45) (error? . cy4cbb) (condition-who . cy4d1b) (condition-predicate . cy52f4) (condition-message . cy4c7c) (condition-irritants . cy4d00) (condition-accessor . cy52f3) (condition . cy52f2) (assertion-violation? . cy4ce5) (condition? . cy52f1) (utf32->string . cy52f0) (utf16->string . cy52ef) (utf8->string . cy52ee) (uint-list->bytevector . cy52ed) (u8-list->bytevector . cy52ec) (string->utf8 . cy52eb) (string->utf32 . cy52ea) (string->utf16 . cy52e9) (sint-list->bytevector . cy52e8) (native-endianness . cy52e7) (bytevector? . cy52e6) (bytevector=? . cy52e5) (bytevector-uint-set! . cy52e4) (bytevector-uint-ref . cy52e3) (bytevector-u8-set! . cy52e2) (bytevector-u8-ref . cy52e1) (bytevector-u64-set! . cy52e0) (bytevector-u64-ref . cy52df) (bytevector-u64-native-set! . cy52de) (bytevector-u64-native-ref . cy52dd) (bytevector-u32-set! . cy52dc) (bytevector-u32-ref . cy52db) (bytevector-u32-native-set! . cy52da) (bytevector-u32-native-ref . cy52d9) (bytevector-u16-set! . cy52d8) (bytevector-u16-ref . cy52d7) (bytevector-u16-native-set! . cy52d6) (bytevector-u16-native-ref . cy52d5) (bytevector-sint-set! . cy52d4) (bytevector-sint-ref . cy52d3) (bytevector-s8-set! . cy52d2) (bytevector-s8-ref . cy52d1) (bytevector-s64-set! . cy52d0) (bytevector-s64-ref . cy52cf) (bytevector-s64-native-set! . cy52ce) (bytevector-s64-native-ref . cy52cd) (bytevector-s32-set! . cy52cc) (bytevector-s32-ref . cy52cb) (bytevector-s32-native-set! . cy52ca) (bytevector-s32-native-ref . cy52c9) (bytevector-s16-set! . cy52c8) (bytevector-s16-ref . cy52c7) (bytevector-s16-native-set! . cy52c6) (bytevector-s16-native-ref . cy52c5) (bytevector-length . cy52c4) (bytevector-ieee-single-ref . cy52c3) (bytevector-ieee-single-set! . cy52c2) (bytevector-ieee-single-native-set! . cy52c1) (bytevector-ieee-single-native-ref . cy52c0) (bytevector-ieee-double-set! . cy52bf) (bytevector-ieee-double-ref . cy52be) (bytevector-ieee-double-native-set! . cy52bd) (bytevector-ieee-double-native-ref . cy52bc) (bytevector-fill! . cy52bb) (bytevector-copy! . cy52ba) (bytevector-copy . cy52b9) (bytevector->uint-list . cy52b8) (bytevector->u8-list . cy52b7) (bytevector->sint-list . cy52b6) (no-nans-violation? . cy4ece) (no-infinities-violation? . cy4eb9) (make-no-nans-violation . cy4ecc) (make-no-infinities-violation . cy4eb7) (real->flonum . cy52b5) (flzero? . cy52b4) (fltruncate . cy52b3) (fltan . cy52b2) (flsqrt . cy52b1) (flsin . cy52b0) (flround . cy52af) (flpositive? . cy52ae) (flonum? . cy52ad) (flodd? . cy52ac) (flnumerator . cy52ab) (flnegative? . cy52aa) (flnan? . cy52a9) (flmod0 . cy52a8) (flmod . cy52a7) (flmin . cy52a6) (flmax . cy52a5) (fllog . cy52a4) (flinteger? . cy52a3) (flinfinite? . cy52a2) (flfloor . cy52a1) (flfinite? . cy52a0) (flexpt . cy529f) (flexp . cy529e) (fleven? . cy529d) (fldiv0-and-mod0 . cy529c) (fldiv0 . cy529b) (fldiv-and-mod . cy529a) (fldiv . cy5299) (fldenominator . cy5298) (flcos . cy5297) (flceiling . cy5296) (flatan . cy5295) (flasin . cy5294) (flacos . cy5293) (flabs . cy5292) (fl>? . cy5291) (fl>=? . cy5290) (fl=? . cy528f) (fl<? . cy528e) (fl<=? . cy528d) (fl/ . cy528c) (fl- . cy528b) (fl+ . cy528a) (fl* . cy5289) (fixnum->flonum . cy5288) (fxzero? . cy5287) (fxxor . cy5286) (fxrotate-bit-field . cy5285) (fxreverse-bit-field . cy5284) (fxpositive? . cy5283) (fxodd? . cy5282) (fxnot . cy5281) (fxnegative? . cy5280) (fxmod0 . cy527f) (fxmod . cy527e) (fxmin . cy527d) (fxmax . cy527c) (fxlength . cy527b) (fxior . cy527a) (fxif . cy5279) (fxfirst-bit-set . cy5278) (fxeven? . cy5277) (fxdiv0-and-mod0 . cy5276) (fxdiv0 . cy5275) (fxdiv-and-mod . cy5274) (fxdiv . cy5273) (fxcopy-bit-field . cy5272) (fxcopy-bit . cy5271) (fxbit-set? . cy5270) (fxbit-field . cy526f) (fxbit-count . cy526e) (fxarithmetic-shift-right . cy526d) (fxarithmetic-shift-left . cy526c) (fxarithmetic-shift . cy526b) (fxand . cy526a) (fx>? . cy5269) (fx>=? . cy5268) (fx=? . cy5267) (fx<? . cy5266) (fx<=? . cy5265) (fx-/carry . cy5264) (fx- . cy5263) (fx+/carry . cy5262) (fx+ . cy5261) (fx*/carry . cy5260) (fx* . cy525f) (greatest-fixnum . cy525e) (least-fixnum . cy525d) (fixnum-width . cy525c) (fixnum? . cy525b) (bitwise-rotate-bit-field . cy525a) (bitwise-reverse-bit-field . cy5259) (bitwise-length . cy5258) (bitwise-if . cy5257) (bitwise-first-bit-set . cy5256) (bitwise-copy-bit-field . cy5255) (bitwise-copy-bit . cy5254) (bitwise-bit-set? . cy5253) (bitwise-bit-field . cy5252) (bitwise-bit-count . cy5251) (bitwise-xor . cy5250) (bitwise-ior . cy524f) (bitwise-and . cy524e) (bitwise-not . cy524d) (bitwise-arithmetic-shift-right . cy524c) (bitwise-arithmetic-shift-left . cy524b) (bitwise-arithmetic-shift . cy524a) (zero? . cy5249) (vector? . cy5248) (vector-set! . cy5247) (vector-ref . cy5246) (vector-map . cy5245) (vector-length . cy5244) (vector-for-each . cy5243) (vector-fill! . cy5242) (vector->list . cy5241) (vector . cy5240) (values . cy523f) (truncate . cy523e) (tan . cy523d) (symbol? . cy523c) (symbol=? . cy523b) (symbol->string . cy523a) (substring . cy5239) (string? . cy5238) (string>? . cy5237) (string>=? . cy5236) (string=? . cy5235) (string<? . cy5234) (string<=? . cy5233) (string-ref . cy5232) (string-length . cy5231) (string-for-each . cy5230) (string-copy . cy522f) (string-append . cy522e) (string->symbol . cy522d) (string->number . cy522c) (string->list . cy522b) (string . cy522a) (sqrt . cy5229) (sin . cy5228) (round . cy5227) (reverse . cy5226) (real? . cy5225) (real-valued? . cy5224) (real-part . cy5223) (rationalize . cy5222) (rational? . cy5221) (rational-valued? . cy5220) (procedure? . cy521f) (positive? . cy521e) (pair? . cy521d) (odd? . cy521c) (numerator . cy521b) (number? . cy521a) (number->string . cy5219) (null? . cy5218) (not . cy5217) (negative? . cy5216) (nan? . cy5215) (min . cy5214) (max . cy5213) (map . cy5212) (make-vector . cy5211) (make-string . cy5210) (make-rectangular . cy520f) (make-polar . cy520e) (magnitude . cy520d) (log . cy520c) (list? . cy520b) (list-tail . cy520a) (list-ref . cy5209) (list->vector . cy5208) (list->string . cy5207) (list . cy5206) (length . cy5205) (lcm . cy5204) (integer? . cy5203) (integer-valued? . cy5202) (integer->char . cy5201) (infinite? . cy5200) (inexact? . cy51ff) (inexact . cy51fe) (imag-part . cy51fd) (gcd . cy51fc) (for-each . cy51fb) (floor . cy51fa) (finite? . cy51f9) (expt . cy51f8) (exp . cy51f7) (exact? . cy51f6) (exact-integer-sqrt . cy51f5) (exact . cy51f4) (even? . cy51f3) (error . cy51f2) (eqv? . cy51f1) (equal? . cy51f0) (eq? . cy51ef) (dynamic-wind . cy51ee) (div0-and-mod0 . cy51ed) (mod0 . cy51ec) (div0 . cy51eb) (div-and-mod . cy51ea) (mod . cy51e9) (div . cy51e8) (denominator . cy51e7) (cos . cy51e6) (cons . cy51e5) (complex? . cy51e4) (char? . cy51e3) (char>? . cy51e2) (char>=? . cy51e1) (char=? . cy51e0) (char<? . cy51df) (char<=? . cy51de) (char->integer . cy51dd) (ceiling . cy51dc) (call-with-values . cy51db) (call/cc . cy51da) (call-with-current-continuation . cy51d9) (cddddr . cy51d8) (cdddar . cy51d7) (cddadr . cy51d6) (cddaar . cy51d5) (cdaddr . cy51d4) (cdadar . cy51d3) (cdaadr . cy51d2) (cdaaar . cy51d1) (cadddr . cy51d0) (caddar . cy51cf) (cadadr . cy51ce) (cadaar . cy51cd) (caaddr . cy51cc) (caadar . cy51cb) (caaadr . cy51ca) (caaaar . cy51c9) (cdddr . cy51c8) (cddar . cy51c7) (cdadr . cy51c6) (cdaar . cy51c5) (caddr . cy51c4) (cadar . cy51c3) (caadr . cy51c2) (caaar . cy51c1) (cddr . cy51c0) (cdar . cy51bf) (cadr . cy51be) (caar . cy51bd) (cdr . cy51bc) (car . cy51bb) (boolean? . cy51ba) (boolean=? . cy51b9) (atan . cy51b8) (assertion-violation . cy51b7) (assertion-error . cy319d) (asin . cy51b6) (apply . cy51b5) (append . cy51b4) (angle . cy51b3) (acos . cy51b2) (abs . cy51b1) (/ . cy51b0) (* . cy51af) (- . cy51ae) (+ . cy51ad) (>= . cy51ac) (> . cy51ab) (= . cy51aa) (<= . cy51a9) (< . cy51a8) (library . cy51a7) (&no-nans . cy51a6) (&no-infinities . cy51a5) (&i/o-encoding . cy51a4) (&i/o-decoding . cy51a3) (&i/o-port . cy51a2) (&i/o-file-does-not-exist . cy51a1) (&i/o-file-already-exists . cy51a0) (&i/o-file-is-read-only . cy519f) (&i/o-file-protection . cy519e) (&i/o-filename . cy519d) (&i/o-invalid-position . cy519c) (&i/o-write . cy519b) (&i/o-read . cy519a) (&i/o . cy5199) (&undefined . cy5198) (&syntax . cy5197) (&lexical . cy5196) (&implementation-restriction . cy5195) (&non-continuable . cy5194) (&who . cy5193) (&irritants . cy5192) (&assertion . cy5191) (&violation . cy5190) (&error . cy518f) (&serious . cy518e) (&warning . cy518d) (&message . cy518c) (&condition . cy518b) (define-condition-type . cy518a) (define-enumeration . cy5189) (define-record-type . cy5188) (parent-rtd . cy5187) (nongenerative . cy5186) (opaque . cy5185) (sealed . cy5184) (protocol . cy5183) (parent . cy5182) (immutable . cy5181) (mutable . cy5180) (fields . cy517f) (error-handling-mode . cy517e) (file-options . cy517d) (buffer-mode . cy517c) (eol-style . cy517b) (guard . cy517a) (trace-define . cy5179) (trace-lambda . cy5178) (unsyntax-splicing . cy5177) (unsyntax . cy5176) (unquote-splicing . cy5175) (unquote . cy5174) (_ . cy5173) (else . cy5172) (=> . cy5171) (... . cy5170) (assert . cy516f) (endianness . cy516e) (delay . cy516d) (time . cy516c) (do . cy516b) (cond . cy516a) (let* . cy5169) (let*-values . cy5168) (let-values . cy5167) (identifier-syntax . cy5166) (with-syntax . cy5165) (quasisyntax . cy5164) (quasiquote . cy5163) (syntax-rules . cy5162) (include . cy5161) (define-struct . cy5160) (record-constructor-descriptor . cy515f) (record-type-descriptor . cy515e) (case . cy515d) (parameterize . cy515c) (unless . cy515b) (when . cy515a) (or . cy5159) (and . cy5158) (if . cy5157) (let . cy5156) (letrec* . cy5155) (letrec . cy5154) (type-descriptor . cy5153) (case-lambda . cy5152) (lambda . cy5151) (syntax . cy5150) (syntax-case . cy514f) (quote . cy514e) (foreign-call . cy514d) (letrec-syntax . cy514c) (let-syntax . cy514b) (set! . cy514a) (import . cy5149) (begin . cy5148) (module . cy5147) (define-syntax . cy5146) (define . cy5145)) '((cy4ed2 core-prim . &no-nans-rcd) (cy4ed0 core-prim . &no-nans-rtd) (cy4ebd core-prim . &no-infinities-rcd) (cy4ebb core-prim . &no-infinities-rtd) (cy4ea8 core-prim . &i/o-encoding-rcd) (cy4ea6 core-prim . &i/o-encoding-rtd) (cy4e8d core-prim . &i/o-decoding-rcd) (cy4e8b core-prim . &i/o-decoding-rtd) (cy4e78 core-prim . &i/o-port-rcd) (cy4e76 core-prim . &i/o-port-rtd) (cy4e5d core-prim . &i/o-file-does-not-exist-rcd) (cy4e5b core-prim . &i/o-file-does-not-exist-rtd) (cy4e48 core-prim . &i/o-file-already-exists-rcd) (cy4e46 core-prim . &i/o-file-already-exists-rtd) (cy4e33 core-prim . &i/o-file-is-read-only-rcd) (cy4e31 core-prim . &i/o-file-is-read-only-rtd) (cy4e1e core-prim . &i/o-file-protection-rcd) (cy4e1c core-prim . &i/o-file-protection-rtd) (cy4e09 core-prim . &i/o-filename-rcd) (cy4e07 core-prim . &i/o-filename-rtd) (cy4dee core-prim . &i/o-invalid-position-rcd) (cy4dec core-prim . &i/o-invalid-position-rtd) (cy4dd3 core-prim . &i/o-write-rcd) (cy4dd1 core-prim . &i/o-write-rtd) (cy4dbe core-prim . &i/o-read-rcd) (cy4dbc core-prim . &i/o-read-rtd) (cy4da9 core-prim . &i/o-rcd) (cy4da7 core-prim . &i/o-rtd) (cy4d94 core-prim . &undefined-rcd) (cy4d92 core-prim . &undefined-rtd) (cy4d7f core-prim . &syntax-rcd) (cy4d7d core-prim . &syntax-rtd) (cy4d5e core-prim . &lexical-rcd) (cy4d5c core-prim . &lexical-rtd) (cy4d49 core-prim . &implementation-restriction-rcd) (cy4d47 core-prim . &implementation-restriction-rtd) (cy4d34 core-prim . &non-continuable-rcd) (cy4d32 core-prim . &non-continuable-rtd) (cy4d1f core-prim . &who-rcd) (cy4d1d core-prim . &who-rtd) (cy4d04 core-prim . &irritants-rcd) (cy4d02 core-prim . &irritants-rtd) (cy4ce9 core-prim . &assertion-rcd) (cy4ce7 core-prim . &assertion-rtd) (cy4cd4 core-prim . &violation-rcd) (cy4cd2 core-prim . &violation-rtd) (cy4cbf core-prim . &error-rcd) (cy4cbd core-prim . &error-rtd) (cy4caa core-prim . &serious-rcd) (cy4ca8 core-prim . &serious-rtd) (cy4c95 core-prim . &warning-rcd) (cy4c93 core-prim . &warning-rtd) (cy4c80 core-prim . &message-rcd) (cy4c7e core-prim . &message-rtd) (cy4c21 core-prim . &condition-rcd) (cy4c1f core-prim . &condition-rtd) (cy319f core-prim . syntax-error) (cy30c3 core-prim . syntax-dispatch) (cy546f core-prim . pretty-print) (cy546e core-prim . eval-core) (cy546d core-prim . set-symbol-value!) (cy546c core-prim . symbol-value) (cy546b core-prim . gensym) (cy546a core-prim . void) (cy4fe3 core-prim . load) (cy31b1 core-prim . interaction-environment) (cy5469 core-prim . char-ready?) (cy5468 core-prim . regexp?) (cy5467 core-prim . read-line) (cy5466 core-prim . gensym-prefix-set!) (cy5465 core-prim . ungensym) (cy5464 core-prim . alist->eq-hash-table) (cy5463 core-prim . assoc-ref) (cy5462 core-prim . print) (cy5461 core-prim . format) (cy5460 core-prim . host-os) (cy2afc core-prim . library-path) (cy545f core-prim . standard-library-path) (cy545e core-prim . file-newer?) (cy545d core-prim . stat-mtime) (cy545c core-prim . write-to-file) (cy545b core-prim . file->list) (cy545a core-prim . file->string) (cy5459 core-prim . digit->integer) (cy5458 core-prim . call-with-string-input-port) (cy5457 core-prim . call-with-string-io) (cy5456 core-prim . string-split) (cy5455 core-prim . bytevector-for-each) (cy5454 core-prim . string->regexp) (cy5453 core-prim . rxmatch) (cy5452 core-prim . regexp-replace-all) (cy5451 core-prim . hashtable-for-each) (cy28e7 core-prim . mosh-cache-dir) (cy5450 core-prim . call-process) (cy544f core-prim . local-tz-offset) (cy544e core-prim . microseconds) (cy544d core-prim . directory-list) (cy544c core-prim . set-current-directory!) (cy544b core-prim . expand-path) (cy544a core-prim . current-directory) (cy5449 core-prim . %spawn) (cy5448 core-prim . %waitpid) (cy5447 core-prim . simple-struct-name) (cy5446 core-prim . simple-struct-set!) (cy5445 core-prim . simple-struct-ref) (cy5444 core-prim . make-simple-struct) (cy5443 core-prim . simple-struct?) (cy5442 core-prim . pointer-ref-c-int64) (cy5441 core-prim . pointer-ref-c-int32) (cy5440 core-prim . pointer-ref-c-int16) (cy543f core-prim . pointer-ref-c-int8) (cy543e core-prim . pointer-ref-c-uint64) (cy543d core-prim . pointer-ref-c-uint32) (cy543c core-prim . pointer-ref-c-uint16) (cy543b core-prim . pointer-ref-c-uint8) (cy543a core-prim . pointer-set-c-uint64!) (cy5439 core-prim . pointer-set-c-uint32!) (cy5438 core-prim . pointer-set-c-uint16!) (cy5437 core-prim . pointer-set-c-uint8!) (cy5436 core-prim . pointer-set-c-int64!) (cy5435 core-prim . pointer-set-c-int32!) (cy5434 core-prim . pointer-set-c-int16!) (cy5433 core-prim . pointer-set-c-int8!) (cy5432 core-prim . pointer-set-c-pointer!) (cy5431 core-prim . pointer-set-c-double!) (cy5430 core-prim . pointer-set-c-float!) (cy542f core-prim . pointer-set-c-long-long!) (cy542e core-prim . pointer-set-c-long!) (cy542d core-prim . pointer-set-c-int!) (cy542c core-prim . pointer-set-c-short!) (cy542b core-prim . pointer-set-c-char!) (cy542a core-prim . pointer-ref-c-pointer) (cy5429 core-prim . pointer-ref-c-double) (cy5428 core-prim . pointer-ref-c-float) (cy5427 core-prim . pointer-ref-c-unsigned-long-long) (cy5426 core-prim . pointer-ref-c-signed-long-long) (cy5425 core-prim . pointer-ref-c-unsigned-long) (cy5424 core-prim . pointer-ref-c-signed-long) (cy5423 core-prim . pointer-ref-c-unsigned-int) (cy5422 core-prim . pointer-ref-c-signed-int) (cy5421 core-prim . pointer-ref-c-unsigned-short) (cy5420 core-prim . pointer-ref-c-signed-short) (cy541f core-prim . pointer-ref-c-unsigned-char) (cy541e core-prim . pointer-ref-c-signed-char) (cy541d core-prim . pointer->integer) (cy541c core-prim . integer->pointer) (cy541b core-prim . pointer?) (cy541a core-prim . shared-errno) (cy5419 core-prim . u8-list->c-procedure) (cy5418 core-prim . %ffi-free-c-callback-trampoline) (cy5417 core-prim . %ffi-make-c-callback-trampoline) (cy5416 core-prim . %ffi-free) (cy5415 core-prim . %ffi-malloc) (cy5414 core-prim . %ffi-supported?) (cy5413 core-prim . %ffi-pointer->string) (cy5412 core-prim . %ffi-call->string-or-zero) (cy5411 core-prim . %ffi-call->double) (cy5410 core-prim . %ffi-call->void*) (cy540f core-prim . %ffi-call->void) (cy540e core-prim . %ffi-call->char) (cy540d core-prim . %ffi-call->int) (cy540c core-prim . %ffi-lookup) (cy540b core-prim . %ffi-open) (cy540a core-prim . %fork) (cy5409 core-prim . %pipe) (cy5408 core-prim . p) (cy5407 core-prim . open-output-string) (cy5406 core-prim . get-output-string) (cy5405 core-prim . file-stat-ctime) (cy5404 core-prim . file-stat-atime) (cy5403 core-prim . file-stat-mtime) (cy5402 core-prim . file-size-in-bytes) (cy5401 core-prim . file-writable?) (cy5400 core-prim . file-executable?) (cy53ff core-prim . file-readable?) (cy53fe core-prim . file-regular?) (cy53fd core-prim . file-symbolic-link?) (cy53fc core-prim . file-directory?) (cy53fb core-prim . create-symbolic-link) (cy53fa core-prim . rename-file) (cy53f9 core-prim . delete-directory) (cy53f8 core-prim . create-directory) (cy53f7 core-prim . create-mosh-cache-dir) (cy53f6 core-prim . get-environment-variables) (cy53f5 core-prim . current-exception-handler) (cy53f4 core-prim . get-environment-variable) (cy53f3 core-prim . join-wraps) (cy53f2 core-prim . id->real-label) (cy53f1 core-prim . same-marks?) (cy53f0 core-prim . same-marks*?) (cy53ef core-prim . get-timeofday) (cy53ee core-prim . get-command-line) (cy53ed core-prim . sys-display) (cy53ec core-prim . whereis) (cy53eb core-prim . register) (cy53ea core-prim . vm-join!) (cy53e9 core-prim . vm-set-value!) (cy53e8 core-prim . vm?) (cy53e7 core-prim . main-vm?) (cy53e6 core-prim . vm-eval) (cy53e5 core-prim . vm-self) (cy53e4 core-prim . vm-start!) (cy53e3 core-prim . make-vm) (cy53e2 core-prim . mutex-try-lock!) (cy53e1 core-prim . mutex-unlock!) (cy53e0 core-prim . mutex-lock!) (cy53df core-prim . mutex?) (cy53de core-prim . make-mutex) (cy53dd core-prim . condition-variable-notify-all!) (cy53dc core-prim . condition-variable-notify!) (cy53db core-prim . condition-variable-wait!) (cy53da core-prim . make-condition-variable) (cy53d9 core-prim . mosh-executable-path) (cy53d8 core-prim . make-file-options) (cy53d7 core-prim . source-info) (cy53d6 core-prim . make-compiler-instruction) (cy53d5 core-prim . make-instruction) (cy53d4 core-prim . set-source-info!) (cy53d3 core-prim . bignum?) (cy53d2 core-prim . fast-equal?) (cy53d1 core-prim . fasl-read) (cy53d0 core-prim . fasl-write) (cy53cf core-prim . time-usage) (cy53ce core-prim . os-constant) (cy53cd core-prim . disasm) (cy28e5 core-prim . make-parameter) (cy53cc core-prim . socket-port) (cy53cb core-prim . socket-shutdown) (cy53ca core-prim . socket-close) (cy53c9 core-prim . socket-send) (cy53c8 core-prim . socket-recv!) (cy53c7 core-prim . socket-recv) (cy53c6 core-prim . make-server-socket) (cy53c5 core-prim . make-client-socket) (cy53c4 core-prim . socket-accept) (cy53c3 core-prim . socket?) (cy53c2 core-prim . string-upcase) (cy53c1 core-prim . string-titlecase) (cy53c0 core-prim . string-normalize-nfkd) (cy53bf core-prim . string-normalize-nfkc) (cy53be core-prim . string-normalize-nfd) (cy53bd core-prim . string-normalize-nfc) (cy53bc core-prim . string-foldcase) (cy53bb core-prim . string-downcase) (cy53ba core-prim . string-ci>?) (cy53b9 core-prim . string-ci>=?) (cy53b8 core-prim . string-ci=?) (cy53b7 core-prim . string-ci<?) (cy53b6 core-prim . string-ci<=?) (cy53b5 core-prim . char-whitespace?) (cy53b4 core-prim . char-upper-case?) (cy53b3 core-prim . char-title-case?) (cy53b2 core-prim . char-numeric?) (cy53b1 core-prim . char-lower-case?) (cy53b0 core-prim . char-general-category) (cy53af core-prim . char-upcase) (cy53ae core-prim . char-titlecase) (cy53ad core-prim . char-foldcase) (cy53ac core-prim . char-downcase) (cy53ab core-prim . char-ci>?) (cy53aa core-prim . char-ci>=?) (cy53a9 core-prim . char-ci=?) (cy53a8 core-prim . char-ci<?) (cy53a7 core-prim . char-ci<=?) (cy53a6 core-prim . char-alphabetic?) (cy2eee core-prim . make-variable-transformer) (cy31a5 core-prim . identifier?) (cy3191 core-prim . generate-temporaries) (cy3193 core-prim . free-identifier=?) (cy31a9 core-prim . syntax->datum) (cy31a7 core-prim . datum->syntax) (cy3195 core-prim . bound-identifier=?) (cy53a5 core-prim . record-type-descriptor?) (cy53a4 core-prim . record-predicate) (cy53a3 core-prim . record-mutator) (cy53a2 core-prim . record-constructor) (cy53a1 core-prim . record-accessor) (cy53a0 core-prim . make-record-type-descriptor) (cy539f core-prim . make-record-constructor-descriptor) (cy539e core-prim . record?) (cy539d core-prim . record-type-uid) (cy539c core-prim . record-type-sealed?) (cy539b core-prim . record-type-parent) (cy539a core-prim . record-type-opaque?) (cy5399 core-prim . record-type-name) (cy5398 core-prim . record-type-generative?) (cy5397 core-prim . record-type-field-names) (cy5396 core-prim . record-rtd) (cy5395 core-prim . record-field-mutable?) (cy5394 core-prim . delete-file) (cy5393 core-prim . file-exists?) (cy5392 core-prim . vector-sort!) (cy5391 core-prim . vector-sort) (cy5390 core-prim . list-sort) (cy538f core-prim . symbol-hash) (cy538e core-prim . string-ci-hash) (cy538d core-prim . string-hash) (cy538c core-prim . equal-hash) (cy538b core-prim . hashtable-equivalence-function) (cy538a core-prim . make-hashtable) (cy5389 core-prim . hashtable-hash-function) (cy5388 core-prim . make-eqv-hashtable) (cy5387 core-prim . make-eq-hashtable) (cy5386 core-prim . hashtable?) (cy5385 core-prim . hashtable-update!) (cy5384 core-prim . hashtable-size) (cy5383 core-prim . hashtable-set!) (cy5382 core-prim . hashtable-ref) (cy5381 core-prim . hashtable-mutable?) (cy5380 core-prim . hashtable-keys) (cy537f core-prim . hashtable-entries) (cy537e core-prim . hashtable-delete!) (cy537d core-prim . hashtable-copy) (cy537c core-prim . hashtable-contains?) (cy537b core-prim . hashtable-clear!) (cy537a core-prim . call-with-output-file) (cy5379 core-prim . call-with-input-file) (cy5378 core-prim . write-char) (cy5377 core-prim . write) (cy5376 core-prim . with-output-to-file) (cy5375 core-prim . with-input-from-file) (cy5374 core-prim . read-char) (cy5373 core-prim . read) (cy5372 core-prim . peek-char) (cy5371 core-prim . open-output-file) (cy5370 core-prim . open-input-file) (cy536f core-prim . newline) (cy536e core-prim . display) (cy536d core-prim . close-output-port) (cy536c core-prim . close-input-port) (cy536b core-prim . eof-object?) (cy536a core-prim . eof-object) (cy5369 core-prim . current-error-port) (cy5368 core-prim . current-output-port) (cy5367 core-prim . current-input-port) (cy5366 core-prim . output-port?) (cy5365 core-prim . input-port?) (cy5364 core-prim . utf-8-codec) (cy5363 core-prim . utf-16-codec) (cy5362 core-prim . transcoder-error-handling-mode) (cy5361 core-prim . transcoder-eol-style) (cy5360 core-prim . transcoder-codec) (cy535f core-prim . transcoded-port) (cy535e core-prim . textual-port?) (cy535d core-prim . string->bytevector) (cy535c core-prim . standard-output-port) (cy535b core-prim . standard-input-port) (cy535a core-prim . standard-error-port) (cy5359 core-prim . set-port-position!) (cy5358 core-prim . put-u8) (cy5357 core-prim . put-string) (cy5356 core-prim . put-datum) (cy5355 core-prim . put-char) (cy5354 core-prim . put-bytevector) (cy5353 core-prim . port?) (cy5352 core-prim . port-transcoder) (cy5351 core-prim . port-position) (cy5350 core-prim . port-has-set-port-position!?) (cy534f core-prim . port-has-port-position?) (cy534e core-prim . port-eof?) (cy534d core-prim . output-port-buffer-mode) (cy534c core-prim . open-string-output-port) (cy534b core-prim . open-string-input-port) (cy534a core-prim . open-file-output-port) (cy5349 core-prim . open-file-input/output-port) (cy5348 core-prim . open-file-input-port) (cy5347 core-prim . open-bytevector-output-port) (cy5346 core-prim . open-bytevector-input-port) (cy5345 core-prim . native-transcoder) (cy5344 core-prim . native-eol-style) (cy5343 core-prim . make-transcoder) (cy5342 core-prim . latin-1-codec) (cy4dcd core-prim . make-i/o-write-error) (cy4db8 core-prim . make-i/o-read-error) (cy4e6e core-prim . make-i/o-port-error) (cy4de4 core-prim . make-i/o-invalid-position-error) (cy4dff core-prim . make-i/o-filename-error) (cy4e18 core-prim . make-i/o-file-protection-error) (cy4e2d core-prim . make-i/o-file-is-read-only-error) (cy4e57 core-prim . make-i/o-file-does-not-exist-error) (cy4e42 core-prim . make-i/o-file-already-exists-error) (cy4da3 core-prim . make-i/o-error) (cy4e9e core-prim . make-i/o-encoding-error) (cy4e87 core-prim . make-i/o-decoding-error) (cy5341 core-prim . make-custom-textual-output-port) (cy5340 core-prim . make-custom-textual-input/output-port) (cy533f core-prim . make-custom-textual-input-port) (cy533e core-prim . make-custom-binary-output-port) (cy533d core-prim . make-custom-binary-input/output-port) (cy533c core-prim . make-custom-binary-input-port) (cy533b core-prim . make-bytevector) (cy533a core-prim . lookahead-u8) (cy5339 core-prim . lookahead-char) (cy4dcf core-prim . i/o-write-error?) (cy4dba core-prim . i/o-read-error?) (cy4e72 core-prim . i/o-port-error?) (cy4de8 core-prim . i/o-invalid-position-error?) (cy4e03 core-prim . i/o-filename-error?) (cy4e1a core-prim . i/o-file-protection-error?) (cy4e2f core-prim . i/o-file-is-read-only-error?) (cy4e59 core-prim . i/o-file-does-not-exist-error?) (cy4e44 core-prim . i/o-file-already-exists-error?) (cy4da5 core-prim . i/o-error?) (cy4dea core-prim . i/o-error-position) (cy4e74 core-prim . i/o-error-port) (cy4e05 core-prim . i/o-error-filename) (cy4ea2 core-prim . i/o-encoding-error?) (cy4ea4 core-prim . i/o-encoding-error-char) (cy4e89 core-prim . i/o-decoding-error?) (cy5338 core-prim . get-u8) (cy5337 core-prim . get-string-n!) (cy5336 core-prim . get-string-n) (cy5335 core-prim . get-string-all) (cy5334 core-prim . get-line) (cy5333 core-prim . get-datum) (cy5332 core-prim . get-char) (cy5331 core-prim . get-bytevector-some) (cy5330 core-prim . get-bytevector-n!) (cy532f core-prim . get-bytevector-n) (cy532e core-prim . get-bytevector-all) (cy532d core-prim . flush-output-port) (cy532c core-prim . close-port) (cy317f core-prim . scheme-report-environment) (cy532b core-prim . quotient) (cy317d core-prim . null-environment) (cy532a core-prim . remainder) (cy5329 core-prim . modulo) (cy5328 core-prim . inexact->exact) (cy5327 core-prim . force) (cy5326 core-prim . exact->inexact) (cy5325 core-prim . make-promise) (cy5324 core-prim . exit) (cy4fdd core-prim . command-line) (cy5323 core-prim . string-fill!) (cy5322 core-prim . string-set!) (cy5321 core-prim . set-cdr!) (cy5320 core-prim . set-car!) (cy531f core-prim . remove) (cy531e core-prim . remv) (cy531d core-prim . remp) (cy531c core-prim . remq) (cy531b core-prim . partition) (cy531a core-prim . memv) (cy5319 core-prim . memq) (cy5318 core-prim . memp) (cy5317 core-prim . member) (cy5316 core-prim . exists) (cy5315 core-prim . for-all) (cy5314 core-prim . fold-right) (cy5313 core-prim . fold-left) (cy5312 core-prim . find) (cy5311 core-prim . filter) (cy5310 core-prim . cons*) (cy530f core-prim . assv) (cy530e core-prim . assq) (cy530d core-prim . assp) (cy530c core-prim . assoc) (cy530b core-prim . call-with-string-output-port) (cy530a core-prim . call-with-port) (cy5309 core-prim . call-with-bytevector-output-port) (cy5308 core-prim . bytevector->string) (cy5307 core-prim . buffer-mode?) (cy5306 core-prim . binary-port?) (cy5305 core-prim . with-exception-handler) (cy5304 core-prim . raise-continuable) (cy5303 core-prim . raise) (cy3183 core-prim . eval) (cy317b core-prim . environment) (cy5302 core-prim . make-enumeration) (cy5301 core-prim . enum-set=?) (cy5300 core-prim . enum-set-universe) (cy52ff core-prim . enum-set-union) (cy52fe core-prim . enum-set-subset?) (cy52fd core-prim . enum-set-projection) (cy52fc core-prim . enum-set-member?) (cy52fb core-prim . enum-set-intersection) (cy52fa core-prim . enum-set-indexer) (cy52f9 core-prim . enum-set-difference) (cy52f8 core-prim . enum-set-constructor) (cy52f7 core-prim . enum-set-complement) (cy52f6 core-prim . enum-set->list) (cy4d19 core-prim . who-condition?) (cy4c91 core-prim . warning?) (cy4cd0 core-prim . violation?) (cy4d90 core-prim . undefined-violation?) (cy4d77 core-prim . syntax-violation?) (cy4d7b core-prim . syntax-violation-subform) (cy4d79 core-prim . syntax-violation-form) (cy31a3 core-prim . syntax-violation) (cy52f5 core-prim . simple-conditions) (cy4ca6 core-prim . serious-condition?) (cy4d30 core-prim . non-continuable-violation?) (cy4c7a core-prim . message-condition?) (cy4d15 core-prim . make-who-condition) (cy4c8f core-prim . make-warning) (cy4cce core-prim . make-violation) (cy4d8e core-prim . make-undefined-violation) (cy4d71 core-prim . make-syntax-violation) (cy4ca4 core-prim . make-serious-condition) (cy4d2e core-prim . make-non-continuable-violation) (cy4c76 core-prim . make-message-condition) (cy4d58 core-prim . make-lexical-violation) (cy4cfa core-prim . make-irritants-condition) (cy4d43 core-prim . make-implementation-restriction-violation) (cy4cb9 core-prim . make-error) (cy4ce3 core-prim . make-assertion-violation) (cy4d5a core-prim . lexical-violation?) (cy4cfe core-prim . irritants-condition?) (cy4d45 core-prim . implementation-restriction-violation?) (cy4cbb core-prim . error?) (cy4d1b core-prim . condition-who) (cy52f4 core-prim . condition-predicate) (cy4c7c core-prim . condition-message) (cy4d00 core-prim . condition-irritants) (cy52f3 core-prim . condition-accessor) (cy52f2 core-prim . condition) (cy4ce5 core-prim . assertion-violation?) (cy52f1 core-prim . condition?) (cy52f0 core-prim . utf32->string) (cy52ef core-prim . utf16->string) (cy52ee core-prim . utf8->string) (cy52ed core-prim . uint-list->bytevector) (cy52ec core-prim . u8-list->bytevector) (cy52eb core-prim . string->utf8) (cy52ea core-prim . string->utf32) (cy52e9 core-prim . string->utf16) (cy52e8 core-prim . sint-list->bytevector) (cy52e7 core-prim . native-endianness) (cy52e6 core-prim . bytevector?) (cy52e5 core-prim . bytevector=?) (cy52e4 core-prim . bytevector-uint-set!) (cy52e3 core-prim . bytevector-uint-ref) (cy52e2 core-prim . bytevector-u8-set!) (cy52e1 core-prim . bytevector-u8-ref) (cy52e0 core-prim . bytevector-u64-set!) (cy52df core-prim . bytevector-u64-ref) (cy52de core-prim . bytevector-u64-native-set!) (cy52dd core-prim . bytevector-u64-native-ref) (cy52dc core-prim . bytevector-u32-set!) (cy52db core-prim . bytevector-u32-ref) (cy52da core-prim . bytevector-u32-native-set!) (cy52d9 core-prim . bytevector-u32-native-ref) (cy52d8 core-prim . bytevector-u16-set!) (cy52d7 core-prim . bytevector-u16-ref) (cy52d6 core-prim . bytevector-u16-native-set!) (cy52d5 core-prim . bytevector-u16-native-ref) (cy52d4 core-prim . bytevector-sint-set!) (cy52d3 core-prim . bytevector-sint-ref) (cy52d2 core-prim . bytevector-s8-set!) (cy52d1 core-prim . bytevector-s8-ref) (cy52d0 core-prim . bytevector-s64-set!) (cy52cf core-prim . bytevector-s64-ref) (cy52ce core-prim . bytevector-s64-native-set!) (cy52cd core-prim . bytevector-s64-native-ref) (cy52cc core-prim . bytevector-s32-set!) (cy52cb core-prim . bytevector-s32-ref) (cy52ca core-prim . bytevector-s32-native-set!) (cy52c9 core-prim . bytevector-s32-native-ref) (cy52c8 core-prim . bytevector-s16-set!) (cy52c7 core-prim . bytevector-s16-ref) (cy52c6 core-prim . bytevector-s16-native-set!) (cy52c5 core-prim . bytevector-s16-native-ref) (cy52c4 core-prim . bytevector-length) (cy52c3 core-prim . bytevector-ieee-single-ref) (cy52c2 core-prim . bytevector-ieee-single-set!) (cy52c1 core-prim . bytevector-ieee-single-native-set!) (cy52c0 core-prim . bytevector-ieee-single-native-ref) (cy52bf core-prim . bytevector-ieee-double-set!) (cy52be core-prim . bytevector-ieee-double-ref) (cy52bd core-prim . bytevector-ieee-double-native-set!) (cy52bc core-prim . bytevector-ieee-double-native-ref) (cy52bb core-prim . bytevector-fill!) (cy52ba core-prim . bytevector-copy!) (cy52b9 core-prim . bytevector-copy) (cy52b8 core-prim . bytevector->uint-list) (cy52b7 core-prim . bytevector->u8-list) (cy52b6 core-prim . bytevector->sint-list) (cy4ece core-prim . no-nans-violation?) (cy4eb9 core-prim . no-infinities-violation?) (cy4ecc core-prim . make-no-nans-violation) (cy4eb7 core-prim . make-no-infinities-violation) (cy52b5 core-prim . real->flonum) (cy52b4 core-prim . flzero?) (cy52b3 core-prim . fltruncate) (cy52b2 core-prim . fltan) (cy52b1 core-prim . flsqrt) (cy52b0 core-prim . flsin) (cy52af core-prim . flround) (cy52ae core-prim . flpositive?) (cy52ad core-prim . flonum?) (cy52ac core-prim . flodd?) (cy52ab core-prim . flnumerator) (cy52aa core-prim . flnegative?) (cy52a9 core-prim . flnan?) (cy52a8 core-prim . flmod0) (cy52a7 core-prim . flmod) (cy52a6 core-prim . flmin) (cy52a5 core-prim . flmax) (cy52a4 core-prim . fllog) (cy52a3 core-prim . flinteger?) (cy52a2 core-prim . flinfinite?) (cy52a1 core-prim . flfloor) (cy52a0 core-prim . flfinite?) (cy529f core-prim . flexpt) (cy529e core-prim . flexp) (cy529d core-prim . fleven?) (cy529c core-prim . fldiv0-and-mod0) (cy529b core-prim . fldiv0) (cy529a core-prim . fldiv-and-mod) (cy5299 core-prim . fldiv) (cy5298 core-prim . fldenominator) (cy5297 core-prim . flcos) (cy5296 core-prim . flceiling) (cy5295 core-prim . flatan) (cy5294 core-prim . flasin) (cy5293 core-prim . flacos) (cy5292 core-prim . flabs) (cy5291 core-prim . fl>?) (cy5290 core-prim . fl>=?) (cy528f core-prim . fl=?) (cy528e core-prim . fl<?) (cy528d core-prim . fl<=?) (cy528c core-prim . fl/) (cy528b core-prim . fl-) (cy528a core-prim . fl+) (cy5289 core-prim . fl*) (cy5288 core-prim . fixnum->flonum) (cy5287 core-prim . fxzero?) (cy5286 core-prim . fxxor) (cy5285 core-prim . fxrotate-bit-field) (cy5284 core-prim . fxreverse-bit-field) (cy5283 core-prim . fxpositive?) (cy5282 core-prim . fxodd?) (cy5281 core-prim . fxnot) (cy5280 core-prim . fxnegative?) (cy527f core-prim . fxmod0) (cy527e core-prim . fxmod) (cy527d core-prim . fxmin) (cy527c core-prim . fxmax) (cy527b core-prim . fxlength) (cy527a core-prim . fxior) (cy5279 core-prim . fxif) (cy5278 core-prim . fxfirst-bit-set) (cy5277 core-prim . fxeven?) (cy5276 core-prim . fxdiv0-and-mod0) (cy5275 core-prim . fxdiv0) (cy5274 core-prim . fxdiv-and-mod) (cy5273 core-prim . fxdiv) (cy5272 core-prim . fxcopy-bit-field) (cy5271 core-prim . fxcopy-bit) (cy5270 core-prim . fxbit-set?) (cy526f core-prim . fxbit-field) (cy526e core-prim . fxbit-count) (cy526d core-prim . fxarithmetic-shift-right) (cy526c core-prim . fxarithmetic-shift-left) (cy526b core-prim . fxarithmetic-shift) (cy526a core-prim . fxand) (cy5269 core-prim . fx>?) (cy5268 core-prim . fx>=?) (cy5267 core-prim . fx=?) (cy5266 core-prim . fx<?) (cy5265 core-prim . fx<=?) (cy5264 core-prim . fx-/carry) (cy5263 core-prim . fx-) (cy5262 core-prim . fx+/carry) (cy5261 core-prim . fx+) (cy5260 core-prim . fx*/carry) (cy525f core-prim . fx*) (cy525e core-prim . greatest-fixnum) (cy525d core-prim . least-fixnum) (cy525c core-prim . fixnum-width) (cy525b core-prim . fixnum?) (cy525a core-prim . bitwise-rotate-bit-field) (cy5259 core-prim . bitwise-reverse-bit-field) (cy5258 core-prim . bitwise-length) (cy5257 core-prim . bitwise-if) (cy5256 core-prim . bitwise-first-bit-set) (cy5255 core-prim . bitwise-copy-bit-field) (cy5254 core-prim . bitwise-copy-bit) (cy5253 core-prim . bitwise-bit-set?) (cy5252 core-prim . bitwise-bit-field) (cy5251 core-prim . bitwise-bit-count) (cy5250 core-prim . bitwise-xor) (cy524f core-prim . bitwise-ior) (cy524e core-prim . bitwise-and) (cy524d core-prim . bitwise-not) (cy524c core-prim . bitwise-arithmetic-shift-right) (cy524b core-prim . bitwise-arithmetic-shift-left) (cy524a core-prim . bitwise-arithmetic-shift) (cy5249 core-prim . zero?) (cy5248 core-prim . vector?) (cy5247 core-prim . vector-set!) (cy5246 core-prim . vector-ref) (cy5245 core-prim . vector-map) (cy5244 core-prim . vector-length) (cy5243 core-prim . vector-for-each) (cy5242 core-prim . vector-fill!) (cy5241 core-prim . vector->list) (cy5240 core-prim . vector) (cy523f core-prim . values) (cy523e core-prim . truncate) (cy523d core-prim . tan) (cy523c core-prim . symbol?) (cy523b core-prim . symbol=?) (cy523a core-prim . symbol->string) (cy5239 core-prim . substring) (cy5238 core-prim . string?) (cy5237 core-prim . string>?) (cy5236 core-prim . string>=?) (cy5235 core-prim . string=?) (cy5234 core-prim . string<?) (cy5233 core-prim . string<=?) (cy5232 core-prim . string-ref) (cy5231 core-prim . string-length) (cy5230 core-prim . string-for-each) (cy522f core-prim . string-copy) (cy522e core-prim . string-append) (cy522d core-prim . string->symbol) (cy522c core-prim . string->number) (cy522b core-prim . string->list) (cy522a core-prim . string) (cy5229 core-prim . sqrt) (cy5228 core-prim . sin) (cy5227 core-prim . round) (cy5226 core-prim . reverse) (cy5225 core-prim . real?) (cy5224 core-prim . real-valued?) (cy5223 core-prim . real-part) (cy5222 core-prim . rationalize) (cy5221 core-prim . rational?) (cy5220 core-prim . rational-valued?) (cy521f core-prim . procedure?) (cy521e core-prim . positive?) (cy521d core-prim . pair?) (cy521c core-prim . odd?) (cy521b core-prim . numerator) (cy521a core-prim . number?) (cy5219 core-prim . number->string) (cy5218 core-prim . null?) (cy5217 core-prim . not) (cy5216 core-prim . negative?) (cy5215 core-prim . nan?) (cy5214 core-prim . min) (cy5213 core-prim . max) (cy5212 core-prim . map) (cy5211 core-prim . make-vector) (cy5210 core-prim . make-string) (cy520f core-prim . make-rectangular) (cy520e core-prim . make-polar) (cy520d core-prim . magnitude) (cy520c core-prim . log) (cy520b core-prim . list?) (cy520a core-prim . list-tail) (cy5209 core-prim . list-ref) (cy5208 core-prim . list->vector) (cy5207 core-prim . list->string) (cy5206 core-prim . list) (cy5205 core-prim . length) (cy5204 core-prim . lcm) (cy5203 core-prim . integer?) (cy5202 core-prim . integer-valued?) (cy5201 core-prim . integer->char) (cy5200 core-prim . infinite?) (cy51ff core-prim . inexact?) (cy51fe core-prim . inexact) (cy51fd core-prim . imag-part) (cy51fc core-prim . gcd) (cy51fb core-prim . for-each) (cy51fa core-prim . floor) (cy51f9 core-prim . finite?) (cy51f8 core-prim . expt) (cy51f7 core-prim . exp) (cy51f6 core-prim . exact?) (cy51f5 core-prim . exact-integer-sqrt) (cy51f4 core-prim . exact) (cy51f3 core-prim . even?) (cy51f2 core-prim . error) (cy51f1 core-prim . eqv?) (cy51f0 core-prim . equal?) (cy51ef core-prim . eq?) (cy51ee core-prim . dynamic-wind) (cy51ed core-prim . div0-and-mod0) (cy51ec core-prim . mod0) (cy51eb core-prim . div0) (cy51ea core-prim . div-and-mod) (cy51e9 core-prim . mod) (cy51e8 core-prim . div) (cy51e7 core-prim . denominator) (cy51e6 core-prim . cos) (cy51e5 core-prim . cons) (cy51e4 core-prim . complex?) (cy51e3 core-prim . char?) (cy51e2 core-prim . char>?) (cy51e1 core-prim . char>=?) (cy51e0 core-prim . char=?) (cy51df core-prim . char<?) (cy51de core-prim . char<=?) (cy51dd core-prim . char->integer) (cy51dc core-prim . ceiling) (cy51db core-prim . call-with-values) (cy51da core-prim . call/cc) (cy51d9 core-prim . call-with-current-continuation) (cy51d8 core-prim . cddddr) (cy51d7 core-prim . cdddar) (cy51d6 core-prim . cddadr) (cy51d5 core-prim . cddaar) (cy51d4 core-prim . cdaddr) (cy51d3 core-prim . cdadar) (cy51d2 core-prim . cdaadr) (cy51d1 core-prim . cdaaar) (cy51d0 core-prim . cadddr) (cy51cf core-prim . caddar) (cy51ce core-prim . cadadr) (cy51cd core-prim . cadaar) (cy51cc core-prim . caaddr) (cy51cb core-prim . caadar) (cy51ca core-prim . caaadr) (cy51c9 core-prim . caaaar) (cy51c8 core-prim . cdddr) (cy51c7 core-prim . cddar) (cy51c6 core-prim . cdadr) (cy51c5 core-prim . cdaar) (cy51c4 core-prim . caddr) (cy51c3 core-prim . cadar) (cy51c2 core-prim . caadr) (cy51c1 core-prim . caaar) (cy51c0 core-prim . cddr) (cy51bf core-prim . cdar) (cy51be core-prim . cadr) (cy51bd core-prim . caar) (cy51bc core-prim . cdr) (cy51bb core-prim . car) (cy51ba core-prim . boolean?) (cy51b9 core-prim . boolean=?) (cy51b8 core-prim . atan) (cy51b7 core-prim . assertion-violation) (cy319d core-prim . assertion-error) (cy51b6 core-prim . asin) (cy51b5 core-prim . apply) (cy51b4 core-prim . append) (cy51b3 core-prim . angle) (cy51b2 core-prim . acos) (cy51b1 core-prim . abs) (cy51b0 core-prim . /) (cy51af core-prim . *) (cy51ae core-prim . -) (cy51ad core-prim . +) (cy51ac core-prim . >=) (cy51ab core-prim . >) (cy51aa core-prim . =) (cy51a9 core-prim . <=) (cy51a8 core-prim . <) (cy51a7 core-prim . library) (cy51a6 $core-rtd &no-nans-rtd &no-nans-rcd) (cy51a5 $core-rtd &no-infinities-rtd &no-infinities-rcd) (cy51a4 $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd) (cy51a3 $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd) (cy51a2 $core-rtd &i/o-port-rtd &i/o-port-rcd) (cy51a1 $core-rtd &i/o-file-does-not-exist-rtd &i/o-file-does-not-exist-rcd) (cy51a0 $core-rtd &i/o-file-already-exists-rtd &i/o-file-already-exists-rcd) (cy519f $core-rtd &i/o-file-is-read-only-rtd &i/o-fie-is-read-only-rcd) (cy519e $core-rtd &i/o-file-protection-rtd &i/o-file-protection-rcd) (cy519d $core-rtd &i/o-filename-rtd &i/o-filename-rcd) (cy519c $core-rtd &i/o-invalid-position-rtd &i/o-invalid-position-rcd) (cy519b $core-rtd &i/o-write-rtd &i/o-write-rcd) (cy519a $core-rtd &i/o-read-rtd &i/o-read-rcd) (cy5199 $core-rtd &i/o-rtd &i/o-rcd) (cy5198 $core-rtd &undefined-rtd &undefined-rcd) (cy5197 $core-rtd &syntax-rtd &syntax-rcd) (cy5196 $core-rtd &lexical-rtd &lexical-rcd) (cy5195 $core-rtd &implementation-restriction-rtd &implementation-restriction-rcd) (cy5194 $core-rtd &non-continuable-rtd &non-continuable-rcd) (cy5193 $core-rtd &who-rtd &who-rcd) (cy5192 $core-rtd &irritants-rtd &irritants-rcd) (cy5191 $core-rtd &assertion-rtd &assertion-rcd) (cy5190 $core-rtd &violation-rtd &violation-rcd) (cy518f $core-rtd &error-rtd &error-rcd) (cy518e $core-rtd &serious-rtd &serious-rcd) (cy518d $core-rtd &warning-rtd &warning-rcd) (cy518c $core-rtd &message-rtd &message-rcd) (cy518b $core-rtd &condition-rtd &condition-rcd) (cy518a macro . define-condition-type) (cy5189 macro . define-enumeration) (cy5188 macro . define-record-type) (cy5187 macro . parent-rtd) (cy5186 macro . nongenerative) (cy5185 macro . opaque) (cy5184 macro . sealed) (cy5183 macro . protocol) (cy5182 macro . parent) (cy5181 macro . immutable) (cy5180 macro . mutable) (cy517f macro . fields) (cy517e macro . error-handling-mode) (cy517d macro . file-options) (cy517c macro . buffer-mode) (cy517b macro . eol-style) (cy517a macro . guard) (cy5179 macro . trace-define) (cy5178 macro . trace-lambda) (cy5177 macro . unsyntax-splicing) (cy5176 macro . unsyntax) (cy5175 macro . unquote-splicing) (cy5174 macro . unquote) (cy5173 macro . _) (cy5172 macro . else) (cy5171 macro . =>) (cy5170 macro . ...) (cy516f macro . assert) (cy516e macro . endianness) (cy516d macro . delay) (cy516c macro . time) (cy516b macro . do) (cy516a macro . cond) (cy5169 macro . let*) (cy5168 macro . let*-values) (cy5167 macro . let-values) (cy5166 macro . identifier-syntax) (cy5165 macro . with-syntax) (cy5164 macro . quasisyntax) (cy5163 macro . quasiquote) (cy5162 macro . syntax-rules) (cy5161 macro . include) (cy5160 macro . define-struct) (cy515f core-macro . record-constructor-descriptor) (cy515e core-macro . record-type-descriptor) (cy515d macro . case) (cy515c macro . parameterize) (cy515b macro . unless) (cy515a macro . when) (cy5159 core-macro . or) (cy5158 core-macro . and) (cy5157 core-macro . if) (cy5156 core-macro . let) (cy5155 core-macro . letrec*) (cy5154 core-macro . letrec) (cy5153 core-macro . type-descriptor) (cy5152 core-macro . case-lambda) (cy5151 core-macro . lambda) (cy5150 core-macro . syntax) (cy514f core-macro . syntax-case) (cy514e core-macro . quote) (cy514d core-macro . foreign-call) (cy514c letrec-syntax) (cy514b let-syntax) (cy514a set!) (cy5149 import) (cy5148 begin) (cy5147 module) (cy5146 define-syntax) (cy5145 define)) values values '#f '#f '#f '#f) (cy2cd1@cy2b1d@install-library 'cy5490 '(psyntax system $bootstrap) '() '() '() '() '((pretty-print . cy546f) (eval-core . cy546e) (set-symbol-value! . cy546d) (symbol-value . cy546c) (gensym . cy546b) (void . cy546a)) '() values values '#f '#f '#f '#f) (cy2cd1@cy2b1d@install-library 'cy5491 '(mosh) '() '() '() '() '((set-symbol-value! . cy546d) (symbol-value . cy546c) (regexp? . cy5468) (read-line . cy5467) (ungensym . cy5465) (alist->eq-hash-table . cy5464) (assoc-ref . cy5463) (print . cy5462) (format . cy5461) (host-os . cy5460) (library-path . cy2afc) (standard-library-path . cy545f) (file-newer? . cy545e) (stat-mtime . cy545d) (digit->integer . cy5459) (call-with-string-input-port . cy5458) (call-with-string-io . cy5457) (string-split . cy5456) (bytevector-for-each . cy5455) (string->regexp . cy5454) (rxmatch . cy5453) (regexp-replace-all . cy5452) (hashtable-for-each . cy5451) (set-current-directory! . cy544c) (expand-path . cy544b) (current-directory . cy544a) (p . cy5408) (get-timeofday . cy53ef) (get-command-line . cy53ee) (sys-display . cy53ed) (whereis . cy53ec) (register . cy53eb) (vm-join! . cy53ea) (vm-set-value! . cy53e9) (vm? . cy53e8) (main-vm? . cy53e7) (vm-eval . cy53e6) (vm-self . cy53e5) (vm-start! . cy53e4) (make-vm . cy53e3) (mutex-try-lock! . cy53e2) (mutex-unlock! . cy53e1) (mutex-lock! . cy53e0) (mutex? . cy53df) (make-mutex . cy53de) (condition-variable-notify-all! . cy53dd) (condition-variable-notify! . cy53dc) (condition-variable-wait! . cy53db) (make-condition-variable . cy53da) (mosh-executable-path . cy53d9) (make-file-options . cy53d8) (source-info . cy53d7) (make-compiler-instruction . cy53d6) (make-instruction . cy53d5) (set-source-info! . cy53d4) (bignum? . cy53d3) (fast-equal? . cy53d2) (fasl-read . cy53d1) (fasl-write . cy53d0) (time-usage . cy53cf) (os-constant . cy53ce) (time . cy516c) (include . cy5161)) '() values values '#f '#f '#f '#f) (cy2cd1@cy2b1d@install-library 'cy5492 '(system) '() '() '() '() '((gensym-prefix-set! . cy5466) (write-to-file . cy545c) (file->list . cy545b) (file->string . cy545a) (mosh-cache-dir . cy28e7) (call-process . cy5450) (local-tz-offset . cy544f) (microseconds . cy544e) (directory-list . cy544d) (expand-path . cy544b) (%spawn . cy5449) (%waitpid . cy5448) (simple-struct-name . cy5447) (simple-struct-set! . cy5446) (simple-struct-ref . cy5445) (make-simple-struct . cy5444) (simple-struct? . cy5443) (pointer-ref-c-int64 . cy5442) (pointer-ref-c-int32 . cy5441) (pointer-ref-c-int16 . cy5440) (pointer-ref-c-int8 . cy543f) (pointer-ref-c-uint64 . cy543e) (pointer-ref-c-uint32 . cy543d) (pointer-ref-c-uint16 . cy543c) (pointer-ref-c-uint8 . cy543b) (pointer-set-c-uint64! . cy543a) (pointer-set-c-uint32! . cy5439) (pointer-set-c-uint16! . cy5438) (pointer-set-c-uint8! . cy5437) (pointer-set-c-int64! . cy5436) (pointer-set-c-int32! . cy5435) (pointer-set-c-int16! . cy5434) (pointer-set-c-int8! . cy5433) (pointer-set-c-pointer! . cy5432) (pointer-set-c-double! . cy5431) (pointer-set-c-float! . cy5430) (pointer-set-c-long-long! . cy542f) (pointer-set-c-long! . cy542e) (pointer-set-c-int! . cy542d) (pointer-set-c-short! . cy542c) (pointer-set-c-char! . cy542b) (pointer-ref-c-pointer . cy542a) (pointer-ref-c-double . cy5429) (pointer-ref-c-float . cy5428) (pointer-ref-c-unsigned-long-long . cy5427) (pointer-ref-c-signed-long-long . cy5426) (pointer-ref-c-unsigned-long . cy5425) (pointer-ref-c-signed-long . cy5424) (pointer-ref-c-unsigned-int . cy5423) (pointer-ref-c-signed-int . cy5422) (pointer-ref-c-unsigned-short . cy5421) (pointer-ref-c-signed-short . cy5420) (pointer-ref-c-unsigned-char . cy541f) (pointer-ref-c-signed-char . cy541e) (pointer->integer . cy541d) (integer->pointer . cy541c) (pointer? . cy541b) (shared-errno . cy541a) (u8-list->c-procedure . cy5419) (%ffi-free-c-callback-trampoline . cy5418) (%ffi-make-c-callback-trampoline . cy5417) (%ffi-free . cy5416) (%ffi-malloc . cy5415) (%ffi-supported? . cy5414) (%ffi-pointer->string . cy5413) (%ffi-call->string-or-zero . cy5412) (%ffi-call->double . cy5411) (%ffi-call->void* . cy5410) (%ffi-call->void . cy540f) (%ffi-call->char . cy540e) (%ffi-call->int . cy540d) (%ffi-lookup . cy540c) (%ffi-open . cy540b) (%fork . cy540a) (%pipe . cy5409) (open-output-string . cy5407) (get-output-string . cy5406) (file-stat-ctime . cy5405) (file-stat-atime . cy5404) (file-stat-mtime . cy5403) (file-size-in-bytes . cy5402) (file-writable? . cy5401) (file-executable? . cy5400) (file-readable? . cy53ff) (file-regular? . cy53fe) (file-symbolic-link? . cy53fd) (file-directory? . cy53fc) (create-symbolic-link . cy53fb) (rename-file . cy53fa) (delete-directory . cy53f9) (create-directory . cy53f8) (create-mosh-cache-dir . cy53f7) (get-environment-variables . cy53f6) (current-exception-handler . cy53f5) (get-environment-variable . cy53f4) (join-wraps . cy53f3) (id->real-label . cy53f2) (same-marks? . cy53f1) (same-marks*? . cy53f0) (disasm . cy53cd) (make-parameter . cy28e5) (socket-port . cy53cc) (socket-shutdown . cy53cb) (socket-close . cy53ca) (socket-send . cy53c9) (socket-recv! . cy53c8) (socket-recv . cy53c7) (make-server-socket . cy53c6) (make-client-socket . cy53c5) (socket-accept . cy53c4) (socket? . cy53c3) (parameterize . cy515c)) '() values values '#f '#f '#f '#f)))
(begin (set! cy4fc8@ref (unspecified)) (set! cy4fca@x* (unspecified)) (set! cy4fcc@add-library-path! (unspecified)) (set! cy4fce@parse-and-add-library-path (unspecified)) (set! cy4fd0@for-each-with-index (unspecified)) (set! cy4fd2@rpad (unspecified)) (set! cy4fd4@condition-printer (unspecified)) (set! cy4fd6@record->field-alist (unspecified)) (set! cy4fd8@map-with-index (unspecified)) (set! cy4fda@repl (unspecified)) (set! cy4fdc@trace-printer (unspecified)) (set! cy4fde@command-line (unspecified)) (set! cy4fe0@local-library-path (unspecified)) (set! cy4fe2@load/args (unspecified)) (set! cy4fe4@load (unspecified)) (set! cy4fe6@ironscheme-build (unspecified)) (set! cy4fe8@eval-top-level (unspecified)) (set! cy4fea@compile-system-libraries (unspecified)) (set! cy4fec@compile (unspecified)) (set! cy4fee@compile->closure (unspecified)) (set! cy4ff0@pre-compile-r6rs-file (unspecified)) (set! cy4ff2@load-r6rs-top-level (unspecified)) (set! cy4ff4@load-r6rs-top-level-sexp (unspecified)) (set! cy4ff6@prefix-inc (unspecified)) (set! cy4ff8@prefix-inc! (unspecified)) (set! cy4fc8@ref (lambda (cy5033@rtd cy5034@i cy5035@x) (let ((cy5039@val ((record-accessor cy5033@rtd cy5034@i) cy5035@x))) (if (symbol? cy5039@val) (ungensym cy5039@val) cy5039@val)))) (set! cy512b@cy4fc8@ref cy4fc8@ref) (set! cy4fca@x* '()) (set! cy512c@cy4fca@x* cy4fca@x*) (set! cy4fcc@add-library-path! (lambda (cy503b@path) (cy2cc1@cy2afd@library-path (append (cy2cc1@cy2afd@library-path) (list cy503b@path))))) (set! cy512d@cy4fcc@add-library-path! cy4fcc@add-library-path!) (set! cy4fce@parse-and-add-library-path (lambda (cy503d@paths cy503e@message) (let ((cy5042@separator '#f)) (begin (set! cy5042@separator (if (string=? (host-os) '"win32") '#\; '#\:)) (let ((cy5043@t cy503d@paths)) (if cy5043@t ((lambda (cy5045@paths) (for-each (lambda (cy5047@path) (if (file-exists? cy5047@path) (cy4fcc@add-library-path! (expand-path cy5047@path)) (format (current-error-port) cy503e@message cy5047@path))) (string-split cy5045@paths cy5042@separator))) cy5043@t) (void))))))) (set! cy512e@cy4fce@parse-and-add-library-path cy4fce@parse-and-add-library-path) (set! cy4fd0@for-each-with-index (lambda (cy5049@proc cy504a@lst) (letrec ((cy504d@loop (lambda (cy504f@i cy5050@lst) (if (null? cy5050@lst) (if '#f '#f (void)) (begin (cy5049@proc cy504f@i (car cy5050@lst)) (cy504d@loop (+ cy504f@i '1) (cdr cy5050@lst))))))) (cy504d@loop '1 cy504a@lst)))) (set! cy512f@cy4fd0@for-each-with-index cy4fd0@for-each-with-index) (set! cy4fd2@rpad (lambda (cy5053@str cy5054@pad cy5055@n) (let ((cy5059@rest (- cy5055@n (string-length (format '"~a" cy5053@str))))) (let cy505f@loop ((cy505b@rest cy5059@rest) (cy505c@ret (format '"~a" cy5053@str))) (if (<= cy505b@rest '0) cy505c@ret (cy505f@loop (- cy505b@rest '1) (string-append cy505c@ret cy5054@pad))))))) (set! cy5130@cy4fd2@rpad cy4fd2@rpad) (set! cy4fd4@condition-printer (lambda (cy5061@e cy5062@port) (let ((cy5066@max-condition-len '#f)) (begin (set! cy5066@max-condition-len (apply max (map (lambda (cy5077@c) (string-length (symbol->string (record-type-name (record-rtd cy5077@c))))) (simple-conditions cy5061@e)))) (begin (display '" Condition components:\n" cy5062@port) (cy4fd0@for-each-with-index (lambda (cy5067@i cy5068@x) (let ((cy506b@rtd (record-rtd cy5068@x)) (cy506c@fields-alist (cy4fd6@record->field-alist cy5068@x))) (begin (format cy5062@port '" ~d. ~a" cy5067@i (cy4fd2@rpad (symbol->string (record-type-name cy506b@rtd)) '" " cy5066@max-condition-len)) (if (null? cy506c@fields-alist) (newline cy5062@port) (void)) (let cy5073@loop ((cy506f@first '#t) (cy5070@fields-alist cy506c@fields-alist)) (if (null? cy5070@fields-alist) '() (let ((cy5075@field (car cy5070@fields-alist))) (begin (if (not cy506f@first) (display (cy4fd2@rpad '"" '" " (+ '4 cy5066@max-condition-len)) cy5062@port) (void)) (display '"       " cy5062@port) (display (car cy5075@field) cy5062@port) (display '": " cy5062@port) (write (cdr cy5075@field) cy5062@port) (newline cy5062@port) (cy5073@loop '#f (cdr cy5070@fields-alist))))))))) (simple-conditions cy5061@e))))))) (set! cy5131@cy4fd4@condition-printer cy4fd4@condition-printer) (set! cy4fd6@record->field-alist (lambda (cy5079@r) (let ((cy507c@ref '#f)) (begin (set! cy507c@ref (lambda (cy5087@rtd cy5088@i cy5089@x) (let ((cy508d@val ((record-accessor cy5087@rtd cy5088@i) cy5089@x))) (if (symbol? cy508d@val) (ungensym cy508d@val) cy508d@val)))) (let cy5081@loop ((cy507d@ret '()) (cy507e@rtd (record-rtd cy5079@r))) (if cy507e@rtd (cy5081@loop (append cy507d@ret (cy4fd8@map-with-index (lambda (cy5083@i cy5084@field) (cons cy5084@field (cy507c@ref cy507e@rtd cy5083@i cy5079@r))) (vector->list (record-type-field-names cy507e@rtd)))) (record-type-parent cy507e@rtd)) cy507d@ret)))))) (set! cy5132@cy4fd6@record->field-alist cy4fd6@record->field-alist) (set! cy4fd8@map-with-index (lambda (cy508f@proc cy5090@lst) (let cy5099@loop ((cy5093@i '0) (cy5094@lst cy5090@lst) (cy5095@ret '())) (if (null? cy5094@lst) (reverse cy5095@ret) (cy5099@loop (+ cy5093@i '1) (cdr cy5094@lst) (cons (cy508f@proc cy5093@i (car cy5094@lst)) cy5095@ret)))))) (set! cy5133@cy4fd8@map-with-index cy4fd8@map-with-index) (set! cy4fda@repl (lambda cy509b@x (let ((cy509e@rec '#f)) (begin (set! cy509e@rec (lambda () (begin (display '"mosh> ") ((call/cc (lambda (cy50a1@cy509f) (lambda () (with-exception-handler (lambda (cy50a3@e) ((call/cc (lambda (cy50a5@cy50a0) (cy50a1@cy509f (lambda () (if '#t (begin (display '"\nUnhandled exception:\n\n" (current-error-port)) (if (condition? cy50a3@e) (cy4fd4@condition-printer cy50a3@e (current-error-port)) (format (current-error-port) '"  Non-condition object:\n     ~a\n" cy50a3@e))) (cy50a5@cy50a0 (lambda () (raise-continuable cy50a3@e)))))))))) (lambda () (let cy50ab@loop ((cy50a7@line (get-line (current-input-port))) (cy50a8@accum '"")) (let ((cy50ae@parentheses-ok? '#f) (cy50b0@eval-string-print '#f)) (begin (set! cy50ae@parentheses-ok? (lambda (cy50b5@text) (let cy50bd@loop ((cy50b7@chars (string->list cy50b5@text)) (cy50b8@p0 '0) (cy50b9@p1 '0)) (if (null? cy50b7@chars) (= '0 cy50b8@p0 cy50b9@p1) (let ((cy50bf@t (car cy50b7@chars))) (if (memv cy50bf@t '(#\()) (cy50bd@loop (cdr cy50b7@chars) (+ cy50b8@p0 '1) cy50b9@p1) (if (memv cy50bf@t '(#\))) (cy50bd@loop (cdr cy50b7@chars) (- cy50b8@p0 '1) cy50b9@p1) (if (memv cy50bf@t '(#\[)) (cy50bd@loop (cdr cy50b7@chars) cy50b8@p0 (+ cy50b9@p1 '1)) (if (memv cy50bf@t '(#\])) (cy50bd@loop (cdr cy50b7@chars) cy50b8@p0 (- cy50b9@p1 '1)) (cy50bd@loop (cdr cy50b7@chars) cy50b8@p0 cy50b9@p1)))))))))) (set! cy50b0@eval-string-print (lambda (cy50b3@text) (if (not (or (string=? '"\n" cy50b3@text) (= '0 (string-length cy50b3@text)))) (write (cy4fe8@eval-top-level (call-with-port (open-string-input-port cy50b3@text) read))) (void)))) (if (eof-object? cy50a7@line) (begin (cy50b0@eval-string-print cy50a8@accum) (exit)) (let ((cy50b1@current (string-append cy50a8@accum cy50a7@line))) (if (cy50ae@parentheses-ok? cy50b1@current) (cy50b0@eval-string-print cy50b1@current) (cy50ab@loop (get-line (current-input-port)) cy50b1@current))))))))))))) (newline) (cy509e@rec)))) (cy509e@rec))))) (set! cy5134@cy4fda@repl cy4fda@repl) (set! cy4fdc@trace-printer (cy2a07@cy28e6@make-parameter write)) (set! cy5135@cy4fdc@trace-printer cy4fdc@trace-printer) (set! cy4fde@command-line (cy2a07@cy28e6@make-parameter (get-command-line))) (set! cy5136@cy4fde@command-line cy4fde@command-line) (set! cy4fe0@local-library-path (lambda (cy50c1@filename) (cy2cc1@cy2afd@library-path))) (set! cy5137@cy4fe0@local-library-path cy4fe0@local-library-path) (set! cy4fe2@load/args (lambda (cy50c3@filename . cy50c5@args) (begin (apply cy4ff2@load-r6rs-top-level cy50c3@filename 'load cy50c5@args) (void)))) (set! cy5138@cy4fe2@load/args cy4fe2@load/args) (set! cy4fe4@load (lambda (cy50c7@filename) (begin (apply cy4ff2@load-r6rs-top-level cy50c7@filename 'load (cy4fde@command-line)) (void)))) (set! cy5139@cy4fe4@load cy4fe4@load) (set! cy4fe6@ironscheme-build (lambda () (cy4fe4@load '"ironscheme-buildscript.ss"))) (set! cy513a@cy4fe6@ironscheme-build cy4fe6@ironscheme-build) (set! cy4fe8@eval-top-level (lambda (cy50c9@x) (cy4bee@cy3184@eval cy50c9@x (cy4c05@cy31b2@interaction-environment)))) (set! cy513b@cy4fe8@eval-top-level cy4fe8@eval-top-level) (set! cy4fea@compile-system-libraries (lambda () (cy4fe8@eval-top-level '(begin (include "system-libraries.ss") (compile "system-libraries.ss"))))) (set! cy513c@cy4fea@compile-system-libraries cy4fea@compile-system-libraries) (set! cy4fec@compile (lambda (cy50cb@filename) (cy4ff2@load-r6rs-top-level cy50cb@filename 'compile))) (set! cy513d@cy4fec@compile cy4fec@compile) (set! cy4fee@compile->closure (lambda (cy50cd@filename) (cy4ff2@load-r6rs-top-level cy50cd@filename 'closure))) (set! cy513e@cy4fee@compile->closure cy4fee@compile->closure) (set! cy4ff0@pre-compile-r6rs-file (lambda (cy50cf@filename) (cy4ff2@load-r6rs-top-level cy50cf@filename 'compile))) (set! cy513f@cy4ff0@pre-compile-r6rs-file cy4ff0@pre-compile-r6rs-file) (set! cy4ff2@load-r6rs-top-level (lambda (cy50d1@filename cy50d2@how . cy50d5@args) (begin (cy2cc1@cy2afd@library-path (cy4fe0@local-library-path cy50d1@filename)) (let ((cy50d7@x* (with-input-from-file cy50d1@filename (lambda () (let cy50d9@f () (let ((cy50db@x (cy29fa@cy28cc@read-annotated))) (if (eof-object? cy50db@x) '() (cons cy50db@x (cy50d9@f))))))))) (let ((cy50dd@t cy50d2@how)) (if (memv cy50dd@t '(closure)) (cy4c04@cy31b0@pre-compile-r6rs-top-level cy50d7@x*) (if (memv cy50dd@t '(load)) (begin (cy4fde@command-line (cons cy50d1@filename (car cy50d5@args))) (cy2a08@cy28e8@mosh-cache-dir (create-mosh-cache-dir)) (if (cy2a08@cy28e8@mosh-cache-dir) (gensym-prefix-set! (cy4ff8@prefix-inc! (string-append (cy2a08@cy28e8@mosh-cache-dir) '"/prefix.txt"))) (void)) (if (symbol-value '%clean-acc) (for-each (lambda (cy50df@file) ((call/cc (lambda (cy50e3@cy50e1) (lambda () (with-exception-handler (lambda (cy50e5@c) ((call/cc (lambda (cy50e7@cy50e2) (cy50e3@cy50e1 (lambda () (if '#t '#t (cy50e7@cy50e2 (lambda () (raise-continuable cy50e5@c)))))))))) (lambda () (delete-file (string-append (cy2a08@cy28e8@mosh-cache-dir) '"/" cy50df@file))))))))) (directory-list (cy2a08@cy28e8@mosh-cache-dir))) (void)) (let ((cy50e9@compiled (cy4c03@cy31ae@compile-r6rs-top-level cy50d7@x*))) (begin (if (and (cy2a08@cy28e8@mosh-cache-dir) (not (symbol-value '%disable-acc))) (cy2cc5@cy2b05@serialize-all cy2a02@cy28dc@serialize-library cy2a5e@cy2a17@compile-core-expr) (void)) (cy50e9@compiled)))) (if (memv cy50dd@t '(compile)) (begin (cy4c03@cy31ae@compile-r6rs-top-level cy50d7@x*) (cy2cc5@cy2b05@serialize-all cy2a02@cy28dc@serialize-library cy2a5e@cy2a17@compile-core-expr)) (if '#f '#f (void)))))))))) (set! cy5140@cy4ff2@load-r6rs-top-level cy4ff2@load-r6rs-top-level) (set! cy4ff4@load-r6rs-top-level-sexp (lambda (cy50eb@import-spec cy50ec@thunk) (let ((cy50f7@cy50f0 cy2cc1@cy2afd@library-path) (cy50f8@cy50f2 cy2a08@cy28e8@mosh-cache-dir) (cy50f9@cy50f4 (cy4fe0@local-library-path '"")) (cy50fa@cy50f6 (create-mosh-cache-dir))) (let ((cy50ff@swap (lambda () (begin (let ((cy5101@t (cy50f7@cy50f0))) (begin (cy50f7@cy50f0 cy50f9@cy50f4) (set! cy50f9@cy50f4 cy5101@t))) (let ((cy5103@t (cy50f8@cy50f2))) (begin (cy50f8@cy50f2 cy50fa@cy50f6) (set! cy50fa@cy50f6 cy5103@t))))))) (dynamic-wind cy50ff@swap (lambda () (begin (if (cy2a08@cy28e8@mosh-cache-dir) (gensym-prefix-set! (cy4ff8@prefix-inc! (string-append (cy2a08@cy28e8@mosh-cache-dir) '"/prefix.txt"))) (void)) (let ((cy5109@cy5106 cy4fde@command-line) (cy510a@cy5108 '())) (let ((cy510d@swap (lambda () (let ((cy510f@t (cy5109@cy5106))) (begin (cy5109@cy5106 cy510a@cy5108) (set! cy510a@cy5108 cy510f@t)))))) (dynamic-wind cy510d@swap (lambda () ((cy4c03@cy31ae@compile-r6rs-top-level (list (cons 'import cy50eb@import-spec) (list cy50ec@thunk))))) cy510d@swap))))) cy50ff@swap))))) (set! cy5141@cy4ff4@load-r6rs-top-level-sexp cy4ff4@load-r6rs-top-level-sexp) (set! cy4ff6@prefix-inc (lambda (cy5111@prefix-string) (let ((cy5113@prefix (symbol->string cy5111@prefix-string))) (let ((cy5115@len (string-length cy5113@prefix))) (let cy511d@loop ((cy5117@i (- cy5115@len '1)) (cy5118@carry? '#t) (cy5119@accum '())) (if (< cy5117@i '0) (string->symbol (list->string (if cy5118@carry? (cons '#\a cy5119@accum) cy5119@accum))) (if cy5118@carry? (let ((cy511f@next-integer (+ '1 (char->integer (string-ref cy5113@prefix cy5117@i))))) (if (= cy511f@next-integer '123) (cy511d@loop (- cy5117@i '1) '#f (cons '#\A cy5119@accum)) (if (= cy511f@next-integer '91) (cy511d@loop (- cy5117@i '1) '#t (cons '#\a cy5119@accum)) (cy511d@loop (- cy5117@i '1) '#f (cons (integer->char cy511f@next-integer) cy5119@accum))))) (cy511d@loop (- cy5117@i '1) '#f (cons (string-ref cy5113@prefix cy5117@i) cy5119@accum))))))))) (set! cy5142@cy4ff6@prefix-inc cy4ff6@prefix-inc) (set! cy4ff8@prefix-inc! (lambda (cy5121@file) (begin (if (not (file-exists? cy5121@file)) (call-with-output-file cy5121@file (lambda (cy5123@port) (write 'd cy5123@port))) (void)) (let ((cy5125@prefix (call-with-input-file cy5121@file read))) (let ((cy5127@next-prefix (cy4ff6@prefix-inc cy5125@prefix))) (begin (call-with-port (open-file-output-port cy5121@file (make-file-options '(no-fail)) 'block (native-transcoder)) (lambda (cy5129@port) (write cy5127@next-prefix cy5129@port))) cy5125@prefix)))))) (set! cy5143@cy4ff8@prefix-inc! cy4ff8@prefix-inc!) (begin (cy2cc6@cy2b07@current-precompiled-library-loader cy2a03@cy28de@load-serialized-library) (set-symbol-value! 'load cy4fe4@load) (set-symbol-value! 'pre-compile-r6rs-file cy4ff0@pre-compile-r6rs-file) (set-symbol-value! 'eval-r6rs cy4fe8@eval-top-level) (set-symbol-value! 'int-env-syms cy4be5@cy3172@interaction-environment-symbols) (set-symbol-value! 'expanded2core cy2a5d@cy2a15@expanded->core) (set-symbol-value! 'trace-printer cy4fdc@trace-printer) (set-symbol-value! 'compile-r6rs-top-level 'compile-r6rs-top-level) (set-symbol-value! 'create-non-continuable-violation (lambda (cy4ff9@c) (condition (cy4f25@cy4d2f@make-non-continuable-violation) (cy4f1b@cy4d16@make-who-condition 'raise) (cy4edf@cy4c77@make-message-condition '"returned from non-continuable exception") (cy4f11@cy4cfb@make-irritants-condition (list cy4ff9@c))))) (cy4fce@parse-and-add-library-path (get-environment-variable '"MOSH_LOADPATH") '"** WARN in environment variable 'MOSH_LOADPATH': directory ~s not exist\n") (cy4fce@parse-and-add-library-path (symbol-value '%loadpath) '"** WARN in command-line option '--loadpath': directory ~s not exist\n") (if (mosh-executable-path) (if (file-exists? (string-append (mosh-executable-path) '"/lib")) (cy4fcc@add-library-path! (string-append (mosh-executable-path) '"/lib")) (void)) (if (file-exists? (string-append (current-directory) '"/lib")) (cy4fcc@add-library-path! (string-append (current-directory) '"/lib")) (void))) (if (file-exists? (string-append (standard-library-path) '"/lib")) (cy4fcc@add-library-path! (string-append (standard-library-path) '"/lib")) (void)) (let ((cy4ffb@prefix (lambda (cy4ffd@ext cy4ffe@ls) (append (map (lambda (cy5001@x) (string-append cy4ffd@ext cy5001@x)) cy4ffe@ls) cy4ffe@ls)))) (cy2cc2@cy2aff@library-extensions (cy4ffb@prefix '".mosh" (cy2cc2@cy2aff@library-extensions)))) (current-exception-handler (lambda (cy5003@c) (if (condition? cy5003@c) (cy4fd4@condition-printer cy5003@c (current-error-port)) (format (current-error-port) '"\n Non-condition object:\n     ~a\n" cy5003@c)))) (if ((call/cc (lambda (cy5007@cy5005) (lambda () (with-exception-handler (lambda (cy5009@c) ((call/cc (lambda (cy500b@cy5006) (cy5007@cy5005 (lambda () (if '#t '#f (cy500b@cy5006 (lambda () (raise-continuable cy5009@c)))))))))) (lambda () (symbol-value '%vm-import-spec))))))) (cy4ff4@load-r6rs-top-level-sexp (symbol-value '%vm-import-spec) (symbol-value '%vm-thunk)) (if (null? (cy4fde@command-line)) (let ((cy5015@cy500e cy4fde@command-line) (cy5016@cy5010 cy2a08@cy28e8@mosh-cache-dir) (cy5017@cy5012 '()) (cy5018@cy5014 (create-mosh-cache-dir))) (let ((cy501d@swap (lambda () (begin (let ((cy501f@t (cy5015@cy500e))) (begin (cy5015@cy500e cy5017@cy5012) (set! cy5017@cy5012 cy501f@t))) (let ((cy5021@t (cy5016@cy5010))) (begin (cy5016@cy5010 cy5018@cy5014) (set! cy5018@cy5014 cy5021@t))))))) (dynamic-wind cy501d@swap (lambda () (begin (if (cy2a08@cy28e8@mosh-cache-dir) (gensym-prefix-set! (cy4ff8@prefix-inc! (string-append (cy2a08@cy28e8@mosh-cache-dir) '"/prefix.txt"))) (void)) (cy4fda@repl))) cy501d@swap))) (begin (cy2cc1@cy2afd@library-path (cy4fe0@local-library-path (car (cy4fde@command-line)))) (set! cy4fca@x* (with-input-from-file (car (cy4fde@command-line)) (lambda () (let cy5023@f () (let ((cy5025@x (cy29fa@cy28cc@read-annotated))) (if (eof-object? cy5025@x) '() (cons cy5025@x (cy5023@f)))))))) (cy4fde@command-line (cons (car (cy4fde@command-line)) (cdr (cy4fde@command-line)))) (cy2a08@cy28e8@mosh-cache-dir (create-mosh-cache-dir)) (if (cy2a08@cy28e8@mosh-cache-dir) (gensym-prefix-set! (cy4ff8@prefix-inc! (string-append (cy2a08@cy28e8@mosh-cache-dir) '"/prefix.txt"))) (void)) (if (symbol-value '%clean-acc) (for-each (lambda (cy5027@file) ((call/cc (lambda (cy502b@cy5029) (lambda () (with-exception-handler (lambda (cy502d@c) ((call/cc (lambda (cy502f@cy502a) (cy502b@cy5029 (lambda () (if '#t '#t (cy502f@cy502a (lambda () (raise-continuable cy502d@c)))))))))) (lambda () (delete-file (string-append (cy2a08@cy28e8@mosh-cache-dir) '"/" cy5027@file))))))))) (directory-list (cy2a08@cy28e8@mosh-cache-dir))) (void)) (let ((cy5031@compiled (cy4c03@cy31ae@compile-r6rs-top-level cy4fca@x*))) (begin (if (and (cy2a08@cy28e8@mosh-cache-dir) (not (symbol-value '%disable-acc))) (cy2cc5@cy2b05@serialize-all cy2a02@cy28dc@serialize-library cy2a5e@cy2a17@compile-core-expr) (void)) (cy5031@compiled))))))))
